/*!
* @file     scannerfaulthandler.h
* @author   Agiliad
* @brief    This file contains interface, responsible for managing scanner faults. It gets scanner fault and display it on screen.
* @date     Sep, 29 2016
*
(c) Copyright <2016-2017> Analogic Corporation. All Rights Reserved
*/

#ifndef ANALOGIC_WS_COMMON_FAULTS_SCANNERFAULTHANDLER_H_
#define ANALOGIC_WS_COMMON_FAULTS_SCANNERFAULTHANDLER_H_

#ifdef WORKSTATION

#include <QTimer>
#include <utility.h>
#include <analogic/ws/common/accesslayer/scanneragentstatushandler.h>
#include <analogic/ws/common.h>
#include <analogic/ws/common/faults/ifaulthandler.h>
#include <analogic/nss/agent/scanner/ScannerAgentStatus.h>
#include <analogic/ws/common/faults/ScannerFaultData.h>
#include <analogic/ws/protocolbuffer/autogenerated/proto/Fault.pb.h>

//------------------------------------------------------------------------------
// begin namespace analogic_ws
//------------------------------------------------------------------------------
namespace analogic
{
namespace ws
{

/*!
 * \class   ScannerFaultHandler
 * \brief   This class contains variable and function related to
 *          Scanner Fault Handler.
 */
class ScannerFaultHandler: public IFaultHandler
{
    Q_OBJECT
public:
    /*!
    * @fn       ScannerFaultHandler
    * @param    QObject *parent - parent
    * @return   None
    * @brief    Constructor for class ScannerFaultHandler.
    */
    explicit ScannerFaultHandler(QObject* parent = NULL);

    /*!
    * @fn       ~ScannerFaultHandler
    * @param    None
    * @return   None
    * @brief    Destructor for class ScannerFaultHandler.
    */
    virtual ~ScannerFaultHandler();

    /*!
    * @fn       getScannerFaultDescription
    * @param    QString faultMessage
    * @return   QString scanner fault description
    * @brief    return scanner fault description.
    */
    QString  getScannerFaultDescription(QString faultMessage);

    /*!
    * @fn       getScannerFaultUserAction
    * @param    QString faultMessage
    * @return   QString useraction
    * @brief    return scanner fault user action.
    */
    QString  getScannerFaultUserAction(QString faultMessage);

    /*!
    * @fn       getScannerFaultQpidString
    * @param    int faultcode
    * @return   QString scanner fault qpid string
    * @brief    return scanner fault qpid string.
    */
    std::string  getScannerFaultQpidString(int faultcode);

public slots:

    /*!
    * @fn       onScannerFaultReceived()
    * @param    ScannerAgentStatusHandler
    * @return   None
    * @brief    slot will get call on scanner fault received.
    */
    void onScannerFaultReceived(ScannerAgentStatusHandler scannerstatus);

    /*!
    * @fn      onScannerStateChanged
    * @param   QMLEnums::ScannerState - state
    * @return  None
    * @brief   slot call on scanner state changed
    */
    void onScannerStateChanged(QMLEnums::ScannerState state);

    /*!
    * @fn      onExit
    * @param   None
    * @return  None
    * @brief   slot call on exit
    */
    void onExit();
    /*!
    * @fn       onTimeout
    * @param    None
    * @return   None
    * @brief    slot will call on timeout
    */
    void onTimeout();

signals:
    /*!
    * @fn       scannerFaultReceived()
    * @param    ScannerAgentStatusHandler
    * @return   None
    * @brief    siganl emits when scanner fault changes.
    */
    void scannerFaultReceived(QString scannerstate);

    /*!
     * @fn       updateScannerNetwork()
     * @param    None
     * @return   None
     * @brief    siganl emits when update scanner network
     */
    void updateScannerNetwork();

    /*!
     * @fn       operatorAbsentFromMat()
     * @param    None
     * @return   None
     * @brief    siganl emits when operator absent from Mat is detected
     */
    void operatorAbsentFromMat();

private:

    /*!
    * @fn       isOperatorMatStateOperatorAbsent()
    * @param    ScannerAgentStatus
    * @return   bool
    * @brief    Checks if operator mat status is changed to ABSENT
    */
    bool isOperatorMatStateOperatorAbsent(analogic::nss::ScannerAgentStatus const status);

    /*!
    * @fn       logTheCurrentStatusReceived()
    * @param    ScannerAgentStatus
    * @return   void
    * @brief    Logs the current received Scanner Status
    */
    void logTheCurrentStatusReceived(const nss::ScannerAgentStatus status );

    ScannerFaultData*                   scannerFaultData;  //!< handle to scanner fault data
    QMap <QString, ScannerFaultInfo>  m_scannerfaultinfo;  //!< map contain scanner fault data
    boost::shared_ptr<QTimer>       m_pScannerStateTimer;  //!< handle to timer
    boost::shared_ptr<analogic::nss::ScannerAgentStatus>    m_scanneragentstatus;  //!< handle to scanner agent status
};
}  // end of namespace ws
}  // end of namespace analogic


#endif  // ANALOGIC_WS_COMMON_FAULTS_SCANNERFAULTHANDLER_H_

#endif
