/*!
* @file     nssagentaccessinterface.h
* @author   Agiliad
* @brief    This file contains interface to access Nss agent library.
* @date     Sep, 29 2016
*
(c) Copyright <2016-2017> Analogic Corporation. All Rights Reserved
*/

#ifndef ANALOGIC_WS_COMMON_ACCESSLAYER_NSSAGENTACCESSINTERFACE_H_
#define ANALOGIC_WS_COMMON_ACCESSLAYER_NSSAGENTACCESSINTERFACE_H_


#include <boost/shared_ptr.hpp>
#include <QVector>
#include <QVariant>
#include <QJsonDocument>
#include <QJsonObject>
#ifdef WORKSTATION
#include <proto/Bhs.pb.h>
#include <bhs/common/BhsInterface.h>
#include <bhs/common/ExternalBhsInterface.h>
#include <bhs/common/ExternalBhsBagInterface.h>
#include <bhs/common/InternalBhsBagInterface.h>
#include <bhs/common/BhsInterface.h>
#include <bhs/Scarabee/ScarabeeBhsImpl.h>
#include <bhs/WorkstationInterface/BhsWorkstationInterfaceServerImpl.h>
#include<analogic/ws/common/nssevent/nsseventdata.h>
#endif
#ifdef RERUN
#include <./src/analogic/ws/protocolbuffer/autogenerated/proto/Bhs.pb.h>
#include <bhs/WorkstationInterface/BhsWorkstationInterfaceServerImpl.h>
#include <../bhs/src/bhs/Scarabee/ScarabeeBhsImpl.h>
#include<analogic/ws/common/nssevent/nsseventdata.h>
#endif
#include <analogic/ws/common.h>
#include <analogic/ws/common/accesslayer/agentlistener.h>
#include <analogic/ws/common/accesslayer/scanneragentstatushandler.h>



#include <analogic/nss/log/NssLog.h>
#include <analogic/nss/util/Version.h>
#include <analogic/nss/common/NssBag.h>

#include <analogic/nss/agent/osr/OsrAgent.h>
#include <analogic/nss/agent/search/SearchAgent.h>
#include <analogic/nss/log/StdoutNssLoggingSink.h>
#include <analogic/nss/agent/scanner/ScannerAgentStatus.h>
#include <analogic/nss/agent/connection/ConnectionAgent.h>
#include <analogic/nss/agent/osr/OsrAgentStaticProperties.h>
#include <analogic/nss/agent/authentication/AuthMethodType.h>
#include <analogic/nss/agent/scanner/ScannerOperationAgent.h>
#include <analogic/nss/agent/registration/DiscoveredScanner.h>
#include <analogic/nss/agent/registration/PublicUserInfo.h>
#include <analogic/nss/agent/search/SearchAgentStaticProperties.h>
#include <analogic/nss/agent/authentication/AuthenticationAgent.h>
#include <analogic/nss/agent/authentication/AuthenticationResult.h>
#include <analogic/nss/agent/authentication/ChangeAuthMethodResult.h>
#include <analogic/nss/agent/scanner/ScannerAgentStaticProperties.h>
#include <analogic/nss/agent/registration/AgentRegistrationResult.h>
#include <analogic/nss/agent/scanner/ScannerOperationAgentListener.h>
#include <analogic/ws/common/utility/wsloggingsink.h>
#include <analogic/ws/common/archive/archiveagentlistenerinterface.h>
#include <analogic/nss/agent/recall/RecallBag.h>
#include <analogic/nss/agent/recall/RecallQuery.h>
#include <analogic/nss/agent/recall/RecallClient.h>
#include <analogic/nss/agent/recall/RecallBagListEntry.h>
#include <analogic/ws/search/bhsbaglistenerinterface.h>
#include <analogic/ws/supervisor/supervisoragentlistenerinterface.h>
#include <analogic/nss/agent/supervisor/SupervisorAgentStaticProperties.h>
#include <mutex>
#include <string>
#include <thread>
#include <condition_variable>

//------------------------------------------------------------------------------
// begin namespace analogic_ws
//------------------------------------------------------------------------------
namespace analogic
{
namespace ws
{

/*!
 * \class   NSSAgentAccessInterface
 * \brief   This class contains variable and function related to
 *           access Nss agent library.
 */
class NSSAgentAccessInterface :public QObject,
    public analogic::nss::ScannerOperationAgentListener
{
  Q_OBJECT
public:
  /*!
    * @fn       getInstance
    * @param    None
    * @return   NSSAgentAccessInterface* pointer to instance of
    *           NSSAgentAccessInterface
    * @brief    Creates and returns unique insance of NSSAgentAccessInterface.
    */
  static NSSAgentAccessInterface* getInstance();

  /*!
    * @fn       destroyInstance
    * @param    None
    * @return   None
    * @brief    Destroys NSSAgentAccessInterface.
    */
  static void destroyInstance();

  /*!
    * @fn       ~NSSAgentAccessInterface
    * @param    None
    * @return   None
    * @brief    Destructor responsible for deinitialization of members, memory and resources.
    */
  ~NSSAgentAccessInterface();


  /*!
    * @fn       getBHSBagListnerInterface
    * @param    void
    * @return   analogic::ancp00::BhsBagInterface
    * @brief    get BHS bag Interfa
    */
  analogic::ws::BhsBagListenerInterface* getBHSBagListnerInterface();

  /*!
     * @fn getBHSBagInterface
     * @param void
     * @return analogic::ancp00::BhsBagInterface*
     * @brief get BHS interface directly
     */
  analogic::ancp00::ExternalBhsBagInterface *getBHSBagInterface();


  /*!
    * @fn       destroyConnection
    * @param    void
    * @return   void
    * @brief    destroy connection agent and disconnects to nss.
    */
  void destroyConnection();

  /*!
    * @fn       destroySCannerAgent
    * @param    void
    * @return   void
    * @brief    destroy scanner agent.
    */
  void destroyScannerAgent();

  /*!
    * @fn       destroyAuthenticationAgent
    * @param    void
    * @return   void
    * @brief    destroy authentication agent.
    */
  void destroyAuthenticationAgent();

  /*!
    * @fn       destroyWSAgent
    * @param    void
    * @return   void
    * @brief    destroy WS agent.
    */
  void destroyWSAgent();

  /*!
    * @fn       destroyAgentListener
    * @param    void
    * @return   void
    * @brief    destroy AgentListener.
    */
  void destroyAgentListener();

  /*!
    * @fn       createConnection
    * @param    const std::string address
    * @return   int  (S_OK/E_POINTER) connection success/failure.
    * @brief    Creates connection agent and connects to nss.
    */
  virtual int createConnection(const std::string& nss_address);

  /*!
    * @fn       createAuthenticationAgent
    * @param    None
    * @return   int  (S_OK/E_POINTER) Agent creation success/failure.
    * @brief    Creates Authentication agent to authenticate user on the connection.
    */
  virtual int createAuthenticationAgent();

  /*!
    * @fn       authenticate
    * @param    const std::string& - username
    * @param    const std::string& - password
    * @return   analogic::nss::AuthenticationResult - result
    * @brief    Authenticate user on the connection.
    */
  virtual analogic::nss::AuthenticationResult authenticate(const std::string& username,
                                                           const std::map<analogic::nss::AuthMethodType, std::string>& auth_methods);

  /*!
    * @fn       mapNssAuthenticationResultToWS
    * @param    analogic::nss::AuthenticationResult authResult
    * @return   QMLEnums::WSAuthenticationResult
    * @brief    returns QMLEnums::WSAuthenticationResult mapped to analogic::nss::AuthenticationResult.
    */
  QMLEnums::WSAuthenticationResult mapNssAuthenticationResultToWS(analogic::nss::AuthenticationResult authResult);

  /*!
    * @fn       mapNssExpiredAuthMethodToWs
    * @param    analogic::nss::AuthMethodType authMethod
    * @return   QMLEnums::AuthMethodType
    * @brief    returns QMLEnums::AuthMethodType mapped to analogic::nss::AuthMethodType.
    */
  QMLEnums::AuthMethodType mapNssExpiredAuthMethodToWs(analogic::nss::AuthMethodType authMethod);

  /*!
    * @fn       changePassword
    * @param    const std::string& - username
    * @param    const std::string& - oldAuthMethodDetail
    * @param    const std::string& - newAuthMethodDetail
    * @param    QMLEnums::AuthMethodType - authMethodType
    * @return   QMLEnums::WSBasicCommandResult - result
    * @brief    Changes password of the user to new password.
    */
  virtual QMLEnums::WSBasicCommandResult changePassword(const std::string& username,
                                                        const std::string& oldAuthMethodDetail, const std::string& newAuthMethodDetail, QMLEnums::AuthMethodType authMethodType);

  /*!
    * @fn       setWSStatus
    * @param    const std::string&  status
    * @return   None
    * @brief    Sets WS state.
    */
  virtual  void setWSStatus(const std::string&  status);

  /*!
    * @fn       createWSAgent
    * @param    analogic::nss::OsrAgentStaticProperties static_properties
    * @return   Agent creation status (S_OK/E_POINTER - success/failure).
    * @brief    Creates Osr agent.
    */
  int createWSAgent( analogic::nss::OsrAgentStaticProperties
                     static_properties);

  /*!
    * @fn       createWSAgent
    * @param    analogic::nss::SearchAgentStaticProperties static_properties
    * @return   Agent creation status (S_OK/E_POINTER - success/failure).
    * @brief    Creates Search agent.
    */
  int createWSAgent( analogic::nss::SearchAgentStaticProperties
                     static_properties);

  /*!
    * @fn       createWSAgent
    * @param    analogic::nss::SupervisorAgentStaticProperties static_properties
    * @return   Agent creation status (S_OK/E_POINTER - success/failure).
    * @brief    Creates supervisor agent.
    */
  int createWSAgent( analogic::nss::SupervisorAgentStaticProperties
                     static_properties);

  /*!
    * @fn       setCredentialsOfWSAgent
    * @param    None
    * @return   None
    * @brief    set Credentials of Osr/Search agent.
    */
  void setCredentialsOfWSAgent();

  /*!
    * @fn       CreateScannerOperationAgent
    * @param    const std::string&  scannername
    * @return   Agent creation status (S_OK/E_POINTER - success/failure).
    * @brief    Creates Osr Scanner Operation agent.
    */
  virtual int CreateScannerOperationAgent(const std::string&);

  /*!
    * @fn       getScannerStatus
    * @param    None
    * @return   analogic::nss::ScannerAgentStatus* - scannerAgentStatus
    * @brief    Returns the current status information received from the scanner.
    */
  virtual analogic::nss::ScannerAgentStatus* getScannerStatus();

  /*!
    * @fn       setScannerState
    * @param    QMLEnums::ScannerState - state to be set
    * @return   int - State changed (S_OK/E_FAIL - success/failure).
    * @brief    Request to change the scanner state to Scanning or Standby depending upon argument.
    */
  virtual int setScannerState(QMLEnums::ScannerState state);

  /*!
    * @fn       StatusChanged
    * @param    analogic::nss::ScannerOperationAgent* agent
    * @return   None
    * @brief    Method from analogic::nss::ScannerOperationAgentListener.
    */
  virtual void StatusChanged(analogic::nss::ScannerOperationAgent* agent);

  /*!
    * @fn       createOsrAgentListener
    * @param    None
    * @return   None
    * @brief    creates analogic::nss::OsrAgentListener.
    */
  void createOsrAgentListener();

  /*!
    * @fn       createSearchAgentListener
    * @param    None
    * @return   None
    * @brief    creates analogic::nss::SearchAgentListener.
    */
  void createSearchAgentListener();

  /*!
    * @fn       createSupervisorAgentListener
    * @param    None
    * @return   None
    * @brief    creates analogic::nss::SupervisorAgentListener.
    */
  void createSupervisorAgentListener();

  /*!
    * @fn       setOsrReadyState
    * @param    bool readystate
    * @return   OSR state change (S_OK/E_FAIL - success/failure).
    * @brief    Sets Osr state.
    */
  virtual int setOsrReadyState(bool readystate);

  /*!
    * @fn       getOsrReadyState
    * @param    none
    * @return   bool readystate
    * @brief    Returns the last OSR ready state we've set.
    */
  virtual bool getOsrReadyState();

  /*!
    * @fn       getAgentListener
    * @param    AgentListener*
    * @return   None
    * @brief    gets OSRAgentListenerInterface
    */
  AgentListener* getAgentListener();

  /*!
    * @fn       createMockConnection
    * @param    analogic::nss::ConnectionAgent*
    * @param    const std::string address
    * @return   int  (S_OK/E_POINTER) connection success/failure.
    * @brief    Creates Mock connection agent and connects to nss.
    * @note     This function is created to handle mocking required in testsuite_nssagentaccessinterface
    */
  int createMockConnection( analogic::nss::ConnectionAgent* , const std::string& nss_address);

  /*!
    * @fn       getNSSUserList
    * @return   QStringList
    * @brief    Gets list of users from nss services.
    */
  QStringList getNSSUserList();

  /*!
    * @fn       getNSSAgentList
    * @return   QStringList
    * @brief    Gets list of nss agents from nss services.
    */
  QStringList getNSSAgentList();

#ifdef WORKSTATION
  /*!
    * @fn       fetchRemoteArchiveList
    * @param    QVariant searchFields
    * @return   None
    * @brief    fetches RemoteArchive list
    */
  void fetchRemoteArchiveList(QVariant searchFields);

  /*!
    * @fn       isUserLoggedIn
    * @param    None
    * @return   bool
    * @brief    gets if user is logged in or not
    */
  bool isUserLoggedIn();

  /*!
    * @fn       getExpiredAuthMethod
    * @param    None
    * @return   QMLEnums::AuthMethodType
    * @brief    get Expired Auth Method Enum.
    */
  QMLEnums::AuthMethodType getExpiredAuthMethod() const;

  /*!
    * @fn       getPasswordExpirationDays
    * @param    None
    * @return   int
    * @brief    returns number of days remaning for password to expire.
    */
  int getPasswordExpirationDays() const;

  /*!
    * @fn       SetMaintenanceMode
    * @param    bool
    * @return   bool
    * @brief    enable/disable scanner maintenance mode.
    */
  bool SetMaintenanceMode(bool enabled);

  /*!
    * @fn       reportEventToNssAgent
    * @param    NssEventInfo nssEventInfo
    * @return   bool
    * @brief    Report Event to NSS VM.
    */
  bool reportEventToNssAgent(NssEventInfo nssEventInfo);
#endif
signals:
  /*!
    * @fn       requestBagDecision
    * @param    analogic::nss::NssBag bag
    * @param    QMLEnums::ArchiveFilterSrchLoc loc
    * @param    string - data
    * @param    QMLEnums::BagsListAndBagDataCommands mode
    * @return   None
    * @brief    notifies workstation about the arrival of bag.
    */
  void requestBagDecision(analogic::nss::NssBag* bag,
                          QMLEnums::ArchiveFilterSrchLoc loc,
                          std::string data,
                          QMLEnums::BagsListAndBagDataCommands mode);

  /*!
    * @fn       scannerFaultReceived()
    * @param    ScannerAgentStatusHandler
    * @return   None
    * @brief    siganl emits when scanner fault changes.
    */
  void scannerFaultReceived(ScannerAgentStatusHandler scannerstatus);

  /*!
    * @fn       deAuthenticate
    * @param    None
    * @return   None
    * @brief    notifies about deAuthentication.
    */
  void deAuthenticate();

  /*!
    * @fn       disconnect
    * @param    None
    * @return   None
    * @brief    notifies about disconnect.
    */
  void Disconnect();
  /*!
    * @fn       exit
    * @param    None
    * @return   None
    * @brief    notifies about exit.
    */
  void exit();

  /*!
    * @fn       onBagListUpdated
    * @param    QMLEnums::ArchiveFilterSrchLoc
    * @param    QMLEnums::BagsListAndBagDataCommands command
    * @param    QVariant
    * @return   None
    * @brief    notifies nssHandler when bagList updated.
    */
  void onBagListUpdated(QMLEnums::ArchiveFilterSrchLoc srchLoc,
                        QMLEnums::BagsListAndBagDataCommands command, QVariant results);

  /*!
    * @fn       notifyToChangeOrNotScreen
    * @param    bool toBeChanged
    * @param    QString errorMsg
    * @param    int hr
    * @return   None
    * @brief    notifies to change screen or not.
    */
  void notifyToChangeOrNotScreen(bool toBeChanged, QString errorMsg, int hr);


  /*!
     * @fn      displayMsg
     * @param   int - errorcode
     * @param   QString - status
     * @param   int - model
     * @return  void
     * @brief   signal for display msg
     */
  void displayMsg(int hr, QString status, int model);

  /*!
    * @fn       requestBagPickupsig
    * @param    std::string id_assigning_authority
    * @param    const std::string primary bag  ID
    * @param    const std::string rfid
    * @param    const QString pickup_type
    * @param    QMLEnums::BhsDiverterDecision
    * @param    const std::string diverter decision string
    * @return   None
    * @brief    Signal to notify back is ready for pick up.
    */
  void requestBagPickupsig(const std::string& id_assigning_authority, const std::string &primary_bag_id, const std::string &rfid, const std::string& pickup_type, QMLEnums::BhsDiverterDecision
                           diverter_decision_code, const std::string &diverter_decision_string);

  /*!
    * @fn       notifyBagIsPickedUpsig
    * @param    analogic::nss::BhsDiverterDecision
    * @return   None
    * @brief    Signal To Notify Bag Is Picked Up.
    */
  void notifyBagIsPickedUpsig(analogic::nss::BasicCommandResult commandResult);

  /*!
    * @fn       recallBagDownloadFailed
    * @param    std::string nssBagId
    * @return   None
    * @brief    Signal To Notify Bag Download has failed.
    */
  void recallBagDownloadFailed(std::string nssBagId);

public slots:    

  /*!
    * @fn       onBagFinishUpdates
    * @param    analogic::nss::NssBag bag
    * @return   None
    * @brief    notifies nss Bag updatation is finished.
    */
  void onBagFinishUpdates(analogic::nss::NssBag *bag);

  /*!
    * @fn       onDeAuthenticate
    * @param    None
    * @return   None
    * @brief    Deauthenticate user on the connection.
    */
  void onDeAuthenticate();

  /*!
    * @fn       onDisconnect
    * @param    None
    * @return   None
    * @brief    disconnect workstation on the exit of application.
    */
  void onDisconnect();

  /*!
    * @fn       onExit
    * @param    None
    * @return   None
    * @brief    notifies about exit.
    */
  virtual void onExit();

  /*!
    * @fn       searchListUpdated
    * @param    None
    * @return   None
    * @brief    notifies nssHandler when searchList updated.
    */
  void searchListUpdated();

  /*!
    * @fn       getBagDataFromServer
    * @param    QMLEnums::ArchiveFilterSrchLoc
    * @param    std::string nss_bag_id
    * @param    QMLEnums::BagsListAndBagDataCommands mode
    * @return   None
    * @brief    requests bag from server through agent and created a BagData object.
    */
  void getBagDataFromServer(QMLEnums::ArchiveFilterSrchLoc srchLoc,
                            std::string nss_bag_id,QMLEnums::BagsListAndBagDataCommands mode);

  /*!
    * @fn       onSendBagRspToBHS();
    * @param    const std::string& bhs_bag_id
    * @param    BagStatusUpdate decision
    * @return   void
    * @brief    call on send Bag Rsp to BHS
    */
  void onSendBagRspToBHS(const std::string& bhs_bag_id, analogic::ancp00::BagStatusUpdate::BAG_DISPOSITION decision);

  /*!
    * @fn       onSetObviousThreatFlagtoBHS
    * @param    const std::string& bhs_bag_id
    * @param    bool flag
    * @return   void
    * @brief    call on send obvious threat decision to BHS
    */
  void onSetObviousThreatFlagtoBHS(const std::string& bhs_bag_id, bool flag);

  /*!
    * @fn       onEventReceived
    * @param    analogic::nss::NssEvent event_code
    * @param    const std::vector<std::string>&
    * @return   None
    * @brief    Event received from nss
    */
  void onEventReceived(analogic::nss::NssEvent event_code, const std::vector<std::string>& data);

  /*!
    * @fn       onRequestBagPickup
    * @param    std::string& id_assigning_authority
    * @param    const std::string primary bag  ID
    * @param    const std::string rfid
    * @param    const QString pickup_type
    * @param    analogic::nss::BhsDiverterDecision
    * @param    const std::string diverter decision string
    * @return   None
    * @brief    Slot called when bag is ready for picked up.
    */
  void onRequestBagPickup(const std::string& id_assigning_authority ,const std::string &primary_bag_id, const std::string &rfid,
                          const std::string& pickup_type, analogic::nss::BhsDiverterDecision diverter_decision_code, const std::string &diverter_decision_string);

  /*!
    * @fn       onNotifyBagIsPickedUp
    * @param    QMLEnums::BhsDiverterDecision
    * @return   None
    * @brief    slot called when bhs diverter decision is send.
    */
  void onNotifyBagIsPickedUp(QMLEnums::WSBasicCommandResult diverter_decision_code);

protected:
  /*!
    * @fn       NSSAgentAccessInterface();
    * @param    QObject* - parent
    * @return   None
    * @brief    Constructor responsible for initialization of class members, memory and resources.
    */
  explicit NSSAgentAccessInterface(QObject *parent = 0);

  bool                                    m_lastOsrReadyStateSent;    //!< Last OSR state set
  QString                                 m_nssaddress;               //!< Address of nss server
  uint64_t                                m_last_status_event_time_;  //!< stores last event time
  AgentListener*                          m_agentListener;            //!< handle to either OsrAgentListener or SearchAgentListener
  ArchiveAgentListenerInterface*          m_archiveAgentListener;     //!< handle to ArchiveAgentListener
  static NSSAgentAccessInterface*         m_nal;                      //!< handle to Nss access instance
  analogic::nss::OsrAgent*                m_osr_agent;                //!< handle to osr agent created
  analogic::nss::SearchAgent*             m_search_agent;             //!< handle to search agent created
  analogic::nss::ConnectionAgent*         m_connection_agent;         //!< handle to connection agent created
  analogic::nss::AuthenticationAgent*     m_auth_agent;               //!< handle to authentication agent created
  analogic::nss::AuthenticationResult     m_auth_result;              //!< handle to authentication result
  analogic::nss::ChangeAuthMethodResult   m_change_auth_method_result;//!< handle to change auth method result
  analogic::nss::ScannerOperationAgent*   m_scannerAgent;             //!< handle to scanner operation agent
  analogic::nss::AgentRegistrationResult  m_registration_result;      //!< handle to agent registration result
  bool                                    m_NSSLiveControllerconnected; //!<  NSS Live controller connected
  NssEventData*                           m_nssEventData;
  analogic::nss::SupervisorAgent*         m_supervisor_agent;             //!< handle to supervisor agent created

private:


  /*!
    * @fn       mapNssAuthenticationResultToWS
    * @param    analogic::nss::ChangeAuthMethodResult::Type authResult
    * @return   QMLEnums::WSBasicCommandResult
    * @brief    returns QMLEnums::WSAuthenticationResult mapped to analogic::nss::ChangeAuthMethodResult::Type.
    */
  QMLEnums::WSBasicCommandResult mapNssBasicCommandResultToWS(analogic::nss::ChangeAuthMethodResult::Type result);

  /*!
    * @fn       mapWsBasicCommandResultToNSS
    * @param    QMLEnums::WSBasicCommandResult
    * @return   analogic::nss::BasicCommandResult
    * @brief    returns analogic::nss::BasicCommandResult mapped to QMLEnums::WSBasicCommandResult.
    */
  analogic::nss::BasicCommandResult mapWsBasicCommandResultToNSS(QMLEnums::WSBasicCommandResult result);

  /*!
    * @fn       mapBhsDivertedDecisionToWS
    * @param    analogic::nss::BhsDiverterDecision diverterDecision
    * @return   QMLEnums::BhsDiverterDecision
    * @brief    returns QMLEnums::BhsDiverterDecision mapped to analogic::nss::BhsDiverterDecision.
    */
  QMLEnums::BhsDiverterDecision mapBhsDivertedDecisionToWS(analogic::nss::BhsDiverterDecision diverterDecision);

  // TODO:
  analogic::ws::BhsBagListenerInterface*      m_BHSBagListnerInterface;       //!< BHS Bag Listner interface
  analogic::ancp00::ExternalBhsBagInterface*  m_BHSBagInterface;              //!< BHS interface
  analogic::ancp00::ScarabeeBhsImpl*          m_scarabeeBHSInterface;         //!< Scarabee BHS interface
  analogic::ancp00::ScarabeeConfig*           m_scarabeeConfig;               //!< Scarabee BHS configuration
#ifdef WORKSTATION
  analogic::ancp00::BhsWorkstationInterfaceConfig*     m_bhsWorkstationInterfaceConfig;  //!< BHS Workstation interface configuration
  analogic::ancp00::BhsWorkstationInterfaceServerImpl* m_bhsWorkstationInterface;        //!< BHS Workstation interface
#endif
#ifdef RERUN
  analogic::ancp00::BhsWorkstationInterfaceConfig*     m_bhsWorkstationInterfaceConfig;  //!< BHS Workstation interface configuration
  analogic::ancp00::BhsWorkstationInterfaceServerImpl* m_bhsWorkstationInterface;        //!< BHS Workstation interface
#endif
  analogic::ws::wsLoggingSink                 *m_logsink;
  QMLEnums::WSType                            m_wsType;                       //!< Workstation type
  std::string                                 m_bhsType;                      //!< Baggage Handling System type
  std::string                                 m_bhsBinType;                   //!< Baggage Handling System bin type
  QMLEnums::AuthMethodType                    m_expiredAuthMethod;            //!< Current Expired Auth Method
  int                                         m_passwordExpirationDays;       //!< Number of days remaning for password to expire.
};
}  // end of namespace ws
}  // end of namespace analogic
#endif  // ANALOGIC_WS_COMMON_ACCESSLAYER_NSSAGENTACCESSINTERFACE_H_
