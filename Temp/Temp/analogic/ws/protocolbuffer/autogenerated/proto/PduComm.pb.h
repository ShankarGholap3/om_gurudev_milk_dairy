// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/PduComm.proto

#ifndef PROTOBUF_proto_2fPduComm_2eproto__INCLUDED
#define PROTOBUF_proto_2fPduComm_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace analogic {
namespace ancp00 {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_proto_2fPduComm_2eproto();
void protobuf_AssignDesc_proto_2fPduComm_2eproto();
void protobuf_ShutdownFile_proto_2fPduComm_2eproto();

class PduData;

// ===================================================================

class PduData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:analogic.ancp00.PduData) */ {
 public:
  PduData();
  virtual ~PduData();

  PduData(const PduData& from);

  inline PduData& operator=(const PduData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PduData& default_instance();

  void Swap(PduData* other);

  // implements Message ----------------------------------------------

  inline PduData* New() const { return New(NULL); }

  PduData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PduData& from);
  void MergeFrom(const PduData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PduData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float frequency = 1;
  void clear_frequency();
  static const int kFrequencyFieldNumber = 1;
  float frequency() const;
  void set_frequency(float value);

  // optional float phase_voltage_v1 = 2;
  void clear_phase_voltage_v1();
  static const int kPhaseVoltageV1FieldNumber = 2;
  float phase_voltage_v1() const;
  void set_phase_voltage_v1(float value);

  // optional float phase_voltage_v2 = 3;
  void clear_phase_voltage_v2();
  static const int kPhaseVoltageV2FieldNumber = 3;
  float phase_voltage_v2() const;
  void set_phase_voltage_v2(float value);

  // optional float phase_voltage_v3 = 4;
  void clear_phase_voltage_v3();
  static const int kPhaseVoltageV3FieldNumber = 4;
  float phase_voltage_v3() const;
  void set_phase_voltage_v3(float value);

  // optional float line_voltage_v12 = 5;
  void clear_line_voltage_v12();
  static const int kLineVoltageV12FieldNumber = 5;
  float line_voltage_v12() const;
  void set_line_voltage_v12(float value);

  // optional float line_voltage_v23 = 6;
  void clear_line_voltage_v23();
  static const int kLineVoltageV23FieldNumber = 6;
  float line_voltage_v23() const;
  void set_line_voltage_v23(float value);

  // optional float line_voltage_v31 = 7;
  void clear_line_voltage_v31();
  static const int kLineVoltageV31FieldNumber = 7;
  float line_voltage_v31() const;
  void set_line_voltage_v31(float value);

  // optional float phase_line_current_i1 = 8;
  void clear_phase_line_current_i1();
  static const int kPhaseLineCurrentI1FieldNumber = 8;
  float phase_line_current_i1() const;
  void set_phase_line_current_i1(float value);

  // optional float phase_line_current_i2 = 9;
  void clear_phase_line_current_i2();
  static const int kPhaseLineCurrentI2FieldNumber = 9;
  float phase_line_current_i2() const;
  void set_phase_line_current_i2(float value);

  // optional float phase_line_current_i3 = 10;
  void clear_phase_line_current_i3();
  static const int kPhaseLineCurrentI3FieldNumber = 10;
  float phase_line_current_i3() const;
  void set_phase_line_current_i3(float value);

  // optional float neutral_line_current_in = 11;
  void clear_neutral_line_current_in();
  static const int kNeutralLineCurrentInFieldNumber = 11;
  float neutral_line_current_in() const;
  void set_neutral_line_current_in(float value);

  // optional float phase_power_pa = 12;
  void clear_phase_power_pa();
  static const int kPhasePowerPaFieldNumber = 12;
  float phase_power_pa() const;
  void set_phase_power_pa(float value);

  // optional float phase_power_pb = 13;
  void clear_phase_power_pb();
  static const int kPhasePowerPbFieldNumber = 13;
  float phase_power_pb() const;
  void set_phase_power_pb(float value);

  // optional float phase_power_pc = 14;
  void clear_phase_power_pc();
  static const int kPhasePowerPcFieldNumber = 14;
  float phase_power_pc() const;
  void set_phase_power_pc(float value);

  // optional float system_power_psum = 15;
  void clear_system_power_psum();
  static const int kSystemPowerPsumFieldNumber = 15;
  float system_power_psum() const;
  void set_system_power_psum(float value);

  // optional float phase_reative_power_qa = 16;
  void clear_phase_reative_power_qa();
  static const int kPhaseReativePowerQaFieldNumber = 16;
  float phase_reative_power_qa() const;
  void set_phase_reative_power_qa(float value);

  // optional float phase_reative_power_qb = 17;
  void clear_phase_reative_power_qb();
  static const int kPhaseReativePowerQbFieldNumber = 17;
  float phase_reative_power_qb() const;
  void set_phase_reative_power_qb(float value);

  // optional float phase_reative_power_qc = 18;
  void clear_phase_reative_power_qc();
  static const int kPhaseReativePowerQcFieldNumber = 18;
  float phase_reative_power_qc() const;
  void set_phase_reative_power_qc(float value);

  // optional float system_reactive_power = 19;
  void clear_system_reactive_power();
  static const int kSystemReactivePowerFieldNumber = 19;
  float system_reactive_power() const;
  void set_system_reactive_power(float value);

  // optional float system_apparent_ssum = 20;
  void clear_system_apparent_ssum();
  static const int kSystemApparentSsumFieldNumber = 20;
  float system_apparent_ssum() const;
  void set_system_apparent_ssum(float value);

  // optional float phase_power_factor_pfa = 21;
  void clear_phase_power_factor_pfa();
  static const int kPhasePowerFactorPfaFieldNumber = 21;
  float phase_power_factor_pfa() const;
  void set_phase_power_factor_pfa(float value);

  // optional float phase_power_factor_pfb = 22;
  void clear_phase_power_factor_pfb();
  static const int kPhasePowerFactorPfbFieldNumber = 22;
  float phase_power_factor_pfb() const;
  void set_phase_power_factor_pfb(float value);

  // optional float phase_power_factor_pfc = 23;
  void clear_phase_power_factor_pfc();
  static const int kPhasePowerFactorPfcFieldNumber = 23;
  float phase_power_factor_pfc() const;
  void set_phase_power_factor_pfc(float value);

  // optional float system_power_pfsum = 24;
  void clear_system_power_pfsum();
  static const int kSystemPowerPfsumFieldNumber = 24;
  float system_power_pfsum() const;
  void set_system_power_pfsum(float value);

  // optional float voltage_unbalance_factor = 25;
  void clear_voltage_unbalance_factor();
  static const int kVoltageUnbalanceFactorFieldNumber = 25;
  float voltage_unbalance_factor() const;
  void set_voltage_unbalance_factor(float value);

  // optional float current_unbalance_factor = 26;
  void clear_current_unbalance_factor();
  static const int kCurrentUnbalanceFactorFieldNumber = 26;
  float current_unbalance_factor() const;
  void set_current_unbalance_factor(float value);

  // optional float reserved_1 = 27;
  void clear_reserved_1();
  static const int kReserved1FieldNumber = 27;
  float reserved_1() const;
  void set_reserved_1(float value);

  // optional float phase_apparent_power_sa = 28;
  void clear_phase_apparent_power_sa();
  static const int kPhaseApparentPowerSaFieldNumber = 28;
  float phase_apparent_power_sa() const;
  void set_phase_apparent_power_sa(float value);

  // optional float phase_apparent_power_sb = 29;
  void clear_phase_apparent_power_sb();
  static const int kPhaseApparentPowerSbFieldNumber = 29;
  float phase_apparent_power_sb() const;
  void set_phase_apparent_power_sb(float value);

  // optional float phase_apparent_power_sc = 30;
  void clear_phase_apparent_power_sc();
  static const int kPhaseApparentPowerScFieldNumber = 30;
  float phase_apparent_power_sc() const;
  void set_phase_apparent_power_sc(float value);

  // optional float reserved_2 = 31;
  void clear_reserved_2();
  static const int kReserved2FieldNumber = 31;
  float reserved_2() const;
  void set_reserved_2(float value);

  // optional float apparent_power_demand = 32;
  void clear_apparent_power_demand();
  static const int kApparentPowerDemandFieldNumber = 32;
  float apparent_power_demand() const;
  void set_apparent_power_demand(float value);

  // optional float power_demand_p_dmd = 33;
  void clear_power_demand_p_dmd();
  static const int kPowerDemandPDmdFieldNumber = 33;
  float power_demand_p_dmd() const;
  void set_power_demand_p_dmd(float value);

  // optional float reactive_power_demand = 34;
  void clear_reactive_power_demand();
  static const int kReactivePowerDemandFieldNumber = 34;
  float reactive_power_demand() const;
  void set_reactive_power_demand(float value);

  // optional float phase_a_current_demand = 35;
  void clear_phase_a_current_demand();
  static const int kPhaseACurrentDemandFieldNumber = 35;
  float phase_a_current_demand() const;
  void set_phase_a_current_demand(float value);

  // optional float phase_b_current_demand = 36;
  void clear_phase_b_current_demand();
  static const int kPhaseBCurrentDemandFieldNumber = 36;
  float phase_b_current_demand() const;
  void set_phase_b_current_demand(float value);

  // optional float phase_c_current_demand = 37;
  void clear_phase_c_current_demand();
  static const int kPhaseCCurrentDemandFieldNumber = 37;
  float phase_c_current_demand() const;
  void set_phase_c_current_demand(float value);

  // optional float reserved_3 = 38;
  void clear_reserved_3();
  static const int kReserved3FieldNumber = 38;
  float reserved_3() const;
  void set_reserved_3(float value);

  // @@protoc_insertion_point(class_scope:analogic.ancp00.PduData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  float frequency_;
  float phase_voltage_v1_;
  float phase_voltage_v2_;
  float phase_voltage_v3_;
  float line_voltage_v12_;
  float line_voltage_v23_;
  float line_voltage_v31_;
  float phase_line_current_i1_;
  float phase_line_current_i2_;
  float phase_line_current_i3_;
  float neutral_line_current_in_;
  float phase_power_pa_;
  float phase_power_pb_;
  float phase_power_pc_;
  float system_power_psum_;
  float phase_reative_power_qa_;
  float phase_reative_power_qb_;
  float phase_reative_power_qc_;
  float system_reactive_power_;
  float system_apparent_ssum_;
  float phase_power_factor_pfa_;
  float phase_power_factor_pfb_;
  float phase_power_factor_pfc_;
  float system_power_pfsum_;
  float voltage_unbalance_factor_;
  float current_unbalance_factor_;
  float reserved_1_;
  float phase_apparent_power_sa_;
  float phase_apparent_power_sb_;
  float phase_apparent_power_sc_;
  float reserved_2_;
  float apparent_power_demand_;
  float power_demand_p_dmd_;
  float reactive_power_demand_;
  float phase_a_current_demand_;
  float phase_b_current_demand_;
  float phase_c_current_demand_;
  float reserved_3_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_proto_2fPduComm_2eproto();
  friend void protobuf_AssignDesc_proto_2fPduComm_2eproto();
  friend void protobuf_ShutdownFile_proto_2fPduComm_2eproto();

  void InitAsDefaultInstance();
  static PduData* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// PduData

// optional float frequency = 1;
inline void PduData::clear_frequency() {
  frequency_ = 0;
}
inline float PduData::frequency() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PduData.frequency)
  return frequency_;
}
inline void PduData::set_frequency(float value) {
  
  frequency_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PduData.frequency)
}

// optional float phase_voltage_v1 = 2;
inline void PduData::clear_phase_voltage_v1() {
  phase_voltage_v1_ = 0;
}
inline float PduData::phase_voltage_v1() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PduData.phase_voltage_v1)
  return phase_voltage_v1_;
}
inline void PduData::set_phase_voltage_v1(float value) {
  
  phase_voltage_v1_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PduData.phase_voltage_v1)
}

// optional float phase_voltage_v2 = 3;
inline void PduData::clear_phase_voltage_v2() {
  phase_voltage_v2_ = 0;
}
inline float PduData::phase_voltage_v2() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PduData.phase_voltage_v2)
  return phase_voltage_v2_;
}
inline void PduData::set_phase_voltage_v2(float value) {
  
  phase_voltage_v2_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PduData.phase_voltage_v2)
}

// optional float phase_voltage_v3 = 4;
inline void PduData::clear_phase_voltage_v3() {
  phase_voltage_v3_ = 0;
}
inline float PduData::phase_voltage_v3() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PduData.phase_voltage_v3)
  return phase_voltage_v3_;
}
inline void PduData::set_phase_voltage_v3(float value) {
  
  phase_voltage_v3_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PduData.phase_voltage_v3)
}

// optional float line_voltage_v12 = 5;
inline void PduData::clear_line_voltage_v12() {
  line_voltage_v12_ = 0;
}
inline float PduData::line_voltage_v12() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PduData.line_voltage_v12)
  return line_voltage_v12_;
}
inline void PduData::set_line_voltage_v12(float value) {
  
  line_voltage_v12_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PduData.line_voltage_v12)
}

// optional float line_voltage_v23 = 6;
inline void PduData::clear_line_voltage_v23() {
  line_voltage_v23_ = 0;
}
inline float PduData::line_voltage_v23() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PduData.line_voltage_v23)
  return line_voltage_v23_;
}
inline void PduData::set_line_voltage_v23(float value) {
  
  line_voltage_v23_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PduData.line_voltage_v23)
}

// optional float line_voltage_v31 = 7;
inline void PduData::clear_line_voltage_v31() {
  line_voltage_v31_ = 0;
}
inline float PduData::line_voltage_v31() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PduData.line_voltage_v31)
  return line_voltage_v31_;
}
inline void PduData::set_line_voltage_v31(float value) {
  
  line_voltage_v31_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PduData.line_voltage_v31)
}

// optional float phase_line_current_i1 = 8;
inline void PduData::clear_phase_line_current_i1() {
  phase_line_current_i1_ = 0;
}
inline float PduData::phase_line_current_i1() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PduData.phase_line_current_i1)
  return phase_line_current_i1_;
}
inline void PduData::set_phase_line_current_i1(float value) {
  
  phase_line_current_i1_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PduData.phase_line_current_i1)
}

// optional float phase_line_current_i2 = 9;
inline void PduData::clear_phase_line_current_i2() {
  phase_line_current_i2_ = 0;
}
inline float PduData::phase_line_current_i2() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PduData.phase_line_current_i2)
  return phase_line_current_i2_;
}
inline void PduData::set_phase_line_current_i2(float value) {
  
  phase_line_current_i2_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PduData.phase_line_current_i2)
}

// optional float phase_line_current_i3 = 10;
inline void PduData::clear_phase_line_current_i3() {
  phase_line_current_i3_ = 0;
}
inline float PduData::phase_line_current_i3() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PduData.phase_line_current_i3)
  return phase_line_current_i3_;
}
inline void PduData::set_phase_line_current_i3(float value) {
  
  phase_line_current_i3_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PduData.phase_line_current_i3)
}

// optional float neutral_line_current_in = 11;
inline void PduData::clear_neutral_line_current_in() {
  neutral_line_current_in_ = 0;
}
inline float PduData::neutral_line_current_in() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PduData.neutral_line_current_in)
  return neutral_line_current_in_;
}
inline void PduData::set_neutral_line_current_in(float value) {
  
  neutral_line_current_in_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PduData.neutral_line_current_in)
}

// optional float phase_power_pa = 12;
inline void PduData::clear_phase_power_pa() {
  phase_power_pa_ = 0;
}
inline float PduData::phase_power_pa() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PduData.phase_power_pa)
  return phase_power_pa_;
}
inline void PduData::set_phase_power_pa(float value) {
  
  phase_power_pa_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PduData.phase_power_pa)
}

// optional float phase_power_pb = 13;
inline void PduData::clear_phase_power_pb() {
  phase_power_pb_ = 0;
}
inline float PduData::phase_power_pb() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PduData.phase_power_pb)
  return phase_power_pb_;
}
inline void PduData::set_phase_power_pb(float value) {
  
  phase_power_pb_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PduData.phase_power_pb)
}

// optional float phase_power_pc = 14;
inline void PduData::clear_phase_power_pc() {
  phase_power_pc_ = 0;
}
inline float PduData::phase_power_pc() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PduData.phase_power_pc)
  return phase_power_pc_;
}
inline void PduData::set_phase_power_pc(float value) {
  
  phase_power_pc_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PduData.phase_power_pc)
}

// optional float system_power_psum = 15;
inline void PduData::clear_system_power_psum() {
  system_power_psum_ = 0;
}
inline float PduData::system_power_psum() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PduData.system_power_psum)
  return system_power_psum_;
}
inline void PduData::set_system_power_psum(float value) {
  
  system_power_psum_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PduData.system_power_psum)
}

// optional float phase_reative_power_qa = 16;
inline void PduData::clear_phase_reative_power_qa() {
  phase_reative_power_qa_ = 0;
}
inline float PduData::phase_reative_power_qa() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PduData.phase_reative_power_qa)
  return phase_reative_power_qa_;
}
inline void PduData::set_phase_reative_power_qa(float value) {
  
  phase_reative_power_qa_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PduData.phase_reative_power_qa)
}

// optional float phase_reative_power_qb = 17;
inline void PduData::clear_phase_reative_power_qb() {
  phase_reative_power_qb_ = 0;
}
inline float PduData::phase_reative_power_qb() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PduData.phase_reative_power_qb)
  return phase_reative_power_qb_;
}
inline void PduData::set_phase_reative_power_qb(float value) {
  
  phase_reative_power_qb_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PduData.phase_reative_power_qb)
}

// optional float phase_reative_power_qc = 18;
inline void PduData::clear_phase_reative_power_qc() {
  phase_reative_power_qc_ = 0;
}
inline float PduData::phase_reative_power_qc() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PduData.phase_reative_power_qc)
  return phase_reative_power_qc_;
}
inline void PduData::set_phase_reative_power_qc(float value) {
  
  phase_reative_power_qc_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PduData.phase_reative_power_qc)
}

// optional float system_reactive_power = 19;
inline void PduData::clear_system_reactive_power() {
  system_reactive_power_ = 0;
}
inline float PduData::system_reactive_power() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PduData.system_reactive_power)
  return system_reactive_power_;
}
inline void PduData::set_system_reactive_power(float value) {
  
  system_reactive_power_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PduData.system_reactive_power)
}

// optional float system_apparent_ssum = 20;
inline void PduData::clear_system_apparent_ssum() {
  system_apparent_ssum_ = 0;
}
inline float PduData::system_apparent_ssum() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PduData.system_apparent_ssum)
  return system_apparent_ssum_;
}
inline void PduData::set_system_apparent_ssum(float value) {
  
  system_apparent_ssum_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PduData.system_apparent_ssum)
}

// optional float phase_power_factor_pfa = 21;
inline void PduData::clear_phase_power_factor_pfa() {
  phase_power_factor_pfa_ = 0;
}
inline float PduData::phase_power_factor_pfa() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PduData.phase_power_factor_pfa)
  return phase_power_factor_pfa_;
}
inline void PduData::set_phase_power_factor_pfa(float value) {
  
  phase_power_factor_pfa_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PduData.phase_power_factor_pfa)
}

// optional float phase_power_factor_pfb = 22;
inline void PduData::clear_phase_power_factor_pfb() {
  phase_power_factor_pfb_ = 0;
}
inline float PduData::phase_power_factor_pfb() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PduData.phase_power_factor_pfb)
  return phase_power_factor_pfb_;
}
inline void PduData::set_phase_power_factor_pfb(float value) {
  
  phase_power_factor_pfb_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PduData.phase_power_factor_pfb)
}

// optional float phase_power_factor_pfc = 23;
inline void PduData::clear_phase_power_factor_pfc() {
  phase_power_factor_pfc_ = 0;
}
inline float PduData::phase_power_factor_pfc() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PduData.phase_power_factor_pfc)
  return phase_power_factor_pfc_;
}
inline void PduData::set_phase_power_factor_pfc(float value) {
  
  phase_power_factor_pfc_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PduData.phase_power_factor_pfc)
}

// optional float system_power_pfsum = 24;
inline void PduData::clear_system_power_pfsum() {
  system_power_pfsum_ = 0;
}
inline float PduData::system_power_pfsum() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PduData.system_power_pfsum)
  return system_power_pfsum_;
}
inline void PduData::set_system_power_pfsum(float value) {
  
  system_power_pfsum_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PduData.system_power_pfsum)
}

// optional float voltage_unbalance_factor = 25;
inline void PduData::clear_voltage_unbalance_factor() {
  voltage_unbalance_factor_ = 0;
}
inline float PduData::voltage_unbalance_factor() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PduData.voltage_unbalance_factor)
  return voltage_unbalance_factor_;
}
inline void PduData::set_voltage_unbalance_factor(float value) {
  
  voltage_unbalance_factor_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PduData.voltage_unbalance_factor)
}

// optional float current_unbalance_factor = 26;
inline void PduData::clear_current_unbalance_factor() {
  current_unbalance_factor_ = 0;
}
inline float PduData::current_unbalance_factor() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PduData.current_unbalance_factor)
  return current_unbalance_factor_;
}
inline void PduData::set_current_unbalance_factor(float value) {
  
  current_unbalance_factor_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PduData.current_unbalance_factor)
}

// optional float reserved_1 = 27;
inline void PduData::clear_reserved_1() {
  reserved_1_ = 0;
}
inline float PduData::reserved_1() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PduData.reserved_1)
  return reserved_1_;
}
inline void PduData::set_reserved_1(float value) {
  
  reserved_1_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PduData.reserved_1)
}

// optional float phase_apparent_power_sa = 28;
inline void PduData::clear_phase_apparent_power_sa() {
  phase_apparent_power_sa_ = 0;
}
inline float PduData::phase_apparent_power_sa() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PduData.phase_apparent_power_sa)
  return phase_apparent_power_sa_;
}
inline void PduData::set_phase_apparent_power_sa(float value) {
  
  phase_apparent_power_sa_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PduData.phase_apparent_power_sa)
}

// optional float phase_apparent_power_sb = 29;
inline void PduData::clear_phase_apparent_power_sb() {
  phase_apparent_power_sb_ = 0;
}
inline float PduData::phase_apparent_power_sb() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PduData.phase_apparent_power_sb)
  return phase_apparent_power_sb_;
}
inline void PduData::set_phase_apparent_power_sb(float value) {
  
  phase_apparent_power_sb_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PduData.phase_apparent_power_sb)
}

// optional float phase_apparent_power_sc = 30;
inline void PduData::clear_phase_apparent_power_sc() {
  phase_apparent_power_sc_ = 0;
}
inline float PduData::phase_apparent_power_sc() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PduData.phase_apparent_power_sc)
  return phase_apparent_power_sc_;
}
inline void PduData::set_phase_apparent_power_sc(float value) {
  
  phase_apparent_power_sc_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PduData.phase_apparent_power_sc)
}

// optional float reserved_2 = 31;
inline void PduData::clear_reserved_2() {
  reserved_2_ = 0;
}
inline float PduData::reserved_2() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PduData.reserved_2)
  return reserved_2_;
}
inline void PduData::set_reserved_2(float value) {
  
  reserved_2_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PduData.reserved_2)
}

// optional float apparent_power_demand = 32;
inline void PduData::clear_apparent_power_demand() {
  apparent_power_demand_ = 0;
}
inline float PduData::apparent_power_demand() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PduData.apparent_power_demand)
  return apparent_power_demand_;
}
inline void PduData::set_apparent_power_demand(float value) {
  
  apparent_power_demand_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PduData.apparent_power_demand)
}

// optional float power_demand_p_dmd = 33;
inline void PduData::clear_power_demand_p_dmd() {
  power_demand_p_dmd_ = 0;
}
inline float PduData::power_demand_p_dmd() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PduData.power_demand_p_dmd)
  return power_demand_p_dmd_;
}
inline void PduData::set_power_demand_p_dmd(float value) {
  
  power_demand_p_dmd_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PduData.power_demand_p_dmd)
}

// optional float reactive_power_demand = 34;
inline void PduData::clear_reactive_power_demand() {
  reactive_power_demand_ = 0;
}
inline float PduData::reactive_power_demand() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PduData.reactive_power_demand)
  return reactive_power_demand_;
}
inline void PduData::set_reactive_power_demand(float value) {
  
  reactive_power_demand_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PduData.reactive_power_demand)
}

// optional float phase_a_current_demand = 35;
inline void PduData::clear_phase_a_current_demand() {
  phase_a_current_demand_ = 0;
}
inline float PduData::phase_a_current_demand() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PduData.phase_a_current_demand)
  return phase_a_current_demand_;
}
inline void PduData::set_phase_a_current_demand(float value) {
  
  phase_a_current_demand_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PduData.phase_a_current_demand)
}

// optional float phase_b_current_demand = 36;
inline void PduData::clear_phase_b_current_demand() {
  phase_b_current_demand_ = 0;
}
inline float PduData::phase_b_current_demand() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PduData.phase_b_current_demand)
  return phase_b_current_demand_;
}
inline void PduData::set_phase_b_current_demand(float value) {
  
  phase_b_current_demand_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PduData.phase_b_current_demand)
}

// optional float phase_c_current_demand = 37;
inline void PduData::clear_phase_c_current_demand() {
  phase_c_current_demand_ = 0;
}
inline float PduData::phase_c_current_demand() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PduData.phase_c_current_demand)
  return phase_c_current_demand_;
}
inline void PduData::set_phase_c_current_demand(float value) {
  
  phase_c_current_demand_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PduData.phase_c_current_demand)
}

// optional float reserved_3 = 38;
inline void PduData::clear_reserved_3() {
  reserved_3_ = 0;
}
inline float PduData::reserved_3() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PduData.reserved_3)
  return reserved_3_;
}
inline void PduData::set_reserved_3(float value) {
  
  reserved_3_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PduData.reserved_3)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ancp00
}  // namespace analogic

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_2fPduComm_2eproto__INCLUDED
