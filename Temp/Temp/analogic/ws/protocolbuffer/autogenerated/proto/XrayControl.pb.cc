// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/XrayControl.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/XrayControl.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace analogic {
namespace ancp00 {

namespace {

const ::google::protobuf::Descriptor* XrayControlMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  XrayControlMsg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* XrayControlMsg_XrayControlCmd_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* XrayControlMsg_SeasoningMode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* XrayControlStatusMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  XrayControlStatusMsg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* XrayControlStatusMsg_XrayControlState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* XrayControlStatusMsg_XrayControlSubstate_descriptor_ = NULL;
const ::google::protobuf::Descriptor* XrayControlEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  XrayControlEvent_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* XrayControlEvent_EVENT_ID_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_2fXrayControl_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_proto_2fXrayControl_2eproto() {
  protobuf_AddDesc_proto_2fXrayControl_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto/XrayControl.proto");
  GOOGLE_CHECK(file != NULL);
  XrayControlMsg_descriptor_ = file->message_type(0);
  static const int XrayControlMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XrayControlMsg, cmd_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XrayControlMsg, mode_),
  };
  XrayControlMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      XrayControlMsg_descriptor_,
      XrayControlMsg::default_instance_,
      XrayControlMsg_offsets_,
      -1,
      -1,
      -1,
      sizeof(XrayControlMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XrayControlMsg, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XrayControlMsg, _is_default_instance_));
  XrayControlMsg_XrayControlCmd_descriptor_ = XrayControlMsg_descriptor_->enum_type(0);
  XrayControlMsg_SeasoningMode_descriptor_ = XrayControlMsg_descriptor_->enum_type(1);
  XrayControlStatusMsg_descriptor_ = file->message_type(1);
  static const int XrayControlStatusMsg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XrayControlStatusMsg, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XrayControlStatusMsg, substate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XrayControlStatusMsg, xray_on_hours_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XrayControlStatusMsg, last_xray_on_time_),
  };
  XrayControlStatusMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      XrayControlStatusMsg_descriptor_,
      XrayControlStatusMsg::default_instance_,
      XrayControlStatusMsg_offsets_,
      -1,
      -1,
      -1,
      sizeof(XrayControlStatusMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XrayControlStatusMsg, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XrayControlStatusMsg, _is_default_instance_));
  XrayControlStatusMsg_XrayControlState_descriptor_ = XrayControlStatusMsg_descriptor_->enum_type(0);
  XrayControlStatusMsg_XrayControlSubstate_descriptor_ = XrayControlStatusMsg_descriptor_->enum_type(1);
  XrayControlEvent_descriptor_ = file->message_type(2);
  static const int XrayControlEvent_offsets_[1] = {
  };
  XrayControlEvent_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      XrayControlEvent_descriptor_,
      XrayControlEvent::default_instance_,
      XrayControlEvent_offsets_,
      -1,
      -1,
      -1,
      sizeof(XrayControlEvent),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XrayControlEvent, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XrayControlEvent, _is_default_instance_));
  XrayControlEvent_EVENT_ID_descriptor_ = XrayControlEvent_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_2fXrayControl_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      XrayControlMsg_descriptor_, &XrayControlMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      XrayControlStatusMsg_descriptor_, &XrayControlStatusMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      XrayControlEvent_descriptor_, &XrayControlEvent::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_2fXrayControl_2eproto() {
  delete XrayControlMsg::default_instance_;
  delete XrayControlMsg_reflection_;
  delete XrayControlStatusMsg::default_instance_;
  delete XrayControlStatusMsg_reflection_;
  delete XrayControlEvent::default_instance_;
  delete XrayControlEvent_reflection_;
}

void protobuf_AddDesc_proto_2fXrayControl_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_proto_2fXrayControl_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027proto/XrayControl.proto\022\017analogic.ancp"
    "00\"\220\003\n\016XrayControlMsg\022>\n\006cmd_id\030\001 \001(\0162.."
    "analogic.ancp00.XrayControlMsg.XrayContr"
    "olCmd\022;\n\004mode\030\002 \001(\0162-.analogic.ancp00.Xr"
    "ayControlMsg.SeasoningMode\"\304\001\n\016XrayContr"
    "olCmd\022\013\n\007XRAY_ON\020\000\022\014\n\010XRAY_OFF\020\001\022\n\n\006SEAS"
    "ON\020\002\022\t\n\005RESET\020\003\022\014\n\010MAXIMIZE\020\004\022\014\n\010MINIMIZ"
    "E\020\005\022\020\n\014LAMP_TEST_ON\020\006\022\021\n\rLAMP_TEST_OFF\020\007"
    "\022\022\n\016NEW_TUBE_RESET\020\010\022\024\n\020POWERLINK_ENABLE"
    "\020\t\022\025\n\021POWERLINK_DISABLE\020\n\":\n\rSeasoningMo"
    "de\022\010\n\004NONE\020\000\022\t\n\005SHORT\020\001\022\n\n\006MEDIUM\020\002\022\010\n\004L"
    "ONG\020\003\"\360\002\n\024XrayControlStatusMsg\022E\n\005state\030"
    "\001 \001(\01626.analogic.ancp00.XrayControlStatu"
    "sMsg.XrayControlState\022K\n\010substate\030\002 \001(\0162"
    "9.analogic.ancp00.XrayControlStatusMsg.X"
    "rayControlSubstate\022\025\n\rxray_on_hours\030\003 \001("
    "\004\022\031\n\021last_xray_on_time\030\004 \001(\t\"]\n\020XrayCont"
    "rolState\022\n\n\006UNINIT\020\000\022\014\n\010XRAY_OFF\020\001\022\022\n\016XR"
    "AY_SEASONING\020\002\022\013\n\007XRAY_ON\020\003\022\016\n\nXRAY_FAUL"
    "T\020\004\"3\n\023XrayControlSubstate\022\r\n\tMAXIMIZED\020"
    "\000\022\r\n\tMINIMIZED\020\001\"\213\002\n\020XrayControlEvent\"\366\001"
    "\n\010EVENT_ID\022\014\n\010NOT_USED\020\000\022\027\n\023INIT_COMPLET"
    "E_EVENT\020\001\022\024\n\020ON_COMMAND_EVENT\020\002\022\025\n\021OFF_C"
    "OMMAND_EVENT\020\003\022\030\n\024SEASON_COMMAND_EVENT\020\004"
    "\022\034\n\030SEASONING_COMPLETE_EVENT\020\005\022\032\n\026MINIMI"
    "ZE_COMMAND_EVENT\020\006\022\032\n\026MAXIMIZE_COMMAND_E"
    "VENT\020\007\022\017\n\013FAULT_EVENT\020\010\022\025\n\021RESET_FAULT_E"
    "VENT\020\tb\006proto3", 1094);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/XrayControl.proto", &protobuf_RegisterTypes);
  XrayControlMsg::default_instance_ = new XrayControlMsg();
  XrayControlStatusMsg::default_instance_ = new XrayControlStatusMsg();
  XrayControlEvent::default_instance_ = new XrayControlEvent();
  XrayControlMsg::default_instance_->InitAsDefaultInstance();
  XrayControlStatusMsg::default_instance_->InitAsDefaultInstance();
  XrayControlEvent::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2fXrayControl_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2fXrayControl_2eproto {
  StaticDescriptorInitializer_proto_2fXrayControl_2eproto() {
    protobuf_AddDesc_proto_2fXrayControl_2eproto();
  }
} static_descriptor_initializer_proto_2fXrayControl_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* XrayControlMsg_XrayControlCmd_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return XrayControlMsg_XrayControlCmd_descriptor_;
}
bool XrayControlMsg_XrayControlCmd_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const XrayControlMsg_XrayControlCmd XrayControlMsg::XRAY_ON;
const XrayControlMsg_XrayControlCmd XrayControlMsg::XRAY_OFF;
const XrayControlMsg_XrayControlCmd XrayControlMsg::SEASON;
const XrayControlMsg_XrayControlCmd XrayControlMsg::RESET;
const XrayControlMsg_XrayControlCmd XrayControlMsg::MAXIMIZE;
const XrayControlMsg_XrayControlCmd XrayControlMsg::MINIMIZE;
const XrayControlMsg_XrayControlCmd XrayControlMsg::LAMP_TEST_ON;
const XrayControlMsg_XrayControlCmd XrayControlMsg::LAMP_TEST_OFF;
const XrayControlMsg_XrayControlCmd XrayControlMsg::NEW_TUBE_RESET;
const XrayControlMsg_XrayControlCmd XrayControlMsg::POWERLINK_ENABLE;
const XrayControlMsg_XrayControlCmd XrayControlMsg::POWERLINK_DISABLE;
const XrayControlMsg_XrayControlCmd XrayControlMsg::XrayControlCmd_MIN;
const XrayControlMsg_XrayControlCmd XrayControlMsg::XrayControlCmd_MAX;
const int XrayControlMsg::XrayControlCmd_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* XrayControlMsg_SeasoningMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return XrayControlMsg_SeasoningMode_descriptor_;
}
bool XrayControlMsg_SeasoningMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const XrayControlMsg_SeasoningMode XrayControlMsg::NONE;
const XrayControlMsg_SeasoningMode XrayControlMsg::SHORT;
const XrayControlMsg_SeasoningMode XrayControlMsg::MEDIUM;
const XrayControlMsg_SeasoningMode XrayControlMsg::LONG;
const XrayControlMsg_SeasoningMode XrayControlMsg::SeasoningMode_MIN;
const XrayControlMsg_SeasoningMode XrayControlMsg::SeasoningMode_MAX;
const int XrayControlMsg::SeasoningMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XrayControlMsg::kCmdIdFieldNumber;
const int XrayControlMsg::kModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XrayControlMsg::XrayControlMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analogic.ancp00.XrayControlMsg)
}

void XrayControlMsg::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

XrayControlMsg::XrayControlMsg(const XrayControlMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analogic.ancp00.XrayControlMsg)
}

void XrayControlMsg::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  cmd_id_ = 0;
  mode_ = 0;
}

XrayControlMsg::~XrayControlMsg() {
  // @@protoc_insertion_point(destructor:analogic.ancp00.XrayControlMsg)
  SharedDtor();
}

void XrayControlMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void XrayControlMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XrayControlMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return XrayControlMsg_descriptor_;
}

const XrayControlMsg& XrayControlMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fXrayControl_2eproto();
  return *default_instance_;
}

XrayControlMsg* XrayControlMsg::default_instance_ = NULL;

XrayControlMsg* XrayControlMsg::New(::google::protobuf::Arena* arena) const {
  XrayControlMsg* n = new XrayControlMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void XrayControlMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:analogic.ancp00.XrayControlMsg)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(XrayControlMsg, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<XrayControlMsg*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(cmd_id_, mode_);

#undef ZR_HELPER_
#undef ZR_

}

bool XrayControlMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analogic.ancp00.XrayControlMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .analogic.ancp00.XrayControlMsg.XrayControlCmd cmd_id = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_cmd_id(static_cast< ::analogic::ancp00::XrayControlMsg_XrayControlCmd >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mode;
        break;
      }

      // optional .analogic.ancp00.XrayControlMsg.SeasoningMode mode = 2;
      case 2: {
        if (tag == 16) {
         parse_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mode(static_cast< ::analogic::ancp00::XrayControlMsg_SeasoningMode >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:analogic.ancp00.XrayControlMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analogic.ancp00.XrayControlMsg)
  return false;
#undef DO_
}

void XrayControlMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analogic.ancp00.XrayControlMsg)
  // optional .analogic.ancp00.XrayControlMsg.XrayControlCmd cmd_id = 1;
  if (this->cmd_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd_id(), output);
  }

  // optional .analogic.ancp00.XrayControlMsg.SeasoningMode mode = 2;
  if (this->mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->mode(), output);
  }

  // @@protoc_insertion_point(serialize_end:analogic.ancp00.XrayControlMsg)
}

::google::protobuf::uint8* XrayControlMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analogic.ancp00.XrayControlMsg)
  // optional .analogic.ancp00.XrayControlMsg.XrayControlCmd cmd_id = 1;
  if (this->cmd_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd_id(), target);
  }

  // optional .analogic.ancp00.XrayControlMsg.SeasoningMode mode = 2;
  if (this->mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->mode(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:analogic.ancp00.XrayControlMsg)
  return target;
}

int XrayControlMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:analogic.ancp00.XrayControlMsg)
  int total_size = 0;

  // optional .analogic.ancp00.XrayControlMsg.XrayControlCmd cmd_id = 1;
  if (this->cmd_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd_id());
  }

  // optional .analogic.ancp00.XrayControlMsg.SeasoningMode mode = 2;
  if (this->mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XrayControlMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analogic.ancp00.XrayControlMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const XrayControlMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const XrayControlMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analogic.ancp00.XrayControlMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analogic.ancp00.XrayControlMsg)
    MergeFrom(*source);
  }
}

void XrayControlMsg::MergeFrom(const XrayControlMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analogic.ancp00.XrayControlMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.cmd_id() != 0) {
    set_cmd_id(from.cmd_id());
  }
  if (from.mode() != 0) {
    set_mode(from.mode());
  }
}

void XrayControlMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analogic.ancp00.XrayControlMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XrayControlMsg::CopyFrom(const XrayControlMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analogic.ancp00.XrayControlMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XrayControlMsg::IsInitialized() const {

  return true;
}

void XrayControlMsg::Swap(XrayControlMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XrayControlMsg::InternalSwap(XrayControlMsg* other) {
  std::swap(cmd_id_, other->cmd_id_);
  std::swap(mode_, other->mode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata XrayControlMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = XrayControlMsg_descriptor_;
  metadata.reflection = XrayControlMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// XrayControlMsg

// optional .analogic.ancp00.XrayControlMsg.XrayControlCmd cmd_id = 1;
void XrayControlMsg::clear_cmd_id() {
  cmd_id_ = 0;
}
 ::analogic::ancp00::XrayControlMsg_XrayControlCmd XrayControlMsg::cmd_id() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.XrayControlMsg.cmd_id)
  return static_cast< ::analogic::ancp00::XrayControlMsg_XrayControlCmd >(cmd_id_);
}
 void XrayControlMsg::set_cmd_id(::analogic::ancp00::XrayControlMsg_XrayControlCmd value) {
  
  cmd_id_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.XrayControlMsg.cmd_id)
}

// optional .analogic.ancp00.XrayControlMsg.SeasoningMode mode = 2;
void XrayControlMsg::clear_mode() {
  mode_ = 0;
}
 ::analogic::ancp00::XrayControlMsg_SeasoningMode XrayControlMsg::mode() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.XrayControlMsg.mode)
  return static_cast< ::analogic::ancp00::XrayControlMsg_SeasoningMode >(mode_);
}
 void XrayControlMsg::set_mode(::analogic::ancp00::XrayControlMsg_SeasoningMode value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.XrayControlMsg.mode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* XrayControlStatusMsg_XrayControlState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return XrayControlStatusMsg_XrayControlState_descriptor_;
}
bool XrayControlStatusMsg_XrayControlState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const XrayControlStatusMsg_XrayControlState XrayControlStatusMsg::UNINIT;
const XrayControlStatusMsg_XrayControlState XrayControlStatusMsg::XRAY_OFF;
const XrayControlStatusMsg_XrayControlState XrayControlStatusMsg::XRAY_SEASONING;
const XrayControlStatusMsg_XrayControlState XrayControlStatusMsg::XRAY_ON;
const XrayControlStatusMsg_XrayControlState XrayControlStatusMsg::XRAY_FAULT;
const XrayControlStatusMsg_XrayControlState XrayControlStatusMsg::XrayControlState_MIN;
const XrayControlStatusMsg_XrayControlState XrayControlStatusMsg::XrayControlState_MAX;
const int XrayControlStatusMsg::XrayControlState_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* XrayControlStatusMsg_XrayControlSubstate_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return XrayControlStatusMsg_XrayControlSubstate_descriptor_;
}
bool XrayControlStatusMsg_XrayControlSubstate_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const XrayControlStatusMsg_XrayControlSubstate XrayControlStatusMsg::MAXIMIZED;
const XrayControlStatusMsg_XrayControlSubstate XrayControlStatusMsg::MINIMIZED;
const XrayControlStatusMsg_XrayControlSubstate XrayControlStatusMsg::XrayControlSubstate_MIN;
const XrayControlStatusMsg_XrayControlSubstate XrayControlStatusMsg::XrayControlSubstate_MAX;
const int XrayControlStatusMsg::XrayControlSubstate_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XrayControlStatusMsg::kStateFieldNumber;
const int XrayControlStatusMsg::kSubstateFieldNumber;
const int XrayControlStatusMsg::kXrayOnHoursFieldNumber;
const int XrayControlStatusMsg::kLastXrayOnTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XrayControlStatusMsg::XrayControlStatusMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analogic.ancp00.XrayControlStatusMsg)
}

void XrayControlStatusMsg::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

XrayControlStatusMsg::XrayControlStatusMsg(const XrayControlStatusMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analogic.ancp00.XrayControlStatusMsg)
}

void XrayControlStatusMsg::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  state_ = 0;
  substate_ = 0;
  xray_on_hours_ = GOOGLE_ULONGLONG(0);
  last_xray_on_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

XrayControlStatusMsg::~XrayControlStatusMsg() {
  // @@protoc_insertion_point(destructor:analogic.ancp00.XrayControlStatusMsg)
  SharedDtor();
}

void XrayControlStatusMsg::SharedDtor() {
  last_xray_on_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void XrayControlStatusMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XrayControlStatusMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return XrayControlStatusMsg_descriptor_;
}

const XrayControlStatusMsg& XrayControlStatusMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fXrayControl_2eproto();
  return *default_instance_;
}

XrayControlStatusMsg* XrayControlStatusMsg::default_instance_ = NULL;

XrayControlStatusMsg* XrayControlStatusMsg::New(::google::protobuf::Arena* arena) const {
  XrayControlStatusMsg* n = new XrayControlStatusMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void XrayControlStatusMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:analogic.ancp00.XrayControlStatusMsg)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(XrayControlStatusMsg, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<XrayControlStatusMsg*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(state_, xray_on_hours_);
  last_xray_on_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool XrayControlStatusMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analogic.ancp00.XrayControlStatusMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .analogic.ancp00.XrayControlStatusMsg.XrayControlState state = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::analogic::ancp00::XrayControlStatusMsg_XrayControlState >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_substate;
        break;
      }

      // optional .analogic.ancp00.XrayControlStatusMsg.XrayControlSubstate substate = 2;
      case 2: {
        if (tag == 16) {
         parse_substate:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_substate(static_cast< ::analogic::ancp00::XrayControlStatusMsg_XrayControlSubstate >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_xray_on_hours;
        break;
      }

      // optional uint64 xray_on_hours = 3;
      case 3: {
        if (tag == 24) {
         parse_xray_on_hours:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &xray_on_hours_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_last_xray_on_time;
        break;
      }

      // optional string last_xray_on_time = 4;
      case 4: {
        if (tag == 34) {
         parse_last_xray_on_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_last_xray_on_time()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->last_xray_on_time().data(), this->last_xray_on_time().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.XrayControlStatusMsg.last_xray_on_time"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:analogic.ancp00.XrayControlStatusMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analogic.ancp00.XrayControlStatusMsg)
  return false;
#undef DO_
}

void XrayControlStatusMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analogic.ancp00.XrayControlStatusMsg)
  // optional .analogic.ancp00.XrayControlStatusMsg.XrayControlState state = 1;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  // optional .analogic.ancp00.XrayControlStatusMsg.XrayControlSubstate substate = 2;
  if (this->substate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->substate(), output);
  }

  // optional uint64 xray_on_hours = 3;
  if (this->xray_on_hours() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->xray_on_hours(), output);
  }

  // optional string last_xray_on_time = 4;
  if (this->last_xray_on_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->last_xray_on_time().data(), this->last_xray_on_time().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.XrayControlStatusMsg.last_xray_on_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->last_xray_on_time(), output);
  }

  // @@protoc_insertion_point(serialize_end:analogic.ancp00.XrayControlStatusMsg)
}

::google::protobuf::uint8* XrayControlStatusMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analogic.ancp00.XrayControlStatusMsg)
  // optional .analogic.ancp00.XrayControlStatusMsg.XrayControlState state = 1;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }

  // optional .analogic.ancp00.XrayControlStatusMsg.XrayControlSubstate substate = 2;
  if (this->substate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->substate(), target);
  }

  // optional uint64 xray_on_hours = 3;
  if (this->xray_on_hours() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->xray_on_hours(), target);
  }

  // optional string last_xray_on_time = 4;
  if (this->last_xray_on_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->last_xray_on_time().data(), this->last_xray_on_time().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.XrayControlStatusMsg.last_xray_on_time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->last_xray_on_time(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:analogic.ancp00.XrayControlStatusMsg)
  return target;
}

int XrayControlStatusMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:analogic.ancp00.XrayControlStatusMsg)
  int total_size = 0;

  // optional .analogic.ancp00.XrayControlStatusMsg.XrayControlState state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  // optional .analogic.ancp00.XrayControlStatusMsg.XrayControlSubstate substate = 2;
  if (this->substate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->substate());
  }

  // optional uint64 xray_on_hours = 3;
  if (this->xray_on_hours() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->xray_on_hours());
  }

  // optional string last_xray_on_time = 4;
  if (this->last_xray_on_time().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->last_xray_on_time());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XrayControlStatusMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analogic.ancp00.XrayControlStatusMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const XrayControlStatusMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const XrayControlStatusMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analogic.ancp00.XrayControlStatusMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analogic.ancp00.XrayControlStatusMsg)
    MergeFrom(*source);
  }
}

void XrayControlStatusMsg::MergeFrom(const XrayControlStatusMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analogic.ancp00.XrayControlStatusMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
  if (from.substate() != 0) {
    set_substate(from.substate());
  }
  if (from.xray_on_hours() != 0) {
    set_xray_on_hours(from.xray_on_hours());
  }
  if (from.last_xray_on_time().size() > 0) {

    last_xray_on_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_xray_on_time_);
  }
}

void XrayControlStatusMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analogic.ancp00.XrayControlStatusMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XrayControlStatusMsg::CopyFrom(const XrayControlStatusMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analogic.ancp00.XrayControlStatusMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XrayControlStatusMsg::IsInitialized() const {

  return true;
}

void XrayControlStatusMsg::Swap(XrayControlStatusMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XrayControlStatusMsg::InternalSwap(XrayControlStatusMsg* other) {
  std::swap(state_, other->state_);
  std::swap(substate_, other->substate_);
  std::swap(xray_on_hours_, other->xray_on_hours_);
  last_xray_on_time_.Swap(&other->last_xray_on_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata XrayControlStatusMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = XrayControlStatusMsg_descriptor_;
  metadata.reflection = XrayControlStatusMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// XrayControlStatusMsg

// optional .analogic.ancp00.XrayControlStatusMsg.XrayControlState state = 1;
void XrayControlStatusMsg::clear_state() {
  state_ = 0;
}
 ::analogic::ancp00::XrayControlStatusMsg_XrayControlState XrayControlStatusMsg::state() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.XrayControlStatusMsg.state)
  return static_cast< ::analogic::ancp00::XrayControlStatusMsg_XrayControlState >(state_);
}
 void XrayControlStatusMsg::set_state(::analogic::ancp00::XrayControlStatusMsg_XrayControlState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.XrayControlStatusMsg.state)
}

// optional .analogic.ancp00.XrayControlStatusMsg.XrayControlSubstate substate = 2;
void XrayControlStatusMsg::clear_substate() {
  substate_ = 0;
}
 ::analogic::ancp00::XrayControlStatusMsg_XrayControlSubstate XrayControlStatusMsg::substate() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.XrayControlStatusMsg.substate)
  return static_cast< ::analogic::ancp00::XrayControlStatusMsg_XrayControlSubstate >(substate_);
}
 void XrayControlStatusMsg::set_substate(::analogic::ancp00::XrayControlStatusMsg_XrayControlSubstate value) {
  
  substate_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.XrayControlStatusMsg.substate)
}

// optional uint64 xray_on_hours = 3;
void XrayControlStatusMsg::clear_xray_on_hours() {
  xray_on_hours_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 XrayControlStatusMsg::xray_on_hours() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.XrayControlStatusMsg.xray_on_hours)
  return xray_on_hours_;
}
 void XrayControlStatusMsg::set_xray_on_hours(::google::protobuf::uint64 value) {
  
  xray_on_hours_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.XrayControlStatusMsg.xray_on_hours)
}

// optional string last_xray_on_time = 4;
void XrayControlStatusMsg::clear_last_xray_on_time() {
  last_xray_on_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& XrayControlStatusMsg::last_xray_on_time() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.XrayControlStatusMsg.last_xray_on_time)
  return last_xray_on_time_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void XrayControlStatusMsg::set_last_xray_on_time(const ::std::string& value) {
  
  last_xray_on_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.XrayControlStatusMsg.last_xray_on_time)
}
 void XrayControlStatusMsg::set_last_xray_on_time(const char* value) {
  
  last_xray_on_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.XrayControlStatusMsg.last_xray_on_time)
}
 void XrayControlStatusMsg::set_last_xray_on_time(const char* value, size_t size) {
  
  last_xray_on_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.XrayControlStatusMsg.last_xray_on_time)
}
 ::std::string* XrayControlStatusMsg::mutable_last_xray_on_time() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.XrayControlStatusMsg.last_xray_on_time)
  return last_xray_on_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* XrayControlStatusMsg::release_last_xray_on_time() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.XrayControlStatusMsg.last_xray_on_time)
  
  return last_xray_on_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void XrayControlStatusMsg::set_allocated_last_xray_on_time(::std::string* last_xray_on_time) {
  if (last_xray_on_time != NULL) {
    
  } else {
    
  }
  last_xray_on_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), last_xray_on_time);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.XrayControlStatusMsg.last_xray_on_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* XrayControlEvent_EVENT_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return XrayControlEvent_EVENT_ID_descriptor_;
}
bool XrayControlEvent_EVENT_ID_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const XrayControlEvent_EVENT_ID XrayControlEvent::NOT_USED;
const XrayControlEvent_EVENT_ID XrayControlEvent::INIT_COMPLETE_EVENT;
const XrayControlEvent_EVENT_ID XrayControlEvent::ON_COMMAND_EVENT;
const XrayControlEvent_EVENT_ID XrayControlEvent::OFF_COMMAND_EVENT;
const XrayControlEvent_EVENT_ID XrayControlEvent::SEASON_COMMAND_EVENT;
const XrayControlEvent_EVENT_ID XrayControlEvent::SEASONING_COMPLETE_EVENT;
const XrayControlEvent_EVENT_ID XrayControlEvent::MINIMIZE_COMMAND_EVENT;
const XrayControlEvent_EVENT_ID XrayControlEvent::MAXIMIZE_COMMAND_EVENT;
const XrayControlEvent_EVENT_ID XrayControlEvent::FAULT_EVENT;
const XrayControlEvent_EVENT_ID XrayControlEvent::RESET_FAULT_EVENT;
const XrayControlEvent_EVENT_ID XrayControlEvent::EVENT_ID_MIN;
const XrayControlEvent_EVENT_ID XrayControlEvent::EVENT_ID_MAX;
const int XrayControlEvent::EVENT_ID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XrayControlEvent::XrayControlEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analogic.ancp00.XrayControlEvent)
}

void XrayControlEvent::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

XrayControlEvent::XrayControlEvent(const XrayControlEvent& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analogic.ancp00.XrayControlEvent)
}

void XrayControlEvent::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

XrayControlEvent::~XrayControlEvent() {
  // @@protoc_insertion_point(destructor:analogic.ancp00.XrayControlEvent)
  SharedDtor();
}

void XrayControlEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void XrayControlEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XrayControlEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return XrayControlEvent_descriptor_;
}

const XrayControlEvent& XrayControlEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fXrayControl_2eproto();
  return *default_instance_;
}

XrayControlEvent* XrayControlEvent::default_instance_ = NULL;

XrayControlEvent* XrayControlEvent::New(::google::protobuf::Arena* arena) const {
  XrayControlEvent* n = new XrayControlEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void XrayControlEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:analogic.ancp00.XrayControlEvent)
}

bool XrayControlEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analogic.ancp00.XrayControlEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:analogic.ancp00.XrayControlEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analogic.ancp00.XrayControlEvent)
  return false;
#undef DO_
}

void XrayControlEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analogic.ancp00.XrayControlEvent)
  // @@protoc_insertion_point(serialize_end:analogic.ancp00.XrayControlEvent)
}

::google::protobuf::uint8* XrayControlEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analogic.ancp00.XrayControlEvent)
  // @@protoc_insertion_point(serialize_to_array_end:analogic.ancp00.XrayControlEvent)
  return target;
}

int XrayControlEvent::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:analogic.ancp00.XrayControlEvent)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XrayControlEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analogic.ancp00.XrayControlEvent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const XrayControlEvent* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const XrayControlEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analogic.ancp00.XrayControlEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analogic.ancp00.XrayControlEvent)
    MergeFrom(*source);
  }
}

void XrayControlEvent::MergeFrom(const XrayControlEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analogic.ancp00.XrayControlEvent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void XrayControlEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analogic.ancp00.XrayControlEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XrayControlEvent::CopyFrom(const XrayControlEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analogic.ancp00.XrayControlEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XrayControlEvent::IsInitialized() const {

  return true;
}

void XrayControlEvent::Swap(XrayControlEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XrayControlEvent::InternalSwap(XrayControlEvent* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata XrayControlEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = XrayControlEvent_descriptor_;
  metadata.reflection = XrayControlEvent_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// XrayControlEvent

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ancp00
}  // namespace analogic

// @@protoc_insertion_point(global_scope)
