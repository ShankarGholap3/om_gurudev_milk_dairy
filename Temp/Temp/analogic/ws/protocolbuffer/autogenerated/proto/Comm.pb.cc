// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/Comm.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/Comm.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace analogic {
namespace ancp00 {

namespace {

const ::google::protobuf::Descriptor* CommStatusMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommStatusMsg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CommStatusMsg_CommState_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CommMonitorStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommMonitorStatus_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_2fComm_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_proto_2fComm_2eproto() {
  protobuf_AddDesc_proto_2fComm_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto/Comm.proto");
  GOOGLE_CHECK(file != NULL);
  CommStatusMsg_descriptor_ = file->message_type(0);
  static const int CommStatusMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommStatusMsg, subsys_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommStatusMsg, comm_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommStatusMsg, data_),
  };
  CommStatusMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CommStatusMsg_descriptor_,
      CommStatusMsg::default_instance_,
      CommStatusMsg_offsets_,
      -1,
      -1,
      -1,
      sizeof(CommStatusMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommStatusMsg, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommStatusMsg, _is_default_instance_));
  CommStatusMsg_CommState_descriptor_ = CommStatusMsg_descriptor_->enum_type(0);
  CommMonitorStatus_descriptor_ = file->message_type(1);
  static const int CommMonitorStatus_offsets_[25] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommMonitorStatus, network_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommMonitorStatus, bhs_integrated_lane_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommMonitorStatus, scanner_control_computer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommMonitorStatus, ups_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommMonitorStatus, drb_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommMonitorStatus, safetyio_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommMonitorStatus, rotor_control_board_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommMonitorStatus, xray_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommMonitorStatus, serial_server_1_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommMonitorStatus, serial_server_2_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommMonitorStatus, gantry_drive_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommMonitorStatus, conveyor_drive_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommMonitorStatus, temphumidity_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommMonitorStatus, powerlink_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommMonitorStatus, dcb_1_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommMonitorStatus, dcb_2_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommMonitorStatus, dcb_3_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommMonitorStatus, dcb_4_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommMonitorStatus, dcb_5_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommMonitorStatus, power_meter_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommMonitorStatus, uplink_cmd_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommMonitorStatus, uplink_readback_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommMonitorStatus, network_ip_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommMonitorStatus, bhs_smartlane_ip_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommMonitorStatus, system_comm_online_),
  };
  CommMonitorStatus_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CommMonitorStatus_descriptor_,
      CommMonitorStatus::default_instance_,
      CommMonitorStatus_offsets_,
      -1,
      -1,
      -1,
      sizeof(CommMonitorStatus),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommMonitorStatus, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommMonitorStatus, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_2fComm_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CommStatusMsg_descriptor_, &CommStatusMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CommMonitorStatus_descriptor_, &CommMonitorStatus::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_2fComm_2eproto() {
  delete CommStatusMsg::default_instance_;
  delete CommStatusMsg_reflection_;
  delete CommMonitorStatus::default_instance_;
  delete CommMonitorStatus_reflection_;
}

void protobuf_AddDesc_proto_2fComm_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_proto_2fComm_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::analogic::ancp00::protobuf_AddDesc_proto_2fSubsystemIds_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020proto/Comm.proto\022\017analogic.ancp00\032\030pro"
    "to/SubsystemIds.proto\"\307\001\n\rCommStatusMsg\022"
    "0\n\tsubsys_id\030\001 \001(\0162\035.analogic.ancp00.SUB"
    "SYSTEM_ID\022<\n\ncomm_state\030\002 \001(\0162(.analogic"
    ".ancp00.CommStatusMsg.CommState\022\014\n\004data\030"
    "\003 \001(\007\"8\n\tCommState\022\022\n\016NOT_CONFIGURED\020\000\022\013"
    "\n\007OFFLINE\020\001\022\n\n\006ONLINE\020\002\"\205\014\n\021CommMonitorS"
    "tatus\022@\n\016network_status\030\001 \001(\0162(.analogic"
    ".ancp00.CommStatusMsg.CommState\022L\n\032bhs_i"
    "ntegrated_lane_status\030\002 \001(\0162(.analogic.a"
    "ncp00.CommStatusMsg.CommState\022J\n\030scanner"
    "_control_computer\030\003 \001(\0162(.analogic.ancp0"
    "0.CommStatusMsg.CommState\022<\n\nups_status\030"
    "\004 \001(\0162(.analogic.ancp00.CommStatusMsg.Co"
    "mmState\022<\n\ndrb_status\030\005 \001(\0162(.analogic.a"
    "ncp00.CommStatusMsg.CommState\022A\n\017safetyi"
    "o_status\030\006 \001(\0162(.analogic.ancp00.CommSta"
    "tusMsg.CommState\022L\n\032rotor_control_board_"
    "status\030\007 \001(\0162(.analogic.ancp00.CommStatu"
    "sMsg.CommState\022=\n\013xray_status\030\010 \001(\0162(.an"
    "alogic.ancp00.CommStatusMsg.CommState\022H\n"
    "\026serial_server_1_status\030\t \001(\0162(.analogic"
    ".ancp00.CommStatusMsg.CommState\022H\n\026seria"
    "l_server_2_status\030\n \001(\0162(.analogic.ancp0"
    "0.CommStatusMsg.CommState\022E\n\023gantry_driv"
    "e_status\030\013 \001(\0162(.analogic.ancp00.CommSta"
    "tusMsg.CommState\022G\n\025conveyor_drive_statu"
    "s\030\014 \001(\0162(.analogic.ancp00.CommStatusMsg."
    "CommState\022E\n\023temphumidity_status\030\r \001(\0162("
    ".analogic.ancp00.CommStatusMsg.CommState"
    "\022B\n\020powerlink_status\030\016 \001(\0162(.analogic.an"
    "cp00.CommStatusMsg.CommState\022>\n\014dcb_1_st"
    "atus\030\017 \001(\0162(.analogic.ancp00.CommStatusM"
    "sg.CommState\022>\n\014dcb_2_status\030\020 \001(\0162(.ana"
    "logic.ancp00.CommStatusMsg.CommState\022>\n\014"
    "dcb_3_status\030\021 \001(\0162(.analogic.ancp00.Com"
    "mStatusMsg.CommState\022>\n\014dcb_4_status\030\022 \001"
    "(\0162(.analogic.ancp00.CommStatusMsg.CommS"
    "tate\022>\n\014dcb_5_status\030\023 \001(\0162(.analogic.an"
    "cp00.CommStatusMsg.CommState\022D\n\022power_me"
    "ter_status\030\024 \001(\0162(.analogic.ancp00.CommS"
    "tatusMsg.CommState\022\031\n\021uplink_cmd_status\030"
    "\036 \001(\007\022\036\n\026uplink_readback_status\030\037 \001(\007\022\032\n"
    "\022network_ip_address\030( \001(\t\022 \n\030bhs_smartla"
    "ne_ip_address\030) \001(\t\022\032\n\022system_comm_onlin"
    "e\0302 \001(\010b\006proto3", 1815);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/Comm.proto", &protobuf_RegisterTypes);
  CommStatusMsg::default_instance_ = new CommStatusMsg();
  CommMonitorStatus::default_instance_ = new CommMonitorStatus();
  CommStatusMsg::default_instance_->InitAsDefaultInstance();
  CommMonitorStatus::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2fComm_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2fComm_2eproto {
  StaticDescriptorInitializer_proto_2fComm_2eproto() {
    protobuf_AddDesc_proto_2fComm_2eproto();
  }
} static_descriptor_initializer_proto_2fComm_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* CommStatusMsg_CommState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommStatusMsg_CommState_descriptor_;
}
bool CommStatusMsg_CommState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CommStatusMsg_CommState CommStatusMsg::NOT_CONFIGURED;
const CommStatusMsg_CommState CommStatusMsg::OFFLINE;
const CommStatusMsg_CommState CommStatusMsg::ONLINE;
const CommStatusMsg_CommState CommStatusMsg::CommState_MIN;
const CommStatusMsg_CommState CommStatusMsg::CommState_MAX;
const int CommStatusMsg::CommState_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommStatusMsg::kSubsysIdFieldNumber;
const int CommStatusMsg::kCommStateFieldNumber;
const int CommStatusMsg::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommStatusMsg::CommStatusMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analogic.ancp00.CommStatusMsg)
}

void CommStatusMsg::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CommStatusMsg::CommStatusMsg(const CommStatusMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analogic.ancp00.CommStatusMsg)
}

void CommStatusMsg::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  subsys_id_ = 0;
  comm_state_ = 0;
  data_ = 0u;
}

CommStatusMsg::~CommStatusMsg() {
  // @@protoc_insertion_point(destructor:analogic.ancp00.CommStatusMsg)
  SharedDtor();
}

void CommStatusMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CommStatusMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommStatusMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommStatusMsg_descriptor_;
}

const CommStatusMsg& CommStatusMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fComm_2eproto();
  return *default_instance_;
}

CommStatusMsg* CommStatusMsg::default_instance_ = NULL;

CommStatusMsg* CommStatusMsg::New(::google::protobuf::Arena* arena) const {
  CommStatusMsg* n = new CommStatusMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CommStatusMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:analogic.ancp00.CommStatusMsg)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CommStatusMsg, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CommStatusMsg*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(subsys_id_, data_);

#undef ZR_HELPER_
#undef ZR_

}

bool CommStatusMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analogic.ancp00.CommStatusMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .analogic.ancp00.SUBSYSTEM_ID subsys_id = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_subsys_id(static_cast< ::analogic::ancp00::SUBSYSTEM_ID >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_comm_state;
        break;
      }

      // optional .analogic.ancp00.CommStatusMsg.CommState comm_state = 2;
      case 2: {
        if (tag == 16) {
         parse_comm_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_comm_state(static_cast< ::analogic::ancp00::CommStatusMsg_CommState >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_data;
        break;
      }

      // optional fixed32 data = 3;
      case 3: {
        if (tag == 29) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &data_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:analogic.ancp00.CommStatusMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analogic.ancp00.CommStatusMsg)
  return false;
#undef DO_
}

void CommStatusMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analogic.ancp00.CommStatusMsg)
  // optional .analogic.ancp00.SUBSYSTEM_ID subsys_id = 1;
  if (this->subsys_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->subsys_id(), output);
  }

  // optional .analogic.ancp00.CommStatusMsg.CommState comm_state = 2;
  if (this->comm_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->comm_state(), output);
  }

  // optional fixed32 data = 3;
  if (this->data() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:analogic.ancp00.CommStatusMsg)
}

::google::protobuf::uint8* CommStatusMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analogic.ancp00.CommStatusMsg)
  // optional .analogic.ancp00.SUBSYSTEM_ID subsys_id = 1;
  if (this->subsys_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->subsys_id(), target);
  }

  // optional .analogic.ancp00.CommStatusMsg.CommState comm_state = 2;
  if (this->comm_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->comm_state(), target);
  }

  // optional fixed32 data = 3;
  if (this->data() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:analogic.ancp00.CommStatusMsg)
  return target;
}

int CommStatusMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:analogic.ancp00.CommStatusMsg)
  int total_size = 0;

  // optional .analogic.ancp00.SUBSYSTEM_ID subsys_id = 1;
  if (this->subsys_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->subsys_id());
  }

  // optional .analogic.ancp00.CommStatusMsg.CommState comm_state = 2;
  if (this->comm_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->comm_state());
  }

  // optional fixed32 data = 3;
  if (this->data() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommStatusMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analogic.ancp00.CommStatusMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CommStatusMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CommStatusMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analogic.ancp00.CommStatusMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analogic.ancp00.CommStatusMsg)
    MergeFrom(*source);
  }
}

void CommStatusMsg::MergeFrom(const CommStatusMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analogic.ancp00.CommStatusMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.subsys_id() != 0) {
    set_subsys_id(from.subsys_id());
  }
  if (from.comm_state() != 0) {
    set_comm_state(from.comm_state());
  }
  if (from.data() != 0) {
    set_data(from.data());
  }
}

void CommStatusMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analogic.ancp00.CommStatusMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommStatusMsg::CopyFrom(const CommStatusMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analogic.ancp00.CommStatusMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommStatusMsg::IsInitialized() const {

  return true;
}

void CommStatusMsg::Swap(CommStatusMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommStatusMsg::InternalSwap(CommStatusMsg* other) {
  std::swap(subsys_id_, other->subsys_id_);
  std::swap(comm_state_, other->comm_state_);
  std::swap(data_, other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CommStatusMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommStatusMsg_descriptor_;
  metadata.reflection = CommStatusMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CommStatusMsg

// optional .analogic.ancp00.SUBSYSTEM_ID subsys_id = 1;
void CommStatusMsg::clear_subsys_id() {
  subsys_id_ = 0;
}
 ::analogic::ancp00::SUBSYSTEM_ID CommStatusMsg::subsys_id() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.CommStatusMsg.subsys_id)
  return static_cast< ::analogic::ancp00::SUBSYSTEM_ID >(subsys_id_);
}
 void CommStatusMsg::set_subsys_id(::analogic::ancp00::SUBSYSTEM_ID value) {
  
  subsys_id_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.CommStatusMsg.subsys_id)
}

// optional .analogic.ancp00.CommStatusMsg.CommState comm_state = 2;
void CommStatusMsg::clear_comm_state() {
  comm_state_ = 0;
}
 ::analogic::ancp00::CommStatusMsg_CommState CommStatusMsg::comm_state() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.CommStatusMsg.comm_state)
  return static_cast< ::analogic::ancp00::CommStatusMsg_CommState >(comm_state_);
}
 void CommStatusMsg::set_comm_state(::analogic::ancp00::CommStatusMsg_CommState value) {
  
  comm_state_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.CommStatusMsg.comm_state)
}

// optional fixed32 data = 3;
void CommStatusMsg::clear_data() {
  data_ = 0u;
}
 ::google::protobuf::uint32 CommStatusMsg::data() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.CommStatusMsg.data)
  return data_;
}
 void CommStatusMsg::set_data(::google::protobuf::uint32 value) {
  
  data_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.CommStatusMsg.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommMonitorStatus::kNetworkStatusFieldNumber;
const int CommMonitorStatus::kBhsIntegratedLaneStatusFieldNumber;
const int CommMonitorStatus::kScannerControlComputerFieldNumber;
const int CommMonitorStatus::kUpsStatusFieldNumber;
const int CommMonitorStatus::kDrbStatusFieldNumber;
const int CommMonitorStatus::kSafetyioStatusFieldNumber;
const int CommMonitorStatus::kRotorControlBoardStatusFieldNumber;
const int CommMonitorStatus::kXrayStatusFieldNumber;
const int CommMonitorStatus::kSerialServer1StatusFieldNumber;
const int CommMonitorStatus::kSerialServer2StatusFieldNumber;
const int CommMonitorStatus::kGantryDriveStatusFieldNumber;
const int CommMonitorStatus::kConveyorDriveStatusFieldNumber;
const int CommMonitorStatus::kTemphumidityStatusFieldNumber;
const int CommMonitorStatus::kPowerlinkStatusFieldNumber;
const int CommMonitorStatus::kDcb1StatusFieldNumber;
const int CommMonitorStatus::kDcb2StatusFieldNumber;
const int CommMonitorStatus::kDcb3StatusFieldNumber;
const int CommMonitorStatus::kDcb4StatusFieldNumber;
const int CommMonitorStatus::kDcb5StatusFieldNumber;
const int CommMonitorStatus::kPowerMeterStatusFieldNumber;
const int CommMonitorStatus::kUplinkCmdStatusFieldNumber;
const int CommMonitorStatus::kUplinkReadbackStatusFieldNumber;
const int CommMonitorStatus::kNetworkIpAddressFieldNumber;
const int CommMonitorStatus::kBhsSmartlaneIpAddressFieldNumber;
const int CommMonitorStatus::kSystemCommOnlineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommMonitorStatus::CommMonitorStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analogic.ancp00.CommMonitorStatus)
}

void CommMonitorStatus::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CommMonitorStatus::CommMonitorStatus(const CommMonitorStatus& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analogic.ancp00.CommMonitorStatus)
}

void CommMonitorStatus::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  network_status_ = 0;
  bhs_integrated_lane_status_ = 0;
  scanner_control_computer_ = 0;
  ups_status_ = 0;
  drb_status_ = 0;
  safetyio_status_ = 0;
  rotor_control_board_status_ = 0;
  xray_status_ = 0;
  serial_server_1_status_ = 0;
  serial_server_2_status_ = 0;
  gantry_drive_status_ = 0;
  conveyor_drive_status_ = 0;
  temphumidity_status_ = 0;
  powerlink_status_ = 0;
  dcb_1_status_ = 0;
  dcb_2_status_ = 0;
  dcb_3_status_ = 0;
  dcb_4_status_ = 0;
  dcb_5_status_ = 0;
  power_meter_status_ = 0;
  uplink_cmd_status_ = 0u;
  uplink_readback_status_ = 0u;
  network_ip_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bhs_smartlane_ip_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  system_comm_online_ = false;
}

CommMonitorStatus::~CommMonitorStatus() {
  // @@protoc_insertion_point(destructor:analogic.ancp00.CommMonitorStatus)
  SharedDtor();
}

void CommMonitorStatus::SharedDtor() {
  network_ip_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bhs_smartlane_ip_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CommMonitorStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommMonitorStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommMonitorStatus_descriptor_;
}

const CommMonitorStatus& CommMonitorStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fComm_2eproto();
  return *default_instance_;
}

CommMonitorStatus* CommMonitorStatus::default_instance_ = NULL;

CommMonitorStatus* CommMonitorStatus::New(::google::protobuf::Arena* arena) const {
  CommMonitorStatus* n = new CommMonitorStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CommMonitorStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:analogic.ancp00.CommMonitorStatus)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CommMonitorStatus, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CommMonitorStatus*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(network_status_, xray_status_);
  ZR_(serial_server_1_status_, dcb_2_status_);
  ZR_(dcb_3_status_, uplink_readback_status_);
  network_ip_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bhs_smartlane_ip_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  system_comm_online_ = false;

#undef ZR_HELPER_
#undef ZR_

}

bool CommMonitorStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analogic.ancp00.CommMonitorStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .analogic.ancp00.CommStatusMsg.CommState network_status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_network_status(static_cast< ::analogic::ancp00::CommStatusMsg_CommState >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_bhs_integrated_lane_status;
        break;
      }

      // optional .analogic.ancp00.CommStatusMsg.CommState bhs_integrated_lane_status = 2;
      case 2: {
        if (tag == 16) {
         parse_bhs_integrated_lane_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_bhs_integrated_lane_status(static_cast< ::analogic::ancp00::CommStatusMsg_CommState >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_scanner_control_computer;
        break;
      }

      // optional .analogic.ancp00.CommStatusMsg.CommState scanner_control_computer = 3;
      case 3: {
        if (tag == 24) {
         parse_scanner_control_computer:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_scanner_control_computer(static_cast< ::analogic::ancp00::CommStatusMsg_CommState >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ups_status;
        break;
      }

      // optional .analogic.ancp00.CommStatusMsg.CommState ups_status = 4;
      case 4: {
        if (tag == 32) {
         parse_ups_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ups_status(static_cast< ::analogic::ancp00::CommStatusMsg_CommState >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_drb_status;
        break;
      }

      // optional .analogic.ancp00.CommStatusMsg.CommState drb_status = 5;
      case 5: {
        if (tag == 40) {
         parse_drb_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_drb_status(static_cast< ::analogic::ancp00::CommStatusMsg_CommState >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_safetyio_status;
        break;
      }

      // optional .analogic.ancp00.CommStatusMsg.CommState safetyio_status = 6;
      case 6: {
        if (tag == 48) {
         parse_safetyio_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_safetyio_status(static_cast< ::analogic::ancp00::CommStatusMsg_CommState >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_rotor_control_board_status;
        break;
      }

      // optional .analogic.ancp00.CommStatusMsg.CommState rotor_control_board_status = 7;
      case 7: {
        if (tag == 56) {
         parse_rotor_control_board_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_rotor_control_board_status(static_cast< ::analogic::ancp00::CommStatusMsg_CommState >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_xray_status;
        break;
      }

      // optional .analogic.ancp00.CommStatusMsg.CommState xray_status = 8;
      case 8: {
        if (tag == 64) {
         parse_xray_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_xray_status(static_cast< ::analogic::ancp00::CommStatusMsg_CommState >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_serial_server_1_status;
        break;
      }

      // optional .analogic.ancp00.CommStatusMsg.CommState serial_server_1_status = 9;
      case 9: {
        if (tag == 72) {
         parse_serial_server_1_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_serial_server_1_status(static_cast< ::analogic::ancp00::CommStatusMsg_CommState >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_serial_server_2_status;
        break;
      }

      // optional .analogic.ancp00.CommStatusMsg.CommState serial_server_2_status = 10;
      case 10: {
        if (tag == 80) {
         parse_serial_server_2_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_serial_server_2_status(static_cast< ::analogic::ancp00::CommStatusMsg_CommState >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_gantry_drive_status;
        break;
      }

      // optional .analogic.ancp00.CommStatusMsg.CommState gantry_drive_status = 11;
      case 11: {
        if (tag == 88) {
         parse_gantry_drive_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_gantry_drive_status(static_cast< ::analogic::ancp00::CommStatusMsg_CommState >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_conveyor_drive_status;
        break;
      }

      // optional .analogic.ancp00.CommStatusMsg.CommState conveyor_drive_status = 12;
      case 12: {
        if (tag == 96) {
         parse_conveyor_drive_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_conveyor_drive_status(static_cast< ::analogic::ancp00::CommStatusMsg_CommState >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_temphumidity_status;
        break;
      }

      // optional .analogic.ancp00.CommStatusMsg.CommState temphumidity_status = 13;
      case 13: {
        if (tag == 104) {
         parse_temphumidity_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_temphumidity_status(static_cast< ::analogic::ancp00::CommStatusMsg_CommState >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_powerlink_status;
        break;
      }

      // optional .analogic.ancp00.CommStatusMsg.CommState powerlink_status = 14;
      case 14: {
        if (tag == 112) {
         parse_powerlink_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_powerlink_status(static_cast< ::analogic::ancp00::CommStatusMsg_CommState >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_dcb_1_status;
        break;
      }

      // optional .analogic.ancp00.CommStatusMsg.CommState dcb_1_status = 15;
      case 15: {
        if (tag == 120) {
         parse_dcb_1_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_dcb_1_status(static_cast< ::analogic::ancp00::CommStatusMsg_CommState >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_dcb_2_status;
        break;
      }

      // optional .analogic.ancp00.CommStatusMsg.CommState dcb_2_status = 16;
      case 16: {
        if (tag == 128) {
         parse_dcb_2_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_dcb_2_status(static_cast< ::analogic::ancp00::CommStatusMsg_CommState >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_dcb_3_status;
        break;
      }

      // optional .analogic.ancp00.CommStatusMsg.CommState dcb_3_status = 17;
      case 17: {
        if (tag == 136) {
         parse_dcb_3_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_dcb_3_status(static_cast< ::analogic::ancp00::CommStatusMsg_CommState >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_dcb_4_status;
        break;
      }

      // optional .analogic.ancp00.CommStatusMsg.CommState dcb_4_status = 18;
      case 18: {
        if (tag == 144) {
         parse_dcb_4_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_dcb_4_status(static_cast< ::analogic::ancp00::CommStatusMsg_CommState >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_dcb_5_status;
        break;
      }

      // optional .analogic.ancp00.CommStatusMsg.CommState dcb_5_status = 19;
      case 19: {
        if (tag == 152) {
         parse_dcb_5_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_dcb_5_status(static_cast< ::analogic::ancp00::CommStatusMsg_CommState >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_power_meter_status;
        break;
      }

      // optional .analogic.ancp00.CommStatusMsg.CommState power_meter_status = 20;
      case 20: {
        if (tag == 160) {
         parse_power_meter_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_power_meter_status(static_cast< ::analogic::ancp00::CommStatusMsg_CommState >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(245)) goto parse_uplink_cmd_status;
        break;
      }

      // optional fixed32 uplink_cmd_status = 30;
      case 30: {
        if (tag == 245) {
         parse_uplink_cmd_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &uplink_cmd_status_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(253)) goto parse_uplink_readback_status;
        break;
      }

      // optional fixed32 uplink_readback_status = 31;
      case 31: {
        if (tag == 253) {
         parse_uplink_readback_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &uplink_readback_status_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(322)) goto parse_network_ip_address;
        break;
      }

      // optional string network_ip_address = 40;
      case 40: {
        if (tag == 322) {
         parse_network_ip_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_network_ip_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->network_ip_address().data(), this->network_ip_address().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.CommMonitorStatus.network_ip_address"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(330)) goto parse_bhs_smartlane_ip_address;
        break;
      }

      // optional string bhs_smartlane_ip_address = 41;
      case 41: {
        if (tag == 330) {
         parse_bhs_smartlane_ip_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bhs_smartlane_ip_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bhs_smartlane_ip_address().data(), this->bhs_smartlane_ip_address().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.CommMonitorStatus.bhs_smartlane_ip_address"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(400)) goto parse_system_comm_online;
        break;
      }

      // optional bool system_comm_online = 50;
      case 50: {
        if (tag == 400) {
         parse_system_comm_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &system_comm_online_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:analogic.ancp00.CommMonitorStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analogic.ancp00.CommMonitorStatus)
  return false;
#undef DO_
}

void CommMonitorStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analogic.ancp00.CommMonitorStatus)
  // optional .analogic.ancp00.CommStatusMsg.CommState network_status = 1;
  if (this->network_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->network_status(), output);
  }

  // optional .analogic.ancp00.CommStatusMsg.CommState bhs_integrated_lane_status = 2;
  if (this->bhs_integrated_lane_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->bhs_integrated_lane_status(), output);
  }

  // optional .analogic.ancp00.CommStatusMsg.CommState scanner_control_computer = 3;
  if (this->scanner_control_computer() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->scanner_control_computer(), output);
  }

  // optional .analogic.ancp00.CommStatusMsg.CommState ups_status = 4;
  if (this->ups_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->ups_status(), output);
  }

  // optional .analogic.ancp00.CommStatusMsg.CommState drb_status = 5;
  if (this->drb_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->drb_status(), output);
  }

  // optional .analogic.ancp00.CommStatusMsg.CommState safetyio_status = 6;
  if (this->safetyio_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->safetyio_status(), output);
  }

  // optional .analogic.ancp00.CommStatusMsg.CommState rotor_control_board_status = 7;
  if (this->rotor_control_board_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->rotor_control_board_status(), output);
  }

  // optional .analogic.ancp00.CommStatusMsg.CommState xray_status = 8;
  if (this->xray_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->xray_status(), output);
  }

  // optional .analogic.ancp00.CommStatusMsg.CommState serial_server_1_status = 9;
  if (this->serial_server_1_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->serial_server_1_status(), output);
  }

  // optional .analogic.ancp00.CommStatusMsg.CommState serial_server_2_status = 10;
  if (this->serial_server_2_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->serial_server_2_status(), output);
  }

  // optional .analogic.ancp00.CommStatusMsg.CommState gantry_drive_status = 11;
  if (this->gantry_drive_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->gantry_drive_status(), output);
  }

  // optional .analogic.ancp00.CommStatusMsg.CommState conveyor_drive_status = 12;
  if (this->conveyor_drive_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->conveyor_drive_status(), output);
  }

  // optional .analogic.ancp00.CommStatusMsg.CommState temphumidity_status = 13;
  if (this->temphumidity_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->temphumidity_status(), output);
  }

  // optional .analogic.ancp00.CommStatusMsg.CommState powerlink_status = 14;
  if (this->powerlink_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->powerlink_status(), output);
  }

  // optional .analogic.ancp00.CommStatusMsg.CommState dcb_1_status = 15;
  if (this->dcb_1_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->dcb_1_status(), output);
  }

  // optional .analogic.ancp00.CommStatusMsg.CommState dcb_2_status = 16;
  if (this->dcb_2_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->dcb_2_status(), output);
  }

  // optional .analogic.ancp00.CommStatusMsg.CommState dcb_3_status = 17;
  if (this->dcb_3_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->dcb_3_status(), output);
  }

  // optional .analogic.ancp00.CommStatusMsg.CommState dcb_4_status = 18;
  if (this->dcb_4_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      18, this->dcb_4_status(), output);
  }

  // optional .analogic.ancp00.CommStatusMsg.CommState dcb_5_status = 19;
  if (this->dcb_5_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      19, this->dcb_5_status(), output);
  }

  // optional .analogic.ancp00.CommStatusMsg.CommState power_meter_status = 20;
  if (this->power_meter_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      20, this->power_meter_status(), output);
  }

  // optional fixed32 uplink_cmd_status = 30;
  if (this->uplink_cmd_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(30, this->uplink_cmd_status(), output);
  }

  // optional fixed32 uplink_readback_status = 31;
  if (this->uplink_readback_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(31, this->uplink_readback_status(), output);
  }

  // optional string network_ip_address = 40;
  if (this->network_ip_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->network_ip_address().data(), this->network_ip_address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.CommMonitorStatus.network_ip_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      40, this->network_ip_address(), output);
  }

  // optional string bhs_smartlane_ip_address = 41;
  if (this->bhs_smartlane_ip_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bhs_smartlane_ip_address().data(), this->bhs_smartlane_ip_address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.CommMonitorStatus.bhs_smartlane_ip_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      41, this->bhs_smartlane_ip_address(), output);
  }

  // optional bool system_comm_online = 50;
  if (this->system_comm_online() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(50, this->system_comm_online(), output);
  }

  // @@protoc_insertion_point(serialize_end:analogic.ancp00.CommMonitorStatus)
}

::google::protobuf::uint8* CommMonitorStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analogic.ancp00.CommMonitorStatus)
  // optional .analogic.ancp00.CommStatusMsg.CommState network_status = 1;
  if (this->network_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->network_status(), target);
  }

  // optional .analogic.ancp00.CommStatusMsg.CommState bhs_integrated_lane_status = 2;
  if (this->bhs_integrated_lane_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->bhs_integrated_lane_status(), target);
  }

  // optional .analogic.ancp00.CommStatusMsg.CommState scanner_control_computer = 3;
  if (this->scanner_control_computer() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->scanner_control_computer(), target);
  }

  // optional .analogic.ancp00.CommStatusMsg.CommState ups_status = 4;
  if (this->ups_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->ups_status(), target);
  }

  // optional .analogic.ancp00.CommStatusMsg.CommState drb_status = 5;
  if (this->drb_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->drb_status(), target);
  }

  // optional .analogic.ancp00.CommStatusMsg.CommState safetyio_status = 6;
  if (this->safetyio_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->safetyio_status(), target);
  }

  // optional .analogic.ancp00.CommStatusMsg.CommState rotor_control_board_status = 7;
  if (this->rotor_control_board_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->rotor_control_board_status(), target);
  }

  // optional .analogic.ancp00.CommStatusMsg.CommState xray_status = 8;
  if (this->xray_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->xray_status(), target);
  }

  // optional .analogic.ancp00.CommStatusMsg.CommState serial_server_1_status = 9;
  if (this->serial_server_1_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->serial_server_1_status(), target);
  }

  // optional .analogic.ancp00.CommStatusMsg.CommState serial_server_2_status = 10;
  if (this->serial_server_2_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->serial_server_2_status(), target);
  }

  // optional .analogic.ancp00.CommStatusMsg.CommState gantry_drive_status = 11;
  if (this->gantry_drive_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->gantry_drive_status(), target);
  }

  // optional .analogic.ancp00.CommStatusMsg.CommState conveyor_drive_status = 12;
  if (this->conveyor_drive_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->conveyor_drive_status(), target);
  }

  // optional .analogic.ancp00.CommStatusMsg.CommState temphumidity_status = 13;
  if (this->temphumidity_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->temphumidity_status(), target);
  }

  // optional .analogic.ancp00.CommStatusMsg.CommState powerlink_status = 14;
  if (this->powerlink_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->powerlink_status(), target);
  }

  // optional .analogic.ancp00.CommStatusMsg.CommState dcb_1_status = 15;
  if (this->dcb_1_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->dcb_1_status(), target);
  }

  // optional .analogic.ancp00.CommStatusMsg.CommState dcb_2_status = 16;
  if (this->dcb_2_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      16, this->dcb_2_status(), target);
  }

  // optional .analogic.ancp00.CommStatusMsg.CommState dcb_3_status = 17;
  if (this->dcb_3_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      17, this->dcb_3_status(), target);
  }

  // optional .analogic.ancp00.CommStatusMsg.CommState dcb_4_status = 18;
  if (this->dcb_4_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      18, this->dcb_4_status(), target);
  }

  // optional .analogic.ancp00.CommStatusMsg.CommState dcb_5_status = 19;
  if (this->dcb_5_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      19, this->dcb_5_status(), target);
  }

  // optional .analogic.ancp00.CommStatusMsg.CommState power_meter_status = 20;
  if (this->power_meter_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      20, this->power_meter_status(), target);
  }

  // optional fixed32 uplink_cmd_status = 30;
  if (this->uplink_cmd_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(30, this->uplink_cmd_status(), target);
  }

  // optional fixed32 uplink_readback_status = 31;
  if (this->uplink_readback_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(31, this->uplink_readback_status(), target);
  }

  // optional string network_ip_address = 40;
  if (this->network_ip_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->network_ip_address().data(), this->network_ip_address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.CommMonitorStatus.network_ip_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        40, this->network_ip_address(), target);
  }

  // optional string bhs_smartlane_ip_address = 41;
  if (this->bhs_smartlane_ip_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bhs_smartlane_ip_address().data(), this->bhs_smartlane_ip_address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.CommMonitorStatus.bhs_smartlane_ip_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        41, this->bhs_smartlane_ip_address(), target);
  }

  // optional bool system_comm_online = 50;
  if (this->system_comm_online() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(50, this->system_comm_online(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:analogic.ancp00.CommMonitorStatus)
  return target;
}

int CommMonitorStatus::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:analogic.ancp00.CommMonitorStatus)
  int total_size = 0;

  // optional .analogic.ancp00.CommStatusMsg.CommState network_status = 1;
  if (this->network_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->network_status());
  }

  // optional .analogic.ancp00.CommStatusMsg.CommState bhs_integrated_lane_status = 2;
  if (this->bhs_integrated_lane_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->bhs_integrated_lane_status());
  }

  // optional .analogic.ancp00.CommStatusMsg.CommState scanner_control_computer = 3;
  if (this->scanner_control_computer() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->scanner_control_computer());
  }

  // optional .analogic.ancp00.CommStatusMsg.CommState ups_status = 4;
  if (this->ups_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ups_status());
  }

  // optional .analogic.ancp00.CommStatusMsg.CommState drb_status = 5;
  if (this->drb_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->drb_status());
  }

  // optional .analogic.ancp00.CommStatusMsg.CommState safetyio_status = 6;
  if (this->safetyio_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->safetyio_status());
  }

  // optional .analogic.ancp00.CommStatusMsg.CommState rotor_control_board_status = 7;
  if (this->rotor_control_board_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->rotor_control_board_status());
  }

  // optional .analogic.ancp00.CommStatusMsg.CommState xray_status = 8;
  if (this->xray_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->xray_status());
  }

  // optional .analogic.ancp00.CommStatusMsg.CommState serial_server_1_status = 9;
  if (this->serial_server_1_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->serial_server_1_status());
  }

  // optional .analogic.ancp00.CommStatusMsg.CommState serial_server_2_status = 10;
  if (this->serial_server_2_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->serial_server_2_status());
  }

  // optional .analogic.ancp00.CommStatusMsg.CommState gantry_drive_status = 11;
  if (this->gantry_drive_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->gantry_drive_status());
  }

  // optional .analogic.ancp00.CommStatusMsg.CommState conveyor_drive_status = 12;
  if (this->conveyor_drive_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->conveyor_drive_status());
  }

  // optional .analogic.ancp00.CommStatusMsg.CommState temphumidity_status = 13;
  if (this->temphumidity_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->temphumidity_status());
  }

  // optional .analogic.ancp00.CommStatusMsg.CommState powerlink_status = 14;
  if (this->powerlink_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->powerlink_status());
  }

  // optional .analogic.ancp00.CommStatusMsg.CommState dcb_1_status = 15;
  if (this->dcb_1_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->dcb_1_status());
  }

  // optional .analogic.ancp00.CommStatusMsg.CommState dcb_2_status = 16;
  if (this->dcb_2_status() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->dcb_2_status());
  }

  // optional .analogic.ancp00.CommStatusMsg.CommState dcb_3_status = 17;
  if (this->dcb_3_status() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->dcb_3_status());
  }

  // optional .analogic.ancp00.CommStatusMsg.CommState dcb_4_status = 18;
  if (this->dcb_4_status() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->dcb_4_status());
  }

  // optional .analogic.ancp00.CommStatusMsg.CommState dcb_5_status = 19;
  if (this->dcb_5_status() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->dcb_5_status());
  }

  // optional .analogic.ancp00.CommStatusMsg.CommState power_meter_status = 20;
  if (this->power_meter_status() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->power_meter_status());
  }

  // optional fixed32 uplink_cmd_status = 30;
  if (this->uplink_cmd_status() != 0) {
    total_size += 2 + 4;
  }

  // optional fixed32 uplink_readback_status = 31;
  if (this->uplink_readback_status() != 0) {
    total_size += 2 + 4;
  }

  // optional string network_ip_address = 40;
  if (this->network_ip_address().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->network_ip_address());
  }

  // optional string bhs_smartlane_ip_address = 41;
  if (this->bhs_smartlane_ip_address().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bhs_smartlane_ip_address());
  }

  // optional bool system_comm_online = 50;
  if (this->system_comm_online() != 0) {
    total_size += 2 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommMonitorStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analogic.ancp00.CommMonitorStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CommMonitorStatus* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CommMonitorStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analogic.ancp00.CommMonitorStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analogic.ancp00.CommMonitorStatus)
    MergeFrom(*source);
  }
}

void CommMonitorStatus::MergeFrom(const CommMonitorStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analogic.ancp00.CommMonitorStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.network_status() != 0) {
    set_network_status(from.network_status());
  }
  if (from.bhs_integrated_lane_status() != 0) {
    set_bhs_integrated_lane_status(from.bhs_integrated_lane_status());
  }
  if (from.scanner_control_computer() != 0) {
    set_scanner_control_computer(from.scanner_control_computer());
  }
  if (from.ups_status() != 0) {
    set_ups_status(from.ups_status());
  }
  if (from.drb_status() != 0) {
    set_drb_status(from.drb_status());
  }
  if (from.safetyio_status() != 0) {
    set_safetyio_status(from.safetyio_status());
  }
  if (from.rotor_control_board_status() != 0) {
    set_rotor_control_board_status(from.rotor_control_board_status());
  }
  if (from.xray_status() != 0) {
    set_xray_status(from.xray_status());
  }
  if (from.serial_server_1_status() != 0) {
    set_serial_server_1_status(from.serial_server_1_status());
  }
  if (from.serial_server_2_status() != 0) {
    set_serial_server_2_status(from.serial_server_2_status());
  }
  if (from.gantry_drive_status() != 0) {
    set_gantry_drive_status(from.gantry_drive_status());
  }
  if (from.conveyor_drive_status() != 0) {
    set_conveyor_drive_status(from.conveyor_drive_status());
  }
  if (from.temphumidity_status() != 0) {
    set_temphumidity_status(from.temphumidity_status());
  }
  if (from.powerlink_status() != 0) {
    set_powerlink_status(from.powerlink_status());
  }
  if (from.dcb_1_status() != 0) {
    set_dcb_1_status(from.dcb_1_status());
  }
  if (from.dcb_2_status() != 0) {
    set_dcb_2_status(from.dcb_2_status());
  }
  if (from.dcb_3_status() != 0) {
    set_dcb_3_status(from.dcb_3_status());
  }
  if (from.dcb_4_status() != 0) {
    set_dcb_4_status(from.dcb_4_status());
  }
  if (from.dcb_5_status() != 0) {
    set_dcb_5_status(from.dcb_5_status());
  }
  if (from.power_meter_status() != 0) {
    set_power_meter_status(from.power_meter_status());
  }
  if (from.uplink_cmd_status() != 0) {
    set_uplink_cmd_status(from.uplink_cmd_status());
  }
  if (from.uplink_readback_status() != 0) {
    set_uplink_readback_status(from.uplink_readback_status());
  }
  if (from.network_ip_address().size() > 0) {

    network_ip_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.network_ip_address_);
  }
  if (from.bhs_smartlane_ip_address().size() > 0) {

    bhs_smartlane_ip_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bhs_smartlane_ip_address_);
  }
  if (from.system_comm_online() != 0) {
    set_system_comm_online(from.system_comm_online());
  }
}

void CommMonitorStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analogic.ancp00.CommMonitorStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommMonitorStatus::CopyFrom(const CommMonitorStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analogic.ancp00.CommMonitorStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommMonitorStatus::IsInitialized() const {

  return true;
}

void CommMonitorStatus::Swap(CommMonitorStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommMonitorStatus::InternalSwap(CommMonitorStatus* other) {
  std::swap(network_status_, other->network_status_);
  std::swap(bhs_integrated_lane_status_, other->bhs_integrated_lane_status_);
  std::swap(scanner_control_computer_, other->scanner_control_computer_);
  std::swap(ups_status_, other->ups_status_);
  std::swap(drb_status_, other->drb_status_);
  std::swap(safetyio_status_, other->safetyio_status_);
  std::swap(rotor_control_board_status_, other->rotor_control_board_status_);
  std::swap(xray_status_, other->xray_status_);
  std::swap(serial_server_1_status_, other->serial_server_1_status_);
  std::swap(serial_server_2_status_, other->serial_server_2_status_);
  std::swap(gantry_drive_status_, other->gantry_drive_status_);
  std::swap(conveyor_drive_status_, other->conveyor_drive_status_);
  std::swap(temphumidity_status_, other->temphumidity_status_);
  std::swap(powerlink_status_, other->powerlink_status_);
  std::swap(dcb_1_status_, other->dcb_1_status_);
  std::swap(dcb_2_status_, other->dcb_2_status_);
  std::swap(dcb_3_status_, other->dcb_3_status_);
  std::swap(dcb_4_status_, other->dcb_4_status_);
  std::swap(dcb_5_status_, other->dcb_5_status_);
  std::swap(power_meter_status_, other->power_meter_status_);
  std::swap(uplink_cmd_status_, other->uplink_cmd_status_);
  std::swap(uplink_readback_status_, other->uplink_readback_status_);
  network_ip_address_.Swap(&other->network_ip_address_);
  bhs_smartlane_ip_address_.Swap(&other->bhs_smartlane_ip_address_);
  std::swap(system_comm_online_, other->system_comm_online_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CommMonitorStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommMonitorStatus_descriptor_;
  metadata.reflection = CommMonitorStatus_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CommMonitorStatus

// optional .analogic.ancp00.CommStatusMsg.CommState network_status = 1;
void CommMonitorStatus::clear_network_status() {
  network_status_ = 0;
}
 ::analogic::ancp00::CommStatusMsg_CommState CommMonitorStatus::network_status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.CommMonitorStatus.network_status)
  return static_cast< ::analogic::ancp00::CommStatusMsg_CommState >(network_status_);
}
 void CommMonitorStatus::set_network_status(::analogic::ancp00::CommStatusMsg_CommState value) {
  
  network_status_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.CommMonitorStatus.network_status)
}

// optional .analogic.ancp00.CommStatusMsg.CommState bhs_integrated_lane_status = 2;
void CommMonitorStatus::clear_bhs_integrated_lane_status() {
  bhs_integrated_lane_status_ = 0;
}
 ::analogic::ancp00::CommStatusMsg_CommState CommMonitorStatus::bhs_integrated_lane_status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.CommMonitorStatus.bhs_integrated_lane_status)
  return static_cast< ::analogic::ancp00::CommStatusMsg_CommState >(bhs_integrated_lane_status_);
}
 void CommMonitorStatus::set_bhs_integrated_lane_status(::analogic::ancp00::CommStatusMsg_CommState value) {
  
  bhs_integrated_lane_status_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.CommMonitorStatus.bhs_integrated_lane_status)
}

// optional .analogic.ancp00.CommStatusMsg.CommState scanner_control_computer = 3;
void CommMonitorStatus::clear_scanner_control_computer() {
  scanner_control_computer_ = 0;
}
 ::analogic::ancp00::CommStatusMsg_CommState CommMonitorStatus::scanner_control_computer() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.CommMonitorStatus.scanner_control_computer)
  return static_cast< ::analogic::ancp00::CommStatusMsg_CommState >(scanner_control_computer_);
}
 void CommMonitorStatus::set_scanner_control_computer(::analogic::ancp00::CommStatusMsg_CommState value) {
  
  scanner_control_computer_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.CommMonitorStatus.scanner_control_computer)
}

// optional .analogic.ancp00.CommStatusMsg.CommState ups_status = 4;
void CommMonitorStatus::clear_ups_status() {
  ups_status_ = 0;
}
 ::analogic::ancp00::CommStatusMsg_CommState CommMonitorStatus::ups_status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.CommMonitorStatus.ups_status)
  return static_cast< ::analogic::ancp00::CommStatusMsg_CommState >(ups_status_);
}
 void CommMonitorStatus::set_ups_status(::analogic::ancp00::CommStatusMsg_CommState value) {
  
  ups_status_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.CommMonitorStatus.ups_status)
}

// optional .analogic.ancp00.CommStatusMsg.CommState drb_status = 5;
void CommMonitorStatus::clear_drb_status() {
  drb_status_ = 0;
}
 ::analogic::ancp00::CommStatusMsg_CommState CommMonitorStatus::drb_status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.CommMonitorStatus.drb_status)
  return static_cast< ::analogic::ancp00::CommStatusMsg_CommState >(drb_status_);
}
 void CommMonitorStatus::set_drb_status(::analogic::ancp00::CommStatusMsg_CommState value) {
  
  drb_status_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.CommMonitorStatus.drb_status)
}

// optional .analogic.ancp00.CommStatusMsg.CommState safetyio_status = 6;
void CommMonitorStatus::clear_safetyio_status() {
  safetyio_status_ = 0;
}
 ::analogic::ancp00::CommStatusMsg_CommState CommMonitorStatus::safetyio_status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.CommMonitorStatus.safetyio_status)
  return static_cast< ::analogic::ancp00::CommStatusMsg_CommState >(safetyio_status_);
}
 void CommMonitorStatus::set_safetyio_status(::analogic::ancp00::CommStatusMsg_CommState value) {
  
  safetyio_status_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.CommMonitorStatus.safetyio_status)
}

// optional .analogic.ancp00.CommStatusMsg.CommState rotor_control_board_status = 7;
void CommMonitorStatus::clear_rotor_control_board_status() {
  rotor_control_board_status_ = 0;
}
 ::analogic::ancp00::CommStatusMsg_CommState CommMonitorStatus::rotor_control_board_status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.CommMonitorStatus.rotor_control_board_status)
  return static_cast< ::analogic::ancp00::CommStatusMsg_CommState >(rotor_control_board_status_);
}
 void CommMonitorStatus::set_rotor_control_board_status(::analogic::ancp00::CommStatusMsg_CommState value) {
  
  rotor_control_board_status_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.CommMonitorStatus.rotor_control_board_status)
}

// optional .analogic.ancp00.CommStatusMsg.CommState xray_status = 8;
void CommMonitorStatus::clear_xray_status() {
  xray_status_ = 0;
}
 ::analogic::ancp00::CommStatusMsg_CommState CommMonitorStatus::xray_status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.CommMonitorStatus.xray_status)
  return static_cast< ::analogic::ancp00::CommStatusMsg_CommState >(xray_status_);
}
 void CommMonitorStatus::set_xray_status(::analogic::ancp00::CommStatusMsg_CommState value) {
  
  xray_status_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.CommMonitorStatus.xray_status)
}

// optional .analogic.ancp00.CommStatusMsg.CommState serial_server_1_status = 9;
void CommMonitorStatus::clear_serial_server_1_status() {
  serial_server_1_status_ = 0;
}
 ::analogic::ancp00::CommStatusMsg_CommState CommMonitorStatus::serial_server_1_status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.CommMonitorStatus.serial_server_1_status)
  return static_cast< ::analogic::ancp00::CommStatusMsg_CommState >(serial_server_1_status_);
}
 void CommMonitorStatus::set_serial_server_1_status(::analogic::ancp00::CommStatusMsg_CommState value) {
  
  serial_server_1_status_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.CommMonitorStatus.serial_server_1_status)
}

// optional .analogic.ancp00.CommStatusMsg.CommState serial_server_2_status = 10;
void CommMonitorStatus::clear_serial_server_2_status() {
  serial_server_2_status_ = 0;
}
 ::analogic::ancp00::CommStatusMsg_CommState CommMonitorStatus::serial_server_2_status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.CommMonitorStatus.serial_server_2_status)
  return static_cast< ::analogic::ancp00::CommStatusMsg_CommState >(serial_server_2_status_);
}
 void CommMonitorStatus::set_serial_server_2_status(::analogic::ancp00::CommStatusMsg_CommState value) {
  
  serial_server_2_status_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.CommMonitorStatus.serial_server_2_status)
}

// optional .analogic.ancp00.CommStatusMsg.CommState gantry_drive_status = 11;
void CommMonitorStatus::clear_gantry_drive_status() {
  gantry_drive_status_ = 0;
}
 ::analogic::ancp00::CommStatusMsg_CommState CommMonitorStatus::gantry_drive_status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.CommMonitorStatus.gantry_drive_status)
  return static_cast< ::analogic::ancp00::CommStatusMsg_CommState >(gantry_drive_status_);
}
 void CommMonitorStatus::set_gantry_drive_status(::analogic::ancp00::CommStatusMsg_CommState value) {
  
  gantry_drive_status_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.CommMonitorStatus.gantry_drive_status)
}

// optional .analogic.ancp00.CommStatusMsg.CommState conveyor_drive_status = 12;
void CommMonitorStatus::clear_conveyor_drive_status() {
  conveyor_drive_status_ = 0;
}
 ::analogic::ancp00::CommStatusMsg_CommState CommMonitorStatus::conveyor_drive_status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.CommMonitorStatus.conveyor_drive_status)
  return static_cast< ::analogic::ancp00::CommStatusMsg_CommState >(conveyor_drive_status_);
}
 void CommMonitorStatus::set_conveyor_drive_status(::analogic::ancp00::CommStatusMsg_CommState value) {
  
  conveyor_drive_status_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.CommMonitorStatus.conveyor_drive_status)
}

// optional .analogic.ancp00.CommStatusMsg.CommState temphumidity_status = 13;
void CommMonitorStatus::clear_temphumidity_status() {
  temphumidity_status_ = 0;
}
 ::analogic::ancp00::CommStatusMsg_CommState CommMonitorStatus::temphumidity_status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.CommMonitorStatus.temphumidity_status)
  return static_cast< ::analogic::ancp00::CommStatusMsg_CommState >(temphumidity_status_);
}
 void CommMonitorStatus::set_temphumidity_status(::analogic::ancp00::CommStatusMsg_CommState value) {
  
  temphumidity_status_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.CommMonitorStatus.temphumidity_status)
}

// optional .analogic.ancp00.CommStatusMsg.CommState powerlink_status = 14;
void CommMonitorStatus::clear_powerlink_status() {
  powerlink_status_ = 0;
}
 ::analogic::ancp00::CommStatusMsg_CommState CommMonitorStatus::powerlink_status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.CommMonitorStatus.powerlink_status)
  return static_cast< ::analogic::ancp00::CommStatusMsg_CommState >(powerlink_status_);
}
 void CommMonitorStatus::set_powerlink_status(::analogic::ancp00::CommStatusMsg_CommState value) {
  
  powerlink_status_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.CommMonitorStatus.powerlink_status)
}

// optional .analogic.ancp00.CommStatusMsg.CommState dcb_1_status = 15;
void CommMonitorStatus::clear_dcb_1_status() {
  dcb_1_status_ = 0;
}
 ::analogic::ancp00::CommStatusMsg_CommState CommMonitorStatus::dcb_1_status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.CommMonitorStatus.dcb_1_status)
  return static_cast< ::analogic::ancp00::CommStatusMsg_CommState >(dcb_1_status_);
}
 void CommMonitorStatus::set_dcb_1_status(::analogic::ancp00::CommStatusMsg_CommState value) {
  
  dcb_1_status_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.CommMonitorStatus.dcb_1_status)
}

// optional .analogic.ancp00.CommStatusMsg.CommState dcb_2_status = 16;
void CommMonitorStatus::clear_dcb_2_status() {
  dcb_2_status_ = 0;
}
 ::analogic::ancp00::CommStatusMsg_CommState CommMonitorStatus::dcb_2_status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.CommMonitorStatus.dcb_2_status)
  return static_cast< ::analogic::ancp00::CommStatusMsg_CommState >(dcb_2_status_);
}
 void CommMonitorStatus::set_dcb_2_status(::analogic::ancp00::CommStatusMsg_CommState value) {
  
  dcb_2_status_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.CommMonitorStatus.dcb_2_status)
}

// optional .analogic.ancp00.CommStatusMsg.CommState dcb_3_status = 17;
void CommMonitorStatus::clear_dcb_3_status() {
  dcb_3_status_ = 0;
}
 ::analogic::ancp00::CommStatusMsg_CommState CommMonitorStatus::dcb_3_status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.CommMonitorStatus.dcb_3_status)
  return static_cast< ::analogic::ancp00::CommStatusMsg_CommState >(dcb_3_status_);
}
 void CommMonitorStatus::set_dcb_3_status(::analogic::ancp00::CommStatusMsg_CommState value) {
  
  dcb_3_status_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.CommMonitorStatus.dcb_3_status)
}

// optional .analogic.ancp00.CommStatusMsg.CommState dcb_4_status = 18;
void CommMonitorStatus::clear_dcb_4_status() {
  dcb_4_status_ = 0;
}
 ::analogic::ancp00::CommStatusMsg_CommState CommMonitorStatus::dcb_4_status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.CommMonitorStatus.dcb_4_status)
  return static_cast< ::analogic::ancp00::CommStatusMsg_CommState >(dcb_4_status_);
}
 void CommMonitorStatus::set_dcb_4_status(::analogic::ancp00::CommStatusMsg_CommState value) {
  
  dcb_4_status_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.CommMonitorStatus.dcb_4_status)
}

// optional .analogic.ancp00.CommStatusMsg.CommState dcb_5_status = 19;
void CommMonitorStatus::clear_dcb_5_status() {
  dcb_5_status_ = 0;
}
 ::analogic::ancp00::CommStatusMsg_CommState CommMonitorStatus::dcb_5_status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.CommMonitorStatus.dcb_5_status)
  return static_cast< ::analogic::ancp00::CommStatusMsg_CommState >(dcb_5_status_);
}
 void CommMonitorStatus::set_dcb_5_status(::analogic::ancp00::CommStatusMsg_CommState value) {
  
  dcb_5_status_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.CommMonitorStatus.dcb_5_status)
}

// optional .analogic.ancp00.CommStatusMsg.CommState power_meter_status = 20;
void CommMonitorStatus::clear_power_meter_status() {
  power_meter_status_ = 0;
}
 ::analogic::ancp00::CommStatusMsg_CommState CommMonitorStatus::power_meter_status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.CommMonitorStatus.power_meter_status)
  return static_cast< ::analogic::ancp00::CommStatusMsg_CommState >(power_meter_status_);
}
 void CommMonitorStatus::set_power_meter_status(::analogic::ancp00::CommStatusMsg_CommState value) {
  
  power_meter_status_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.CommMonitorStatus.power_meter_status)
}

// optional fixed32 uplink_cmd_status = 30;
void CommMonitorStatus::clear_uplink_cmd_status() {
  uplink_cmd_status_ = 0u;
}
 ::google::protobuf::uint32 CommMonitorStatus::uplink_cmd_status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.CommMonitorStatus.uplink_cmd_status)
  return uplink_cmd_status_;
}
 void CommMonitorStatus::set_uplink_cmd_status(::google::protobuf::uint32 value) {
  
  uplink_cmd_status_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.CommMonitorStatus.uplink_cmd_status)
}

// optional fixed32 uplink_readback_status = 31;
void CommMonitorStatus::clear_uplink_readback_status() {
  uplink_readback_status_ = 0u;
}
 ::google::protobuf::uint32 CommMonitorStatus::uplink_readback_status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.CommMonitorStatus.uplink_readback_status)
  return uplink_readback_status_;
}
 void CommMonitorStatus::set_uplink_readback_status(::google::protobuf::uint32 value) {
  
  uplink_readback_status_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.CommMonitorStatus.uplink_readback_status)
}

// optional string network_ip_address = 40;
void CommMonitorStatus::clear_network_ip_address() {
  network_ip_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CommMonitorStatus::network_ip_address() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.CommMonitorStatus.network_ip_address)
  return network_ip_address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CommMonitorStatus::set_network_ip_address(const ::std::string& value) {
  
  network_ip_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.CommMonitorStatus.network_ip_address)
}
 void CommMonitorStatus::set_network_ip_address(const char* value) {
  
  network_ip_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.CommMonitorStatus.network_ip_address)
}
 void CommMonitorStatus::set_network_ip_address(const char* value, size_t size) {
  
  network_ip_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.CommMonitorStatus.network_ip_address)
}
 ::std::string* CommMonitorStatus::mutable_network_ip_address() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.CommMonitorStatus.network_ip_address)
  return network_ip_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CommMonitorStatus::release_network_ip_address() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.CommMonitorStatus.network_ip_address)
  
  return network_ip_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CommMonitorStatus::set_allocated_network_ip_address(::std::string* network_ip_address) {
  if (network_ip_address != NULL) {
    
  } else {
    
  }
  network_ip_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), network_ip_address);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.CommMonitorStatus.network_ip_address)
}

// optional string bhs_smartlane_ip_address = 41;
void CommMonitorStatus::clear_bhs_smartlane_ip_address() {
  bhs_smartlane_ip_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CommMonitorStatus::bhs_smartlane_ip_address() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.CommMonitorStatus.bhs_smartlane_ip_address)
  return bhs_smartlane_ip_address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CommMonitorStatus::set_bhs_smartlane_ip_address(const ::std::string& value) {
  
  bhs_smartlane_ip_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.CommMonitorStatus.bhs_smartlane_ip_address)
}
 void CommMonitorStatus::set_bhs_smartlane_ip_address(const char* value) {
  
  bhs_smartlane_ip_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.CommMonitorStatus.bhs_smartlane_ip_address)
}
 void CommMonitorStatus::set_bhs_smartlane_ip_address(const char* value, size_t size) {
  
  bhs_smartlane_ip_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.CommMonitorStatus.bhs_smartlane_ip_address)
}
 ::std::string* CommMonitorStatus::mutable_bhs_smartlane_ip_address() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.CommMonitorStatus.bhs_smartlane_ip_address)
  return bhs_smartlane_ip_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CommMonitorStatus::release_bhs_smartlane_ip_address() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.CommMonitorStatus.bhs_smartlane_ip_address)
  
  return bhs_smartlane_ip_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CommMonitorStatus::set_allocated_bhs_smartlane_ip_address(::std::string* bhs_smartlane_ip_address) {
  if (bhs_smartlane_ip_address != NULL) {
    
  } else {
    
  }
  bhs_smartlane_ip_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bhs_smartlane_ip_address);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.CommMonitorStatus.bhs_smartlane_ip_address)
}

// optional bool system_comm_online = 50;
void CommMonitorStatus::clear_system_comm_online() {
  system_comm_online_ = false;
}
 bool CommMonitorStatus::system_comm_online() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.CommMonitorStatus.system_comm_online)
  return system_comm_online_;
}
 void CommMonitorStatus::set_system_comm_online(bool value) {
  
  system_comm_online_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.CommMonitorStatus.system_comm_online)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ancp00
}  // namespace analogic

// @@protoc_insertion_point(global_scope)
