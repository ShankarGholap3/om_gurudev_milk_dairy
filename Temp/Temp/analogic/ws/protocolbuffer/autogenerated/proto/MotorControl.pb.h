// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/MotorControl.proto

#ifndef PROTOBUF_proto_2fMotorControl_2eproto__INCLUDED
#define PROTOBUF_proto_2fMotorControl_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace analogic {
namespace ancp00 {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_proto_2fMotorControl_2eproto();
void protobuf_AssignDesc_proto_2fMotorControl_2eproto();
void protobuf_ShutdownFile_proto_2fMotorControl_2eproto();

class MotorControlEvent;
class MotorControlMsg;
class MotorControlStatusMsg;

enum MotorControlMsg_MotorControlCommand {
  MotorControlMsg_MotorControlCommand_RUN = 0,
  MotorControlMsg_MotorControlCommand_STOP = 1,
  MotorControlMsg_MotorControlCommand_RESET = 2,
  MotorControlMsg_MotorControlCommand_RUN_REVERSE = 3,
  MotorControlMsg_MotorControlCommand_SET_HOME = 4,
  MotorControlMsg_MotorControlCommand_RUN_2X = 5,
  MotorControlMsg_MotorControlCommand_RUN_3X = 6,
  MotorControlMsg_MotorControlCommand_MotorControlMsg_MotorControlCommand_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MotorControlMsg_MotorControlCommand_MotorControlMsg_MotorControlCommand_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MotorControlMsg_MotorControlCommand_IsValid(int value);
const MotorControlMsg_MotorControlCommand MotorControlMsg_MotorControlCommand_MotorControlCommand_MIN = MotorControlMsg_MotorControlCommand_RUN;
const MotorControlMsg_MotorControlCommand MotorControlMsg_MotorControlCommand_MotorControlCommand_MAX = MotorControlMsg_MotorControlCommand_RUN_3X;
const int MotorControlMsg_MotorControlCommand_MotorControlCommand_ARRAYSIZE = MotorControlMsg_MotorControlCommand_MotorControlCommand_MAX + 1;

const ::google::protobuf::EnumDescriptor* MotorControlMsg_MotorControlCommand_descriptor();
inline const ::std::string& MotorControlMsg_MotorControlCommand_Name(MotorControlMsg_MotorControlCommand value) {
  return ::google::protobuf::internal::NameOfEnum(
    MotorControlMsg_MotorControlCommand_descriptor(), value);
}
inline bool MotorControlMsg_MotorControlCommand_Parse(
    const ::std::string& name, MotorControlMsg_MotorControlCommand* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MotorControlMsg_MotorControlCommand>(
    MotorControlMsg_MotorControlCommand_descriptor(), name, value);
}
enum MotorControlMsg_Mode {
  MotorControlMsg_Mode_NORMAL = 0,
  MotorControlMsg_Mode_PASSTHRU = 1,
  MotorControlMsg_Mode_MotorControlMsg_Mode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MotorControlMsg_Mode_MotorControlMsg_Mode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MotorControlMsg_Mode_IsValid(int value);
const MotorControlMsg_Mode MotorControlMsg_Mode_Mode_MIN = MotorControlMsg_Mode_NORMAL;
const MotorControlMsg_Mode MotorControlMsg_Mode_Mode_MAX = MotorControlMsg_Mode_PASSTHRU;
const int MotorControlMsg_Mode_Mode_ARRAYSIZE = MotorControlMsg_Mode_Mode_MAX + 1;

const ::google::protobuf::EnumDescriptor* MotorControlMsg_Mode_descriptor();
inline const ::std::string& MotorControlMsg_Mode_Name(MotorControlMsg_Mode value) {
  return ::google::protobuf::internal::NameOfEnum(
    MotorControlMsg_Mode_descriptor(), value);
}
inline bool MotorControlMsg_Mode_Parse(
    const ::std::string& name, MotorControlMsg_Mode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MotorControlMsg_Mode>(
    MotorControlMsg_Mode_descriptor(), name, value);
}
enum MotorControlStatusMsg_MotorControlState {
  MotorControlStatusMsg_MotorControlState_UNINIT = 0,
  MotorControlStatusMsg_MotorControlState_IDLE = 1,
  MotorControlStatusMsg_MotorControlState_ACCEL = 2,
  MotorControlStatusMsg_MotorControlState_RUNNING = 3,
  MotorControlStatusMsg_MotorControlState_DECEL = 4,
  MotorControlStatusMsg_MotorControlState_FAULT = 5,
  MotorControlStatusMsg_MotorControlState_RUNNING_IN_REVERSE = 6,
  MotorControlStatusMsg_MotorControlState_MotorControlStatusMsg_MotorControlState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MotorControlStatusMsg_MotorControlState_MotorControlStatusMsg_MotorControlState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MotorControlStatusMsg_MotorControlState_IsValid(int value);
const MotorControlStatusMsg_MotorControlState MotorControlStatusMsg_MotorControlState_MotorControlState_MIN = MotorControlStatusMsg_MotorControlState_UNINIT;
const MotorControlStatusMsg_MotorControlState MotorControlStatusMsg_MotorControlState_MotorControlState_MAX = MotorControlStatusMsg_MotorControlState_RUNNING_IN_REVERSE;
const int MotorControlStatusMsg_MotorControlState_MotorControlState_ARRAYSIZE = MotorControlStatusMsg_MotorControlState_MotorControlState_MAX + 1;

const ::google::protobuf::EnumDescriptor* MotorControlStatusMsg_MotorControlState_descriptor();
inline const ::std::string& MotorControlStatusMsg_MotorControlState_Name(MotorControlStatusMsg_MotorControlState value) {
  return ::google::protobuf::internal::NameOfEnum(
    MotorControlStatusMsg_MotorControlState_descriptor(), value);
}
inline bool MotorControlStatusMsg_MotorControlState_Parse(
    const ::std::string& name, MotorControlStatusMsg_MotorControlState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MotorControlStatusMsg_MotorControlState>(
    MotorControlStatusMsg_MotorControlState_descriptor(), name, value);
}
enum MotorControlStatusMsg_MotorControlSubstate {
  MotorControlStatusMsg_MotorControlSubstate_WO_ALARM = 0,
  MotorControlStatusMsg_MotorControlSubstate_W_ALARM = 1,
  MotorControlStatusMsg_MotorControlSubstate_MotorControlStatusMsg_MotorControlSubstate_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MotorControlStatusMsg_MotorControlSubstate_MotorControlStatusMsg_MotorControlSubstate_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MotorControlStatusMsg_MotorControlSubstate_IsValid(int value);
const MotorControlStatusMsg_MotorControlSubstate MotorControlStatusMsg_MotorControlSubstate_MotorControlSubstate_MIN = MotorControlStatusMsg_MotorControlSubstate_WO_ALARM;
const MotorControlStatusMsg_MotorControlSubstate MotorControlStatusMsg_MotorControlSubstate_MotorControlSubstate_MAX = MotorControlStatusMsg_MotorControlSubstate_W_ALARM;
const int MotorControlStatusMsg_MotorControlSubstate_MotorControlSubstate_ARRAYSIZE = MotorControlStatusMsg_MotorControlSubstate_MotorControlSubstate_MAX + 1;

const ::google::protobuf::EnumDescriptor* MotorControlStatusMsg_MotorControlSubstate_descriptor();
inline const ::std::string& MotorControlStatusMsg_MotorControlSubstate_Name(MotorControlStatusMsg_MotorControlSubstate value) {
  return ::google::protobuf::internal::NameOfEnum(
    MotorControlStatusMsg_MotorControlSubstate_descriptor(), value);
}
inline bool MotorControlStatusMsg_MotorControlSubstate_Parse(
    const ::std::string& name, MotorControlStatusMsg_MotorControlSubstate* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MotorControlStatusMsg_MotorControlSubstate>(
    MotorControlStatusMsg_MotorControlSubstate_descriptor(), name, value);
}
enum MotorControlEvent_EVENT_ID {
  MotorControlEvent_EVENT_ID_INIT_COMPLETE_ID = 0,
  MotorControlEvent_EVENT_ID_RUN_COMMAND_ID = 1,
  MotorControlEvent_EVENT_ID_RUN_ALARM_ID = 2,
  MotorControlEvent_EVENT_ID_RUN_ALARM_CLEAR_ID = 3,
  MotorControlEvent_EVENT_ID_STOP_COMMAND_ID = 4,
  MotorControlEvent_EVENT_ID_ACCEL_COMPLETE_ID = 5,
  MotorControlEvent_EVENT_ID_DECEL_COMPLETE_ID = 6,
  MotorControlEvent_EVENT_ID_FAULT_ID = 7,
  MotorControlEvent_EVENT_ID_RESET_COMMAND_ID = 8,
  MotorControlEvent_EVENT_ID_MotorControlEvent_EVENT_ID_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MotorControlEvent_EVENT_ID_MotorControlEvent_EVENT_ID_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MotorControlEvent_EVENT_ID_IsValid(int value);
const MotorControlEvent_EVENT_ID MotorControlEvent_EVENT_ID_EVENT_ID_MIN = MotorControlEvent_EVENT_ID_INIT_COMPLETE_ID;
const MotorControlEvent_EVENT_ID MotorControlEvent_EVENT_ID_EVENT_ID_MAX = MotorControlEvent_EVENT_ID_RESET_COMMAND_ID;
const int MotorControlEvent_EVENT_ID_EVENT_ID_ARRAYSIZE = MotorControlEvent_EVENT_ID_EVENT_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* MotorControlEvent_EVENT_ID_descriptor();
inline const ::std::string& MotorControlEvent_EVENT_ID_Name(MotorControlEvent_EVENT_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    MotorControlEvent_EVENT_ID_descriptor(), value);
}
inline bool MotorControlEvent_EVENT_ID_Parse(
    const ::std::string& name, MotorControlEvent_EVENT_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MotorControlEvent_EVENT_ID>(
    MotorControlEvent_EVENT_ID_descriptor(), name, value);
}
// ===================================================================

class MotorControlMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:analogic.ancp00.MotorControlMsg) */ {
 public:
  MotorControlMsg();
  virtual ~MotorControlMsg();

  MotorControlMsg(const MotorControlMsg& from);

  inline MotorControlMsg& operator=(const MotorControlMsg& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MotorControlMsg& default_instance();

  void Swap(MotorControlMsg* other);

  // implements Message ----------------------------------------------

  inline MotorControlMsg* New() const { return New(NULL); }

  MotorControlMsg* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MotorControlMsg& from);
  void MergeFrom(const MotorControlMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MotorControlMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MotorControlMsg_MotorControlCommand MotorControlCommand;
  static const MotorControlCommand RUN =
    MotorControlMsg_MotorControlCommand_RUN;
  static const MotorControlCommand STOP =
    MotorControlMsg_MotorControlCommand_STOP;
  static const MotorControlCommand RESET =
    MotorControlMsg_MotorControlCommand_RESET;
  static const MotorControlCommand RUN_REVERSE =
    MotorControlMsg_MotorControlCommand_RUN_REVERSE;
  static const MotorControlCommand SET_HOME =
    MotorControlMsg_MotorControlCommand_SET_HOME;
  static const MotorControlCommand RUN_2X =
    MotorControlMsg_MotorControlCommand_RUN_2X;
  static const MotorControlCommand RUN_3X =
    MotorControlMsg_MotorControlCommand_RUN_3X;
  static inline bool MotorControlCommand_IsValid(int value) {
    return MotorControlMsg_MotorControlCommand_IsValid(value);
  }
  static const MotorControlCommand MotorControlCommand_MIN =
    MotorControlMsg_MotorControlCommand_MotorControlCommand_MIN;
  static const MotorControlCommand MotorControlCommand_MAX =
    MotorControlMsg_MotorControlCommand_MotorControlCommand_MAX;
  static const int MotorControlCommand_ARRAYSIZE =
    MotorControlMsg_MotorControlCommand_MotorControlCommand_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MotorControlCommand_descriptor() {
    return MotorControlMsg_MotorControlCommand_descriptor();
  }
  static inline const ::std::string& MotorControlCommand_Name(MotorControlCommand value) {
    return MotorControlMsg_MotorControlCommand_Name(value);
  }
  static inline bool MotorControlCommand_Parse(const ::std::string& name,
      MotorControlCommand* value) {
    return MotorControlMsg_MotorControlCommand_Parse(name, value);
  }

  typedef MotorControlMsg_Mode Mode;
  static const Mode NORMAL =
    MotorControlMsg_Mode_NORMAL;
  static const Mode PASSTHRU =
    MotorControlMsg_Mode_PASSTHRU;
  static inline bool Mode_IsValid(int value) {
    return MotorControlMsg_Mode_IsValid(value);
  }
  static const Mode Mode_MIN =
    MotorControlMsg_Mode_Mode_MIN;
  static const Mode Mode_MAX =
    MotorControlMsg_Mode_Mode_MAX;
  static const int Mode_ARRAYSIZE =
    MotorControlMsg_Mode_Mode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Mode_descriptor() {
    return MotorControlMsg_Mode_descriptor();
  }
  static inline const ::std::string& Mode_Name(Mode value) {
    return MotorControlMsg_Mode_Name(value);
  }
  static inline bool Mode_Parse(const ::std::string& name,
      Mode* value) {
    return MotorControlMsg_Mode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .analogic.ancp00.MotorControlMsg.MotorControlCommand cmd_id = 1;
  void clear_cmd_id();
  static const int kCmdIdFieldNumber = 1;
  ::analogic::ancp00::MotorControlMsg_MotorControlCommand cmd_id() const;
  void set_cmd_id(::analogic::ancp00::MotorControlMsg_MotorControlCommand value);

  // optional .analogic.ancp00.MotorControlMsg.Mode mode = 2;
  void clear_mode();
  static const int kModeFieldNumber = 2;
  ::analogic::ancp00::MotorControlMsg_Mode mode() const;
  void set_mode(::analogic::ancp00::MotorControlMsg_Mode value);

  // @@protoc_insertion_point(class_scope:analogic.ancp00.MotorControlMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  int cmd_id_;
  int mode_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_proto_2fMotorControl_2eproto();
  friend void protobuf_AssignDesc_proto_2fMotorControl_2eproto();
  friend void protobuf_ShutdownFile_proto_2fMotorControl_2eproto();

  void InitAsDefaultInstance();
  static MotorControlMsg* default_instance_;
};
// -------------------------------------------------------------------

class MotorControlStatusMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:analogic.ancp00.MotorControlStatusMsg) */ {
 public:
  MotorControlStatusMsg();
  virtual ~MotorControlStatusMsg();

  MotorControlStatusMsg(const MotorControlStatusMsg& from);

  inline MotorControlStatusMsg& operator=(const MotorControlStatusMsg& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MotorControlStatusMsg& default_instance();

  void Swap(MotorControlStatusMsg* other);

  // implements Message ----------------------------------------------

  inline MotorControlStatusMsg* New() const { return New(NULL); }

  MotorControlStatusMsg* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MotorControlStatusMsg& from);
  void MergeFrom(const MotorControlStatusMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MotorControlStatusMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MotorControlStatusMsg_MotorControlState MotorControlState;
  static const MotorControlState UNINIT =
    MotorControlStatusMsg_MotorControlState_UNINIT;
  static const MotorControlState IDLE =
    MotorControlStatusMsg_MotorControlState_IDLE;
  static const MotorControlState ACCEL =
    MotorControlStatusMsg_MotorControlState_ACCEL;
  static const MotorControlState RUNNING =
    MotorControlStatusMsg_MotorControlState_RUNNING;
  static const MotorControlState DECEL =
    MotorControlStatusMsg_MotorControlState_DECEL;
  static const MotorControlState FAULT =
    MotorControlStatusMsg_MotorControlState_FAULT;
  static const MotorControlState RUNNING_IN_REVERSE =
    MotorControlStatusMsg_MotorControlState_RUNNING_IN_REVERSE;
  static inline bool MotorControlState_IsValid(int value) {
    return MotorControlStatusMsg_MotorControlState_IsValid(value);
  }
  static const MotorControlState MotorControlState_MIN =
    MotorControlStatusMsg_MotorControlState_MotorControlState_MIN;
  static const MotorControlState MotorControlState_MAX =
    MotorControlStatusMsg_MotorControlState_MotorControlState_MAX;
  static const int MotorControlState_ARRAYSIZE =
    MotorControlStatusMsg_MotorControlState_MotorControlState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MotorControlState_descriptor() {
    return MotorControlStatusMsg_MotorControlState_descriptor();
  }
  static inline const ::std::string& MotorControlState_Name(MotorControlState value) {
    return MotorControlStatusMsg_MotorControlState_Name(value);
  }
  static inline bool MotorControlState_Parse(const ::std::string& name,
      MotorControlState* value) {
    return MotorControlStatusMsg_MotorControlState_Parse(name, value);
  }

  typedef MotorControlStatusMsg_MotorControlSubstate MotorControlSubstate;
  static const MotorControlSubstate WO_ALARM =
    MotorControlStatusMsg_MotorControlSubstate_WO_ALARM;
  static const MotorControlSubstate W_ALARM =
    MotorControlStatusMsg_MotorControlSubstate_W_ALARM;
  static inline bool MotorControlSubstate_IsValid(int value) {
    return MotorControlStatusMsg_MotorControlSubstate_IsValid(value);
  }
  static const MotorControlSubstate MotorControlSubstate_MIN =
    MotorControlStatusMsg_MotorControlSubstate_MotorControlSubstate_MIN;
  static const MotorControlSubstate MotorControlSubstate_MAX =
    MotorControlStatusMsg_MotorControlSubstate_MotorControlSubstate_MAX;
  static const int MotorControlSubstate_ARRAYSIZE =
    MotorControlStatusMsg_MotorControlSubstate_MotorControlSubstate_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MotorControlSubstate_descriptor() {
    return MotorControlStatusMsg_MotorControlSubstate_descriptor();
  }
  static inline const ::std::string& MotorControlSubstate_Name(MotorControlSubstate value) {
    return MotorControlStatusMsg_MotorControlSubstate_Name(value);
  }
  static inline bool MotorControlSubstate_Parse(const ::std::string& name,
      MotorControlSubstate* value) {
    return MotorControlStatusMsg_MotorControlSubstate_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .analogic.ancp00.MotorControlStatusMsg.MotorControlState state = 1;
  void clear_state();
  static const int kStateFieldNumber = 1;
  ::analogic::ancp00::MotorControlStatusMsg_MotorControlState state() const;
  void set_state(::analogic::ancp00::MotorControlStatusMsg_MotorControlState value);

  // optional .analogic.ancp00.MotorControlStatusMsg.MotorControlSubstate substate = 2;
  void clear_substate();
  static const int kSubstateFieldNumber = 2;
  ::analogic::ancp00::MotorControlStatusMsg_MotorControlSubstate substate() const;
  void set_substate(::analogic::ancp00::MotorControlStatusMsg_MotorControlSubstate value);

  // @@protoc_insertion_point(class_scope:analogic.ancp00.MotorControlStatusMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  int state_;
  int substate_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_proto_2fMotorControl_2eproto();
  friend void protobuf_AssignDesc_proto_2fMotorControl_2eproto();
  friend void protobuf_ShutdownFile_proto_2fMotorControl_2eproto();

  void InitAsDefaultInstance();
  static MotorControlStatusMsg* default_instance_;
};
// -------------------------------------------------------------------

class MotorControlEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:analogic.ancp00.MotorControlEvent) */ {
 public:
  MotorControlEvent();
  virtual ~MotorControlEvent();

  MotorControlEvent(const MotorControlEvent& from);

  inline MotorControlEvent& operator=(const MotorControlEvent& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MotorControlEvent& default_instance();

  void Swap(MotorControlEvent* other);

  // implements Message ----------------------------------------------

  inline MotorControlEvent* New() const { return New(NULL); }

  MotorControlEvent* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MotorControlEvent& from);
  void MergeFrom(const MotorControlEvent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MotorControlEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MotorControlEvent_EVENT_ID EVENT_ID;
  static const EVENT_ID INIT_COMPLETE_ID =
    MotorControlEvent_EVENT_ID_INIT_COMPLETE_ID;
  static const EVENT_ID RUN_COMMAND_ID =
    MotorControlEvent_EVENT_ID_RUN_COMMAND_ID;
  static const EVENT_ID RUN_ALARM_ID =
    MotorControlEvent_EVENT_ID_RUN_ALARM_ID;
  static const EVENT_ID RUN_ALARM_CLEAR_ID =
    MotorControlEvent_EVENT_ID_RUN_ALARM_CLEAR_ID;
  static const EVENT_ID STOP_COMMAND_ID =
    MotorControlEvent_EVENT_ID_STOP_COMMAND_ID;
  static const EVENT_ID ACCEL_COMPLETE_ID =
    MotorControlEvent_EVENT_ID_ACCEL_COMPLETE_ID;
  static const EVENT_ID DECEL_COMPLETE_ID =
    MotorControlEvent_EVENT_ID_DECEL_COMPLETE_ID;
  static const EVENT_ID FAULT_ID =
    MotorControlEvent_EVENT_ID_FAULT_ID;
  static const EVENT_ID RESET_COMMAND_ID =
    MotorControlEvent_EVENT_ID_RESET_COMMAND_ID;
  static inline bool EVENT_ID_IsValid(int value) {
    return MotorControlEvent_EVENT_ID_IsValid(value);
  }
  static const EVENT_ID EVENT_ID_MIN =
    MotorControlEvent_EVENT_ID_EVENT_ID_MIN;
  static const EVENT_ID EVENT_ID_MAX =
    MotorControlEvent_EVENT_ID_EVENT_ID_MAX;
  static const int EVENT_ID_ARRAYSIZE =
    MotorControlEvent_EVENT_ID_EVENT_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EVENT_ID_descriptor() {
    return MotorControlEvent_EVENT_ID_descriptor();
  }
  static inline const ::std::string& EVENT_ID_Name(EVENT_ID value) {
    return MotorControlEvent_EVENT_ID_Name(value);
  }
  static inline bool EVENT_ID_Parse(const ::std::string& name,
      EVENT_ID* value) {
    return MotorControlEvent_EVENT_ID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:analogic.ancp00.MotorControlEvent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_proto_2fMotorControl_2eproto();
  friend void protobuf_AssignDesc_proto_2fMotorControl_2eproto();
  friend void protobuf_ShutdownFile_proto_2fMotorControl_2eproto();

  void InitAsDefaultInstance();
  static MotorControlEvent* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// MotorControlMsg

// optional .analogic.ancp00.MotorControlMsg.MotorControlCommand cmd_id = 1;
inline void MotorControlMsg::clear_cmd_id() {
  cmd_id_ = 0;
}
inline ::analogic::ancp00::MotorControlMsg_MotorControlCommand MotorControlMsg::cmd_id() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.MotorControlMsg.cmd_id)
  return static_cast< ::analogic::ancp00::MotorControlMsg_MotorControlCommand >(cmd_id_);
}
inline void MotorControlMsg::set_cmd_id(::analogic::ancp00::MotorControlMsg_MotorControlCommand value) {
  
  cmd_id_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.MotorControlMsg.cmd_id)
}

// optional .analogic.ancp00.MotorControlMsg.Mode mode = 2;
inline void MotorControlMsg::clear_mode() {
  mode_ = 0;
}
inline ::analogic::ancp00::MotorControlMsg_Mode MotorControlMsg::mode() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.MotorControlMsg.mode)
  return static_cast< ::analogic::ancp00::MotorControlMsg_Mode >(mode_);
}
inline void MotorControlMsg::set_mode(::analogic::ancp00::MotorControlMsg_Mode value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.MotorControlMsg.mode)
}

// -------------------------------------------------------------------

// MotorControlStatusMsg

// optional .analogic.ancp00.MotorControlStatusMsg.MotorControlState state = 1;
inline void MotorControlStatusMsg::clear_state() {
  state_ = 0;
}
inline ::analogic::ancp00::MotorControlStatusMsg_MotorControlState MotorControlStatusMsg::state() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.MotorControlStatusMsg.state)
  return static_cast< ::analogic::ancp00::MotorControlStatusMsg_MotorControlState >(state_);
}
inline void MotorControlStatusMsg::set_state(::analogic::ancp00::MotorControlStatusMsg_MotorControlState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.MotorControlStatusMsg.state)
}

// optional .analogic.ancp00.MotorControlStatusMsg.MotorControlSubstate substate = 2;
inline void MotorControlStatusMsg::clear_substate() {
  substate_ = 0;
}
inline ::analogic::ancp00::MotorControlStatusMsg_MotorControlSubstate MotorControlStatusMsg::substate() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.MotorControlStatusMsg.substate)
  return static_cast< ::analogic::ancp00::MotorControlStatusMsg_MotorControlSubstate >(substate_);
}
inline void MotorControlStatusMsg::set_substate(::analogic::ancp00::MotorControlStatusMsg_MotorControlSubstate value) {
  
  substate_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.MotorControlStatusMsg.substate)
}

// -------------------------------------------------------------------

// MotorControlEvent

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ancp00
}  // namespace analogic

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::analogic::ancp00::MotorControlMsg_MotorControlCommand> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::analogic::ancp00::MotorControlMsg_MotorControlCommand>() {
  return ::analogic::ancp00::MotorControlMsg_MotorControlCommand_descriptor();
}
template <> struct is_proto_enum< ::analogic::ancp00::MotorControlMsg_Mode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::analogic::ancp00::MotorControlMsg_Mode>() {
  return ::analogic::ancp00::MotorControlMsg_Mode_descriptor();
}
template <> struct is_proto_enum< ::analogic::ancp00::MotorControlStatusMsg_MotorControlState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::analogic::ancp00::MotorControlStatusMsg_MotorControlState>() {
  return ::analogic::ancp00::MotorControlStatusMsg_MotorControlState_descriptor();
}
template <> struct is_proto_enum< ::analogic::ancp00::MotorControlStatusMsg_MotorControlSubstate> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::analogic::ancp00::MotorControlStatusMsg_MotorControlSubstate>() {
  return ::analogic::ancp00::MotorControlStatusMsg_MotorControlSubstate_descriptor();
}
template <> struct is_proto_enum< ::analogic::ancp00::MotorControlEvent_EVENT_ID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::analogic::ancp00::MotorControlEvent_EVENT_ID>() {
  return ::analogic::ancp00::MotorControlEvent_EVENT_ID_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_2fMotorControl_2eproto__INCLUDED
