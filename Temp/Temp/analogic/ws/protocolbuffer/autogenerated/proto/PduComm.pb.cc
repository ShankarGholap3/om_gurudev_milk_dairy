// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/PduComm.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/PduComm.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace analogic {
namespace ancp00 {

namespace {

const ::google::protobuf::Descriptor* PduData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PduData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_2fPduComm_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_proto_2fPduComm_2eproto() {
  protobuf_AddDesc_proto_2fPduComm_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto/PduComm.proto");
  GOOGLE_CHECK(file != NULL);
  PduData_descriptor_ = file->message_type(0);
  static const int PduData_offsets_[38] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PduData, frequency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PduData, phase_voltage_v1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PduData, phase_voltage_v2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PduData, phase_voltage_v3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PduData, line_voltage_v12_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PduData, line_voltage_v23_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PduData, line_voltage_v31_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PduData, phase_line_current_i1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PduData, phase_line_current_i2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PduData, phase_line_current_i3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PduData, neutral_line_current_in_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PduData, phase_power_pa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PduData, phase_power_pb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PduData, phase_power_pc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PduData, system_power_psum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PduData, phase_reative_power_qa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PduData, phase_reative_power_qb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PduData, phase_reative_power_qc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PduData, system_reactive_power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PduData, system_apparent_ssum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PduData, phase_power_factor_pfa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PduData, phase_power_factor_pfb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PduData, phase_power_factor_pfc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PduData, system_power_pfsum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PduData, voltage_unbalance_factor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PduData, current_unbalance_factor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PduData, reserved_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PduData, phase_apparent_power_sa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PduData, phase_apparent_power_sb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PduData, phase_apparent_power_sc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PduData, reserved_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PduData, apparent_power_demand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PduData, power_demand_p_dmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PduData, reactive_power_demand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PduData, phase_a_current_demand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PduData, phase_b_current_demand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PduData, phase_c_current_demand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PduData, reserved_3_),
  };
  PduData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PduData_descriptor_,
      PduData::default_instance_,
      PduData_offsets_,
      -1,
      -1,
      -1,
      sizeof(PduData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PduData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PduData, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_2fPduComm_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PduData_descriptor_, &PduData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_2fPduComm_2eproto() {
  delete PduData::default_instance_;
  delete PduData_reflection_;
}

void protobuf_AddDesc_proto_2fPduComm_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_proto_2fPduComm_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023proto/PduComm.proto\022\017analogic.ancp00\"\317"
    "\010\n\007PduData\022\021\n\tfrequency\030\001 \001(\002\022\030\n\020phase_v"
    "oltage_v1\030\002 \001(\002\022\030\n\020phase_voltage_v2\030\003 \001("
    "\002\022\030\n\020phase_voltage_v3\030\004 \001(\002\022\030\n\020line_volt"
    "age_v12\030\005 \001(\002\022\030\n\020line_voltage_v23\030\006 \001(\002\022"
    "\030\n\020line_voltage_v31\030\007 \001(\002\022\035\n\025phase_line_"
    "current_i1\030\010 \001(\002\022\035\n\025phase_line_current_i"
    "2\030\t \001(\002\022\035\n\025phase_line_current_i3\030\n \001(\002\022\037"
    "\n\027neutral_line_current_in\030\013 \001(\002\022\026\n\016phase"
    "_power_pa\030\014 \001(\002\022\026\n\016phase_power_pb\030\r \001(\002\022"
    "\026\n\016phase_power_pc\030\016 \001(\002\022\031\n\021system_power_"
    "psum\030\017 \001(\002\022\036\n\026phase_reative_power_qa\030\020 \001"
    "(\002\022\036\n\026phase_reative_power_qb\030\021 \001(\002\022\036\n\026ph"
    "ase_reative_power_qc\030\022 \001(\002\022\035\n\025system_rea"
    "ctive_power\030\023 \001(\002\022\034\n\024system_apparent_ssu"
    "m\030\024 \001(\002\022\036\n\026phase_power_factor_pfa\030\025 \001(\002\022"
    "\036\n\026phase_power_factor_pfb\030\026 \001(\002\022\036\n\026phase"
    "_power_factor_pfc\030\027 \001(\002\022\032\n\022system_power_"
    "pfsum\030\030 \001(\002\022 \n\030voltage_unbalance_factor\030"
    "\031 \001(\002\022 \n\030current_unbalance_factor\030\032 \001(\002\022"
    "\022\n\nreserved_1\030\033 \001(\002\022\037\n\027phase_apparent_po"
    "wer_sa\030\034 \001(\002\022\037\n\027phase_apparent_power_sb\030"
    "\035 \001(\002\022\037\n\027phase_apparent_power_sc\030\036 \001(\002\022\022"
    "\n\nreserved_2\030\037 \001(\002\022\035\n\025apparent_power_dem"
    "and\030  \001(\002\022\032\n\022power_demand_p_dmd\030! \001(\002\022\035\n"
    "\025reactive_power_demand\030\" \001(\002\022\036\n\026phase_a_"
    "current_demand\030# \001(\002\022\036\n\026phase_b_current_"
    "demand\030$ \001(\002\022\036\n\026phase_c_current_demand\030%"
    " \001(\002\022\022\n\nreserved_3\030& \001(\002b\006proto3", 1152);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/PduComm.proto", &protobuf_RegisterTypes);
  PduData::default_instance_ = new PduData();
  PduData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2fPduComm_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2fPduComm_2eproto {
  StaticDescriptorInitializer_proto_2fPduComm_2eproto() {
    protobuf_AddDesc_proto_2fPduComm_2eproto();
  }
} static_descriptor_initializer_proto_2fPduComm_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PduData::kFrequencyFieldNumber;
const int PduData::kPhaseVoltageV1FieldNumber;
const int PduData::kPhaseVoltageV2FieldNumber;
const int PduData::kPhaseVoltageV3FieldNumber;
const int PduData::kLineVoltageV12FieldNumber;
const int PduData::kLineVoltageV23FieldNumber;
const int PduData::kLineVoltageV31FieldNumber;
const int PduData::kPhaseLineCurrentI1FieldNumber;
const int PduData::kPhaseLineCurrentI2FieldNumber;
const int PduData::kPhaseLineCurrentI3FieldNumber;
const int PduData::kNeutralLineCurrentInFieldNumber;
const int PduData::kPhasePowerPaFieldNumber;
const int PduData::kPhasePowerPbFieldNumber;
const int PduData::kPhasePowerPcFieldNumber;
const int PduData::kSystemPowerPsumFieldNumber;
const int PduData::kPhaseReativePowerQaFieldNumber;
const int PduData::kPhaseReativePowerQbFieldNumber;
const int PduData::kPhaseReativePowerQcFieldNumber;
const int PduData::kSystemReactivePowerFieldNumber;
const int PduData::kSystemApparentSsumFieldNumber;
const int PduData::kPhasePowerFactorPfaFieldNumber;
const int PduData::kPhasePowerFactorPfbFieldNumber;
const int PduData::kPhasePowerFactorPfcFieldNumber;
const int PduData::kSystemPowerPfsumFieldNumber;
const int PduData::kVoltageUnbalanceFactorFieldNumber;
const int PduData::kCurrentUnbalanceFactorFieldNumber;
const int PduData::kReserved1FieldNumber;
const int PduData::kPhaseApparentPowerSaFieldNumber;
const int PduData::kPhaseApparentPowerSbFieldNumber;
const int PduData::kPhaseApparentPowerScFieldNumber;
const int PduData::kReserved2FieldNumber;
const int PduData::kApparentPowerDemandFieldNumber;
const int PduData::kPowerDemandPDmdFieldNumber;
const int PduData::kReactivePowerDemandFieldNumber;
const int PduData::kPhaseACurrentDemandFieldNumber;
const int PduData::kPhaseBCurrentDemandFieldNumber;
const int PduData::kPhaseCCurrentDemandFieldNumber;
const int PduData::kReserved3FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PduData::PduData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analogic.ancp00.PduData)
}

void PduData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PduData::PduData(const PduData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analogic.ancp00.PduData)
}

void PduData::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  frequency_ = 0;
  phase_voltage_v1_ = 0;
  phase_voltage_v2_ = 0;
  phase_voltage_v3_ = 0;
  line_voltage_v12_ = 0;
  line_voltage_v23_ = 0;
  line_voltage_v31_ = 0;
  phase_line_current_i1_ = 0;
  phase_line_current_i2_ = 0;
  phase_line_current_i3_ = 0;
  neutral_line_current_in_ = 0;
  phase_power_pa_ = 0;
  phase_power_pb_ = 0;
  phase_power_pc_ = 0;
  system_power_psum_ = 0;
  phase_reative_power_qa_ = 0;
  phase_reative_power_qb_ = 0;
  phase_reative_power_qc_ = 0;
  system_reactive_power_ = 0;
  system_apparent_ssum_ = 0;
  phase_power_factor_pfa_ = 0;
  phase_power_factor_pfb_ = 0;
  phase_power_factor_pfc_ = 0;
  system_power_pfsum_ = 0;
  voltage_unbalance_factor_ = 0;
  current_unbalance_factor_ = 0;
  reserved_1_ = 0;
  phase_apparent_power_sa_ = 0;
  phase_apparent_power_sb_ = 0;
  phase_apparent_power_sc_ = 0;
  reserved_2_ = 0;
  apparent_power_demand_ = 0;
  power_demand_p_dmd_ = 0;
  reactive_power_demand_ = 0;
  phase_a_current_demand_ = 0;
  phase_b_current_demand_ = 0;
  phase_c_current_demand_ = 0;
  reserved_3_ = 0;
}

PduData::~PduData() {
  // @@protoc_insertion_point(destructor:analogic.ancp00.PduData)
  SharedDtor();
}

void PduData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PduData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PduData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PduData_descriptor_;
}

const PduData& PduData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fPduComm_2eproto();
  return *default_instance_;
}

PduData* PduData::default_instance_ = NULL;

PduData* PduData::New(::google::protobuf::Arena* arena) const {
  PduData* n = new PduData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PduData::Clear() {
// @@protoc_insertion_point(message_clear_start:analogic.ancp00.PduData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PduData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PduData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(frequency_, phase_line_current_i1_);
  ZR_(phase_line_current_i2_, phase_reative_power_qa_);
  ZR_(phase_reative_power_qb_, system_power_pfsum_);
  ZR_(voltage_unbalance_factor_, apparent_power_demand_);
  ZR_(power_demand_p_dmd_, reserved_3_);

#undef ZR_HELPER_
#undef ZR_

}

bool PduData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analogic.ancp00.PduData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float frequency = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &frequency_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_phase_voltage_v1;
        break;
      }

      // optional float phase_voltage_v1 = 2;
      case 2: {
        if (tag == 21) {
         parse_phase_voltage_v1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &phase_voltage_v1_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_phase_voltage_v2;
        break;
      }

      // optional float phase_voltage_v2 = 3;
      case 3: {
        if (tag == 29) {
         parse_phase_voltage_v2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &phase_voltage_v2_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_phase_voltage_v3;
        break;
      }

      // optional float phase_voltage_v3 = 4;
      case 4: {
        if (tag == 37) {
         parse_phase_voltage_v3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &phase_voltage_v3_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_line_voltage_v12;
        break;
      }

      // optional float line_voltage_v12 = 5;
      case 5: {
        if (tag == 45) {
         parse_line_voltage_v12:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &line_voltage_v12_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_line_voltage_v23;
        break;
      }

      // optional float line_voltage_v23 = 6;
      case 6: {
        if (tag == 53) {
         parse_line_voltage_v23:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &line_voltage_v23_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_line_voltage_v31;
        break;
      }

      // optional float line_voltage_v31 = 7;
      case 7: {
        if (tag == 61) {
         parse_line_voltage_v31:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &line_voltage_v31_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_phase_line_current_i1;
        break;
      }

      // optional float phase_line_current_i1 = 8;
      case 8: {
        if (tag == 69) {
         parse_phase_line_current_i1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &phase_line_current_i1_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_phase_line_current_i2;
        break;
      }

      // optional float phase_line_current_i2 = 9;
      case 9: {
        if (tag == 77) {
         parse_phase_line_current_i2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &phase_line_current_i2_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_phase_line_current_i3;
        break;
      }

      // optional float phase_line_current_i3 = 10;
      case 10: {
        if (tag == 85) {
         parse_phase_line_current_i3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &phase_line_current_i3_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_neutral_line_current_in;
        break;
      }

      // optional float neutral_line_current_in = 11;
      case 11: {
        if (tag == 93) {
         parse_neutral_line_current_in:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &neutral_line_current_in_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_phase_power_pa;
        break;
      }

      // optional float phase_power_pa = 12;
      case 12: {
        if (tag == 101) {
         parse_phase_power_pa:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &phase_power_pa_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(109)) goto parse_phase_power_pb;
        break;
      }

      // optional float phase_power_pb = 13;
      case 13: {
        if (tag == 109) {
         parse_phase_power_pb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &phase_power_pb_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(117)) goto parse_phase_power_pc;
        break;
      }

      // optional float phase_power_pc = 14;
      case 14: {
        if (tag == 117) {
         parse_phase_power_pc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &phase_power_pc_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(125)) goto parse_system_power_psum;
        break;
      }

      // optional float system_power_psum = 15;
      case 15: {
        if (tag == 125) {
         parse_system_power_psum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &system_power_psum_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(133)) goto parse_phase_reative_power_qa;
        break;
      }

      // optional float phase_reative_power_qa = 16;
      case 16: {
        if (tag == 133) {
         parse_phase_reative_power_qa:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &phase_reative_power_qa_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(141)) goto parse_phase_reative_power_qb;
        break;
      }

      // optional float phase_reative_power_qb = 17;
      case 17: {
        if (tag == 141) {
         parse_phase_reative_power_qb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &phase_reative_power_qb_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(149)) goto parse_phase_reative_power_qc;
        break;
      }

      // optional float phase_reative_power_qc = 18;
      case 18: {
        if (tag == 149) {
         parse_phase_reative_power_qc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &phase_reative_power_qc_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(157)) goto parse_system_reactive_power;
        break;
      }

      // optional float system_reactive_power = 19;
      case 19: {
        if (tag == 157) {
         parse_system_reactive_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &system_reactive_power_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(165)) goto parse_system_apparent_ssum;
        break;
      }

      // optional float system_apparent_ssum = 20;
      case 20: {
        if (tag == 165) {
         parse_system_apparent_ssum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &system_apparent_ssum_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(173)) goto parse_phase_power_factor_pfa;
        break;
      }

      // optional float phase_power_factor_pfa = 21;
      case 21: {
        if (tag == 173) {
         parse_phase_power_factor_pfa:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &phase_power_factor_pfa_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(181)) goto parse_phase_power_factor_pfb;
        break;
      }

      // optional float phase_power_factor_pfb = 22;
      case 22: {
        if (tag == 181) {
         parse_phase_power_factor_pfb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &phase_power_factor_pfb_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(189)) goto parse_phase_power_factor_pfc;
        break;
      }

      // optional float phase_power_factor_pfc = 23;
      case 23: {
        if (tag == 189) {
         parse_phase_power_factor_pfc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &phase_power_factor_pfc_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(197)) goto parse_system_power_pfsum;
        break;
      }

      // optional float system_power_pfsum = 24;
      case 24: {
        if (tag == 197) {
         parse_system_power_pfsum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &system_power_pfsum_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(205)) goto parse_voltage_unbalance_factor;
        break;
      }

      // optional float voltage_unbalance_factor = 25;
      case 25: {
        if (tag == 205) {
         parse_voltage_unbalance_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &voltage_unbalance_factor_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(213)) goto parse_current_unbalance_factor;
        break;
      }

      // optional float current_unbalance_factor = 26;
      case 26: {
        if (tag == 213) {
         parse_current_unbalance_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &current_unbalance_factor_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(221)) goto parse_reserved_1;
        break;
      }

      // optional float reserved_1 = 27;
      case 27: {
        if (tag == 221) {
         parse_reserved_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &reserved_1_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(229)) goto parse_phase_apparent_power_sa;
        break;
      }

      // optional float phase_apparent_power_sa = 28;
      case 28: {
        if (tag == 229) {
         parse_phase_apparent_power_sa:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &phase_apparent_power_sa_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(237)) goto parse_phase_apparent_power_sb;
        break;
      }

      // optional float phase_apparent_power_sb = 29;
      case 29: {
        if (tag == 237) {
         parse_phase_apparent_power_sb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &phase_apparent_power_sb_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(245)) goto parse_phase_apparent_power_sc;
        break;
      }

      // optional float phase_apparent_power_sc = 30;
      case 30: {
        if (tag == 245) {
         parse_phase_apparent_power_sc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &phase_apparent_power_sc_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(253)) goto parse_reserved_2;
        break;
      }

      // optional float reserved_2 = 31;
      case 31: {
        if (tag == 253) {
         parse_reserved_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &reserved_2_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(261)) goto parse_apparent_power_demand;
        break;
      }

      // optional float apparent_power_demand = 32;
      case 32: {
        if (tag == 261) {
         parse_apparent_power_demand:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &apparent_power_demand_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(269)) goto parse_power_demand_p_dmd;
        break;
      }

      // optional float power_demand_p_dmd = 33;
      case 33: {
        if (tag == 269) {
         parse_power_demand_p_dmd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &power_demand_p_dmd_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(277)) goto parse_reactive_power_demand;
        break;
      }

      // optional float reactive_power_demand = 34;
      case 34: {
        if (tag == 277) {
         parse_reactive_power_demand:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &reactive_power_demand_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(285)) goto parse_phase_a_current_demand;
        break;
      }

      // optional float phase_a_current_demand = 35;
      case 35: {
        if (tag == 285) {
         parse_phase_a_current_demand:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &phase_a_current_demand_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(293)) goto parse_phase_b_current_demand;
        break;
      }

      // optional float phase_b_current_demand = 36;
      case 36: {
        if (tag == 293) {
         parse_phase_b_current_demand:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &phase_b_current_demand_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(301)) goto parse_phase_c_current_demand;
        break;
      }

      // optional float phase_c_current_demand = 37;
      case 37: {
        if (tag == 301) {
         parse_phase_c_current_demand:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &phase_c_current_demand_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(309)) goto parse_reserved_3;
        break;
      }

      // optional float reserved_3 = 38;
      case 38: {
        if (tag == 309) {
         parse_reserved_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &reserved_3_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:analogic.ancp00.PduData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analogic.ancp00.PduData)
  return false;
#undef DO_
}

void PduData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analogic.ancp00.PduData)
  // optional float frequency = 1;
  if (this->frequency() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->frequency(), output);
  }

  // optional float phase_voltage_v1 = 2;
  if (this->phase_voltage_v1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->phase_voltage_v1(), output);
  }

  // optional float phase_voltage_v2 = 3;
  if (this->phase_voltage_v2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->phase_voltage_v2(), output);
  }

  // optional float phase_voltage_v3 = 4;
  if (this->phase_voltage_v3() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->phase_voltage_v3(), output);
  }

  // optional float line_voltage_v12 = 5;
  if (this->line_voltage_v12() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->line_voltage_v12(), output);
  }

  // optional float line_voltage_v23 = 6;
  if (this->line_voltage_v23() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->line_voltage_v23(), output);
  }

  // optional float line_voltage_v31 = 7;
  if (this->line_voltage_v31() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->line_voltage_v31(), output);
  }

  // optional float phase_line_current_i1 = 8;
  if (this->phase_line_current_i1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->phase_line_current_i1(), output);
  }

  // optional float phase_line_current_i2 = 9;
  if (this->phase_line_current_i2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->phase_line_current_i2(), output);
  }

  // optional float phase_line_current_i3 = 10;
  if (this->phase_line_current_i3() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->phase_line_current_i3(), output);
  }

  // optional float neutral_line_current_in = 11;
  if (this->neutral_line_current_in() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->neutral_line_current_in(), output);
  }

  // optional float phase_power_pa = 12;
  if (this->phase_power_pa() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->phase_power_pa(), output);
  }

  // optional float phase_power_pb = 13;
  if (this->phase_power_pb() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->phase_power_pb(), output);
  }

  // optional float phase_power_pc = 14;
  if (this->phase_power_pc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->phase_power_pc(), output);
  }

  // optional float system_power_psum = 15;
  if (this->system_power_psum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->system_power_psum(), output);
  }

  // optional float phase_reative_power_qa = 16;
  if (this->phase_reative_power_qa() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->phase_reative_power_qa(), output);
  }

  // optional float phase_reative_power_qb = 17;
  if (this->phase_reative_power_qb() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->phase_reative_power_qb(), output);
  }

  // optional float phase_reative_power_qc = 18;
  if (this->phase_reative_power_qc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->phase_reative_power_qc(), output);
  }

  // optional float system_reactive_power = 19;
  if (this->system_reactive_power() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->system_reactive_power(), output);
  }

  // optional float system_apparent_ssum = 20;
  if (this->system_apparent_ssum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->system_apparent_ssum(), output);
  }

  // optional float phase_power_factor_pfa = 21;
  if (this->phase_power_factor_pfa() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->phase_power_factor_pfa(), output);
  }

  // optional float phase_power_factor_pfb = 22;
  if (this->phase_power_factor_pfb() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->phase_power_factor_pfb(), output);
  }

  // optional float phase_power_factor_pfc = 23;
  if (this->phase_power_factor_pfc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(23, this->phase_power_factor_pfc(), output);
  }

  // optional float system_power_pfsum = 24;
  if (this->system_power_pfsum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->system_power_pfsum(), output);
  }

  // optional float voltage_unbalance_factor = 25;
  if (this->voltage_unbalance_factor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(25, this->voltage_unbalance_factor(), output);
  }

  // optional float current_unbalance_factor = 26;
  if (this->current_unbalance_factor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(26, this->current_unbalance_factor(), output);
  }

  // optional float reserved_1 = 27;
  if (this->reserved_1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(27, this->reserved_1(), output);
  }

  // optional float phase_apparent_power_sa = 28;
  if (this->phase_apparent_power_sa() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(28, this->phase_apparent_power_sa(), output);
  }

  // optional float phase_apparent_power_sb = 29;
  if (this->phase_apparent_power_sb() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(29, this->phase_apparent_power_sb(), output);
  }

  // optional float phase_apparent_power_sc = 30;
  if (this->phase_apparent_power_sc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(30, this->phase_apparent_power_sc(), output);
  }

  // optional float reserved_2 = 31;
  if (this->reserved_2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(31, this->reserved_2(), output);
  }

  // optional float apparent_power_demand = 32;
  if (this->apparent_power_demand() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(32, this->apparent_power_demand(), output);
  }

  // optional float power_demand_p_dmd = 33;
  if (this->power_demand_p_dmd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(33, this->power_demand_p_dmd(), output);
  }

  // optional float reactive_power_demand = 34;
  if (this->reactive_power_demand() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(34, this->reactive_power_demand(), output);
  }

  // optional float phase_a_current_demand = 35;
  if (this->phase_a_current_demand() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(35, this->phase_a_current_demand(), output);
  }

  // optional float phase_b_current_demand = 36;
  if (this->phase_b_current_demand() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(36, this->phase_b_current_demand(), output);
  }

  // optional float phase_c_current_demand = 37;
  if (this->phase_c_current_demand() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(37, this->phase_c_current_demand(), output);
  }

  // optional float reserved_3 = 38;
  if (this->reserved_3() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(38, this->reserved_3(), output);
  }

  // @@protoc_insertion_point(serialize_end:analogic.ancp00.PduData)
}

::google::protobuf::uint8* PduData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analogic.ancp00.PduData)
  // optional float frequency = 1;
  if (this->frequency() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->frequency(), target);
  }

  // optional float phase_voltage_v1 = 2;
  if (this->phase_voltage_v1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->phase_voltage_v1(), target);
  }

  // optional float phase_voltage_v2 = 3;
  if (this->phase_voltage_v2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->phase_voltage_v2(), target);
  }

  // optional float phase_voltage_v3 = 4;
  if (this->phase_voltage_v3() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->phase_voltage_v3(), target);
  }

  // optional float line_voltage_v12 = 5;
  if (this->line_voltage_v12() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->line_voltage_v12(), target);
  }

  // optional float line_voltage_v23 = 6;
  if (this->line_voltage_v23() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->line_voltage_v23(), target);
  }

  // optional float line_voltage_v31 = 7;
  if (this->line_voltage_v31() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->line_voltage_v31(), target);
  }

  // optional float phase_line_current_i1 = 8;
  if (this->phase_line_current_i1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->phase_line_current_i1(), target);
  }

  // optional float phase_line_current_i2 = 9;
  if (this->phase_line_current_i2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->phase_line_current_i2(), target);
  }

  // optional float phase_line_current_i3 = 10;
  if (this->phase_line_current_i3() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->phase_line_current_i3(), target);
  }

  // optional float neutral_line_current_in = 11;
  if (this->neutral_line_current_in() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->neutral_line_current_in(), target);
  }

  // optional float phase_power_pa = 12;
  if (this->phase_power_pa() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->phase_power_pa(), target);
  }

  // optional float phase_power_pb = 13;
  if (this->phase_power_pb() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->phase_power_pb(), target);
  }

  // optional float phase_power_pc = 14;
  if (this->phase_power_pc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->phase_power_pc(), target);
  }

  // optional float system_power_psum = 15;
  if (this->system_power_psum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->system_power_psum(), target);
  }

  // optional float phase_reative_power_qa = 16;
  if (this->phase_reative_power_qa() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->phase_reative_power_qa(), target);
  }

  // optional float phase_reative_power_qb = 17;
  if (this->phase_reative_power_qb() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->phase_reative_power_qb(), target);
  }

  // optional float phase_reative_power_qc = 18;
  if (this->phase_reative_power_qc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->phase_reative_power_qc(), target);
  }

  // optional float system_reactive_power = 19;
  if (this->system_reactive_power() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->system_reactive_power(), target);
  }

  // optional float system_apparent_ssum = 20;
  if (this->system_apparent_ssum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->system_apparent_ssum(), target);
  }

  // optional float phase_power_factor_pfa = 21;
  if (this->phase_power_factor_pfa() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->phase_power_factor_pfa(), target);
  }

  // optional float phase_power_factor_pfb = 22;
  if (this->phase_power_factor_pfb() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(22, this->phase_power_factor_pfb(), target);
  }

  // optional float phase_power_factor_pfc = 23;
  if (this->phase_power_factor_pfc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(23, this->phase_power_factor_pfc(), target);
  }

  // optional float system_power_pfsum = 24;
  if (this->system_power_pfsum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(24, this->system_power_pfsum(), target);
  }

  // optional float voltage_unbalance_factor = 25;
  if (this->voltage_unbalance_factor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(25, this->voltage_unbalance_factor(), target);
  }

  // optional float current_unbalance_factor = 26;
  if (this->current_unbalance_factor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(26, this->current_unbalance_factor(), target);
  }

  // optional float reserved_1 = 27;
  if (this->reserved_1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(27, this->reserved_1(), target);
  }

  // optional float phase_apparent_power_sa = 28;
  if (this->phase_apparent_power_sa() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(28, this->phase_apparent_power_sa(), target);
  }

  // optional float phase_apparent_power_sb = 29;
  if (this->phase_apparent_power_sb() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(29, this->phase_apparent_power_sb(), target);
  }

  // optional float phase_apparent_power_sc = 30;
  if (this->phase_apparent_power_sc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(30, this->phase_apparent_power_sc(), target);
  }

  // optional float reserved_2 = 31;
  if (this->reserved_2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(31, this->reserved_2(), target);
  }

  // optional float apparent_power_demand = 32;
  if (this->apparent_power_demand() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(32, this->apparent_power_demand(), target);
  }

  // optional float power_demand_p_dmd = 33;
  if (this->power_demand_p_dmd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(33, this->power_demand_p_dmd(), target);
  }

  // optional float reactive_power_demand = 34;
  if (this->reactive_power_demand() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(34, this->reactive_power_demand(), target);
  }

  // optional float phase_a_current_demand = 35;
  if (this->phase_a_current_demand() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(35, this->phase_a_current_demand(), target);
  }

  // optional float phase_b_current_demand = 36;
  if (this->phase_b_current_demand() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(36, this->phase_b_current_demand(), target);
  }

  // optional float phase_c_current_demand = 37;
  if (this->phase_c_current_demand() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(37, this->phase_c_current_demand(), target);
  }

  // optional float reserved_3 = 38;
  if (this->reserved_3() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(38, this->reserved_3(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:analogic.ancp00.PduData)
  return target;
}

int PduData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:analogic.ancp00.PduData)
  int total_size = 0;

  // optional float frequency = 1;
  if (this->frequency() != 0) {
    total_size += 1 + 4;
  }

  // optional float phase_voltage_v1 = 2;
  if (this->phase_voltage_v1() != 0) {
    total_size += 1 + 4;
  }

  // optional float phase_voltage_v2 = 3;
  if (this->phase_voltage_v2() != 0) {
    total_size += 1 + 4;
  }

  // optional float phase_voltage_v3 = 4;
  if (this->phase_voltage_v3() != 0) {
    total_size += 1 + 4;
  }

  // optional float line_voltage_v12 = 5;
  if (this->line_voltage_v12() != 0) {
    total_size += 1 + 4;
  }

  // optional float line_voltage_v23 = 6;
  if (this->line_voltage_v23() != 0) {
    total_size += 1 + 4;
  }

  // optional float line_voltage_v31 = 7;
  if (this->line_voltage_v31() != 0) {
    total_size += 1 + 4;
  }

  // optional float phase_line_current_i1 = 8;
  if (this->phase_line_current_i1() != 0) {
    total_size += 1 + 4;
  }

  // optional float phase_line_current_i2 = 9;
  if (this->phase_line_current_i2() != 0) {
    total_size += 1 + 4;
  }

  // optional float phase_line_current_i3 = 10;
  if (this->phase_line_current_i3() != 0) {
    total_size += 1 + 4;
  }

  // optional float neutral_line_current_in = 11;
  if (this->neutral_line_current_in() != 0) {
    total_size += 1 + 4;
  }

  // optional float phase_power_pa = 12;
  if (this->phase_power_pa() != 0) {
    total_size += 1 + 4;
  }

  // optional float phase_power_pb = 13;
  if (this->phase_power_pb() != 0) {
    total_size += 1 + 4;
  }

  // optional float phase_power_pc = 14;
  if (this->phase_power_pc() != 0) {
    total_size += 1 + 4;
  }

  // optional float system_power_psum = 15;
  if (this->system_power_psum() != 0) {
    total_size += 1 + 4;
  }

  // optional float phase_reative_power_qa = 16;
  if (this->phase_reative_power_qa() != 0) {
    total_size += 2 + 4;
  }

  // optional float phase_reative_power_qb = 17;
  if (this->phase_reative_power_qb() != 0) {
    total_size += 2 + 4;
  }

  // optional float phase_reative_power_qc = 18;
  if (this->phase_reative_power_qc() != 0) {
    total_size += 2 + 4;
  }

  // optional float system_reactive_power = 19;
  if (this->system_reactive_power() != 0) {
    total_size += 2 + 4;
  }

  // optional float system_apparent_ssum = 20;
  if (this->system_apparent_ssum() != 0) {
    total_size += 2 + 4;
  }

  // optional float phase_power_factor_pfa = 21;
  if (this->phase_power_factor_pfa() != 0) {
    total_size += 2 + 4;
  }

  // optional float phase_power_factor_pfb = 22;
  if (this->phase_power_factor_pfb() != 0) {
    total_size += 2 + 4;
  }

  // optional float phase_power_factor_pfc = 23;
  if (this->phase_power_factor_pfc() != 0) {
    total_size += 2 + 4;
  }

  // optional float system_power_pfsum = 24;
  if (this->system_power_pfsum() != 0) {
    total_size += 2 + 4;
  }

  // optional float voltage_unbalance_factor = 25;
  if (this->voltage_unbalance_factor() != 0) {
    total_size += 2 + 4;
  }

  // optional float current_unbalance_factor = 26;
  if (this->current_unbalance_factor() != 0) {
    total_size += 2 + 4;
  }

  // optional float reserved_1 = 27;
  if (this->reserved_1() != 0) {
    total_size += 2 + 4;
  }

  // optional float phase_apparent_power_sa = 28;
  if (this->phase_apparent_power_sa() != 0) {
    total_size += 2 + 4;
  }

  // optional float phase_apparent_power_sb = 29;
  if (this->phase_apparent_power_sb() != 0) {
    total_size += 2 + 4;
  }

  // optional float phase_apparent_power_sc = 30;
  if (this->phase_apparent_power_sc() != 0) {
    total_size += 2 + 4;
  }

  // optional float reserved_2 = 31;
  if (this->reserved_2() != 0) {
    total_size += 2 + 4;
  }

  // optional float apparent_power_demand = 32;
  if (this->apparent_power_demand() != 0) {
    total_size += 2 + 4;
  }

  // optional float power_demand_p_dmd = 33;
  if (this->power_demand_p_dmd() != 0) {
    total_size += 2 + 4;
  }

  // optional float reactive_power_demand = 34;
  if (this->reactive_power_demand() != 0) {
    total_size += 2 + 4;
  }

  // optional float phase_a_current_demand = 35;
  if (this->phase_a_current_demand() != 0) {
    total_size += 2 + 4;
  }

  // optional float phase_b_current_demand = 36;
  if (this->phase_b_current_demand() != 0) {
    total_size += 2 + 4;
  }

  // optional float phase_c_current_demand = 37;
  if (this->phase_c_current_demand() != 0) {
    total_size += 2 + 4;
  }

  // optional float reserved_3 = 38;
  if (this->reserved_3() != 0) {
    total_size += 2 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PduData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analogic.ancp00.PduData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PduData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PduData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analogic.ancp00.PduData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analogic.ancp00.PduData)
    MergeFrom(*source);
  }
}

void PduData::MergeFrom(const PduData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analogic.ancp00.PduData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.frequency() != 0) {
    set_frequency(from.frequency());
  }
  if (from.phase_voltage_v1() != 0) {
    set_phase_voltage_v1(from.phase_voltage_v1());
  }
  if (from.phase_voltage_v2() != 0) {
    set_phase_voltage_v2(from.phase_voltage_v2());
  }
  if (from.phase_voltage_v3() != 0) {
    set_phase_voltage_v3(from.phase_voltage_v3());
  }
  if (from.line_voltage_v12() != 0) {
    set_line_voltage_v12(from.line_voltage_v12());
  }
  if (from.line_voltage_v23() != 0) {
    set_line_voltage_v23(from.line_voltage_v23());
  }
  if (from.line_voltage_v31() != 0) {
    set_line_voltage_v31(from.line_voltage_v31());
  }
  if (from.phase_line_current_i1() != 0) {
    set_phase_line_current_i1(from.phase_line_current_i1());
  }
  if (from.phase_line_current_i2() != 0) {
    set_phase_line_current_i2(from.phase_line_current_i2());
  }
  if (from.phase_line_current_i3() != 0) {
    set_phase_line_current_i3(from.phase_line_current_i3());
  }
  if (from.neutral_line_current_in() != 0) {
    set_neutral_line_current_in(from.neutral_line_current_in());
  }
  if (from.phase_power_pa() != 0) {
    set_phase_power_pa(from.phase_power_pa());
  }
  if (from.phase_power_pb() != 0) {
    set_phase_power_pb(from.phase_power_pb());
  }
  if (from.phase_power_pc() != 0) {
    set_phase_power_pc(from.phase_power_pc());
  }
  if (from.system_power_psum() != 0) {
    set_system_power_psum(from.system_power_psum());
  }
  if (from.phase_reative_power_qa() != 0) {
    set_phase_reative_power_qa(from.phase_reative_power_qa());
  }
  if (from.phase_reative_power_qb() != 0) {
    set_phase_reative_power_qb(from.phase_reative_power_qb());
  }
  if (from.phase_reative_power_qc() != 0) {
    set_phase_reative_power_qc(from.phase_reative_power_qc());
  }
  if (from.system_reactive_power() != 0) {
    set_system_reactive_power(from.system_reactive_power());
  }
  if (from.system_apparent_ssum() != 0) {
    set_system_apparent_ssum(from.system_apparent_ssum());
  }
  if (from.phase_power_factor_pfa() != 0) {
    set_phase_power_factor_pfa(from.phase_power_factor_pfa());
  }
  if (from.phase_power_factor_pfb() != 0) {
    set_phase_power_factor_pfb(from.phase_power_factor_pfb());
  }
  if (from.phase_power_factor_pfc() != 0) {
    set_phase_power_factor_pfc(from.phase_power_factor_pfc());
  }
  if (from.system_power_pfsum() != 0) {
    set_system_power_pfsum(from.system_power_pfsum());
  }
  if (from.voltage_unbalance_factor() != 0) {
    set_voltage_unbalance_factor(from.voltage_unbalance_factor());
  }
  if (from.current_unbalance_factor() != 0) {
    set_current_unbalance_factor(from.current_unbalance_factor());
  }
  if (from.reserved_1() != 0) {
    set_reserved_1(from.reserved_1());
  }
  if (from.phase_apparent_power_sa() != 0) {
    set_phase_apparent_power_sa(from.phase_apparent_power_sa());
  }
  if (from.phase_apparent_power_sb() != 0) {
    set_phase_apparent_power_sb(from.phase_apparent_power_sb());
  }
  if (from.phase_apparent_power_sc() != 0) {
    set_phase_apparent_power_sc(from.phase_apparent_power_sc());
  }
  if (from.reserved_2() != 0) {
    set_reserved_2(from.reserved_2());
  }
  if (from.apparent_power_demand() != 0) {
    set_apparent_power_demand(from.apparent_power_demand());
  }
  if (from.power_demand_p_dmd() != 0) {
    set_power_demand_p_dmd(from.power_demand_p_dmd());
  }
  if (from.reactive_power_demand() != 0) {
    set_reactive_power_demand(from.reactive_power_demand());
  }
  if (from.phase_a_current_demand() != 0) {
    set_phase_a_current_demand(from.phase_a_current_demand());
  }
  if (from.phase_b_current_demand() != 0) {
    set_phase_b_current_demand(from.phase_b_current_demand());
  }
  if (from.phase_c_current_demand() != 0) {
    set_phase_c_current_demand(from.phase_c_current_demand());
  }
  if (from.reserved_3() != 0) {
    set_reserved_3(from.reserved_3());
  }
}

void PduData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analogic.ancp00.PduData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PduData::CopyFrom(const PduData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analogic.ancp00.PduData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PduData::IsInitialized() const {

  return true;
}

void PduData::Swap(PduData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PduData::InternalSwap(PduData* other) {
  std::swap(frequency_, other->frequency_);
  std::swap(phase_voltage_v1_, other->phase_voltage_v1_);
  std::swap(phase_voltage_v2_, other->phase_voltage_v2_);
  std::swap(phase_voltage_v3_, other->phase_voltage_v3_);
  std::swap(line_voltage_v12_, other->line_voltage_v12_);
  std::swap(line_voltage_v23_, other->line_voltage_v23_);
  std::swap(line_voltage_v31_, other->line_voltage_v31_);
  std::swap(phase_line_current_i1_, other->phase_line_current_i1_);
  std::swap(phase_line_current_i2_, other->phase_line_current_i2_);
  std::swap(phase_line_current_i3_, other->phase_line_current_i3_);
  std::swap(neutral_line_current_in_, other->neutral_line_current_in_);
  std::swap(phase_power_pa_, other->phase_power_pa_);
  std::swap(phase_power_pb_, other->phase_power_pb_);
  std::swap(phase_power_pc_, other->phase_power_pc_);
  std::swap(system_power_psum_, other->system_power_psum_);
  std::swap(phase_reative_power_qa_, other->phase_reative_power_qa_);
  std::swap(phase_reative_power_qb_, other->phase_reative_power_qb_);
  std::swap(phase_reative_power_qc_, other->phase_reative_power_qc_);
  std::swap(system_reactive_power_, other->system_reactive_power_);
  std::swap(system_apparent_ssum_, other->system_apparent_ssum_);
  std::swap(phase_power_factor_pfa_, other->phase_power_factor_pfa_);
  std::swap(phase_power_factor_pfb_, other->phase_power_factor_pfb_);
  std::swap(phase_power_factor_pfc_, other->phase_power_factor_pfc_);
  std::swap(system_power_pfsum_, other->system_power_pfsum_);
  std::swap(voltage_unbalance_factor_, other->voltage_unbalance_factor_);
  std::swap(current_unbalance_factor_, other->current_unbalance_factor_);
  std::swap(reserved_1_, other->reserved_1_);
  std::swap(phase_apparent_power_sa_, other->phase_apparent_power_sa_);
  std::swap(phase_apparent_power_sb_, other->phase_apparent_power_sb_);
  std::swap(phase_apparent_power_sc_, other->phase_apparent_power_sc_);
  std::swap(reserved_2_, other->reserved_2_);
  std::swap(apparent_power_demand_, other->apparent_power_demand_);
  std::swap(power_demand_p_dmd_, other->power_demand_p_dmd_);
  std::swap(reactive_power_demand_, other->reactive_power_demand_);
  std::swap(phase_a_current_demand_, other->phase_a_current_demand_);
  std::swap(phase_b_current_demand_, other->phase_b_current_demand_);
  std::swap(phase_c_current_demand_, other->phase_c_current_demand_);
  std::swap(reserved_3_, other->reserved_3_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PduData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PduData_descriptor_;
  metadata.reflection = PduData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PduData

// optional float frequency = 1;
void PduData::clear_frequency() {
  frequency_ = 0;
}
 float PduData::frequency() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PduData.frequency)
  return frequency_;
}
 void PduData::set_frequency(float value) {
  
  frequency_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PduData.frequency)
}

// optional float phase_voltage_v1 = 2;
void PduData::clear_phase_voltage_v1() {
  phase_voltage_v1_ = 0;
}
 float PduData::phase_voltage_v1() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PduData.phase_voltage_v1)
  return phase_voltage_v1_;
}
 void PduData::set_phase_voltage_v1(float value) {
  
  phase_voltage_v1_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PduData.phase_voltage_v1)
}

// optional float phase_voltage_v2 = 3;
void PduData::clear_phase_voltage_v2() {
  phase_voltage_v2_ = 0;
}
 float PduData::phase_voltage_v2() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PduData.phase_voltage_v2)
  return phase_voltage_v2_;
}
 void PduData::set_phase_voltage_v2(float value) {
  
  phase_voltage_v2_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PduData.phase_voltage_v2)
}

// optional float phase_voltage_v3 = 4;
void PduData::clear_phase_voltage_v3() {
  phase_voltage_v3_ = 0;
}
 float PduData::phase_voltage_v3() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PduData.phase_voltage_v3)
  return phase_voltage_v3_;
}
 void PduData::set_phase_voltage_v3(float value) {
  
  phase_voltage_v3_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PduData.phase_voltage_v3)
}

// optional float line_voltage_v12 = 5;
void PduData::clear_line_voltage_v12() {
  line_voltage_v12_ = 0;
}
 float PduData::line_voltage_v12() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PduData.line_voltage_v12)
  return line_voltage_v12_;
}
 void PduData::set_line_voltage_v12(float value) {
  
  line_voltage_v12_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PduData.line_voltage_v12)
}

// optional float line_voltage_v23 = 6;
void PduData::clear_line_voltage_v23() {
  line_voltage_v23_ = 0;
}
 float PduData::line_voltage_v23() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PduData.line_voltage_v23)
  return line_voltage_v23_;
}
 void PduData::set_line_voltage_v23(float value) {
  
  line_voltage_v23_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PduData.line_voltage_v23)
}

// optional float line_voltage_v31 = 7;
void PduData::clear_line_voltage_v31() {
  line_voltage_v31_ = 0;
}
 float PduData::line_voltage_v31() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PduData.line_voltage_v31)
  return line_voltage_v31_;
}
 void PduData::set_line_voltage_v31(float value) {
  
  line_voltage_v31_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PduData.line_voltage_v31)
}

// optional float phase_line_current_i1 = 8;
void PduData::clear_phase_line_current_i1() {
  phase_line_current_i1_ = 0;
}
 float PduData::phase_line_current_i1() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PduData.phase_line_current_i1)
  return phase_line_current_i1_;
}
 void PduData::set_phase_line_current_i1(float value) {
  
  phase_line_current_i1_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PduData.phase_line_current_i1)
}

// optional float phase_line_current_i2 = 9;
void PduData::clear_phase_line_current_i2() {
  phase_line_current_i2_ = 0;
}
 float PduData::phase_line_current_i2() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PduData.phase_line_current_i2)
  return phase_line_current_i2_;
}
 void PduData::set_phase_line_current_i2(float value) {
  
  phase_line_current_i2_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PduData.phase_line_current_i2)
}

// optional float phase_line_current_i3 = 10;
void PduData::clear_phase_line_current_i3() {
  phase_line_current_i3_ = 0;
}
 float PduData::phase_line_current_i3() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PduData.phase_line_current_i3)
  return phase_line_current_i3_;
}
 void PduData::set_phase_line_current_i3(float value) {
  
  phase_line_current_i3_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PduData.phase_line_current_i3)
}

// optional float neutral_line_current_in = 11;
void PduData::clear_neutral_line_current_in() {
  neutral_line_current_in_ = 0;
}
 float PduData::neutral_line_current_in() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PduData.neutral_line_current_in)
  return neutral_line_current_in_;
}
 void PduData::set_neutral_line_current_in(float value) {
  
  neutral_line_current_in_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PduData.neutral_line_current_in)
}

// optional float phase_power_pa = 12;
void PduData::clear_phase_power_pa() {
  phase_power_pa_ = 0;
}
 float PduData::phase_power_pa() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PduData.phase_power_pa)
  return phase_power_pa_;
}
 void PduData::set_phase_power_pa(float value) {
  
  phase_power_pa_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PduData.phase_power_pa)
}

// optional float phase_power_pb = 13;
void PduData::clear_phase_power_pb() {
  phase_power_pb_ = 0;
}
 float PduData::phase_power_pb() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PduData.phase_power_pb)
  return phase_power_pb_;
}
 void PduData::set_phase_power_pb(float value) {
  
  phase_power_pb_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PduData.phase_power_pb)
}

// optional float phase_power_pc = 14;
void PduData::clear_phase_power_pc() {
  phase_power_pc_ = 0;
}
 float PduData::phase_power_pc() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PduData.phase_power_pc)
  return phase_power_pc_;
}
 void PduData::set_phase_power_pc(float value) {
  
  phase_power_pc_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PduData.phase_power_pc)
}

// optional float system_power_psum = 15;
void PduData::clear_system_power_psum() {
  system_power_psum_ = 0;
}
 float PduData::system_power_psum() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PduData.system_power_psum)
  return system_power_psum_;
}
 void PduData::set_system_power_psum(float value) {
  
  system_power_psum_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PduData.system_power_psum)
}

// optional float phase_reative_power_qa = 16;
void PduData::clear_phase_reative_power_qa() {
  phase_reative_power_qa_ = 0;
}
 float PduData::phase_reative_power_qa() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PduData.phase_reative_power_qa)
  return phase_reative_power_qa_;
}
 void PduData::set_phase_reative_power_qa(float value) {
  
  phase_reative_power_qa_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PduData.phase_reative_power_qa)
}

// optional float phase_reative_power_qb = 17;
void PduData::clear_phase_reative_power_qb() {
  phase_reative_power_qb_ = 0;
}
 float PduData::phase_reative_power_qb() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PduData.phase_reative_power_qb)
  return phase_reative_power_qb_;
}
 void PduData::set_phase_reative_power_qb(float value) {
  
  phase_reative_power_qb_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PduData.phase_reative_power_qb)
}

// optional float phase_reative_power_qc = 18;
void PduData::clear_phase_reative_power_qc() {
  phase_reative_power_qc_ = 0;
}
 float PduData::phase_reative_power_qc() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PduData.phase_reative_power_qc)
  return phase_reative_power_qc_;
}
 void PduData::set_phase_reative_power_qc(float value) {
  
  phase_reative_power_qc_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PduData.phase_reative_power_qc)
}

// optional float system_reactive_power = 19;
void PduData::clear_system_reactive_power() {
  system_reactive_power_ = 0;
}
 float PduData::system_reactive_power() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PduData.system_reactive_power)
  return system_reactive_power_;
}
 void PduData::set_system_reactive_power(float value) {
  
  system_reactive_power_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PduData.system_reactive_power)
}

// optional float system_apparent_ssum = 20;
void PduData::clear_system_apparent_ssum() {
  system_apparent_ssum_ = 0;
}
 float PduData::system_apparent_ssum() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PduData.system_apparent_ssum)
  return system_apparent_ssum_;
}
 void PduData::set_system_apparent_ssum(float value) {
  
  system_apparent_ssum_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PduData.system_apparent_ssum)
}

// optional float phase_power_factor_pfa = 21;
void PduData::clear_phase_power_factor_pfa() {
  phase_power_factor_pfa_ = 0;
}
 float PduData::phase_power_factor_pfa() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PduData.phase_power_factor_pfa)
  return phase_power_factor_pfa_;
}
 void PduData::set_phase_power_factor_pfa(float value) {
  
  phase_power_factor_pfa_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PduData.phase_power_factor_pfa)
}

// optional float phase_power_factor_pfb = 22;
void PduData::clear_phase_power_factor_pfb() {
  phase_power_factor_pfb_ = 0;
}
 float PduData::phase_power_factor_pfb() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PduData.phase_power_factor_pfb)
  return phase_power_factor_pfb_;
}
 void PduData::set_phase_power_factor_pfb(float value) {
  
  phase_power_factor_pfb_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PduData.phase_power_factor_pfb)
}

// optional float phase_power_factor_pfc = 23;
void PduData::clear_phase_power_factor_pfc() {
  phase_power_factor_pfc_ = 0;
}
 float PduData::phase_power_factor_pfc() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PduData.phase_power_factor_pfc)
  return phase_power_factor_pfc_;
}
 void PduData::set_phase_power_factor_pfc(float value) {
  
  phase_power_factor_pfc_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PduData.phase_power_factor_pfc)
}

// optional float system_power_pfsum = 24;
void PduData::clear_system_power_pfsum() {
  system_power_pfsum_ = 0;
}
 float PduData::system_power_pfsum() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PduData.system_power_pfsum)
  return system_power_pfsum_;
}
 void PduData::set_system_power_pfsum(float value) {
  
  system_power_pfsum_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PduData.system_power_pfsum)
}

// optional float voltage_unbalance_factor = 25;
void PduData::clear_voltage_unbalance_factor() {
  voltage_unbalance_factor_ = 0;
}
 float PduData::voltage_unbalance_factor() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PduData.voltage_unbalance_factor)
  return voltage_unbalance_factor_;
}
 void PduData::set_voltage_unbalance_factor(float value) {
  
  voltage_unbalance_factor_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PduData.voltage_unbalance_factor)
}

// optional float current_unbalance_factor = 26;
void PduData::clear_current_unbalance_factor() {
  current_unbalance_factor_ = 0;
}
 float PduData::current_unbalance_factor() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PduData.current_unbalance_factor)
  return current_unbalance_factor_;
}
 void PduData::set_current_unbalance_factor(float value) {
  
  current_unbalance_factor_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PduData.current_unbalance_factor)
}

// optional float reserved_1 = 27;
void PduData::clear_reserved_1() {
  reserved_1_ = 0;
}
 float PduData::reserved_1() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PduData.reserved_1)
  return reserved_1_;
}
 void PduData::set_reserved_1(float value) {
  
  reserved_1_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PduData.reserved_1)
}

// optional float phase_apparent_power_sa = 28;
void PduData::clear_phase_apparent_power_sa() {
  phase_apparent_power_sa_ = 0;
}
 float PduData::phase_apparent_power_sa() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PduData.phase_apparent_power_sa)
  return phase_apparent_power_sa_;
}
 void PduData::set_phase_apparent_power_sa(float value) {
  
  phase_apparent_power_sa_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PduData.phase_apparent_power_sa)
}

// optional float phase_apparent_power_sb = 29;
void PduData::clear_phase_apparent_power_sb() {
  phase_apparent_power_sb_ = 0;
}
 float PduData::phase_apparent_power_sb() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PduData.phase_apparent_power_sb)
  return phase_apparent_power_sb_;
}
 void PduData::set_phase_apparent_power_sb(float value) {
  
  phase_apparent_power_sb_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PduData.phase_apparent_power_sb)
}

// optional float phase_apparent_power_sc = 30;
void PduData::clear_phase_apparent_power_sc() {
  phase_apparent_power_sc_ = 0;
}
 float PduData::phase_apparent_power_sc() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PduData.phase_apparent_power_sc)
  return phase_apparent_power_sc_;
}
 void PduData::set_phase_apparent_power_sc(float value) {
  
  phase_apparent_power_sc_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PduData.phase_apparent_power_sc)
}

// optional float reserved_2 = 31;
void PduData::clear_reserved_2() {
  reserved_2_ = 0;
}
 float PduData::reserved_2() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PduData.reserved_2)
  return reserved_2_;
}
 void PduData::set_reserved_2(float value) {
  
  reserved_2_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PduData.reserved_2)
}

// optional float apparent_power_demand = 32;
void PduData::clear_apparent_power_demand() {
  apparent_power_demand_ = 0;
}
 float PduData::apparent_power_demand() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PduData.apparent_power_demand)
  return apparent_power_demand_;
}
 void PduData::set_apparent_power_demand(float value) {
  
  apparent_power_demand_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PduData.apparent_power_demand)
}

// optional float power_demand_p_dmd = 33;
void PduData::clear_power_demand_p_dmd() {
  power_demand_p_dmd_ = 0;
}
 float PduData::power_demand_p_dmd() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PduData.power_demand_p_dmd)
  return power_demand_p_dmd_;
}
 void PduData::set_power_demand_p_dmd(float value) {
  
  power_demand_p_dmd_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PduData.power_demand_p_dmd)
}

// optional float reactive_power_demand = 34;
void PduData::clear_reactive_power_demand() {
  reactive_power_demand_ = 0;
}
 float PduData::reactive_power_demand() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PduData.reactive_power_demand)
  return reactive_power_demand_;
}
 void PduData::set_reactive_power_demand(float value) {
  
  reactive_power_demand_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PduData.reactive_power_demand)
}

// optional float phase_a_current_demand = 35;
void PduData::clear_phase_a_current_demand() {
  phase_a_current_demand_ = 0;
}
 float PduData::phase_a_current_demand() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PduData.phase_a_current_demand)
  return phase_a_current_demand_;
}
 void PduData::set_phase_a_current_demand(float value) {
  
  phase_a_current_demand_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PduData.phase_a_current_demand)
}

// optional float phase_b_current_demand = 36;
void PduData::clear_phase_b_current_demand() {
  phase_b_current_demand_ = 0;
}
 float PduData::phase_b_current_demand() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PduData.phase_b_current_demand)
  return phase_b_current_demand_;
}
 void PduData::set_phase_b_current_demand(float value) {
  
  phase_b_current_demand_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PduData.phase_b_current_demand)
}

// optional float phase_c_current_demand = 37;
void PduData::clear_phase_c_current_demand() {
  phase_c_current_demand_ = 0;
}
 float PduData::phase_c_current_demand() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PduData.phase_c_current_demand)
  return phase_c_current_demand_;
}
 void PduData::set_phase_c_current_demand(float value) {
  
  phase_c_current_demand_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PduData.phase_c_current_demand)
}

// optional float reserved_3 = 38;
void PduData::clear_reserved_3() {
  reserved_3_ = 0;
}
 float PduData::reserved_3() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PduData.reserved_3)
  return reserved_3_;
}
 void PduData::set_reserved_3(float value) {
  
  reserved_3_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PduData.reserved_3)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ancp00
}  // namespace analogic

// @@protoc_insertion_point(global_scope)
