// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/DrbComm.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/DrbComm.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace analogic {
namespace ancp00 {

namespace {

const ::google::protobuf::Descriptor* DrbCommStatusMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DrbCommStatusMsg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DrbCommStatusMsg_DRB_STATUS_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DrbIoData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DrbIoData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DrbIoData_FaultStatusBits_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DrbIoData_SourceDiscreteBits_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DrbIoData_RcbControlRegisterBits_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DrbIoData_RcbStatusRegisterBits_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DrbIoData_RcbFaultRegisterBits_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DrbIoData_RcbTriggerOptoStatusBits_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DrbCommMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DrbCommMsg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DrbCommMsg_CmdId_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DRB_FAULT_CODE_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_2fDrbComm_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_proto_2fDrbComm_2eproto() {
  protobuf_AddDesc_proto_2fDrbComm_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto/DrbComm.proto");
  GOOGLE_CHECK(file != NULL);
  DrbCommStatusMsg_descriptor_ = file->message_type(0);
  static const int DrbCommStatusMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbCommStatusMsg, state_),
  };
  DrbCommStatusMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DrbCommStatusMsg_descriptor_,
      DrbCommStatusMsg::default_instance_,
      DrbCommStatusMsg_offsets_,
      -1,
      -1,
      -1,
      sizeof(DrbCommStatusMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbCommStatusMsg, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbCommStatusMsg, _is_default_instance_));
  DrbCommStatusMsg_DRB_STATUS_descriptor_ = DrbCommStatusMsg_descriptor_->enum_type(0);
  DrbIoData_descriptor_ = file->message_type(1);
  static const int DrbIoData_offsets_[89] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, xray_source_serial_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, xray_source_model_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, rcb_firmware_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, dcb_1_fw_revision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, dcb_2_fw_revision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, dcb_3_fw_revision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, dcb_4_fw_revision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, dcb_5_fw_revision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, dcb_xdmm_fw_revision_not_used_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, xray_seasoning_time_remaining_str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, xray_voltage_setpoint_kv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, xray_current_setpoint_ma_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, xray_voltage_kv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, xray_current_ma_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, xray_source_temp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, xray_source_filament_current_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, rcb_gantry_rpm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, rcb_gantry_angle_degrees_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, rcb_temp_sensor_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, rcb_temp_sensor_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, dcb_1_ambient_temp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, dcb_2_ambient_temp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, dcb_3_ambient_temp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, dcb_4_ambient_temp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, dcb_5_ambient_temp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, conveyor_speed_cm_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, current_conveyor_pos_cm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, current_gantry_rot_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, xray_fault_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, xray_source_discrete_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, xray_seasoning_step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, xray_seasoning_time_remaining_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, rcb_control_register_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, rcb_status_register_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, rcb_fault_register_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, rcb_trigger_opto_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, rcb_serial_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, dcb_1_status_register_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, dcb_2_status_register_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, dcb_3_status_register_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, dcb_4_status_register_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, dcb_5_status_register_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, rcb_gantry_rotation_period_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, xray_regulation_fault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, xray_interlock_open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, xray_cathode_over_voltage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, xray_anode_over_voltage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, xray_over_temperature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, xray_arc_fault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, xray_over_current_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, xray_power_limit_fault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, xray_over_voltage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, duty_cycle_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, xray_minimization_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, xray_seasoning_in_progress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, xray_watchdog_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, xray_enable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, xray_high_voltage_on_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, xray_interlock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, xray_on_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, opto_trigger_1_home_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, opto_trigger_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, opto_trigger_3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, opto_trigger_4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, rectifier_temperature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, rectifier_under_voltage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, rectifier_over_voltage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, rectifier_fan_load_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, rectifier_das_load_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, rectifier_rcb_load_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, rectifier_xray_cooler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, rectifier_xray_gen_controller_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, rectifier_xray_controller_fan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, rectifier_ok_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, drb_firmware_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, drb_ready_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, rcb_comm_loss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, watch_dog_detection_time_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, rcb_control_packet_fifo_full_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, conveyor_belt_quad_encoder_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, uplink_cmd_bit_0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, uplink_cmd_bit_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, uplink_cmd_bit_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, dcb1_xdmms_present_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, dcb2_xdmms_present_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, dcb3_xdmms_present_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, dcb4_xdmms_present_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, dcb5_xdmms_present_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, number_of_bad_views_),
  };
  DrbIoData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DrbIoData_descriptor_,
      DrbIoData::default_instance_,
      DrbIoData_offsets_,
      -1,
      -1,
      -1,
      sizeof(DrbIoData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbIoData, _is_default_instance_));
  DrbIoData_FaultStatusBits_descriptor_ = DrbIoData_descriptor_->enum_type(0);
  DrbIoData_SourceDiscreteBits_descriptor_ = DrbIoData_descriptor_->enum_type(1);
  DrbIoData_RcbControlRegisterBits_descriptor_ = DrbIoData_descriptor_->enum_type(2);
  DrbIoData_RcbStatusRegisterBits_descriptor_ = DrbIoData_descriptor_->enum_type(3);
  DrbIoData_RcbFaultRegisterBits_descriptor_ = DrbIoData_descriptor_->enum_type(4);
  DrbIoData_RcbTriggerOptoStatusBits_descriptor_ = DrbIoData_descriptor_->enum_type(5);
  DrbCommMsg_descriptor_ = file->message_type(2);
  static const int DrbCommMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbCommMsg, id_),
  };
  DrbCommMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DrbCommMsg_descriptor_,
      DrbCommMsg::default_instance_,
      DrbCommMsg_offsets_,
      -1,
      -1,
      -1,
      sizeof(DrbCommMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbCommMsg, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbCommMsg, _is_default_instance_));
  DrbCommMsg_CmdId_descriptor_ = DrbCommMsg_descriptor_->enum_type(0);
  DRB_FAULT_CODE_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_2fDrbComm_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DrbCommStatusMsg_descriptor_, &DrbCommStatusMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DrbIoData_descriptor_, &DrbIoData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DrbCommMsg_descriptor_, &DrbCommMsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_2fDrbComm_2eproto() {
  delete DrbCommStatusMsg::default_instance_;
  delete DrbCommStatusMsg_reflection_;
  delete DrbIoData::default_instance_;
  delete DrbIoData_reflection_;
  delete DrbCommMsg::default_instance_;
  delete DrbCommMsg_reflection_;
}

void protobuf_AddDesc_proto_2fDrbComm_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_proto_2fDrbComm_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023proto/DrbComm.proto\022\017analogic.ancp00\"\203"
    "\001\n\020DrbCommStatusMsg\022;\n\005state\030\001 \001(\0162,.ana"
    "logic.ancp00.DrbCommStatusMsg.DRB_STATUS"
    "\"2\n\nDRB_STATUS\022\013\n\007OFFLINE\020\000\022\n\n\006PAUSED\020\001\022"
    "\013\n\007RUNNING\020\002\"\256\034\n\tDrbIoData\022\036\n\026xray_sourc"
    "e_serial_num\030\001 \001(\t\022\035\n\025xray_source_model_"
    "num\030\002 \001(\t\022\034\n\024rcb_firmware_version\030\003 \001(\t\022"
    "\031\n\021dcb_1_fw_revision\030\004 \001(\t\022\031\n\021dcb_2_fw_r"
    "evision\030\005 \001(\t\022\031\n\021dcb_3_fw_revision\030\006 \001(\t"
    "\022\031\n\021dcb_4_fw_revision\030\007 \001(\t\022\031\n\021dcb_5_fw_"
    "revision\030\010 \001(\t\022%\n\035dcb_xdmm_fw_revision_n"
    "ot_used\030\t \001(\t\022)\n!xray_seasoning_time_rem"
    "aining_str\030\n \001(\t\022 \n\030xray_voltage_setpoin"
    "t_kv\030\024 \001(\002\022 \n\030xray_current_setpoint_ma\030\025"
    " \001(\002\022\027\n\017xray_voltage_kv\030\026 \001(\002\022\027\n\017xray_cu"
    "rrent_ma\030\027 \001(\002\022\030\n\020xray_source_temp\030\030 \001(\002"
    "\022$\n\034xray_source_filament_current\030\031 \001(\002\022\026"
    "\n\016rcb_gantry_rpm\030\032 \001(\002\022 \n\030rcb_gantry_ang"
    "le_degrees\030\033 \001(\002\022\031\n\021rcb_temp_sensor_1\030\034 "
    "\001(\002\022\031\n\021rcb_temp_sensor_2\030\035 \001(\002\022\032\n\022dcb_1_"
    "ambient_temp\030\036 \001(\002\022\032\n\022dcb_2_ambient_temp"
    "\030\037 \001(\002\022\032\n\022dcb_3_ambient_temp\030  \001(\002\022\032\n\022dc"
    "b_4_ambient_temp\030! \001(\002\022\032\n\022dcb_5_ambient_"
    "temp\030\" \001(\002\022\035\n\025conveyor_speed_cm_sec\030# \001("
    "\002\022\037\n\027current_conveyor_pos_cm\030$ \001(\001\022 \n\030cu"
    "rrent_gantry_rot_count\030% \001(\001\022\031\n\021xray_fau"
    "lt_status\0302 \001(\007\022#\n\033xray_source_discrete_"
    "status\0303 \001(\007\022\033\n\023xray_seasoning_step\0304 \001("
    "\r\022%\n\035xray_seasoning_time_remaining\0305 \001(\r"
    "\022\034\n\024rcb_control_register\0306 \001(\007\022\033\n\023rcb_st"
    "atus_register\0307 \001(\007\022\032\n\022rcb_fault_registe"
    "r\0308 \001(\007\022\037\n\027rcb_trigger_opto_status\0309 \001(\007"
    "\022\031\n\021rcb_serial_number\030: \001(\r\022\035\n\025dcb_1_sta"
    "tus_register\030; \001(\007\022\035\n\025dcb_2_status_regis"
    "ter\030< \001(\007\022\035\n\025dcb_3_status_register\030= \001(\007"
    "\022\035\n\025dcb_4_status_register\030> \001(\007\022\035\n\025dcb_5"
    "_status_register\030\? \001(\007\022%\n\035rcb_gantry_rot"
    "ation_period_ms\030@ \001(\r\022\035\n\025xray_regulation"
    "_fault\030d \001(\010\022\033\n\023xray_interlock_open\030e \001("
    "\010\022!\n\031xray_cathode_over_voltage\030f \001(\010\022\037\n\027"
    "xray_anode_over_voltage\030g \001(\010\022\035\n\025xray_ov"
    "er_temperature\030h \001(\010\022\026\n\016xray_arc_fault\030i"
    " \001(\010\022\031\n\021xray_over_current\030j \001(\010\022\036\n\026xray_"
    "power_limit_fault\030k \001(\010\022\031\n\021xray_over_vol"
    "tage\030l \001(\010\022\027\n\017duty_cycle_mode\030m \001(\010\022\031\n\021x"
    "ray_minimization\030n \001(\010\022\"\n\032xray_seasoning"
    "_in_progress\030o \001(\010\022\034\n\024xray_watchdog_stat"
    "us\030p \001(\010\022\023\n\013xray_enable\030q \001(\010\022\034\n\024xray_hi"
    "gh_voltage_on\030r \001(\010\022\026\n\016xray_interlock\030s "
    "\001(\010\022\017\n\007xray_on\030t \001(\010\022\033\n\023opto_trigger_1_h"
    "ome\030u \001(\010\022\026\n\016opto_trigger_2\030v \001(\010\022\026\n\016opt"
    "o_trigger_3\030w \001(\010\022\026\n\016opto_trigger_4\030x \001("
    "\010\022\035\n\025rectifier_temperature\030y \001(\010\022\037\n\027rect"
    "ifier_under_voltage\030z \001(\010\022\036\n\026rectifier_o"
    "ver_voltage\030{ \001(\010\022\032\n\022rectifier_fan_load\030"
    "| \001(\010\022\032\n\022rectifier_das_load\030} \001(\010\022\032\n\022rec"
    "tifier_rcb_load\030~ \001(\010\022\035\n\025rectifier_xray_"
    "cooler\030\177 \001(\010\022&\n\035rectifier_xray_gen_contr"
    "oller\030\200\001 \001(\010\022&\n\035rectifier_xray_controlle"
    "r_fan\030\201\001 \001(\010\022\025\n\014rectifier_ok\030\202\001 \001(\010\022\035\n\024d"
    "rb_firmware_version\030\203\001 \001(\t\022\022\n\tdrb_ready\030"
    "\204\001 \001(\010\022\026\n\rrcb_comm_loss\030\205\001 \001(\010\022\'\n\036watch_"
    "dog_detection_time_error\030\206\001 \001(\010\022+\n\"rcb_c"
    "ontrol_packet_fifo_full_error\030\207\001 \001(\010\022)\n "
    "conveyor_belt_quad_encoder_error\030\210\001 \001(\010\022"
    "\031\n\020uplink_cmd_bit_0\030\211\001 \001(\010\022\031\n\020uplink_cmd"
    "_bit_1\030\212\001 \001(\010\022\031\n\020uplink_cmd_bit_2\030\213\001 \001(\010"
    "\022\033\n\022dcb1_xdmms_present\030\214\001 \001(\007\022\033\n\022dcb2_xd"
    "mms_present\030\215\001 \001(\007\022\033\n\022dcb3_xdmms_present"
    "\030\216\001 \001(\007\022\033\n\022dcb4_xdmms_present\030\217\001 \001(\007\022\033\n\022"
    "dcb5_xdmms_present\030\220\001 \001(\007\022\034\n\023number_of_b"
    "ad_views\030\240\001 \001(\006\"\230\003\n\017FaultStatusBits\022\016\n\nN"
    "OT_USED_0\020\000\022\024\n\020REGULATION_FAULT\020\001\022\030\n\024INT"
    "ERLOCK_OPEN_FAULT\020\002\022\031\n\025CATHODE_OVER_KV_F"
    "AULT\020\004\022\027\n\023ANODE_OVER_KV_FAULT\020\010\022\022\n\016OVERT"
    "EMP_FAULT\020\020\022\r\n\tARC_FAULT\020 \022\026\n\022OVER_CURRE"
    "NT_FAULT\020@\022\026\n\021POWER_LIMIT_FAULT\020\200\001\022\027\n\022OV"
    "ER_VOLTAGE_FAULT\020\200\002\022\024\n\017DUTY_CYCLE_MODE\020\200"
    "\004\022\026\n\021XRAY_MINIMIZATION\020\200\010\022\037\n\032XRAY_SEASON"
    "ING_IN_PROGRESS\020\200\020\022\024\n\017WATCHDOG_STATUS\020\200@"
    "\022\021\n\013XRAY_ENABLE\020\200\200\001\022\027\n\021HV_STATUS_XRAY_ON"
    "\020\200\200\002\022\024\n\017XRAY_FAULT_MASK\020\377\003\"E\n\022SourceDisc"
    "reteBits\022\016\n\nNOT_USED_1\020\000\022\022\n\016XRAY_INTERLO"
    "CK\020\001\022\013\n\007XRAY_ON\020\002\"(\n\026RcbControlRegisterB"
    "its\022\016\n\nNOT_USED_3\020\000\"\'\n\025RcbStatusRegister"
    "Bits\022\016\n\nNOT_USED_4\020\000\"&\n\024RcbFaultRegister"
    "Bits\022\016\n\nNOT_USED_5\020\000\"\326\002\n\030RcbTriggerOptoS"
    "tatusBits\022\016\n\nNOT_USED_6\020\000\022\024\n\020OPTO_1_0_DE"
    "GREES\020\001\022\025\n\021OPTO_2_90_DEGREES\020\002\022\026\n\022OPTO_3"
    "_180_DEGREES\020\004\022\026\n\022OPTO_4_270_DEGREES\020\010\022\030"
    "\n\024OPTO_1_0_DEGREES_RAW\020\020\022\031\n\025OPTO_2_90_DE"
    "GREES_RAW\020 \022\032\n\026OPTO_3_180_DEGREES_RAW\020@\022"
    "\033\n\026OPTO_4_270_DEGREES_RAW\020\200\001\022\022\n\rDIO_0_LA"
    "TCHED\020\200\002\022\022\n\rDIO_1_LATCHED\020\200\004\022\022\n\rDIO_2_LA"
    "TCHED\020\200\010\022\n\n\005DIO_0\020\200 \022\n\n\005DIO_1\020\200@\022\013\n\005DIO_"
    "2\020\200\200\001\"\342\001\n\nDrbCommMsg\022-\n\002id\030\001 \001(\0162!.analo"
    "gic.ancp00.DrbCommMsg.CmdId\"\244\001\n\005CmdId\022\026\n"
    "\022BOGUS_PLACE_HOLDER\020\000\022\"\n\036RESET_DRB_VIEW_"
    "PROCESSOR_FAULT\020\001\022(\n$FORCE_RESET_DRB_VIE"
    "W_PROCESSOR_FAULT\020\002\022\033\n\027RESET_CONVEYOR_PO"
    "SITION\020\003\022\030\n\024RESET_BAD_VIEW_COUNT\020\004*\257\001\n\016D"
    "RB_FAULT_CODE\022\026\n\022DRB_FAULT_NOT_USED\020\000\022\025\n"
    "\021DRB_UNKNOWN_FAULT\020\001\022\032\n\026DRB_VIEW_MISSING"
    "_FAULT\020\002\022(\n$DRB_RUNNING_OUT_OF_BUFFER_PO"
    "OL_FAULT\020\004\022(\n$DRB_VIEW_DATA_HANDLING_FAI"
    "LURE_FAULT\020\010b\006proto3", 4220);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/DrbComm.proto", &protobuf_RegisterTypes);
  DrbCommStatusMsg::default_instance_ = new DrbCommStatusMsg();
  DrbIoData::default_instance_ = new DrbIoData();
  DrbCommMsg::default_instance_ = new DrbCommMsg();
  DrbCommStatusMsg::default_instance_->InitAsDefaultInstance();
  DrbIoData::default_instance_->InitAsDefaultInstance();
  DrbCommMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2fDrbComm_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2fDrbComm_2eproto {
  StaticDescriptorInitializer_proto_2fDrbComm_2eproto() {
    protobuf_AddDesc_proto_2fDrbComm_2eproto();
  }
} static_descriptor_initializer_proto_2fDrbComm_2eproto_;
const ::google::protobuf::EnumDescriptor* DRB_FAULT_CODE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DRB_FAULT_CODE_descriptor_;
}
bool DRB_FAULT_CODE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DrbCommStatusMsg_DRB_STATUS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DrbCommStatusMsg_DRB_STATUS_descriptor_;
}
bool DrbCommStatusMsg_DRB_STATUS_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DrbCommStatusMsg_DRB_STATUS DrbCommStatusMsg::OFFLINE;
const DrbCommStatusMsg_DRB_STATUS DrbCommStatusMsg::PAUSED;
const DrbCommStatusMsg_DRB_STATUS DrbCommStatusMsg::RUNNING;
const DrbCommStatusMsg_DRB_STATUS DrbCommStatusMsg::DRB_STATUS_MIN;
const DrbCommStatusMsg_DRB_STATUS DrbCommStatusMsg::DRB_STATUS_MAX;
const int DrbCommStatusMsg::DRB_STATUS_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DrbCommStatusMsg::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DrbCommStatusMsg::DrbCommStatusMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analogic.ancp00.DrbCommStatusMsg)
}

void DrbCommStatusMsg::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DrbCommStatusMsg::DrbCommStatusMsg(const DrbCommStatusMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analogic.ancp00.DrbCommStatusMsg)
}

void DrbCommStatusMsg::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  state_ = 0;
}

DrbCommStatusMsg::~DrbCommStatusMsg() {
  // @@protoc_insertion_point(destructor:analogic.ancp00.DrbCommStatusMsg)
  SharedDtor();
}

void DrbCommStatusMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DrbCommStatusMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DrbCommStatusMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DrbCommStatusMsg_descriptor_;
}

const DrbCommStatusMsg& DrbCommStatusMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fDrbComm_2eproto();
  return *default_instance_;
}

DrbCommStatusMsg* DrbCommStatusMsg::default_instance_ = NULL;

DrbCommStatusMsg* DrbCommStatusMsg::New(::google::protobuf::Arena* arena) const {
  DrbCommStatusMsg* n = new DrbCommStatusMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DrbCommStatusMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:analogic.ancp00.DrbCommStatusMsg)
  state_ = 0;
}

bool DrbCommStatusMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analogic.ancp00.DrbCommStatusMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .analogic.ancp00.DrbCommStatusMsg.DRB_STATUS state = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::analogic::ancp00::DrbCommStatusMsg_DRB_STATUS >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:analogic.ancp00.DrbCommStatusMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analogic.ancp00.DrbCommStatusMsg)
  return false;
#undef DO_
}

void DrbCommStatusMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analogic.ancp00.DrbCommStatusMsg)
  // optional .analogic.ancp00.DrbCommStatusMsg.DRB_STATUS state = 1;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  // @@protoc_insertion_point(serialize_end:analogic.ancp00.DrbCommStatusMsg)
}

::google::protobuf::uint8* DrbCommStatusMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analogic.ancp00.DrbCommStatusMsg)
  // optional .analogic.ancp00.DrbCommStatusMsg.DRB_STATUS state = 1;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:analogic.ancp00.DrbCommStatusMsg)
  return target;
}

int DrbCommStatusMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:analogic.ancp00.DrbCommStatusMsg)
  int total_size = 0;

  // optional .analogic.ancp00.DrbCommStatusMsg.DRB_STATUS state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DrbCommStatusMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analogic.ancp00.DrbCommStatusMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DrbCommStatusMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DrbCommStatusMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analogic.ancp00.DrbCommStatusMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analogic.ancp00.DrbCommStatusMsg)
    MergeFrom(*source);
  }
}

void DrbCommStatusMsg::MergeFrom(const DrbCommStatusMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analogic.ancp00.DrbCommStatusMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void DrbCommStatusMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analogic.ancp00.DrbCommStatusMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DrbCommStatusMsg::CopyFrom(const DrbCommStatusMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analogic.ancp00.DrbCommStatusMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrbCommStatusMsg::IsInitialized() const {

  return true;
}

void DrbCommStatusMsg::Swap(DrbCommStatusMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DrbCommStatusMsg::InternalSwap(DrbCommStatusMsg* other) {
  std::swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DrbCommStatusMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DrbCommStatusMsg_descriptor_;
  metadata.reflection = DrbCommStatusMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DrbCommStatusMsg

// optional .analogic.ancp00.DrbCommStatusMsg.DRB_STATUS state = 1;
void DrbCommStatusMsg::clear_state() {
  state_ = 0;
}
 ::analogic::ancp00::DrbCommStatusMsg_DRB_STATUS DrbCommStatusMsg::state() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbCommStatusMsg.state)
  return static_cast< ::analogic::ancp00::DrbCommStatusMsg_DRB_STATUS >(state_);
}
 void DrbCommStatusMsg::set_state(::analogic::ancp00::DrbCommStatusMsg_DRB_STATUS value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbCommStatusMsg.state)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* DrbIoData_FaultStatusBits_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DrbIoData_FaultStatusBits_descriptor_;
}
bool DrbIoData_FaultStatusBits_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 511:
    case 512:
    case 1024:
    case 2048:
    case 8192:
    case 16384:
    case 32768:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DrbIoData_FaultStatusBits DrbIoData::NOT_USED_0;
const DrbIoData_FaultStatusBits DrbIoData::REGULATION_FAULT;
const DrbIoData_FaultStatusBits DrbIoData::INTERLOCK_OPEN_FAULT;
const DrbIoData_FaultStatusBits DrbIoData::CATHODE_OVER_KV_FAULT;
const DrbIoData_FaultStatusBits DrbIoData::ANODE_OVER_KV_FAULT;
const DrbIoData_FaultStatusBits DrbIoData::OVERTEMP_FAULT;
const DrbIoData_FaultStatusBits DrbIoData::ARC_FAULT;
const DrbIoData_FaultStatusBits DrbIoData::OVER_CURRENT_FAULT;
const DrbIoData_FaultStatusBits DrbIoData::POWER_LIMIT_FAULT;
const DrbIoData_FaultStatusBits DrbIoData::OVER_VOLTAGE_FAULT;
const DrbIoData_FaultStatusBits DrbIoData::DUTY_CYCLE_MODE;
const DrbIoData_FaultStatusBits DrbIoData::XRAY_MINIMIZATION;
const DrbIoData_FaultStatusBits DrbIoData::XRAY_SEASONING_IN_PROGRESS;
const DrbIoData_FaultStatusBits DrbIoData::WATCHDOG_STATUS;
const DrbIoData_FaultStatusBits DrbIoData::XRAY_ENABLE;
const DrbIoData_FaultStatusBits DrbIoData::HV_STATUS_XRAY_ON;
const DrbIoData_FaultStatusBits DrbIoData::XRAY_FAULT_MASK;
const DrbIoData_FaultStatusBits DrbIoData::FaultStatusBits_MIN;
const DrbIoData_FaultStatusBits DrbIoData::FaultStatusBits_MAX;
const int DrbIoData::FaultStatusBits_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DrbIoData_SourceDiscreteBits_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DrbIoData_SourceDiscreteBits_descriptor_;
}
bool DrbIoData_SourceDiscreteBits_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DrbIoData_SourceDiscreteBits DrbIoData::NOT_USED_1;
const DrbIoData_SourceDiscreteBits DrbIoData::XRAY_INTERLOCK;
const DrbIoData_SourceDiscreteBits DrbIoData::XRAY_ON;
const DrbIoData_SourceDiscreteBits DrbIoData::SourceDiscreteBits_MIN;
const DrbIoData_SourceDiscreteBits DrbIoData::SourceDiscreteBits_MAX;
const int DrbIoData::SourceDiscreteBits_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DrbIoData_RcbControlRegisterBits_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DrbIoData_RcbControlRegisterBits_descriptor_;
}
bool DrbIoData_RcbControlRegisterBits_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DrbIoData_RcbControlRegisterBits DrbIoData::NOT_USED_3;
const DrbIoData_RcbControlRegisterBits DrbIoData::RcbControlRegisterBits_MIN;
const DrbIoData_RcbControlRegisterBits DrbIoData::RcbControlRegisterBits_MAX;
const int DrbIoData::RcbControlRegisterBits_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DrbIoData_RcbStatusRegisterBits_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DrbIoData_RcbStatusRegisterBits_descriptor_;
}
bool DrbIoData_RcbStatusRegisterBits_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DrbIoData_RcbStatusRegisterBits DrbIoData::NOT_USED_4;
const DrbIoData_RcbStatusRegisterBits DrbIoData::RcbStatusRegisterBits_MIN;
const DrbIoData_RcbStatusRegisterBits DrbIoData::RcbStatusRegisterBits_MAX;
const int DrbIoData::RcbStatusRegisterBits_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DrbIoData_RcbFaultRegisterBits_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DrbIoData_RcbFaultRegisterBits_descriptor_;
}
bool DrbIoData_RcbFaultRegisterBits_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DrbIoData_RcbFaultRegisterBits DrbIoData::NOT_USED_5;
const DrbIoData_RcbFaultRegisterBits DrbIoData::RcbFaultRegisterBits_MIN;
const DrbIoData_RcbFaultRegisterBits DrbIoData::RcbFaultRegisterBits_MAX;
const int DrbIoData::RcbFaultRegisterBits_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DrbIoData_RcbTriggerOptoStatusBits_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DrbIoData_RcbTriggerOptoStatusBits_descriptor_;
}
bool DrbIoData_RcbTriggerOptoStatusBits_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 4096:
    case 8192:
    case 16384:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DrbIoData_RcbTriggerOptoStatusBits DrbIoData::NOT_USED_6;
const DrbIoData_RcbTriggerOptoStatusBits DrbIoData::OPTO_1_0_DEGREES;
const DrbIoData_RcbTriggerOptoStatusBits DrbIoData::OPTO_2_90_DEGREES;
const DrbIoData_RcbTriggerOptoStatusBits DrbIoData::OPTO_3_180_DEGREES;
const DrbIoData_RcbTriggerOptoStatusBits DrbIoData::OPTO_4_270_DEGREES;
const DrbIoData_RcbTriggerOptoStatusBits DrbIoData::OPTO_1_0_DEGREES_RAW;
const DrbIoData_RcbTriggerOptoStatusBits DrbIoData::OPTO_2_90_DEGREES_RAW;
const DrbIoData_RcbTriggerOptoStatusBits DrbIoData::OPTO_3_180_DEGREES_RAW;
const DrbIoData_RcbTriggerOptoStatusBits DrbIoData::OPTO_4_270_DEGREES_RAW;
const DrbIoData_RcbTriggerOptoStatusBits DrbIoData::DIO_0_LATCHED;
const DrbIoData_RcbTriggerOptoStatusBits DrbIoData::DIO_1_LATCHED;
const DrbIoData_RcbTriggerOptoStatusBits DrbIoData::DIO_2_LATCHED;
const DrbIoData_RcbTriggerOptoStatusBits DrbIoData::DIO_0;
const DrbIoData_RcbTriggerOptoStatusBits DrbIoData::DIO_1;
const DrbIoData_RcbTriggerOptoStatusBits DrbIoData::DIO_2;
const DrbIoData_RcbTriggerOptoStatusBits DrbIoData::RcbTriggerOptoStatusBits_MIN;
const DrbIoData_RcbTriggerOptoStatusBits DrbIoData::RcbTriggerOptoStatusBits_MAX;
const int DrbIoData::RcbTriggerOptoStatusBits_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DrbIoData::kXraySourceSerialNumFieldNumber;
const int DrbIoData::kXraySourceModelNumFieldNumber;
const int DrbIoData::kRcbFirmwareVersionFieldNumber;
const int DrbIoData::kDcb1FwRevisionFieldNumber;
const int DrbIoData::kDcb2FwRevisionFieldNumber;
const int DrbIoData::kDcb3FwRevisionFieldNumber;
const int DrbIoData::kDcb4FwRevisionFieldNumber;
const int DrbIoData::kDcb5FwRevisionFieldNumber;
const int DrbIoData::kDcbXdmmFwRevisionNotUsedFieldNumber;
const int DrbIoData::kXraySeasoningTimeRemainingStrFieldNumber;
const int DrbIoData::kXrayVoltageSetpointKvFieldNumber;
const int DrbIoData::kXrayCurrentSetpointMaFieldNumber;
const int DrbIoData::kXrayVoltageKvFieldNumber;
const int DrbIoData::kXrayCurrentMaFieldNumber;
const int DrbIoData::kXraySourceTempFieldNumber;
const int DrbIoData::kXraySourceFilamentCurrentFieldNumber;
const int DrbIoData::kRcbGantryRpmFieldNumber;
const int DrbIoData::kRcbGantryAngleDegreesFieldNumber;
const int DrbIoData::kRcbTempSensor1FieldNumber;
const int DrbIoData::kRcbTempSensor2FieldNumber;
const int DrbIoData::kDcb1AmbientTempFieldNumber;
const int DrbIoData::kDcb2AmbientTempFieldNumber;
const int DrbIoData::kDcb3AmbientTempFieldNumber;
const int DrbIoData::kDcb4AmbientTempFieldNumber;
const int DrbIoData::kDcb5AmbientTempFieldNumber;
const int DrbIoData::kConveyorSpeedCmSecFieldNumber;
const int DrbIoData::kCurrentConveyorPosCmFieldNumber;
const int DrbIoData::kCurrentGantryRotCountFieldNumber;
const int DrbIoData::kXrayFaultStatusFieldNumber;
const int DrbIoData::kXraySourceDiscreteStatusFieldNumber;
const int DrbIoData::kXraySeasoningStepFieldNumber;
const int DrbIoData::kXraySeasoningTimeRemainingFieldNumber;
const int DrbIoData::kRcbControlRegisterFieldNumber;
const int DrbIoData::kRcbStatusRegisterFieldNumber;
const int DrbIoData::kRcbFaultRegisterFieldNumber;
const int DrbIoData::kRcbTriggerOptoStatusFieldNumber;
const int DrbIoData::kRcbSerialNumberFieldNumber;
const int DrbIoData::kDcb1StatusRegisterFieldNumber;
const int DrbIoData::kDcb2StatusRegisterFieldNumber;
const int DrbIoData::kDcb3StatusRegisterFieldNumber;
const int DrbIoData::kDcb4StatusRegisterFieldNumber;
const int DrbIoData::kDcb5StatusRegisterFieldNumber;
const int DrbIoData::kRcbGantryRotationPeriodMsFieldNumber;
const int DrbIoData::kXrayRegulationFaultFieldNumber;
const int DrbIoData::kXrayInterlockOpenFieldNumber;
const int DrbIoData::kXrayCathodeOverVoltageFieldNumber;
const int DrbIoData::kXrayAnodeOverVoltageFieldNumber;
const int DrbIoData::kXrayOverTemperatureFieldNumber;
const int DrbIoData::kXrayArcFaultFieldNumber;
const int DrbIoData::kXrayOverCurrentFieldNumber;
const int DrbIoData::kXrayPowerLimitFaultFieldNumber;
const int DrbIoData::kXrayOverVoltageFieldNumber;
const int DrbIoData::kDutyCycleModeFieldNumber;
const int DrbIoData::kXrayMinimizationFieldNumber;
const int DrbIoData::kXraySeasoningInProgressFieldNumber;
const int DrbIoData::kXrayWatchdogStatusFieldNumber;
const int DrbIoData::kXrayEnableFieldNumber;
const int DrbIoData::kXrayHighVoltageOnFieldNumber;
const int DrbIoData::kXrayInterlockFieldNumber;
const int DrbIoData::kXrayOnFieldNumber;
const int DrbIoData::kOptoTrigger1HomeFieldNumber;
const int DrbIoData::kOptoTrigger2FieldNumber;
const int DrbIoData::kOptoTrigger3FieldNumber;
const int DrbIoData::kOptoTrigger4FieldNumber;
const int DrbIoData::kRectifierTemperatureFieldNumber;
const int DrbIoData::kRectifierUnderVoltageFieldNumber;
const int DrbIoData::kRectifierOverVoltageFieldNumber;
const int DrbIoData::kRectifierFanLoadFieldNumber;
const int DrbIoData::kRectifierDasLoadFieldNumber;
const int DrbIoData::kRectifierRcbLoadFieldNumber;
const int DrbIoData::kRectifierXrayCoolerFieldNumber;
const int DrbIoData::kRectifierXrayGenControllerFieldNumber;
const int DrbIoData::kRectifierXrayControllerFanFieldNumber;
const int DrbIoData::kRectifierOkFieldNumber;
const int DrbIoData::kDrbFirmwareVersionFieldNumber;
const int DrbIoData::kDrbReadyFieldNumber;
const int DrbIoData::kRcbCommLossFieldNumber;
const int DrbIoData::kWatchDogDetectionTimeErrorFieldNumber;
const int DrbIoData::kRcbControlPacketFifoFullErrorFieldNumber;
const int DrbIoData::kConveyorBeltQuadEncoderErrorFieldNumber;
const int DrbIoData::kUplinkCmdBit0FieldNumber;
const int DrbIoData::kUplinkCmdBit1FieldNumber;
const int DrbIoData::kUplinkCmdBit2FieldNumber;
const int DrbIoData::kDcb1XdmmsPresentFieldNumber;
const int DrbIoData::kDcb2XdmmsPresentFieldNumber;
const int DrbIoData::kDcb3XdmmsPresentFieldNumber;
const int DrbIoData::kDcb4XdmmsPresentFieldNumber;
const int DrbIoData::kDcb5XdmmsPresentFieldNumber;
const int DrbIoData::kNumberOfBadViewsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DrbIoData::DrbIoData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analogic.ancp00.DrbIoData)
}

void DrbIoData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DrbIoData::DrbIoData(const DrbIoData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analogic.ancp00.DrbIoData)
}

void DrbIoData::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  xray_source_serial_num_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  xray_source_model_num_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rcb_firmware_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dcb_1_fw_revision_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dcb_2_fw_revision_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dcb_3_fw_revision_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dcb_4_fw_revision_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dcb_5_fw_revision_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dcb_xdmm_fw_revision_not_used_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  xray_seasoning_time_remaining_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  xray_voltage_setpoint_kv_ = 0;
  xray_current_setpoint_ma_ = 0;
  xray_voltage_kv_ = 0;
  xray_current_ma_ = 0;
  xray_source_temp_ = 0;
  xray_source_filament_current_ = 0;
  rcb_gantry_rpm_ = 0;
  rcb_gantry_angle_degrees_ = 0;
  rcb_temp_sensor_1_ = 0;
  rcb_temp_sensor_2_ = 0;
  dcb_1_ambient_temp_ = 0;
  dcb_2_ambient_temp_ = 0;
  dcb_3_ambient_temp_ = 0;
  dcb_4_ambient_temp_ = 0;
  dcb_5_ambient_temp_ = 0;
  conveyor_speed_cm_sec_ = 0;
  current_conveyor_pos_cm_ = 0;
  current_gantry_rot_count_ = 0;
  xray_fault_status_ = 0u;
  xray_source_discrete_status_ = 0u;
  xray_seasoning_step_ = 0u;
  xray_seasoning_time_remaining_ = 0u;
  rcb_control_register_ = 0u;
  rcb_status_register_ = 0u;
  rcb_fault_register_ = 0u;
  rcb_trigger_opto_status_ = 0u;
  rcb_serial_number_ = 0u;
  dcb_1_status_register_ = 0u;
  dcb_2_status_register_ = 0u;
  dcb_3_status_register_ = 0u;
  dcb_4_status_register_ = 0u;
  dcb_5_status_register_ = 0u;
  rcb_gantry_rotation_period_ms_ = 0u;
  xray_regulation_fault_ = false;
  xray_interlock_open_ = false;
  xray_cathode_over_voltage_ = false;
  xray_anode_over_voltage_ = false;
  xray_over_temperature_ = false;
  xray_arc_fault_ = false;
  xray_over_current_ = false;
  xray_power_limit_fault_ = false;
  xray_over_voltage_ = false;
  duty_cycle_mode_ = false;
  xray_minimization_ = false;
  xray_seasoning_in_progress_ = false;
  xray_watchdog_status_ = false;
  xray_enable_ = false;
  xray_high_voltage_on_ = false;
  xray_interlock_ = false;
  xray_on_ = false;
  opto_trigger_1_home_ = false;
  opto_trigger_2_ = false;
  opto_trigger_3_ = false;
  opto_trigger_4_ = false;
  rectifier_temperature_ = false;
  rectifier_under_voltage_ = false;
  rectifier_over_voltage_ = false;
  rectifier_fan_load_ = false;
  rectifier_das_load_ = false;
  rectifier_rcb_load_ = false;
  rectifier_xray_cooler_ = false;
  rectifier_xray_gen_controller_ = false;
  rectifier_xray_controller_fan_ = false;
  rectifier_ok_ = false;
  drb_firmware_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  drb_ready_ = false;
  rcb_comm_loss_ = false;
  watch_dog_detection_time_error_ = false;
  rcb_control_packet_fifo_full_error_ = false;
  conveyor_belt_quad_encoder_error_ = false;
  uplink_cmd_bit_0_ = false;
  uplink_cmd_bit_1_ = false;
  uplink_cmd_bit_2_ = false;
  dcb1_xdmms_present_ = 0u;
  dcb2_xdmms_present_ = 0u;
  dcb3_xdmms_present_ = 0u;
  dcb4_xdmms_present_ = 0u;
  dcb5_xdmms_present_ = 0u;
  number_of_bad_views_ = GOOGLE_ULONGLONG(0);
}

DrbIoData::~DrbIoData() {
  // @@protoc_insertion_point(destructor:analogic.ancp00.DrbIoData)
  SharedDtor();
}

void DrbIoData::SharedDtor() {
  xray_source_serial_num_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  xray_source_model_num_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rcb_firmware_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dcb_1_fw_revision_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dcb_2_fw_revision_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dcb_3_fw_revision_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dcb_4_fw_revision_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dcb_5_fw_revision_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dcb_xdmm_fw_revision_not_used_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  xray_seasoning_time_remaining_str_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  drb_firmware_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void DrbIoData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DrbIoData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DrbIoData_descriptor_;
}

const DrbIoData& DrbIoData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fDrbComm_2eproto();
  return *default_instance_;
}

DrbIoData* DrbIoData::default_instance_ = NULL;

DrbIoData* DrbIoData::New(::google::protobuf::Arena* arena) const {
  DrbIoData* n = new DrbIoData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DrbIoData::Clear() {
// @@protoc_insertion_point(message_clear_start:analogic.ancp00.DrbIoData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DrbIoData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DrbIoData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  xray_source_serial_num_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  xray_source_model_num_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rcb_firmware_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dcb_1_fw_revision_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dcb_2_fw_revision_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dcb_3_fw_revision_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dcb_4_fw_revision_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dcb_5_fw_revision_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(xray_voltage_setpoint_kv_, xray_source_filament_current_);
  dcb_xdmm_fw_revision_not_used_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  xray_seasoning_time_remaining_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(rcb_gantry_rpm_, dcb_4_ambient_temp_);
  ZR_(dcb_5_ambient_temp_, xray_seasoning_time_remaining_);
  ZR_(rcb_control_register_, dcb_3_status_register_);
  ZR_(dcb_4_status_register_, xray_over_temperature_);
  ZR_(xray_arc_fault_, xray_watchdog_status_);
  ZR_(xray_enable_, opto_trigger_4_);
  ZR_(rectifier_temperature_, rectifier_xray_cooler_);
  rectifier_xray_gen_controller_ = false;
  ZR_(rectifier_xray_controller_fan_, conveyor_belt_quad_encoder_error_);
  drb_firmware_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(uplink_cmd_bit_0_, dcb5_xdmms_present_);
  number_of_bad_views_ = GOOGLE_ULONGLONG(0);

#undef ZR_HELPER_
#undef ZR_

}

bool DrbIoData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analogic.ancp00.DrbIoData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string xray_source_serial_num = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_xray_source_serial_num()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->xray_source_serial_num().data(), this->xray_source_serial_num().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.DrbIoData.xray_source_serial_num"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_xray_source_model_num;
        break;
      }

      // optional string xray_source_model_num = 2;
      case 2: {
        if (tag == 18) {
         parse_xray_source_model_num:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_xray_source_model_num()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->xray_source_model_num().data(), this->xray_source_model_num().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.DrbIoData.xray_source_model_num"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_rcb_firmware_version;
        break;
      }

      // optional string rcb_firmware_version = 3;
      case 3: {
        if (tag == 26) {
         parse_rcb_firmware_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rcb_firmware_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rcb_firmware_version().data(), this->rcb_firmware_version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.DrbIoData.rcb_firmware_version"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_dcb_1_fw_revision;
        break;
      }

      // optional string dcb_1_fw_revision = 4;
      case 4: {
        if (tag == 34) {
         parse_dcb_1_fw_revision:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dcb_1_fw_revision()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dcb_1_fw_revision().data(), this->dcb_1_fw_revision().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.DrbIoData.dcb_1_fw_revision"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_dcb_2_fw_revision;
        break;
      }

      // optional string dcb_2_fw_revision = 5;
      case 5: {
        if (tag == 42) {
         parse_dcb_2_fw_revision:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dcb_2_fw_revision()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dcb_2_fw_revision().data(), this->dcb_2_fw_revision().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.DrbIoData.dcb_2_fw_revision"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_dcb_3_fw_revision;
        break;
      }

      // optional string dcb_3_fw_revision = 6;
      case 6: {
        if (tag == 50) {
         parse_dcb_3_fw_revision:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dcb_3_fw_revision()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dcb_3_fw_revision().data(), this->dcb_3_fw_revision().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.DrbIoData.dcb_3_fw_revision"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_dcb_4_fw_revision;
        break;
      }

      // optional string dcb_4_fw_revision = 7;
      case 7: {
        if (tag == 58) {
         parse_dcb_4_fw_revision:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dcb_4_fw_revision()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dcb_4_fw_revision().data(), this->dcb_4_fw_revision().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.DrbIoData.dcb_4_fw_revision"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_dcb_5_fw_revision;
        break;
      }

      // optional string dcb_5_fw_revision = 8;
      case 8: {
        if (tag == 66) {
         parse_dcb_5_fw_revision:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dcb_5_fw_revision()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dcb_5_fw_revision().data(), this->dcb_5_fw_revision().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.DrbIoData.dcb_5_fw_revision"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_dcb_xdmm_fw_revision_not_used;
        break;
      }

      // optional string dcb_xdmm_fw_revision_not_used = 9;
      case 9: {
        if (tag == 74) {
         parse_dcb_xdmm_fw_revision_not_used:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dcb_xdmm_fw_revision_not_used()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dcb_xdmm_fw_revision_not_used().data(), this->dcb_xdmm_fw_revision_not_used().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.DrbIoData.dcb_xdmm_fw_revision_not_used"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_xray_seasoning_time_remaining_str;
        break;
      }

      // optional string xray_seasoning_time_remaining_str = 10;
      case 10: {
        if (tag == 82) {
         parse_xray_seasoning_time_remaining_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_xray_seasoning_time_remaining_str()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->xray_seasoning_time_remaining_str().data(), this->xray_seasoning_time_remaining_str().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.DrbIoData.xray_seasoning_time_remaining_str"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(165)) goto parse_xray_voltage_setpoint_kv;
        break;
      }

      // optional float xray_voltage_setpoint_kv = 20;
      case 20: {
        if (tag == 165) {
         parse_xray_voltage_setpoint_kv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xray_voltage_setpoint_kv_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(173)) goto parse_xray_current_setpoint_ma;
        break;
      }

      // optional float xray_current_setpoint_ma = 21;
      case 21: {
        if (tag == 173) {
         parse_xray_current_setpoint_ma:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xray_current_setpoint_ma_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(181)) goto parse_xray_voltage_kv;
        break;
      }

      // optional float xray_voltage_kv = 22;
      case 22: {
        if (tag == 181) {
         parse_xray_voltage_kv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xray_voltage_kv_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(189)) goto parse_xray_current_ma;
        break;
      }

      // optional float xray_current_ma = 23;
      case 23: {
        if (tag == 189) {
         parse_xray_current_ma:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xray_current_ma_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(197)) goto parse_xray_source_temp;
        break;
      }

      // optional float xray_source_temp = 24;
      case 24: {
        if (tag == 197) {
         parse_xray_source_temp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xray_source_temp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(205)) goto parse_xray_source_filament_current;
        break;
      }

      // optional float xray_source_filament_current = 25;
      case 25: {
        if (tag == 205) {
         parse_xray_source_filament_current:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xray_source_filament_current_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(213)) goto parse_rcb_gantry_rpm;
        break;
      }

      // optional float rcb_gantry_rpm = 26;
      case 26: {
        if (tag == 213) {
         parse_rcb_gantry_rpm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rcb_gantry_rpm_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(221)) goto parse_rcb_gantry_angle_degrees;
        break;
      }

      // optional float rcb_gantry_angle_degrees = 27;
      case 27: {
        if (tag == 221) {
         parse_rcb_gantry_angle_degrees:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rcb_gantry_angle_degrees_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(229)) goto parse_rcb_temp_sensor_1;
        break;
      }

      // optional float rcb_temp_sensor_1 = 28;
      case 28: {
        if (tag == 229) {
         parse_rcb_temp_sensor_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rcb_temp_sensor_1_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(237)) goto parse_rcb_temp_sensor_2;
        break;
      }

      // optional float rcb_temp_sensor_2 = 29;
      case 29: {
        if (tag == 237) {
         parse_rcb_temp_sensor_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rcb_temp_sensor_2_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(245)) goto parse_dcb_1_ambient_temp;
        break;
      }

      // optional float dcb_1_ambient_temp = 30;
      case 30: {
        if (tag == 245) {
         parse_dcb_1_ambient_temp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dcb_1_ambient_temp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(253)) goto parse_dcb_2_ambient_temp;
        break;
      }

      // optional float dcb_2_ambient_temp = 31;
      case 31: {
        if (tag == 253) {
         parse_dcb_2_ambient_temp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dcb_2_ambient_temp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(261)) goto parse_dcb_3_ambient_temp;
        break;
      }

      // optional float dcb_3_ambient_temp = 32;
      case 32: {
        if (tag == 261) {
         parse_dcb_3_ambient_temp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dcb_3_ambient_temp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(269)) goto parse_dcb_4_ambient_temp;
        break;
      }

      // optional float dcb_4_ambient_temp = 33;
      case 33: {
        if (tag == 269) {
         parse_dcb_4_ambient_temp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dcb_4_ambient_temp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(277)) goto parse_dcb_5_ambient_temp;
        break;
      }

      // optional float dcb_5_ambient_temp = 34;
      case 34: {
        if (tag == 277) {
         parse_dcb_5_ambient_temp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dcb_5_ambient_temp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(285)) goto parse_conveyor_speed_cm_sec;
        break;
      }

      // optional float conveyor_speed_cm_sec = 35;
      case 35: {
        if (tag == 285) {
         parse_conveyor_speed_cm_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &conveyor_speed_cm_sec_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(289)) goto parse_current_conveyor_pos_cm;
        break;
      }

      // optional double current_conveyor_pos_cm = 36;
      case 36: {
        if (tag == 289) {
         parse_current_conveyor_pos_cm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &current_conveyor_pos_cm_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(297)) goto parse_current_gantry_rot_count;
        break;
      }

      // optional double current_gantry_rot_count = 37;
      case 37: {
        if (tag == 297) {
         parse_current_gantry_rot_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &current_gantry_rot_count_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(405)) goto parse_xray_fault_status;
        break;
      }

      // optional fixed32 xray_fault_status = 50;
      case 50: {
        if (tag == 405) {
         parse_xray_fault_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &xray_fault_status_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(413)) goto parse_xray_source_discrete_status;
        break;
      }

      // optional fixed32 xray_source_discrete_status = 51;
      case 51: {
        if (tag == 413) {
         parse_xray_source_discrete_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &xray_source_discrete_status_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(416)) goto parse_xray_seasoning_step;
        break;
      }

      // optional uint32 xray_seasoning_step = 52;
      case 52: {
        if (tag == 416) {
         parse_xray_seasoning_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &xray_seasoning_step_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(424)) goto parse_xray_seasoning_time_remaining;
        break;
      }

      // optional uint32 xray_seasoning_time_remaining = 53;
      case 53: {
        if (tag == 424) {
         parse_xray_seasoning_time_remaining:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &xray_seasoning_time_remaining_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(437)) goto parse_rcb_control_register;
        break;
      }

      // optional fixed32 rcb_control_register = 54;
      case 54: {
        if (tag == 437) {
         parse_rcb_control_register:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &rcb_control_register_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(445)) goto parse_rcb_status_register;
        break;
      }

      // optional fixed32 rcb_status_register = 55;
      case 55: {
        if (tag == 445) {
         parse_rcb_status_register:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &rcb_status_register_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(453)) goto parse_rcb_fault_register;
        break;
      }

      // optional fixed32 rcb_fault_register = 56;
      case 56: {
        if (tag == 453) {
         parse_rcb_fault_register:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &rcb_fault_register_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(461)) goto parse_rcb_trigger_opto_status;
        break;
      }

      // optional fixed32 rcb_trigger_opto_status = 57;
      case 57: {
        if (tag == 461) {
         parse_rcb_trigger_opto_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &rcb_trigger_opto_status_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(464)) goto parse_rcb_serial_number;
        break;
      }

      // optional uint32 rcb_serial_number = 58;
      case 58: {
        if (tag == 464) {
         parse_rcb_serial_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rcb_serial_number_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(477)) goto parse_dcb_1_status_register;
        break;
      }

      // optional fixed32 dcb_1_status_register = 59;
      case 59: {
        if (tag == 477) {
         parse_dcb_1_status_register:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &dcb_1_status_register_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(485)) goto parse_dcb_2_status_register;
        break;
      }

      // optional fixed32 dcb_2_status_register = 60;
      case 60: {
        if (tag == 485) {
         parse_dcb_2_status_register:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &dcb_2_status_register_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(493)) goto parse_dcb_3_status_register;
        break;
      }

      // optional fixed32 dcb_3_status_register = 61;
      case 61: {
        if (tag == 493) {
         parse_dcb_3_status_register:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &dcb_3_status_register_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(501)) goto parse_dcb_4_status_register;
        break;
      }

      // optional fixed32 dcb_4_status_register = 62;
      case 62: {
        if (tag == 501) {
         parse_dcb_4_status_register:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &dcb_4_status_register_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(509)) goto parse_dcb_5_status_register;
        break;
      }

      // optional fixed32 dcb_5_status_register = 63;
      case 63: {
        if (tag == 509) {
         parse_dcb_5_status_register:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &dcb_5_status_register_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(512)) goto parse_rcb_gantry_rotation_period_ms;
        break;
      }

      // optional uint32 rcb_gantry_rotation_period_ms = 64;
      case 64: {
        if (tag == 512) {
         parse_rcb_gantry_rotation_period_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rcb_gantry_rotation_period_ms_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(800)) goto parse_xray_regulation_fault;
        break;
      }

      // optional bool xray_regulation_fault = 100;
      case 100: {
        if (tag == 800) {
         parse_xray_regulation_fault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &xray_regulation_fault_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(808)) goto parse_xray_interlock_open;
        break;
      }

      // optional bool xray_interlock_open = 101;
      case 101: {
        if (tag == 808) {
         parse_xray_interlock_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &xray_interlock_open_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(816)) goto parse_xray_cathode_over_voltage;
        break;
      }

      // optional bool xray_cathode_over_voltage = 102;
      case 102: {
        if (tag == 816) {
         parse_xray_cathode_over_voltage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &xray_cathode_over_voltage_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(824)) goto parse_xray_anode_over_voltage;
        break;
      }

      // optional bool xray_anode_over_voltage = 103;
      case 103: {
        if (tag == 824) {
         parse_xray_anode_over_voltage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &xray_anode_over_voltage_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(832)) goto parse_xray_over_temperature;
        break;
      }

      // optional bool xray_over_temperature = 104;
      case 104: {
        if (tag == 832) {
         parse_xray_over_temperature:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &xray_over_temperature_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(840)) goto parse_xray_arc_fault;
        break;
      }

      // optional bool xray_arc_fault = 105;
      case 105: {
        if (tag == 840) {
         parse_xray_arc_fault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &xray_arc_fault_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(848)) goto parse_xray_over_current;
        break;
      }

      // optional bool xray_over_current = 106;
      case 106: {
        if (tag == 848) {
         parse_xray_over_current:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &xray_over_current_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(856)) goto parse_xray_power_limit_fault;
        break;
      }

      // optional bool xray_power_limit_fault = 107;
      case 107: {
        if (tag == 856) {
         parse_xray_power_limit_fault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &xray_power_limit_fault_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(864)) goto parse_xray_over_voltage;
        break;
      }

      // optional bool xray_over_voltage = 108;
      case 108: {
        if (tag == 864) {
         parse_xray_over_voltage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &xray_over_voltage_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(872)) goto parse_duty_cycle_mode;
        break;
      }

      // optional bool duty_cycle_mode = 109;
      case 109: {
        if (tag == 872) {
         parse_duty_cycle_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &duty_cycle_mode_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(880)) goto parse_xray_minimization;
        break;
      }

      // optional bool xray_minimization = 110;
      case 110: {
        if (tag == 880) {
         parse_xray_minimization:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &xray_minimization_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(888)) goto parse_xray_seasoning_in_progress;
        break;
      }

      // optional bool xray_seasoning_in_progress = 111;
      case 111: {
        if (tag == 888) {
         parse_xray_seasoning_in_progress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &xray_seasoning_in_progress_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(896)) goto parse_xray_watchdog_status;
        break;
      }

      // optional bool xray_watchdog_status = 112;
      case 112: {
        if (tag == 896) {
         parse_xray_watchdog_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &xray_watchdog_status_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(904)) goto parse_xray_enable;
        break;
      }

      // optional bool xray_enable = 113;
      case 113: {
        if (tag == 904) {
         parse_xray_enable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &xray_enable_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(912)) goto parse_xray_high_voltage_on;
        break;
      }

      // optional bool xray_high_voltage_on = 114;
      case 114: {
        if (tag == 912) {
         parse_xray_high_voltage_on:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &xray_high_voltage_on_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(920)) goto parse_xray_interlock;
        break;
      }

      // optional bool xray_interlock = 115;
      case 115: {
        if (tag == 920) {
         parse_xray_interlock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &xray_interlock_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(928)) goto parse_xray_on;
        break;
      }

      // optional bool xray_on = 116;
      case 116: {
        if (tag == 928) {
         parse_xray_on:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &xray_on_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(936)) goto parse_opto_trigger_1_home;
        break;
      }

      // optional bool opto_trigger_1_home = 117;
      case 117: {
        if (tag == 936) {
         parse_opto_trigger_1_home:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &opto_trigger_1_home_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(944)) goto parse_opto_trigger_2;
        break;
      }

      // optional bool opto_trigger_2 = 118;
      case 118: {
        if (tag == 944) {
         parse_opto_trigger_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &opto_trigger_2_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(952)) goto parse_opto_trigger_3;
        break;
      }

      // optional bool opto_trigger_3 = 119;
      case 119: {
        if (tag == 952) {
         parse_opto_trigger_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &opto_trigger_3_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(960)) goto parse_opto_trigger_4;
        break;
      }

      // optional bool opto_trigger_4 = 120;
      case 120: {
        if (tag == 960) {
         parse_opto_trigger_4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &opto_trigger_4_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(968)) goto parse_rectifier_temperature;
        break;
      }

      // optional bool rectifier_temperature = 121;
      case 121: {
        if (tag == 968) {
         parse_rectifier_temperature:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rectifier_temperature_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(976)) goto parse_rectifier_under_voltage;
        break;
      }

      // optional bool rectifier_under_voltage = 122;
      case 122: {
        if (tag == 976) {
         parse_rectifier_under_voltage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rectifier_under_voltage_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(984)) goto parse_rectifier_over_voltage;
        break;
      }

      // optional bool rectifier_over_voltage = 123;
      case 123: {
        if (tag == 984) {
         parse_rectifier_over_voltage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rectifier_over_voltage_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(992)) goto parse_rectifier_fan_load;
        break;
      }

      // optional bool rectifier_fan_load = 124;
      case 124: {
        if (tag == 992) {
         parse_rectifier_fan_load:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rectifier_fan_load_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1000)) goto parse_rectifier_das_load;
        break;
      }

      // optional bool rectifier_das_load = 125;
      case 125: {
        if (tag == 1000) {
         parse_rectifier_das_load:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rectifier_das_load_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1008)) goto parse_rectifier_rcb_load;
        break;
      }

      // optional bool rectifier_rcb_load = 126;
      case 126: {
        if (tag == 1008) {
         parse_rectifier_rcb_load:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rectifier_rcb_load_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1016)) goto parse_rectifier_xray_cooler;
        break;
      }

      // optional bool rectifier_xray_cooler = 127;
      case 127: {
        if (tag == 1016) {
         parse_rectifier_xray_cooler:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rectifier_xray_cooler_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1024)) goto parse_rectifier_xray_gen_controller;
        break;
      }

      // optional bool rectifier_xray_gen_controller = 128;
      case 128: {
        if (tag == 1024) {
         parse_rectifier_xray_gen_controller:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rectifier_xray_gen_controller_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1032)) goto parse_rectifier_xray_controller_fan;
        break;
      }

      // optional bool rectifier_xray_controller_fan = 129;
      case 129: {
        if (tag == 1032) {
         parse_rectifier_xray_controller_fan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rectifier_xray_controller_fan_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1040)) goto parse_rectifier_ok;
        break;
      }

      // optional bool rectifier_ok = 130;
      case 130: {
        if (tag == 1040) {
         parse_rectifier_ok:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rectifier_ok_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1050)) goto parse_drb_firmware_version;
        break;
      }

      // optional string drb_firmware_version = 131;
      case 131: {
        if (tag == 1050) {
         parse_drb_firmware_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_drb_firmware_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->drb_firmware_version().data(), this->drb_firmware_version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.DrbIoData.drb_firmware_version"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1056)) goto parse_drb_ready;
        break;
      }

      // optional bool drb_ready = 132;
      case 132: {
        if (tag == 1056) {
         parse_drb_ready:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &drb_ready_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1064)) goto parse_rcb_comm_loss;
        break;
      }

      // optional bool rcb_comm_loss = 133;
      case 133: {
        if (tag == 1064) {
         parse_rcb_comm_loss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rcb_comm_loss_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1072)) goto parse_watch_dog_detection_time_error;
        break;
      }

      // optional bool watch_dog_detection_time_error = 134;
      case 134: {
        if (tag == 1072) {
         parse_watch_dog_detection_time_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &watch_dog_detection_time_error_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1080)) goto parse_rcb_control_packet_fifo_full_error;
        break;
      }

      // optional bool rcb_control_packet_fifo_full_error = 135;
      case 135: {
        if (tag == 1080) {
         parse_rcb_control_packet_fifo_full_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rcb_control_packet_fifo_full_error_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1088)) goto parse_conveyor_belt_quad_encoder_error;
        break;
      }

      // optional bool conveyor_belt_quad_encoder_error = 136;
      case 136: {
        if (tag == 1088) {
         parse_conveyor_belt_quad_encoder_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &conveyor_belt_quad_encoder_error_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1096)) goto parse_uplink_cmd_bit_0;
        break;
      }

      // optional bool uplink_cmd_bit_0 = 137;
      case 137: {
        if (tag == 1096) {
         parse_uplink_cmd_bit_0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &uplink_cmd_bit_0_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1104)) goto parse_uplink_cmd_bit_1;
        break;
      }

      // optional bool uplink_cmd_bit_1 = 138;
      case 138: {
        if (tag == 1104) {
         parse_uplink_cmd_bit_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &uplink_cmd_bit_1_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1112)) goto parse_uplink_cmd_bit_2;
        break;
      }

      // optional bool uplink_cmd_bit_2 = 139;
      case 139: {
        if (tag == 1112) {
         parse_uplink_cmd_bit_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &uplink_cmd_bit_2_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1125)) goto parse_dcb1_xdmms_present;
        break;
      }

      // optional fixed32 dcb1_xdmms_present = 140;
      case 140: {
        if (tag == 1125) {
         parse_dcb1_xdmms_present:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &dcb1_xdmms_present_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1133)) goto parse_dcb2_xdmms_present;
        break;
      }

      // optional fixed32 dcb2_xdmms_present = 141;
      case 141: {
        if (tag == 1133) {
         parse_dcb2_xdmms_present:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &dcb2_xdmms_present_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1141)) goto parse_dcb3_xdmms_present;
        break;
      }

      // optional fixed32 dcb3_xdmms_present = 142;
      case 142: {
        if (tag == 1141) {
         parse_dcb3_xdmms_present:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &dcb3_xdmms_present_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1149)) goto parse_dcb4_xdmms_present;
        break;
      }

      // optional fixed32 dcb4_xdmms_present = 143;
      case 143: {
        if (tag == 1149) {
         parse_dcb4_xdmms_present:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &dcb4_xdmms_present_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1157)) goto parse_dcb5_xdmms_present;
        break;
      }

      // optional fixed32 dcb5_xdmms_present = 144;
      case 144: {
        if (tag == 1157) {
         parse_dcb5_xdmms_present:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &dcb5_xdmms_present_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1281)) goto parse_number_of_bad_views;
        break;
      }

      // optional fixed64 number_of_bad_views = 160;
      case 160: {
        if (tag == 1281) {
         parse_number_of_bad_views:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &number_of_bad_views_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:analogic.ancp00.DrbIoData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analogic.ancp00.DrbIoData)
  return false;
#undef DO_
}

void DrbIoData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analogic.ancp00.DrbIoData)
  // optional string xray_source_serial_num = 1;
  if (this->xray_source_serial_num().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->xray_source_serial_num().data(), this->xray_source_serial_num().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.DrbIoData.xray_source_serial_num");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->xray_source_serial_num(), output);
  }

  // optional string xray_source_model_num = 2;
  if (this->xray_source_model_num().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->xray_source_model_num().data(), this->xray_source_model_num().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.DrbIoData.xray_source_model_num");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->xray_source_model_num(), output);
  }

  // optional string rcb_firmware_version = 3;
  if (this->rcb_firmware_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rcb_firmware_version().data(), this->rcb_firmware_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.DrbIoData.rcb_firmware_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->rcb_firmware_version(), output);
  }

  // optional string dcb_1_fw_revision = 4;
  if (this->dcb_1_fw_revision().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dcb_1_fw_revision().data(), this->dcb_1_fw_revision().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.DrbIoData.dcb_1_fw_revision");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->dcb_1_fw_revision(), output);
  }

  // optional string dcb_2_fw_revision = 5;
  if (this->dcb_2_fw_revision().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dcb_2_fw_revision().data(), this->dcb_2_fw_revision().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.DrbIoData.dcb_2_fw_revision");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->dcb_2_fw_revision(), output);
  }

  // optional string dcb_3_fw_revision = 6;
  if (this->dcb_3_fw_revision().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dcb_3_fw_revision().data(), this->dcb_3_fw_revision().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.DrbIoData.dcb_3_fw_revision");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->dcb_3_fw_revision(), output);
  }

  // optional string dcb_4_fw_revision = 7;
  if (this->dcb_4_fw_revision().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dcb_4_fw_revision().data(), this->dcb_4_fw_revision().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.DrbIoData.dcb_4_fw_revision");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->dcb_4_fw_revision(), output);
  }

  // optional string dcb_5_fw_revision = 8;
  if (this->dcb_5_fw_revision().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dcb_5_fw_revision().data(), this->dcb_5_fw_revision().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.DrbIoData.dcb_5_fw_revision");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->dcb_5_fw_revision(), output);
  }

  // optional string dcb_xdmm_fw_revision_not_used = 9;
  if (this->dcb_xdmm_fw_revision_not_used().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dcb_xdmm_fw_revision_not_used().data(), this->dcb_xdmm_fw_revision_not_used().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.DrbIoData.dcb_xdmm_fw_revision_not_used");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->dcb_xdmm_fw_revision_not_used(), output);
  }

  // optional string xray_seasoning_time_remaining_str = 10;
  if (this->xray_seasoning_time_remaining_str().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->xray_seasoning_time_remaining_str().data(), this->xray_seasoning_time_remaining_str().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.DrbIoData.xray_seasoning_time_remaining_str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->xray_seasoning_time_remaining_str(), output);
  }

  // optional float xray_voltage_setpoint_kv = 20;
  if (this->xray_voltage_setpoint_kv() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->xray_voltage_setpoint_kv(), output);
  }

  // optional float xray_current_setpoint_ma = 21;
  if (this->xray_current_setpoint_ma() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->xray_current_setpoint_ma(), output);
  }

  // optional float xray_voltage_kv = 22;
  if (this->xray_voltage_kv() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->xray_voltage_kv(), output);
  }

  // optional float xray_current_ma = 23;
  if (this->xray_current_ma() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(23, this->xray_current_ma(), output);
  }

  // optional float xray_source_temp = 24;
  if (this->xray_source_temp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->xray_source_temp(), output);
  }

  // optional float xray_source_filament_current = 25;
  if (this->xray_source_filament_current() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(25, this->xray_source_filament_current(), output);
  }

  // optional float rcb_gantry_rpm = 26;
  if (this->rcb_gantry_rpm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(26, this->rcb_gantry_rpm(), output);
  }

  // optional float rcb_gantry_angle_degrees = 27;
  if (this->rcb_gantry_angle_degrees() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(27, this->rcb_gantry_angle_degrees(), output);
  }

  // optional float rcb_temp_sensor_1 = 28;
  if (this->rcb_temp_sensor_1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(28, this->rcb_temp_sensor_1(), output);
  }

  // optional float rcb_temp_sensor_2 = 29;
  if (this->rcb_temp_sensor_2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(29, this->rcb_temp_sensor_2(), output);
  }

  // optional float dcb_1_ambient_temp = 30;
  if (this->dcb_1_ambient_temp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(30, this->dcb_1_ambient_temp(), output);
  }

  // optional float dcb_2_ambient_temp = 31;
  if (this->dcb_2_ambient_temp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(31, this->dcb_2_ambient_temp(), output);
  }

  // optional float dcb_3_ambient_temp = 32;
  if (this->dcb_3_ambient_temp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(32, this->dcb_3_ambient_temp(), output);
  }

  // optional float dcb_4_ambient_temp = 33;
  if (this->dcb_4_ambient_temp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(33, this->dcb_4_ambient_temp(), output);
  }

  // optional float dcb_5_ambient_temp = 34;
  if (this->dcb_5_ambient_temp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(34, this->dcb_5_ambient_temp(), output);
  }

  // optional float conveyor_speed_cm_sec = 35;
  if (this->conveyor_speed_cm_sec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(35, this->conveyor_speed_cm_sec(), output);
  }

  // optional double current_conveyor_pos_cm = 36;
  if (this->current_conveyor_pos_cm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(36, this->current_conveyor_pos_cm(), output);
  }

  // optional double current_gantry_rot_count = 37;
  if (this->current_gantry_rot_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(37, this->current_gantry_rot_count(), output);
  }

  // optional fixed32 xray_fault_status = 50;
  if (this->xray_fault_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(50, this->xray_fault_status(), output);
  }

  // optional fixed32 xray_source_discrete_status = 51;
  if (this->xray_source_discrete_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(51, this->xray_source_discrete_status(), output);
  }

  // optional uint32 xray_seasoning_step = 52;
  if (this->xray_seasoning_step() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(52, this->xray_seasoning_step(), output);
  }

  // optional uint32 xray_seasoning_time_remaining = 53;
  if (this->xray_seasoning_time_remaining() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(53, this->xray_seasoning_time_remaining(), output);
  }

  // optional fixed32 rcb_control_register = 54;
  if (this->rcb_control_register() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(54, this->rcb_control_register(), output);
  }

  // optional fixed32 rcb_status_register = 55;
  if (this->rcb_status_register() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(55, this->rcb_status_register(), output);
  }

  // optional fixed32 rcb_fault_register = 56;
  if (this->rcb_fault_register() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(56, this->rcb_fault_register(), output);
  }

  // optional fixed32 rcb_trigger_opto_status = 57;
  if (this->rcb_trigger_opto_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(57, this->rcb_trigger_opto_status(), output);
  }

  // optional uint32 rcb_serial_number = 58;
  if (this->rcb_serial_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(58, this->rcb_serial_number(), output);
  }

  // optional fixed32 dcb_1_status_register = 59;
  if (this->dcb_1_status_register() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(59, this->dcb_1_status_register(), output);
  }

  // optional fixed32 dcb_2_status_register = 60;
  if (this->dcb_2_status_register() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(60, this->dcb_2_status_register(), output);
  }

  // optional fixed32 dcb_3_status_register = 61;
  if (this->dcb_3_status_register() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(61, this->dcb_3_status_register(), output);
  }

  // optional fixed32 dcb_4_status_register = 62;
  if (this->dcb_4_status_register() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(62, this->dcb_4_status_register(), output);
  }

  // optional fixed32 dcb_5_status_register = 63;
  if (this->dcb_5_status_register() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(63, this->dcb_5_status_register(), output);
  }

  // optional uint32 rcb_gantry_rotation_period_ms = 64;
  if (this->rcb_gantry_rotation_period_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(64, this->rcb_gantry_rotation_period_ms(), output);
  }

  // optional bool xray_regulation_fault = 100;
  if (this->xray_regulation_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(100, this->xray_regulation_fault(), output);
  }

  // optional bool xray_interlock_open = 101;
  if (this->xray_interlock_open() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(101, this->xray_interlock_open(), output);
  }

  // optional bool xray_cathode_over_voltage = 102;
  if (this->xray_cathode_over_voltage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(102, this->xray_cathode_over_voltage(), output);
  }

  // optional bool xray_anode_over_voltage = 103;
  if (this->xray_anode_over_voltage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(103, this->xray_anode_over_voltage(), output);
  }

  // optional bool xray_over_temperature = 104;
  if (this->xray_over_temperature() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(104, this->xray_over_temperature(), output);
  }

  // optional bool xray_arc_fault = 105;
  if (this->xray_arc_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(105, this->xray_arc_fault(), output);
  }

  // optional bool xray_over_current = 106;
  if (this->xray_over_current() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(106, this->xray_over_current(), output);
  }

  // optional bool xray_power_limit_fault = 107;
  if (this->xray_power_limit_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(107, this->xray_power_limit_fault(), output);
  }

  // optional bool xray_over_voltage = 108;
  if (this->xray_over_voltage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(108, this->xray_over_voltage(), output);
  }

  // optional bool duty_cycle_mode = 109;
  if (this->duty_cycle_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(109, this->duty_cycle_mode(), output);
  }

  // optional bool xray_minimization = 110;
  if (this->xray_minimization() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(110, this->xray_minimization(), output);
  }

  // optional bool xray_seasoning_in_progress = 111;
  if (this->xray_seasoning_in_progress() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(111, this->xray_seasoning_in_progress(), output);
  }

  // optional bool xray_watchdog_status = 112;
  if (this->xray_watchdog_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(112, this->xray_watchdog_status(), output);
  }

  // optional bool xray_enable = 113;
  if (this->xray_enable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(113, this->xray_enable(), output);
  }

  // optional bool xray_high_voltage_on = 114;
  if (this->xray_high_voltage_on() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(114, this->xray_high_voltage_on(), output);
  }

  // optional bool xray_interlock = 115;
  if (this->xray_interlock() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(115, this->xray_interlock(), output);
  }

  // optional bool xray_on = 116;
  if (this->xray_on() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(116, this->xray_on(), output);
  }

  // optional bool opto_trigger_1_home = 117;
  if (this->opto_trigger_1_home() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(117, this->opto_trigger_1_home(), output);
  }

  // optional bool opto_trigger_2 = 118;
  if (this->opto_trigger_2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(118, this->opto_trigger_2(), output);
  }

  // optional bool opto_trigger_3 = 119;
  if (this->opto_trigger_3() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(119, this->opto_trigger_3(), output);
  }

  // optional bool opto_trigger_4 = 120;
  if (this->opto_trigger_4() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(120, this->opto_trigger_4(), output);
  }

  // optional bool rectifier_temperature = 121;
  if (this->rectifier_temperature() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(121, this->rectifier_temperature(), output);
  }

  // optional bool rectifier_under_voltage = 122;
  if (this->rectifier_under_voltage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(122, this->rectifier_under_voltage(), output);
  }

  // optional bool rectifier_over_voltage = 123;
  if (this->rectifier_over_voltage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(123, this->rectifier_over_voltage(), output);
  }

  // optional bool rectifier_fan_load = 124;
  if (this->rectifier_fan_load() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(124, this->rectifier_fan_load(), output);
  }

  // optional bool rectifier_das_load = 125;
  if (this->rectifier_das_load() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(125, this->rectifier_das_load(), output);
  }

  // optional bool rectifier_rcb_load = 126;
  if (this->rectifier_rcb_load() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(126, this->rectifier_rcb_load(), output);
  }

  // optional bool rectifier_xray_cooler = 127;
  if (this->rectifier_xray_cooler() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(127, this->rectifier_xray_cooler(), output);
  }

  // optional bool rectifier_xray_gen_controller = 128;
  if (this->rectifier_xray_gen_controller() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(128, this->rectifier_xray_gen_controller(), output);
  }

  // optional bool rectifier_xray_controller_fan = 129;
  if (this->rectifier_xray_controller_fan() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(129, this->rectifier_xray_controller_fan(), output);
  }

  // optional bool rectifier_ok = 130;
  if (this->rectifier_ok() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(130, this->rectifier_ok(), output);
  }

  // optional string drb_firmware_version = 131;
  if (this->drb_firmware_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->drb_firmware_version().data(), this->drb_firmware_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.DrbIoData.drb_firmware_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      131, this->drb_firmware_version(), output);
  }

  // optional bool drb_ready = 132;
  if (this->drb_ready() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(132, this->drb_ready(), output);
  }

  // optional bool rcb_comm_loss = 133;
  if (this->rcb_comm_loss() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(133, this->rcb_comm_loss(), output);
  }

  // optional bool watch_dog_detection_time_error = 134;
  if (this->watch_dog_detection_time_error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(134, this->watch_dog_detection_time_error(), output);
  }

  // optional bool rcb_control_packet_fifo_full_error = 135;
  if (this->rcb_control_packet_fifo_full_error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(135, this->rcb_control_packet_fifo_full_error(), output);
  }

  // optional bool conveyor_belt_quad_encoder_error = 136;
  if (this->conveyor_belt_quad_encoder_error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(136, this->conveyor_belt_quad_encoder_error(), output);
  }

  // optional bool uplink_cmd_bit_0 = 137;
  if (this->uplink_cmd_bit_0() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(137, this->uplink_cmd_bit_0(), output);
  }

  // optional bool uplink_cmd_bit_1 = 138;
  if (this->uplink_cmd_bit_1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(138, this->uplink_cmd_bit_1(), output);
  }

  // optional bool uplink_cmd_bit_2 = 139;
  if (this->uplink_cmd_bit_2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(139, this->uplink_cmd_bit_2(), output);
  }

  // optional fixed32 dcb1_xdmms_present = 140;
  if (this->dcb1_xdmms_present() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(140, this->dcb1_xdmms_present(), output);
  }

  // optional fixed32 dcb2_xdmms_present = 141;
  if (this->dcb2_xdmms_present() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(141, this->dcb2_xdmms_present(), output);
  }

  // optional fixed32 dcb3_xdmms_present = 142;
  if (this->dcb3_xdmms_present() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(142, this->dcb3_xdmms_present(), output);
  }

  // optional fixed32 dcb4_xdmms_present = 143;
  if (this->dcb4_xdmms_present() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(143, this->dcb4_xdmms_present(), output);
  }

  // optional fixed32 dcb5_xdmms_present = 144;
  if (this->dcb5_xdmms_present() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(144, this->dcb5_xdmms_present(), output);
  }

  // optional fixed64 number_of_bad_views = 160;
  if (this->number_of_bad_views() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(160, this->number_of_bad_views(), output);
  }

  // @@protoc_insertion_point(serialize_end:analogic.ancp00.DrbIoData)
}

::google::protobuf::uint8* DrbIoData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analogic.ancp00.DrbIoData)
  // optional string xray_source_serial_num = 1;
  if (this->xray_source_serial_num().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->xray_source_serial_num().data(), this->xray_source_serial_num().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.DrbIoData.xray_source_serial_num");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->xray_source_serial_num(), target);
  }

  // optional string xray_source_model_num = 2;
  if (this->xray_source_model_num().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->xray_source_model_num().data(), this->xray_source_model_num().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.DrbIoData.xray_source_model_num");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->xray_source_model_num(), target);
  }

  // optional string rcb_firmware_version = 3;
  if (this->rcb_firmware_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rcb_firmware_version().data(), this->rcb_firmware_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.DrbIoData.rcb_firmware_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->rcb_firmware_version(), target);
  }

  // optional string dcb_1_fw_revision = 4;
  if (this->dcb_1_fw_revision().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dcb_1_fw_revision().data(), this->dcb_1_fw_revision().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.DrbIoData.dcb_1_fw_revision");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->dcb_1_fw_revision(), target);
  }

  // optional string dcb_2_fw_revision = 5;
  if (this->dcb_2_fw_revision().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dcb_2_fw_revision().data(), this->dcb_2_fw_revision().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.DrbIoData.dcb_2_fw_revision");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->dcb_2_fw_revision(), target);
  }

  // optional string dcb_3_fw_revision = 6;
  if (this->dcb_3_fw_revision().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dcb_3_fw_revision().data(), this->dcb_3_fw_revision().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.DrbIoData.dcb_3_fw_revision");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->dcb_3_fw_revision(), target);
  }

  // optional string dcb_4_fw_revision = 7;
  if (this->dcb_4_fw_revision().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dcb_4_fw_revision().data(), this->dcb_4_fw_revision().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.DrbIoData.dcb_4_fw_revision");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->dcb_4_fw_revision(), target);
  }

  // optional string dcb_5_fw_revision = 8;
  if (this->dcb_5_fw_revision().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dcb_5_fw_revision().data(), this->dcb_5_fw_revision().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.DrbIoData.dcb_5_fw_revision");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->dcb_5_fw_revision(), target);
  }

  // optional string dcb_xdmm_fw_revision_not_used = 9;
  if (this->dcb_xdmm_fw_revision_not_used().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dcb_xdmm_fw_revision_not_used().data(), this->dcb_xdmm_fw_revision_not_used().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.DrbIoData.dcb_xdmm_fw_revision_not_used");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->dcb_xdmm_fw_revision_not_used(), target);
  }

  // optional string xray_seasoning_time_remaining_str = 10;
  if (this->xray_seasoning_time_remaining_str().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->xray_seasoning_time_remaining_str().data(), this->xray_seasoning_time_remaining_str().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.DrbIoData.xray_seasoning_time_remaining_str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->xray_seasoning_time_remaining_str(), target);
  }

  // optional float xray_voltage_setpoint_kv = 20;
  if (this->xray_voltage_setpoint_kv() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->xray_voltage_setpoint_kv(), target);
  }

  // optional float xray_current_setpoint_ma = 21;
  if (this->xray_current_setpoint_ma() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->xray_current_setpoint_ma(), target);
  }

  // optional float xray_voltage_kv = 22;
  if (this->xray_voltage_kv() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(22, this->xray_voltage_kv(), target);
  }

  // optional float xray_current_ma = 23;
  if (this->xray_current_ma() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(23, this->xray_current_ma(), target);
  }

  // optional float xray_source_temp = 24;
  if (this->xray_source_temp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(24, this->xray_source_temp(), target);
  }

  // optional float xray_source_filament_current = 25;
  if (this->xray_source_filament_current() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(25, this->xray_source_filament_current(), target);
  }

  // optional float rcb_gantry_rpm = 26;
  if (this->rcb_gantry_rpm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(26, this->rcb_gantry_rpm(), target);
  }

  // optional float rcb_gantry_angle_degrees = 27;
  if (this->rcb_gantry_angle_degrees() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(27, this->rcb_gantry_angle_degrees(), target);
  }

  // optional float rcb_temp_sensor_1 = 28;
  if (this->rcb_temp_sensor_1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(28, this->rcb_temp_sensor_1(), target);
  }

  // optional float rcb_temp_sensor_2 = 29;
  if (this->rcb_temp_sensor_2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(29, this->rcb_temp_sensor_2(), target);
  }

  // optional float dcb_1_ambient_temp = 30;
  if (this->dcb_1_ambient_temp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(30, this->dcb_1_ambient_temp(), target);
  }

  // optional float dcb_2_ambient_temp = 31;
  if (this->dcb_2_ambient_temp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(31, this->dcb_2_ambient_temp(), target);
  }

  // optional float dcb_3_ambient_temp = 32;
  if (this->dcb_3_ambient_temp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(32, this->dcb_3_ambient_temp(), target);
  }

  // optional float dcb_4_ambient_temp = 33;
  if (this->dcb_4_ambient_temp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(33, this->dcb_4_ambient_temp(), target);
  }

  // optional float dcb_5_ambient_temp = 34;
  if (this->dcb_5_ambient_temp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(34, this->dcb_5_ambient_temp(), target);
  }

  // optional float conveyor_speed_cm_sec = 35;
  if (this->conveyor_speed_cm_sec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(35, this->conveyor_speed_cm_sec(), target);
  }

  // optional double current_conveyor_pos_cm = 36;
  if (this->current_conveyor_pos_cm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(36, this->current_conveyor_pos_cm(), target);
  }

  // optional double current_gantry_rot_count = 37;
  if (this->current_gantry_rot_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(37, this->current_gantry_rot_count(), target);
  }

  // optional fixed32 xray_fault_status = 50;
  if (this->xray_fault_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(50, this->xray_fault_status(), target);
  }

  // optional fixed32 xray_source_discrete_status = 51;
  if (this->xray_source_discrete_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(51, this->xray_source_discrete_status(), target);
  }

  // optional uint32 xray_seasoning_step = 52;
  if (this->xray_seasoning_step() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(52, this->xray_seasoning_step(), target);
  }

  // optional uint32 xray_seasoning_time_remaining = 53;
  if (this->xray_seasoning_time_remaining() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(53, this->xray_seasoning_time_remaining(), target);
  }

  // optional fixed32 rcb_control_register = 54;
  if (this->rcb_control_register() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(54, this->rcb_control_register(), target);
  }

  // optional fixed32 rcb_status_register = 55;
  if (this->rcb_status_register() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(55, this->rcb_status_register(), target);
  }

  // optional fixed32 rcb_fault_register = 56;
  if (this->rcb_fault_register() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(56, this->rcb_fault_register(), target);
  }

  // optional fixed32 rcb_trigger_opto_status = 57;
  if (this->rcb_trigger_opto_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(57, this->rcb_trigger_opto_status(), target);
  }

  // optional uint32 rcb_serial_number = 58;
  if (this->rcb_serial_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(58, this->rcb_serial_number(), target);
  }

  // optional fixed32 dcb_1_status_register = 59;
  if (this->dcb_1_status_register() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(59, this->dcb_1_status_register(), target);
  }

  // optional fixed32 dcb_2_status_register = 60;
  if (this->dcb_2_status_register() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(60, this->dcb_2_status_register(), target);
  }

  // optional fixed32 dcb_3_status_register = 61;
  if (this->dcb_3_status_register() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(61, this->dcb_3_status_register(), target);
  }

  // optional fixed32 dcb_4_status_register = 62;
  if (this->dcb_4_status_register() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(62, this->dcb_4_status_register(), target);
  }

  // optional fixed32 dcb_5_status_register = 63;
  if (this->dcb_5_status_register() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(63, this->dcb_5_status_register(), target);
  }

  // optional uint32 rcb_gantry_rotation_period_ms = 64;
  if (this->rcb_gantry_rotation_period_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(64, this->rcb_gantry_rotation_period_ms(), target);
  }

  // optional bool xray_regulation_fault = 100;
  if (this->xray_regulation_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(100, this->xray_regulation_fault(), target);
  }

  // optional bool xray_interlock_open = 101;
  if (this->xray_interlock_open() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(101, this->xray_interlock_open(), target);
  }

  // optional bool xray_cathode_over_voltage = 102;
  if (this->xray_cathode_over_voltage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(102, this->xray_cathode_over_voltage(), target);
  }

  // optional bool xray_anode_over_voltage = 103;
  if (this->xray_anode_over_voltage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(103, this->xray_anode_over_voltage(), target);
  }

  // optional bool xray_over_temperature = 104;
  if (this->xray_over_temperature() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(104, this->xray_over_temperature(), target);
  }

  // optional bool xray_arc_fault = 105;
  if (this->xray_arc_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(105, this->xray_arc_fault(), target);
  }

  // optional bool xray_over_current = 106;
  if (this->xray_over_current() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(106, this->xray_over_current(), target);
  }

  // optional bool xray_power_limit_fault = 107;
  if (this->xray_power_limit_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(107, this->xray_power_limit_fault(), target);
  }

  // optional bool xray_over_voltage = 108;
  if (this->xray_over_voltage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(108, this->xray_over_voltage(), target);
  }

  // optional bool duty_cycle_mode = 109;
  if (this->duty_cycle_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(109, this->duty_cycle_mode(), target);
  }

  // optional bool xray_minimization = 110;
  if (this->xray_minimization() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(110, this->xray_minimization(), target);
  }

  // optional bool xray_seasoning_in_progress = 111;
  if (this->xray_seasoning_in_progress() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(111, this->xray_seasoning_in_progress(), target);
  }

  // optional bool xray_watchdog_status = 112;
  if (this->xray_watchdog_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(112, this->xray_watchdog_status(), target);
  }

  // optional bool xray_enable = 113;
  if (this->xray_enable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(113, this->xray_enable(), target);
  }

  // optional bool xray_high_voltage_on = 114;
  if (this->xray_high_voltage_on() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(114, this->xray_high_voltage_on(), target);
  }

  // optional bool xray_interlock = 115;
  if (this->xray_interlock() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(115, this->xray_interlock(), target);
  }

  // optional bool xray_on = 116;
  if (this->xray_on() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(116, this->xray_on(), target);
  }

  // optional bool opto_trigger_1_home = 117;
  if (this->opto_trigger_1_home() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(117, this->opto_trigger_1_home(), target);
  }

  // optional bool opto_trigger_2 = 118;
  if (this->opto_trigger_2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(118, this->opto_trigger_2(), target);
  }

  // optional bool opto_trigger_3 = 119;
  if (this->opto_trigger_3() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(119, this->opto_trigger_3(), target);
  }

  // optional bool opto_trigger_4 = 120;
  if (this->opto_trigger_4() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(120, this->opto_trigger_4(), target);
  }

  // optional bool rectifier_temperature = 121;
  if (this->rectifier_temperature() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(121, this->rectifier_temperature(), target);
  }

  // optional bool rectifier_under_voltage = 122;
  if (this->rectifier_under_voltage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(122, this->rectifier_under_voltage(), target);
  }

  // optional bool rectifier_over_voltage = 123;
  if (this->rectifier_over_voltage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(123, this->rectifier_over_voltage(), target);
  }

  // optional bool rectifier_fan_load = 124;
  if (this->rectifier_fan_load() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(124, this->rectifier_fan_load(), target);
  }

  // optional bool rectifier_das_load = 125;
  if (this->rectifier_das_load() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(125, this->rectifier_das_load(), target);
  }

  // optional bool rectifier_rcb_load = 126;
  if (this->rectifier_rcb_load() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(126, this->rectifier_rcb_load(), target);
  }

  // optional bool rectifier_xray_cooler = 127;
  if (this->rectifier_xray_cooler() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(127, this->rectifier_xray_cooler(), target);
  }

  // optional bool rectifier_xray_gen_controller = 128;
  if (this->rectifier_xray_gen_controller() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(128, this->rectifier_xray_gen_controller(), target);
  }

  // optional bool rectifier_xray_controller_fan = 129;
  if (this->rectifier_xray_controller_fan() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(129, this->rectifier_xray_controller_fan(), target);
  }

  // optional bool rectifier_ok = 130;
  if (this->rectifier_ok() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(130, this->rectifier_ok(), target);
  }

  // optional string drb_firmware_version = 131;
  if (this->drb_firmware_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->drb_firmware_version().data(), this->drb_firmware_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.DrbIoData.drb_firmware_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        131, this->drb_firmware_version(), target);
  }

  // optional bool drb_ready = 132;
  if (this->drb_ready() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(132, this->drb_ready(), target);
  }

  // optional bool rcb_comm_loss = 133;
  if (this->rcb_comm_loss() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(133, this->rcb_comm_loss(), target);
  }

  // optional bool watch_dog_detection_time_error = 134;
  if (this->watch_dog_detection_time_error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(134, this->watch_dog_detection_time_error(), target);
  }

  // optional bool rcb_control_packet_fifo_full_error = 135;
  if (this->rcb_control_packet_fifo_full_error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(135, this->rcb_control_packet_fifo_full_error(), target);
  }

  // optional bool conveyor_belt_quad_encoder_error = 136;
  if (this->conveyor_belt_quad_encoder_error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(136, this->conveyor_belt_quad_encoder_error(), target);
  }

  // optional bool uplink_cmd_bit_0 = 137;
  if (this->uplink_cmd_bit_0() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(137, this->uplink_cmd_bit_0(), target);
  }

  // optional bool uplink_cmd_bit_1 = 138;
  if (this->uplink_cmd_bit_1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(138, this->uplink_cmd_bit_1(), target);
  }

  // optional bool uplink_cmd_bit_2 = 139;
  if (this->uplink_cmd_bit_2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(139, this->uplink_cmd_bit_2(), target);
  }

  // optional fixed32 dcb1_xdmms_present = 140;
  if (this->dcb1_xdmms_present() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(140, this->dcb1_xdmms_present(), target);
  }

  // optional fixed32 dcb2_xdmms_present = 141;
  if (this->dcb2_xdmms_present() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(141, this->dcb2_xdmms_present(), target);
  }

  // optional fixed32 dcb3_xdmms_present = 142;
  if (this->dcb3_xdmms_present() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(142, this->dcb3_xdmms_present(), target);
  }

  // optional fixed32 dcb4_xdmms_present = 143;
  if (this->dcb4_xdmms_present() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(143, this->dcb4_xdmms_present(), target);
  }

  // optional fixed32 dcb5_xdmms_present = 144;
  if (this->dcb5_xdmms_present() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(144, this->dcb5_xdmms_present(), target);
  }

  // optional fixed64 number_of_bad_views = 160;
  if (this->number_of_bad_views() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(160, this->number_of_bad_views(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:analogic.ancp00.DrbIoData)
  return target;
}

int DrbIoData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:analogic.ancp00.DrbIoData)
  int total_size = 0;

  // optional string xray_source_serial_num = 1;
  if (this->xray_source_serial_num().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->xray_source_serial_num());
  }

  // optional string xray_source_model_num = 2;
  if (this->xray_source_model_num().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->xray_source_model_num());
  }

  // optional string rcb_firmware_version = 3;
  if (this->rcb_firmware_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rcb_firmware_version());
  }

  // optional string dcb_1_fw_revision = 4;
  if (this->dcb_1_fw_revision().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dcb_1_fw_revision());
  }

  // optional string dcb_2_fw_revision = 5;
  if (this->dcb_2_fw_revision().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dcb_2_fw_revision());
  }

  // optional string dcb_3_fw_revision = 6;
  if (this->dcb_3_fw_revision().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dcb_3_fw_revision());
  }

  // optional string dcb_4_fw_revision = 7;
  if (this->dcb_4_fw_revision().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dcb_4_fw_revision());
  }

  // optional string dcb_5_fw_revision = 8;
  if (this->dcb_5_fw_revision().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dcb_5_fw_revision());
  }

  // optional string dcb_xdmm_fw_revision_not_used = 9;
  if (this->dcb_xdmm_fw_revision_not_used().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dcb_xdmm_fw_revision_not_used());
  }

  // optional string xray_seasoning_time_remaining_str = 10;
  if (this->xray_seasoning_time_remaining_str().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->xray_seasoning_time_remaining_str());
  }

  // optional float xray_voltage_setpoint_kv = 20;
  if (this->xray_voltage_setpoint_kv() != 0) {
    total_size += 2 + 4;
  }

  // optional float xray_current_setpoint_ma = 21;
  if (this->xray_current_setpoint_ma() != 0) {
    total_size += 2 + 4;
  }

  // optional float xray_voltage_kv = 22;
  if (this->xray_voltage_kv() != 0) {
    total_size += 2 + 4;
  }

  // optional float xray_current_ma = 23;
  if (this->xray_current_ma() != 0) {
    total_size += 2 + 4;
  }

  // optional float xray_source_temp = 24;
  if (this->xray_source_temp() != 0) {
    total_size += 2 + 4;
  }

  // optional float xray_source_filament_current = 25;
  if (this->xray_source_filament_current() != 0) {
    total_size += 2 + 4;
  }

  // optional float rcb_gantry_rpm = 26;
  if (this->rcb_gantry_rpm() != 0) {
    total_size += 2 + 4;
  }

  // optional float rcb_gantry_angle_degrees = 27;
  if (this->rcb_gantry_angle_degrees() != 0) {
    total_size += 2 + 4;
  }

  // optional float rcb_temp_sensor_1 = 28;
  if (this->rcb_temp_sensor_1() != 0) {
    total_size += 2 + 4;
  }

  // optional float rcb_temp_sensor_2 = 29;
  if (this->rcb_temp_sensor_2() != 0) {
    total_size += 2 + 4;
  }

  // optional float dcb_1_ambient_temp = 30;
  if (this->dcb_1_ambient_temp() != 0) {
    total_size += 2 + 4;
  }

  // optional float dcb_2_ambient_temp = 31;
  if (this->dcb_2_ambient_temp() != 0) {
    total_size += 2 + 4;
  }

  // optional float dcb_3_ambient_temp = 32;
  if (this->dcb_3_ambient_temp() != 0) {
    total_size += 2 + 4;
  }

  // optional float dcb_4_ambient_temp = 33;
  if (this->dcb_4_ambient_temp() != 0) {
    total_size += 2 + 4;
  }

  // optional float dcb_5_ambient_temp = 34;
  if (this->dcb_5_ambient_temp() != 0) {
    total_size += 2 + 4;
  }

  // optional float conveyor_speed_cm_sec = 35;
  if (this->conveyor_speed_cm_sec() != 0) {
    total_size += 2 + 4;
  }

  // optional double current_conveyor_pos_cm = 36;
  if (this->current_conveyor_pos_cm() != 0) {
    total_size += 2 + 8;
  }

  // optional double current_gantry_rot_count = 37;
  if (this->current_gantry_rot_count() != 0) {
    total_size += 2 + 8;
  }

  // optional fixed32 xray_fault_status = 50;
  if (this->xray_fault_status() != 0) {
    total_size += 2 + 4;
  }

  // optional fixed32 xray_source_discrete_status = 51;
  if (this->xray_source_discrete_status() != 0) {
    total_size += 2 + 4;
  }

  // optional uint32 xray_seasoning_step = 52;
  if (this->xray_seasoning_step() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->xray_seasoning_step());
  }

  // optional uint32 xray_seasoning_time_remaining = 53;
  if (this->xray_seasoning_time_remaining() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->xray_seasoning_time_remaining());
  }

  // optional fixed32 rcb_control_register = 54;
  if (this->rcb_control_register() != 0) {
    total_size += 2 + 4;
  }

  // optional fixed32 rcb_status_register = 55;
  if (this->rcb_status_register() != 0) {
    total_size += 2 + 4;
  }

  // optional fixed32 rcb_fault_register = 56;
  if (this->rcb_fault_register() != 0) {
    total_size += 2 + 4;
  }

  // optional fixed32 rcb_trigger_opto_status = 57;
  if (this->rcb_trigger_opto_status() != 0) {
    total_size += 2 + 4;
  }

  // optional uint32 rcb_serial_number = 58;
  if (this->rcb_serial_number() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rcb_serial_number());
  }

  // optional fixed32 dcb_1_status_register = 59;
  if (this->dcb_1_status_register() != 0) {
    total_size += 2 + 4;
  }

  // optional fixed32 dcb_2_status_register = 60;
  if (this->dcb_2_status_register() != 0) {
    total_size += 2 + 4;
  }

  // optional fixed32 dcb_3_status_register = 61;
  if (this->dcb_3_status_register() != 0) {
    total_size += 2 + 4;
  }

  // optional fixed32 dcb_4_status_register = 62;
  if (this->dcb_4_status_register() != 0) {
    total_size += 2 + 4;
  }

  // optional fixed32 dcb_5_status_register = 63;
  if (this->dcb_5_status_register() != 0) {
    total_size += 2 + 4;
  }

  // optional uint32 rcb_gantry_rotation_period_ms = 64;
  if (this->rcb_gantry_rotation_period_ms() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rcb_gantry_rotation_period_ms());
  }

  // optional bool xray_regulation_fault = 100;
  if (this->xray_regulation_fault() != 0) {
    total_size += 2 + 1;
  }

  // optional bool xray_interlock_open = 101;
  if (this->xray_interlock_open() != 0) {
    total_size += 2 + 1;
  }

  // optional bool xray_cathode_over_voltage = 102;
  if (this->xray_cathode_over_voltage() != 0) {
    total_size += 2 + 1;
  }

  // optional bool xray_anode_over_voltage = 103;
  if (this->xray_anode_over_voltage() != 0) {
    total_size += 2 + 1;
  }

  // optional bool xray_over_temperature = 104;
  if (this->xray_over_temperature() != 0) {
    total_size += 2 + 1;
  }

  // optional bool xray_arc_fault = 105;
  if (this->xray_arc_fault() != 0) {
    total_size += 2 + 1;
  }

  // optional bool xray_over_current = 106;
  if (this->xray_over_current() != 0) {
    total_size += 2 + 1;
  }

  // optional bool xray_power_limit_fault = 107;
  if (this->xray_power_limit_fault() != 0) {
    total_size += 2 + 1;
  }

  // optional bool xray_over_voltage = 108;
  if (this->xray_over_voltage() != 0) {
    total_size += 2 + 1;
  }

  // optional bool duty_cycle_mode = 109;
  if (this->duty_cycle_mode() != 0) {
    total_size += 2 + 1;
  }

  // optional bool xray_minimization = 110;
  if (this->xray_minimization() != 0) {
    total_size += 2 + 1;
  }

  // optional bool xray_seasoning_in_progress = 111;
  if (this->xray_seasoning_in_progress() != 0) {
    total_size += 2 + 1;
  }

  // optional bool xray_watchdog_status = 112;
  if (this->xray_watchdog_status() != 0) {
    total_size += 2 + 1;
  }

  // optional bool xray_enable = 113;
  if (this->xray_enable() != 0) {
    total_size += 2 + 1;
  }

  // optional bool xray_high_voltage_on = 114;
  if (this->xray_high_voltage_on() != 0) {
    total_size += 2 + 1;
  }

  // optional bool xray_interlock = 115;
  if (this->xray_interlock() != 0) {
    total_size += 2 + 1;
  }

  // optional bool xray_on = 116;
  if (this->xray_on() != 0) {
    total_size += 2 + 1;
  }

  // optional bool opto_trigger_1_home = 117;
  if (this->opto_trigger_1_home() != 0) {
    total_size += 2 + 1;
  }

  // optional bool opto_trigger_2 = 118;
  if (this->opto_trigger_2() != 0) {
    total_size += 2 + 1;
  }

  // optional bool opto_trigger_3 = 119;
  if (this->opto_trigger_3() != 0) {
    total_size += 2 + 1;
  }

  // optional bool opto_trigger_4 = 120;
  if (this->opto_trigger_4() != 0) {
    total_size += 2 + 1;
  }

  // optional bool rectifier_temperature = 121;
  if (this->rectifier_temperature() != 0) {
    total_size += 2 + 1;
  }

  // optional bool rectifier_under_voltage = 122;
  if (this->rectifier_under_voltage() != 0) {
    total_size += 2 + 1;
  }

  // optional bool rectifier_over_voltage = 123;
  if (this->rectifier_over_voltage() != 0) {
    total_size += 2 + 1;
  }

  // optional bool rectifier_fan_load = 124;
  if (this->rectifier_fan_load() != 0) {
    total_size += 2 + 1;
  }

  // optional bool rectifier_das_load = 125;
  if (this->rectifier_das_load() != 0) {
    total_size += 2 + 1;
  }

  // optional bool rectifier_rcb_load = 126;
  if (this->rectifier_rcb_load() != 0) {
    total_size += 2 + 1;
  }

  // optional bool rectifier_xray_cooler = 127;
  if (this->rectifier_xray_cooler() != 0) {
    total_size += 2 + 1;
  }

  // optional bool rectifier_xray_gen_controller = 128;
  if (this->rectifier_xray_gen_controller() != 0) {
    total_size += 2 + 1;
  }

  // optional bool rectifier_xray_controller_fan = 129;
  if (this->rectifier_xray_controller_fan() != 0) {
    total_size += 2 + 1;
  }

  // optional bool rectifier_ok = 130;
  if (this->rectifier_ok() != 0) {
    total_size += 2 + 1;
  }

  // optional string drb_firmware_version = 131;
  if (this->drb_firmware_version().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->drb_firmware_version());
  }

  // optional bool drb_ready = 132;
  if (this->drb_ready() != 0) {
    total_size += 2 + 1;
  }

  // optional bool rcb_comm_loss = 133;
  if (this->rcb_comm_loss() != 0) {
    total_size += 2 + 1;
  }

  // optional bool watch_dog_detection_time_error = 134;
  if (this->watch_dog_detection_time_error() != 0) {
    total_size += 2 + 1;
  }

  // optional bool rcb_control_packet_fifo_full_error = 135;
  if (this->rcb_control_packet_fifo_full_error() != 0) {
    total_size += 2 + 1;
  }

  // optional bool conveyor_belt_quad_encoder_error = 136;
  if (this->conveyor_belt_quad_encoder_error() != 0) {
    total_size += 2 + 1;
  }

  // optional bool uplink_cmd_bit_0 = 137;
  if (this->uplink_cmd_bit_0() != 0) {
    total_size += 2 + 1;
  }

  // optional bool uplink_cmd_bit_1 = 138;
  if (this->uplink_cmd_bit_1() != 0) {
    total_size += 2 + 1;
  }

  // optional bool uplink_cmd_bit_2 = 139;
  if (this->uplink_cmd_bit_2() != 0) {
    total_size += 2 + 1;
  }

  // optional fixed32 dcb1_xdmms_present = 140;
  if (this->dcb1_xdmms_present() != 0) {
    total_size += 2 + 4;
  }

  // optional fixed32 dcb2_xdmms_present = 141;
  if (this->dcb2_xdmms_present() != 0) {
    total_size += 2 + 4;
  }

  // optional fixed32 dcb3_xdmms_present = 142;
  if (this->dcb3_xdmms_present() != 0) {
    total_size += 2 + 4;
  }

  // optional fixed32 dcb4_xdmms_present = 143;
  if (this->dcb4_xdmms_present() != 0) {
    total_size += 2 + 4;
  }

  // optional fixed32 dcb5_xdmms_present = 144;
  if (this->dcb5_xdmms_present() != 0) {
    total_size += 2 + 4;
  }

  // optional fixed64 number_of_bad_views = 160;
  if (this->number_of_bad_views() != 0) {
    total_size += 2 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DrbIoData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analogic.ancp00.DrbIoData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DrbIoData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DrbIoData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analogic.ancp00.DrbIoData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analogic.ancp00.DrbIoData)
    MergeFrom(*source);
  }
}

void DrbIoData::MergeFrom(const DrbIoData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analogic.ancp00.DrbIoData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.xray_source_serial_num().size() > 0) {

    xray_source_serial_num_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.xray_source_serial_num_);
  }
  if (from.xray_source_model_num().size() > 0) {

    xray_source_model_num_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.xray_source_model_num_);
  }
  if (from.rcb_firmware_version().size() > 0) {

    rcb_firmware_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rcb_firmware_version_);
  }
  if (from.dcb_1_fw_revision().size() > 0) {

    dcb_1_fw_revision_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dcb_1_fw_revision_);
  }
  if (from.dcb_2_fw_revision().size() > 0) {

    dcb_2_fw_revision_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dcb_2_fw_revision_);
  }
  if (from.dcb_3_fw_revision().size() > 0) {

    dcb_3_fw_revision_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dcb_3_fw_revision_);
  }
  if (from.dcb_4_fw_revision().size() > 0) {

    dcb_4_fw_revision_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dcb_4_fw_revision_);
  }
  if (from.dcb_5_fw_revision().size() > 0) {

    dcb_5_fw_revision_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dcb_5_fw_revision_);
  }
  if (from.dcb_xdmm_fw_revision_not_used().size() > 0) {

    dcb_xdmm_fw_revision_not_used_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dcb_xdmm_fw_revision_not_used_);
  }
  if (from.xray_seasoning_time_remaining_str().size() > 0) {

    xray_seasoning_time_remaining_str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.xray_seasoning_time_remaining_str_);
  }
  if (from.xray_voltage_setpoint_kv() != 0) {
    set_xray_voltage_setpoint_kv(from.xray_voltage_setpoint_kv());
  }
  if (from.xray_current_setpoint_ma() != 0) {
    set_xray_current_setpoint_ma(from.xray_current_setpoint_ma());
  }
  if (from.xray_voltage_kv() != 0) {
    set_xray_voltage_kv(from.xray_voltage_kv());
  }
  if (from.xray_current_ma() != 0) {
    set_xray_current_ma(from.xray_current_ma());
  }
  if (from.xray_source_temp() != 0) {
    set_xray_source_temp(from.xray_source_temp());
  }
  if (from.xray_source_filament_current() != 0) {
    set_xray_source_filament_current(from.xray_source_filament_current());
  }
  if (from.rcb_gantry_rpm() != 0) {
    set_rcb_gantry_rpm(from.rcb_gantry_rpm());
  }
  if (from.rcb_gantry_angle_degrees() != 0) {
    set_rcb_gantry_angle_degrees(from.rcb_gantry_angle_degrees());
  }
  if (from.rcb_temp_sensor_1() != 0) {
    set_rcb_temp_sensor_1(from.rcb_temp_sensor_1());
  }
  if (from.rcb_temp_sensor_2() != 0) {
    set_rcb_temp_sensor_2(from.rcb_temp_sensor_2());
  }
  if (from.dcb_1_ambient_temp() != 0) {
    set_dcb_1_ambient_temp(from.dcb_1_ambient_temp());
  }
  if (from.dcb_2_ambient_temp() != 0) {
    set_dcb_2_ambient_temp(from.dcb_2_ambient_temp());
  }
  if (from.dcb_3_ambient_temp() != 0) {
    set_dcb_3_ambient_temp(from.dcb_3_ambient_temp());
  }
  if (from.dcb_4_ambient_temp() != 0) {
    set_dcb_4_ambient_temp(from.dcb_4_ambient_temp());
  }
  if (from.dcb_5_ambient_temp() != 0) {
    set_dcb_5_ambient_temp(from.dcb_5_ambient_temp());
  }
  if (from.conveyor_speed_cm_sec() != 0) {
    set_conveyor_speed_cm_sec(from.conveyor_speed_cm_sec());
  }
  if (from.current_conveyor_pos_cm() != 0) {
    set_current_conveyor_pos_cm(from.current_conveyor_pos_cm());
  }
  if (from.current_gantry_rot_count() != 0) {
    set_current_gantry_rot_count(from.current_gantry_rot_count());
  }
  if (from.xray_fault_status() != 0) {
    set_xray_fault_status(from.xray_fault_status());
  }
  if (from.xray_source_discrete_status() != 0) {
    set_xray_source_discrete_status(from.xray_source_discrete_status());
  }
  if (from.xray_seasoning_step() != 0) {
    set_xray_seasoning_step(from.xray_seasoning_step());
  }
  if (from.xray_seasoning_time_remaining() != 0) {
    set_xray_seasoning_time_remaining(from.xray_seasoning_time_remaining());
  }
  if (from.rcb_control_register() != 0) {
    set_rcb_control_register(from.rcb_control_register());
  }
  if (from.rcb_status_register() != 0) {
    set_rcb_status_register(from.rcb_status_register());
  }
  if (from.rcb_fault_register() != 0) {
    set_rcb_fault_register(from.rcb_fault_register());
  }
  if (from.rcb_trigger_opto_status() != 0) {
    set_rcb_trigger_opto_status(from.rcb_trigger_opto_status());
  }
  if (from.rcb_serial_number() != 0) {
    set_rcb_serial_number(from.rcb_serial_number());
  }
  if (from.dcb_1_status_register() != 0) {
    set_dcb_1_status_register(from.dcb_1_status_register());
  }
  if (from.dcb_2_status_register() != 0) {
    set_dcb_2_status_register(from.dcb_2_status_register());
  }
  if (from.dcb_3_status_register() != 0) {
    set_dcb_3_status_register(from.dcb_3_status_register());
  }
  if (from.dcb_4_status_register() != 0) {
    set_dcb_4_status_register(from.dcb_4_status_register());
  }
  if (from.dcb_5_status_register() != 0) {
    set_dcb_5_status_register(from.dcb_5_status_register());
  }
  if (from.rcb_gantry_rotation_period_ms() != 0) {
    set_rcb_gantry_rotation_period_ms(from.rcb_gantry_rotation_period_ms());
  }
  if (from.xray_regulation_fault() != 0) {
    set_xray_regulation_fault(from.xray_regulation_fault());
  }
  if (from.xray_interlock_open() != 0) {
    set_xray_interlock_open(from.xray_interlock_open());
  }
  if (from.xray_cathode_over_voltage() != 0) {
    set_xray_cathode_over_voltage(from.xray_cathode_over_voltage());
  }
  if (from.xray_anode_over_voltage() != 0) {
    set_xray_anode_over_voltage(from.xray_anode_over_voltage());
  }
  if (from.xray_over_temperature() != 0) {
    set_xray_over_temperature(from.xray_over_temperature());
  }
  if (from.xray_arc_fault() != 0) {
    set_xray_arc_fault(from.xray_arc_fault());
  }
  if (from.xray_over_current() != 0) {
    set_xray_over_current(from.xray_over_current());
  }
  if (from.xray_power_limit_fault() != 0) {
    set_xray_power_limit_fault(from.xray_power_limit_fault());
  }
  if (from.xray_over_voltage() != 0) {
    set_xray_over_voltage(from.xray_over_voltage());
  }
  if (from.duty_cycle_mode() != 0) {
    set_duty_cycle_mode(from.duty_cycle_mode());
  }
  if (from.xray_minimization() != 0) {
    set_xray_minimization(from.xray_minimization());
  }
  if (from.xray_seasoning_in_progress() != 0) {
    set_xray_seasoning_in_progress(from.xray_seasoning_in_progress());
  }
  if (from.xray_watchdog_status() != 0) {
    set_xray_watchdog_status(from.xray_watchdog_status());
  }
  if (from.xray_enable() != 0) {
    set_xray_enable(from.xray_enable());
  }
  if (from.xray_high_voltage_on() != 0) {
    set_xray_high_voltage_on(from.xray_high_voltage_on());
  }
  if (from.xray_interlock() != 0) {
    set_xray_interlock(from.xray_interlock());
  }
  if (from.xray_on() != 0) {
    set_xray_on(from.xray_on());
  }
  if (from.opto_trigger_1_home() != 0) {
    set_opto_trigger_1_home(from.opto_trigger_1_home());
  }
  if (from.opto_trigger_2() != 0) {
    set_opto_trigger_2(from.opto_trigger_2());
  }
  if (from.opto_trigger_3() != 0) {
    set_opto_trigger_3(from.opto_trigger_3());
  }
  if (from.opto_trigger_4() != 0) {
    set_opto_trigger_4(from.opto_trigger_4());
  }
  if (from.rectifier_temperature() != 0) {
    set_rectifier_temperature(from.rectifier_temperature());
  }
  if (from.rectifier_under_voltage() != 0) {
    set_rectifier_under_voltage(from.rectifier_under_voltage());
  }
  if (from.rectifier_over_voltage() != 0) {
    set_rectifier_over_voltage(from.rectifier_over_voltage());
  }
  if (from.rectifier_fan_load() != 0) {
    set_rectifier_fan_load(from.rectifier_fan_load());
  }
  if (from.rectifier_das_load() != 0) {
    set_rectifier_das_load(from.rectifier_das_load());
  }
  if (from.rectifier_rcb_load() != 0) {
    set_rectifier_rcb_load(from.rectifier_rcb_load());
  }
  if (from.rectifier_xray_cooler() != 0) {
    set_rectifier_xray_cooler(from.rectifier_xray_cooler());
  }
  if (from.rectifier_xray_gen_controller() != 0) {
    set_rectifier_xray_gen_controller(from.rectifier_xray_gen_controller());
  }
  if (from.rectifier_xray_controller_fan() != 0) {
    set_rectifier_xray_controller_fan(from.rectifier_xray_controller_fan());
  }
  if (from.rectifier_ok() != 0) {
    set_rectifier_ok(from.rectifier_ok());
  }
  if (from.drb_firmware_version().size() > 0) {

    drb_firmware_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.drb_firmware_version_);
  }
  if (from.drb_ready() != 0) {
    set_drb_ready(from.drb_ready());
  }
  if (from.rcb_comm_loss() != 0) {
    set_rcb_comm_loss(from.rcb_comm_loss());
  }
  if (from.watch_dog_detection_time_error() != 0) {
    set_watch_dog_detection_time_error(from.watch_dog_detection_time_error());
  }
  if (from.rcb_control_packet_fifo_full_error() != 0) {
    set_rcb_control_packet_fifo_full_error(from.rcb_control_packet_fifo_full_error());
  }
  if (from.conveyor_belt_quad_encoder_error() != 0) {
    set_conveyor_belt_quad_encoder_error(from.conveyor_belt_quad_encoder_error());
  }
  if (from.uplink_cmd_bit_0() != 0) {
    set_uplink_cmd_bit_0(from.uplink_cmd_bit_0());
  }
  if (from.uplink_cmd_bit_1() != 0) {
    set_uplink_cmd_bit_1(from.uplink_cmd_bit_1());
  }
  if (from.uplink_cmd_bit_2() != 0) {
    set_uplink_cmd_bit_2(from.uplink_cmd_bit_2());
  }
  if (from.dcb1_xdmms_present() != 0) {
    set_dcb1_xdmms_present(from.dcb1_xdmms_present());
  }
  if (from.dcb2_xdmms_present() != 0) {
    set_dcb2_xdmms_present(from.dcb2_xdmms_present());
  }
  if (from.dcb3_xdmms_present() != 0) {
    set_dcb3_xdmms_present(from.dcb3_xdmms_present());
  }
  if (from.dcb4_xdmms_present() != 0) {
    set_dcb4_xdmms_present(from.dcb4_xdmms_present());
  }
  if (from.dcb5_xdmms_present() != 0) {
    set_dcb5_xdmms_present(from.dcb5_xdmms_present());
  }
  if (from.number_of_bad_views() != 0) {
    set_number_of_bad_views(from.number_of_bad_views());
  }
}

void DrbIoData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analogic.ancp00.DrbIoData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DrbIoData::CopyFrom(const DrbIoData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analogic.ancp00.DrbIoData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrbIoData::IsInitialized() const {

  return true;
}

void DrbIoData::Swap(DrbIoData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DrbIoData::InternalSwap(DrbIoData* other) {
  xray_source_serial_num_.Swap(&other->xray_source_serial_num_);
  xray_source_model_num_.Swap(&other->xray_source_model_num_);
  rcb_firmware_version_.Swap(&other->rcb_firmware_version_);
  dcb_1_fw_revision_.Swap(&other->dcb_1_fw_revision_);
  dcb_2_fw_revision_.Swap(&other->dcb_2_fw_revision_);
  dcb_3_fw_revision_.Swap(&other->dcb_3_fw_revision_);
  dcb_4_fw_revision_.Swap(&other->dcb_4_fw_revision_);
  dcb_5_fw_revision_.Swap(&other->dcb_5_fw_revision_);
  dcb_xdmm_fw_revision_not_used_.Swap(&other->dcb_xdmm_fw_revision_not_used_);
  xray_seasoning_time_remaining_str_.Swap(&other->xray_seasoning_time_remaining_str_);
  std::swap(xray_voltage_setpoint_kv_, other->xray_voltage_setpoint_kv_);
  std::swap(xray_current_setpoint_ma_, other->xray_current_setpoint_ma_);
  std::swap(xray_voltage_kv_, other->xray_voltage_kv_);
  std::swap(xray_current_ma_, other->xray_current_ma_);
  std::swap(xray_source_temp_, other->xray_source_temp_);
  std::swap(xray_source_filament_current_, other->xray_source_filament_current_);
  std::swap(rcb_gantry_rpm_, other->rcb_gantry_rpm_);
  std::swap(rcb_gantry_angle_degrees_, other->rcb_gantry_angle_degrees_);
  std::swap(rcb_temp_sensor_1_, other->rcb_temp_sensor_1_);
  std::swap(rcb_temp_sensor_2_, other->rcb_temp_sensor_2_);
  std::swap(dcb_1_ambient_temp_, other->dcb_1_ambient_temp_);
  std::swap(dcb_2_ambient_temp_, other->dcb_2_ambient_temp_);
  std::swap(dcb_3_ambient_temp_, other->dcb_3_ambient_temp_);
  std::swap(dcb_4_ambient_temp_, other->dcb_4_ambient_temp_);
  std::swap(dcb_5_ambient_temp_, other->dcb_5_ambient_temp_);
  std::swap(conveyor_speed_cm_sec_, other->conveyor_speed_cm_sec_);
  std::swap(current_conveyor_pos_cm_, other->current_conveyor_pos_cm_);
  std::swap(current_gantry_rot_count_, other->current_gantry_rot_count_);
  std::swap(xray_fault_status_, other->xray_fault_status_);
  std::swap(xray_source_discrete_status_, other->xray_source_discrete_status_);
  std::swap(xray_seasoning_step_, other->xray_seasoning_step_);
  std::swap(xray_seasoning_time_remaining_, other->xray_seasoning_time_remaining_);
  std::swap(rcb_control_register_, other->rcb_control_register_);
  std::swap(rcb_status_register_, other->rcb_status_register_);
  std::swap(rcb_fault_register_, other->rcb_fault_register_);
  std::swap(rcb_trigger_opto_status_, other->rcb_trigger_opto_status_);
  std::swap(rcb_serial_number_, other->rcb_serial_number_);
  std::swap(dcb_1_status_register_, other->dcb_1_status_register_);
  std::swap(dcb_2_status_register_, other->dcb_2_status_register_);
  std::swap(dcb_3_status_register_, other->dcb_3_status_register_);
  std::swap(dcb_4_status_register_, other->dcb_4_status_register_);
  std::swap(dcb_5_status_register_, other->dcb_5_status_register_);
  std::swap(rcb_gantry_rotation_period_ms_, other->rcb_gantry_rotation_period_ms_);
  std::swap(xray_regulation_fault_, other->xray_regulation_fault_);
  std::swap(xray_interlock_open_, other->xray_interlock_open_);
  std::swap(xray_cathode_over_voltage_, other->xray_cathode_over_voltage_);
  std::swap(xray_anode_over_voltage_, other->xray_anode_over_voltage_);
  std::swap(xray_over_temperature_, other->xray_over_temperature_);
  std::swap(xray_arc_fault_, other->xray_arc_fault_);
  std::swap(xray_over_current_, other->xray_over_current_);
  std::swap(xray_power_limit_fault_, other->xray_power_limit_fault_);
  std::swap(xray_over_voltage_, other->xray_over_voltage_);
  std::swap(duty_cycle_mode_, other->duty_cycle_mode_);
  std::swap(xray_minimization_, other->xray_minimization_);
  std::swap(xray_seasoning_in_progress_, other->xray_seasoning_in_progress_);
  std::swap(xray_watchdog_status_, other->xray_watchdog_status_);
  std::swap(xray_enable_, other->xray_enable_);
  std::swap(xray_high_voltage_on_, other->xray_high_voltage_on_);
  std::swap(xray_interlock_, other->xray_interlock_);
  std::swap(xray_on_, other->xray_on_);
  std::swap(opto_trigger_1_home_, other->opto_trigger_1_home_);
  std::swap(opto_trigger_2_, other->opto_trigger_2_);
  std::swap(opto_trigger_3_, other->opto_trigger_3_);
  std::swap(opto_trigger_4_, other->opto_trigger_4_);
  std::swap(rectifier_temperature_, other->rectifier_temperature_);
  std::swap(rectifier_under_voltage_, other->rectifier_under_voltage_);
  std::swap(rectifier_over_voltage_, other->rectifier_over_voltage_);
  std::swap(rectifier_fan_load_, other->rectifier_fan_load_);
  std::swap(rectifier_das_load_, other->rectifier_das_load_);
  std::swap(rectifier_rcb_load_, other->rectifier_rcb_load_);
  std::swap(rectifier_xray_cooler_, other->rectifier_xray_cooler_);
  std::swap(rectifier_xray_gen_controller_, other->rectifier_xray_gen_controller_);
  std::swap(rectifier_xray_controller_fan_, other->rectifier_xray_controller_fan_);
  std::swap(rectifier_ok_, other->rectifier_ok_);
  drb_firmware_version_.Swap(&other->drb_firmware_version_);
  std::swap(drb_ready_, other->drb_ready_);
  std::swap(rcb_comm_loss_, other->rcb_comm_loss_);
  std::swap(watch_dog_detection_time_error_, other->watch_dog_detection_time_error_);
  std::swap(rcb_control_packet_fifo_full_error_, other->rcb_control_packet_fifo_full_error_);
  std::swap(conveyor_belt_quad_encoder_error_, other->conveyor_belt_quad_encoder_error_);
  std::swap(uplink_cmd_bit_0_, other->uplink_cmd_bit_0_);
  std::swap(uplink_cmd_bit_1_, other->uplink_cmd_bit_1_);
  std::swap(uplink_cmd_bit_2_, other->uplink_cmd_bit_2_);
  std::swap(dcb1_xdmms_present_, other->dcb1_xdmms_present_);
  std::swap(dcb2_xdmms_present_, other->dcb2_xdmms_present_);
  std::swap(dcb3_xdmms_present_, other->dcb3_xdmms_present_);
  std::swap(dcb4_xdmms_present_, other->dcb4_xdmms_present_);
  std::swap(dcb5_xdmms_present_, other->dcb5_xdmms_present_);
  std::swap(number_of_bad_views_, other->number_of_bad_views_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DrbIoData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DrbIoData_descriptor_;
  metadata.reflection = DrbIoData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DrbIoData

// optional string xray_source_serial_num = 1;
void DrbIoData::clear_xray_source_serial_num() {
  xray_source_serial_num_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DrbIoData::xray_source_serial_num() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.xray_source_serial_num)
  return xray_source_serial_num_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DrbIoData::set_xray_source_serial_num(const ::std::string& value) {
  
  xray_source_serial_num_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.xray_source_serial_num)
}
 void DrbIoData::set_xray_source_serial_num(const char* value) {
  
  xray_source_serial_num_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.DrbIoData.xray_source_serial_num)
}
 void DrbIoData::set_xray_source_serial_num(const char* value, size_t size) {
  
  xray_source_serial_num_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.DrbIoData.xray_source_serial_num)
}
 ::std::string* DrbIoData::mutable_xray_source_serial_num() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.DrbIoData.xray_source_serial_num)
  return xray_source_serial_num_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DrbIoData::release_xray_source_serial_num() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.DrbIoData.xray_source_serial_num)
  
  return xray_source_serial_num_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DrbIoData::set_allocated_xray_source_serial_num(::std::string* xray_source_serial_num) {
  if (xray_source_serial_num != NULL) {
    
  } else {
    
  }
  xray_source_serial_num_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), xray_source_serial_num);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.DrbIoData.xray_source_serial_num)
}

// optional string xray_source_model_num = 2;
void DrbIoData::clear_xray_source_model_num() {
  xray_source_model_num_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DrbIoData::xray_source_model_num() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.xray_source_model_num)
  return xray_source_model_num_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DrbIoData::set_xray_source_model_num(const ::std::string& value) {
  
  xray_source_model_num_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.xray_source_model_num)
}
 void DrbIoData::set_xray_source_model_num(const char* value) {
  
  xray_source_model_num_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.DrbIoData.xray_source_model_num)
}
 void DrbIoData::set_xray_source_model_num(const char* value, size_t size) {
  
  xray_source_model_num_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.DrbIoData.xray_source_model_num)
}
 ::std::string* DrbIoData::mutable_xray_source_model_num() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.DrbIoData.xray_source_model_num)
  return xray_source_model_num_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DrbIoData::release_xray_source_model_num() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.DrbIoData.xray_source_model_num)
  
  return xray_source_model_num_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DrbIoData::set_allocated_xray_source_model_num(::std::string* xray_source_model_num) {
  if (xray_source_model_num != NULL) {
    
  } else {
    
  }
  xray_source_model_num_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), xray_source_model_num);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.DrbIoData.xray_source_model_num)
}

// optional string rcb_firmware_version = 3;
void DrbIoData::clear_rcb_firmware_version() {
  rcb_firmware_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DrbIoData::rcb_firmware_version() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.rcb_firmware_version)
  return rcb_firmware_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DrbIoData::set_rcb_firmware_version(const ::std::string& value) {
  
  rcb_firmware_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.rcb_firmware_version)
}
 void DrbIoData::set_rcb_firmware_version(const char* value) {
  
  rcb_firmware_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.DrbIoData.rcb_firmware_version)
}
 void DrbIoData::set_rcb_firmware_version(const char* value, size_t size) {
  
  rcb_firmware_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.DrbIoData.rcb_firmware_version)
}
 ::std::string* DrbIoData::mutable_rcb_firmware_version() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.DrbIoData.rcb_firmware_version)
  return rcb_firmware_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DrbIoData::release_rcb_firmware_version() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.DrbIoData.rcb_firmware_version)
  
  return rcb_firmware_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DrbIoData::set_allocated_rcb_firmware_version(::std::string* rcb_firmware_version) {
  if (rcb_firmware_version != NULL) {
    
  } else {
    
  }
  rcb_firmware_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rcb_firmware_version);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.DrbIoData.rcb_firmware_version)
}

// optional string dcb_1_fw_revision = 4;
void DrbIoData::clear_dcb_1_fw_revision() {
  dcb_1_fw_revision_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DrbIoData::dcb_1_fw_revision() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.dcb_1_fw_revision)
  return dcb_1_fw_revision_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DrbIoData::set_dcb_1_fw_revision(const ::std::string& value) {
  
  dcb_1_fw_revision_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.dcb_1_fw_revision)
}
 void DrbIoData::set_dcb_1_fw_revision(const char* value) {
  
  dcb_1_fw_revision_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.DrbIoData.dcb_1_fw_revision)
}
 void DrbIoData::set_dcb_1_fw_revision(const char* value, size_t size) {
  
  dcb_1_fw_revision_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.DrbIoData.dcb_1_fw_revision)
}
 ::std::string* DrbIoData::mutable_dcb_1_fw_revision() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.DrbIoData.dcb_1_fw_revision)
  return dcb_1_fw_revision_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DrbIoData::release_dcb_1_fw_revision() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.DrbIoData.dcb_1_fw_revision)
  
  return dcb_1_fw_revision_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DrbIoData::set_allocated_dcb_1_fw_revision(::std::string* dcb_1_fw_revision) {
  if (dcb_1_fw_revision != NULL) {
    
  } else {
    
  }
  dcb_1_fw_revision_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dcb_1_fw_revision);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.DrbIoData.dcb_1_fw_revision)
}

// optional string dcb_2_fw_revision = 5;
void DrbIoData::clear_dcb_2_fw_revision() {
  dcb_2_fw_revision_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DrbIoData::dcb_2_fw_revision() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.dcb_2_fw_revision)
  return dcb_2_fw_revision_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DrbIoData::set_dcb_2_fw_revision(const ::std::string& value) {
  
  dcb_2_fw_revision_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.dcb_2_fw_revision)
}
 void DrbIoData::set_dcb_2_fw_revision(const char* value) {
  
  dcb_2_fw_revision_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.DrbIoData.dcb_2_fw_revision)
}
 void DrbIoData::set_dcb_2_fw_revision(const char* value, size_t size) {
  
  dcb_2_fw_revision_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.DrbIoData.dcb_2_fw_revision)
}
 ::std::string* DrbIoData::mutable_dcb_2_fw_revision() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.DrbIoData.dcb_2_fw_revision)
  return dcb_2_fw_revision_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DrbIoData::release_dcb_2_fw_revision() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.DrbIoData.dcb_2_fw_revision)
  
  return dcb_2_fw_revision_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DrbIoData::set_allocated_dcb_2_fw_revision(::std::string* dcb_2_fw_revision) {
  if (dcb_2_fw_revision != NULL) {
    
  } else {
    
  }
  dcb_2_fw_revision_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dcb_2_fw_revision);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.DrbIoData.dcb_2_fw_revision)
}

// optional string dcb_3_fw_revision = 6;
void DrbIoData::clear_dcb_3_fw_revision() {
  dcb_3_fw_revision_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DrbIoData::dcb_3_fw_revision() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.dcb_3_fw_revision)
  return dcb_3_fw_revision_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DrbIoData::set_dcb_3_fw_revision(const ::std::string& value) {
  
  dcb_3_fw_revision_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.dcb_3_fw_revision)
}
 void DrbIoData::set_dcb_3_fw_revision(const char* value) {
  
  dcb_3_fw_revision_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.DrbIoData.dcb_3_fw_revision)
}
 void DrbIoData::set_dcb_3_fw_revision(const char* value, size_t size) {
  
  dcb_3_fw_revision_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.DrbIoData.dcb_3_fw_revision)
}
 ::std::string* DrbIoData::mutable_dcb_3_fw_revision() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.DrbIoData.dcb_3_fw_revision)
  return dcb_3_fw_revision_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DrbIoData::release_dcb_3_fw_revision() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.DrbIoData.dcb_3_fw_revision)
  
  return dcb_3_fw_revision_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DrbIoData::set_allocated_dcb_3_fw_revision(::std::string* dcb_3_fw_revision) {
  if (dcb_3_fw_revision != NULL) {
    
  } else {
    
  }
  dcb_3_fw_revision_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dcb_3_fw_revision);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.DrbIoData.dcb_3_fw_revision)
}

// optional string dcb_4_fw_revision = 7;
void DrbIoData::clear_dcb_4_fw_revision() {
  dcb_4_fw_revision_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DrbIoData::dcb_4_fw_revision() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.dcb_4_fw_revision)
  return dcb_4_fw_revision_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DrbIoData::set_dcb_4_fw_revision(const ::std::string& value) {
  
  dcb_4_fw_revision_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.dcb_4_fw_revision)
}
 void DrbIoData::set_dcb_4_fw_revision(const char* value) {
  
  dcb_4_fw_revision_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.DrbIoData.dcb_4_fw_revision)
}
 void DrbIoData::set_dcb_4_fw_revision(const char* value, size_t size) {
  
  dcb_4_fw_revision_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.DrbIoData.dcb_4_fw_revision)
}
 ::std::string* DrbIoData::mutable_dcb_4_fw_revision() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.DrbIoData.dcb_4_fw_revision)
  return dcb_4_fw_revision_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DrbIoData::release_dcb_4_fw_revision() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.DrbIoData.dcb_4_fw_revision)
  
  return dcb_4_fw_revision_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DrbIoData::set_allocated_dcb_4_fw_revision(::std::string* dcb_4_fw_revision) {
  if (dcb_4_fw_revision != NULL) {
    
  } else {
    
  }
  dcb_4_fw_revision_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dcb_4_fw_revision);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.DrbIoData.dcb_4_fw_revision)
}

// optional string dcb_5_fw_revision = 8;
void DrbIoData::clear_dcb_5_fw_revision() {
  dcb_5_fw_revision_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DrbIoData::dcb_5_fw_revision() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.dcb_5_fw_revision)
  return dcb_5_fw_revision_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DrbIoData::set_dcb_5_fw_revision(const ::std::string& value) {
  
  dcb_5_fw_revision_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.dcb_5_fw_revision)
}
 void DrbIoData::set_dcb_5_fw_revision(const char* value) {
  
  dcb_5_fw_revision_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.DrbIoData.dcb_5_fw_revision)
}
 void DrbIoData::set_dcb_5_fw_revision(const char* value, size_t size) {
  
  dcb_5_fw_revision_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.DrbIoData.dcb_5_fw_revision)
}
 ::std::string* DrbIoData::mutable_dcb_5_fw_revision() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.DrbIoData.dcb_5_fw_revision)
  return dcb_5_fw_revision_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DrbIoData::release_dcb_5_fw_revision() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.DrbIoData.dcb_5_fw_revision)
  
  return dcb_5_fw_revision_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DrbIoData::set_allocated_dcb_5_fw_revision(::std::string* dcb_5_fw_revision) {
  if (dcb_5_fw_revision != NULL) {
    
  } else {
    
  }
  dcb_5_fw_revision_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dcb_5_fw_revision);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.DrbIoData.dcb_5_fw_revision)
}

// optional string dcb_xdmm_fw_revision_not_used = 9;
void DrbIoData::clear_dcb_xdmm_fw_revision_not_used() {
  dcb_xdmm_fw_revision_not_used_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DrbIoData::dcb_xdmm_fw_revision_not_used() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.dcb_xdmm_fw_revision_not_used)
  return dcb_xdmm_fw_revision_not_used_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DrbIoData::set_dcb_xdmm_fw_revision_not_used(const ::std::string& value) {
  
  dcb_xdmm_fw_revision_not_used_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.dcb_xdmm_fw_revision_not_used)
}
 void DrbIoData::set_dcb_xdmm_fw_revision_not_used(const char* value) {
  
  dcb_xdmm_fw_revision_not_used_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.DrbIoData.dcb_xdmm_fw_revision_not_used)
}
 void DrbIoData::set_dcb_xdmm_fw_revision_not_used(const char* value, size_t size) {
  
  dcb_xdmm_fw_revision_not_used_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.DrbIoData.dcb_xdmm_fw_revision_not_used)
}
 ::std::string* DrbIoData::mutable_dcb_xdmm_fw_revision_not_used() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.DrbIoData.dcb_xdmm_fw_revision_not_used)
  return dcb_xdmm_fw_revision_not_used_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DrbIoData::release_dcb_xdmm_fw_revision_not_used() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.DrbIoData.dcb_xdmm_fw_revision_not_used)
  
  return dcb_xdmm_fw_revision_not_used_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DrbIoData::set_allocated_dcb_xdmm_fw_revision_not_used(::std::string* dcb_xdmm_fw_revision_not_used) {
  if (dcb_xdmm_fw_revision_not_used != NULL) {
    
  } else {
    
  }
  dcb_xdmm_fw_revision_not_used_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dcb_xdmm_fw_revision_not_used);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.DrbIoData.dcb_xdmm_fw_revision_not_used)
}

// optional string xray_seasoning_time_remaining_str = 10;
void DrbIoData::clear_xray_seasoning_time_remaining_str() {
  xray_seasoning_time_remaining_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DrbIoData::xray_seasoning_time_remaining_str() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.xray_seasoning_time_remaining_str)
  return xray_seasoning_time_remaining_str_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DrbIoData::set_xray_seasoning_time_remaining_str(const ::std::string& value) {
  
  xray_seasoning_time_remaining_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.xray_seasoning_time_remaining_str)
}
 void DrbIoData::set_xray_seasoning_time_remaining_str(const char* value) {
  
  xray_seasoning_time_remaining_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.DrbIoData.xray_seasoning_time_remaining_str)
}
 void DrbIoData::set_xray_seasoning_time_remaining_str(const char* value, size_t size) {
  
  xray_seasoning_time_remaining_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.DrbIoData.xray_seasoning_time_remaining_str)
}
 ::std::string* DrbIoData::mutable_xray_seasoning_time_remaining_str() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.DrbIoData.xray_seasoning_time_remaining_str)
  return xray_seasoning_time_remaining_str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DrbIoData::release_xray_seasoning_time_remaining_str() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.DrbIoData.xray_seasoning_time_remaining_str)
  
  return xray_seasoning_time_remaining_str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DrbIoData::set_allocated_xray_seasoning_time_remaining_str(::std::string* xray_seasoning_time_remaining_str) {
  if (xray_seasoning_time_remaining_str != NULL) {
    
  } else {
    
  }
  xray_seasoning_time_remaining_str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), xray_seasoning_time_remaining_str);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.DrbIoData.xray_seasoning_time_remaining_str)
}

// optional float xray_voltage_setpoint_kv = 20;
void DrbIoData::clear_xray_voltage_setpoint_kv() {
  xray_voltage_setpoint_kv_ = 0;
}
 float DrbIoData::xray_voltage_setpoint_kv() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.xray_voltage_setpoint_kv)
  return xray_voltage_setpoint_kv_;
}
 void DrbIoData::set_xray_voltage_setpoint_kv(float value) {
  
  xray_voltage_setpoint_kv_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.xray_voltage_setpoint_kv)
}

// optional float xray_current_setpoint_ma = 21;
void DrbIoData::clear_xray_current_setpoint_ma() {
  xray_current_setpoint_ma_ = 0;
}
 float DrbIoData::xray_current_setpoint_ma() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.xray_current_setpoint_ma)
  return xray_current_setpoint_ma_;
}
 void DrbIoData::set_xray_current_setpoint_ma(float value) {
  
  xray_current_setpoint_ma_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.xray_current_setpoint_ma)
}

// optional float xray_voltage_kv = 22;
void DrbIoData::clear_xray_voltage_kv() {
  xray_voltage_kv_ = 0;
}
 float DrbIoData::xray_voltage_kv() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.xray_voltage_kv)
  return xray_voltage_kv_;
}
 void DrbIoData::set_xray_voltage_kv(float value) {
  
  xray_voltage_kv_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.xray_voltage_kv)
}

// optional float xray_current_ma = 23;
void DrbIoData::clear_xray_current_ma() {
  xray_current_ma_ = 0;
}
 float DrbIoData::xray_current_ma() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.xray_current_ma)
  return xray_current_ma_;
}
 void DrbIoData::set_xray_current_ma(float value) {
  
  xray_current_ma_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.xray_current_ma)
}

// optional float xray_source_temp = 24;
void DrbIoData::clear_xray_source_temp() {
  xray_source_temp_ = 0;
}
 float DrbIoData::xray_source_temp() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.xray_source_temp)
  return xray_source_temp_;
}
 void DrbIoData::set_xray_source_temp(float value) {
  
  xray_source_temp_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.xray_source_temp)
}

// optional float xray_source_filament_current = 25;
void DrbIoData::clear_xray_source_filament_current() {
  xray_source_filament_current_ = 0;
}
 float DrbIoData::xray_source_filament_current() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.xray_source_filament_current)
  return xray_source_filament_current_;
}
 void DrbIoData::set_xray_source_filament_current(float value) {
  
  xray_source_filament_current_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.xray_source_filament_current)
}

// optional float rcb_gantry_rpm = 26;
void DrbIoData::clear_rcb_gantry_rpm() {
  rcb_gantry_rpm_ = 0;
}
 float DrbIoData::rcb_gantry_rpm() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.rcb_gantry_rpm)
  return rcb_gantry_rpm_;
}
 void DrbIoData::set_rcb_gantry_rpm(float value) {
  
  rcb_gantry_rpm_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.rcb_gantry_rpm)
}

// optional float rcb_gantry_angle_degrees = 27;
void DrbIoData::clear_rcb_gantry_angle_degrees() {
  rcb_gantry_angle_degrees_ = 0;
}
 float DrbIoData::rcb_gantry_angle_degrees() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.rcb_gantry_angle_degrees)
  return rcb_gantry_angle_degrees_;
}
 void DrbIoData::set_rcb_gantry_angle_degrees(float value) {
  
  rcb_gantry_angle_degrees_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.rcb_gantry_angle_degrees)
}

// optional float rcb_temp_sensor_1 = 28;
void DrbIoData::clear_rcb_temp_sensor_1() {
  rcb_temp_sensor_1_ = 0;
}
 float DrbIoData::rcb_temp_sensor_1() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.rcb_temp_sensor_1)
  return rcb_temp_sensor_1_;
}
 void DrbIoData::set_rcb_temp_sensor_1(float value) {
  
  rcb_temp_sensor_1_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.rcb_temp_sensor_1)
}

// optional float rcb_temp_sensor_2 = 29;
void DrbIoData::clear_rcb_temp_sensor_2() {
  rcb_temp_sensor_2_ = 0;
}
 float DrbIoData::rcb_temp_sensor_2() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.rcb_temp_sensor_2)
  return rcb_temp_sensor_2_;
}
 void DrbIoData::set_rcb_temp_sensor_2(float value) {
  
  rcb_temp_sensor_2_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.rcb_temp_sensor_2)
}

// optional float dcb_1_ambient_temp = 30;
void DrbIoData::clear_dcb_1_ambient_temp() {
  dcb_1_ambient_temp_ = 0;
}
 float DrbIoData::dcb_1_ambient_temp() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.dcb_1_ambient_temp)
  return dcb_1_ambient_temp_;
}
 void DrbIoData::set_dcb_1_ambient_temp(float value) {
  
  dcb_1_ambient_temp_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.dcb_1_ambient_temp)
}

// optional float dcb_2_ambient_temp = 31;
void DrbIoData::clear_dcb_2_ambient_temp() {
  dcb_2_ambient_temp_ = 0;
}
 float DrbIoData::dcb_2_ambient_temp() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.dcb_2_ambient_temp)
  return dcb_2_ambient_temp_;
}
 void DrbIoData::set_dcb_2_ambient_temp(float value) {
  
  dcb_2_ambient_temp_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.dcb_2_ambient_temp)
}

// optional float dcb_3_ambient_temp = 32;
void DrbIoData::clear_dcb_3_ambient_temp() {
  dcb_3_ambient_temp_ = 0;
}
 float DrbIoData::dcb_3_ambient_temp() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.dcb_3_ambient_temp)
  return dcb_3_ambient_temp_;
}
 void DrbIoData::set_dcb_3_ambient_temp(float value) {
  
  dcb_3_ambient_temp_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.dcb_3_ambient_temp)
}

// optional float dcb_4_ambient_temp = 33;
void DrbIoData::clear_dcb_4_ambient_temp() {
  dcb_4_ambient_temp_ = 0;
}
 float DrbIoData::dcb_4_ambient_temp() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.dcb_4_ambient_temp)
  return dcb_4_ambient_temp_;
}
 void DrbIoData::set_dcb_4_ambient_temp(float value) {
  
  dcb_4_ambient_temp_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.dcb_4_ambient_temp)
}

// optional float dcb_5_ambient_temp = 34;
void DrbIoData::clear_dcb_5_ambient_temp() {
  dcb_5_ambient_temp_ = 0;
}
 float DrbIoData::dcb_5_ambient_temp() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.dcb_5_ambient_temp)
  return dcb_5_ambient_temp_;
}
 void DrbIoData::set_dcb_5_ambient_temp(float value) {
  
  dcb_5_ambient_temp_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.dcb_5_ambient_temp)
}

// optional float conveyor_speed_cm_sec = 35;
void DrbIoData::clear_conveyor_speed_cm_sec() {
  conveyor_speed_cm_sec_ = 0;
}
 float DrbIoData::conveyor_speed_cm_sec() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.conveyor_speed_cm_sec)
  return conveyor_speed_cm_sec_;
}
 void DrbIoData::set_conveyor_speed_cm_sec(float value) {
  
  conveyor_speed_cm_sec_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.conveyor_speed_cm_sec)
}

// optional double current_conveyor_pos_cm = 36;
void DrbIoData::clear_current_conveyor_pos_cm() {
  current_conveyor_pos_cm_ = 0;
}
 double DrbIoData::current_conveyor_pos_cm() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.current_conveyor_pos_cm)
  return current_conveyor_pos_cm_;
}
 void DrbIoData::set_current_conveyor_pos_cm(double value) {
  
  current_conveyor_pos_cm_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.current_conveyor_pos_cm)
}

// optional double current_gantry_rot_count = 37;
void DrbIoData::clear_current_gantry_rot_count() {
  current_gantry_rot_count_ = 0;
}
 double DrbIoData::current_gantry_rot_count() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.current_gantry_rot_count)
  return current_gantry_rot_count_;
}
 void DrbIoData::set_current_gantry_rot_count(double value) {
  
  current_gantry_rot_count_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.current_gantry_rot_count)
}

// optional fixed32 xray_fault_status = 50;
void DrbIoData::clear_xray_fault_status() {
  xray_fault_status_ = 0u;
}
 ::google::protobuf::uint32 DrbIoData::xray_fault_status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.xray_fault_status)
  return xray_fault_status_;
}
 void DrbIoData::set_xray_fault_status(::google::protobuf::uint32 value) {
  
  xray_fault_status_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.xray_fault_status)
}

// optional fixed32 xray_source_discrete_status = 51;
void DrbIoData::clear_xray_source_discrete_status() {
  xray_source_discrete_status_ = 0u;
}
 ::google::protobuf::uint32 DrbIoData::xray_source_discrete_status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.xray_source_discrete_status)
  return xray_source_discrete_status_;
}
 void DrbIoData::set_xray_source_discrete_status(::google::protobuf::uint32 value) {
  
  xray_source_discrete_status_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.xray_source_discrete_status)
}

// optional uint32 xray_seasoning_step = 52;
void DrbIoData::clear_xray_seasoning_step() {
  xray_seasoning_step_ = 0u;
}
 ::google::protobuf::uint32 DrbIoData::xray_seasoning_step() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.xray_seasoning_step)
  return xray_seasoning_step_;
}
 void DrbIoData::set_xray_seasoning_step(::google::protobuf::uint32 value) {
  
  xray_seasoning_step_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.xray_seasoning_step)
}

// optional uint32 xray_seasoning_time_remaining = 53;
void DrbIoData::clear_xray_seasoning_time_remaining() {
  xray_seasoning_time_remaining_ = 0u;
}
 ::google::protobuf::uint32 DrbIoData::xray_seasoning_time_remaining() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.xray_seasoning_time_remaining)
  return xray_seasoning_time_remaining_;
}
 void DrbIoData::set_xray_seasoning_time_remaining(::google::protobuf::uint32 value) {
  
  xray_seasoning_time_remaining_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.xray_seasoning_time_remaining)
}

// optional fixed32 rcb_control_register = 54;
void DrbIoData::clear_rcb_control_register() {
  rcb_control_register_ = 0u;
}
 ::google::protobuf::uint32 DrbIoData::rcb_control_register() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.rcb_control_register)
  return rcb_control_register_;
}
 void DrbIoData::set_rcb_control_register(::google::protobuf::uint32 value) {
  
  rcb_control_register_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.rcb_control_register)
}

// optional fixed32 rcb_status_register = 55;
void DrbIoData::clear_rcb_status_register() {
  rcb_status_register_ = 0u;
}
 ::google::protobuf::uint32 DrbIoData::rcb_status_register() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.rcb_status_register)
  return rcb_status_register_;
}
 void DrbIoData::set_rcb_status_register(::google::protobuf::uint32 value) {
  
  rcb_status_register_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.rcb_status_register)
}

// optional fixed32 rcb_fault_register = 56;
void DrbIoData::clear_rcb_fault_register() {
  rcb_fault_register_ = 0u;
}
 ::google::protobuf::uint32 DrbIoData::rcb_fault_register() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.rcb_fault_register)
  return rcb_fault_register_;
}
 void DrbIoData::set_rcb_fault_register(::google::protobuf::uint32 value) {
  
  rcb_fault_register_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.rcb_fault_register)
}

// optional fixed32 rcb_trigger_opto_status = 57;
void DrbIoData::clear_rcb_trigger_opto_status() {
  rcb_trigger_opto_status_ = 0u;
}
 ::google::protobuf::uint32 DrbIoData::rcb_trigger_opto_status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.rcb_trigger_opto_status)
  return rcb_trigger_opto_status_;
}
 void DrbIoData::set_rcb_trigger_opto_status(::google::protobuf::uint32 value) {
  
  rcb_trigger_opto_status_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.rcb_trigger_opto_status)
}

// optional uint32 rcb_serial_number = 58;
void DrbIoData::clear_rcb_serial_number() {
  rcb_serial_number_ = 0u;
}
 ::google::protobuf::uint32 DrbIoData::rcb_serial_number() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.rcb_serial_number)
  return rcb_serial_number_;
}
 void DrbIoData::set_rcb_serial_number(::google::protobuf::uint32 value) {
  
  rcb_serial_number_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.rcb_serial_number)
}

// optional fixed32 dcb_1_status_register = 59;
void DrbIoData::clear_dcb_1_status_register() {
  dcb_1_status_register_ = 0u;
}
 ::google::protobuf::uint32 DrbIoData::dcb_1_status_register() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.dcb_1_status_register)
  return dcb_1_status_register_;
}
 void DrbIoData::set_dcb_1_status_register(::google::protobuf::uint32 value) {
  
  dcb_1_status_register_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.dcb_1_status_register)
}

// optional fixed32 dcb_2_status_register = 60;
void DrbIoData::clear_dcb_2_status_register() {
  dcb_2_status_register_ = 0u;
}
 ::google::protobuf::uint32 DrbIoData::dcb_2_status_register() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.dcb_2_status_register)
  return dcb_2_status_register_;
}
 void DrbIoData::set_dcb_2_status_register(::google::protobuf::uint32 value) {
  
  dcb_2_status_register_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.dcb_2_status_register)
}

// optional fixed32 dcb_3_status_register = 61;
void DrbIoData::clear_dcb_3_status_register() {
  dcb_3_status_register_ = 0u;
}
 ::google::protobuf::uint32 DrbIoData::dcb_3_status_register() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.dcb_3_status_register)
  return dcb_3_status_register_;
}
 void DrbIoData::set_dcb_3_status_register(::google::protobuf::uint32 value) {
  
  dcb_3_status_register_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.dcb_3_status_register)
}

// optional fixed32 dcb_4_status_register = 62;
void DrbIoData::clear_dcb_4_status_register() {
  dcb_4_status_register_ = 0u;
}
 ::google::protobuf::uint32 DrbIoData::dcb_4_status_register() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.dcb_4_status_register)
  return dcb_4_status_register_;
}
 void DrbIoData::set_dcb_4_status_register(::google::protobuf::uint32 value) {
  
  dcb_4_status_register_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.dcb_4_status_register)
}

// optional fixed32 dcb_5_status_register = 63;
void DrbIoData::clear_dcb_5_status_register() {
  dcb_5_status_register_ = 0u;
}
 ::google::protobuf::uint32 DrbIoData::dcb_5_status_register() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.dcb_5_status_register)
  return dcb_5_status_register_;
}
 void DrbIoData::set_dcb_5_status_register(::google::protobuf::uint32 value) {
  
  dcb_5_status_register_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.dcb_5_status_register)
}

// optional uint32 rcb_gantry_rotation_period_ms = 64;
void DrbIoData::clear_rcb_gantry_rotation_period_ms() {
  rcb_gantry_rotation_period_ms_ = 0u;
}
 ::google::protobuf::uint32 DrbIoData::rcb_gantry_rotation_period_ms() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.rcb_gantry_rotation_period_ms)
  return rcb_gantry_rotation_period_ms_;
}
 void DrbIoData::set_rcb_gantry_rotation_period_ms(::google::protobuf::uint32 value) {
  
  rcb_gantry_rotation_period_ms_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.rcb_gantry_rotation_period_ms)
}

// optional bool xray_regulation_fault = 100;
void DrbIoData::clear_xray_regulation_fault() {
  xray_regulation_fault_ = false;
}
 bool DrbIoData::xray_regulation_fault() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.xray_regulation_fault)
  return xray_regulation_fault_;
}
 void DrbIoData::set_xray_regulation_fault(bool value) {
  
  xray_regulation_fault_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.xray_regulation_fault)
}

// optional bool xray_interlock_open = 101;
void DrbIoData::clear_xray_interlock_open() {
  xray_interlock_open_ = false;
}
 bool DrbIoData::xray_interlock_open() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.xray_interlock_open)
  return xray_interlock_open_;
}
 void DrbIoData::set_xray_interlock_open(bool value) {
  
  xray_interlock_open_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.xray_interlock_open)
}

// optional bool xray_cathode_over_voltage = 102;
void DrbIoData::clear_xray_cathode_over_voltage() {
  xray_cathode_over_voltage_ = false;
}
 bool DrbIoData::xray_cathode_over_voltage() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.xray_cathode_over_voltage)
  return xray_cathode_over_voltage_;
}
 void DrbIoData::set_xray_cathode_over_voltage(bool value) {
  
  xray_cathode_over_voltage_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.xray_cathode_over_voltage)
}

// optional bool xray_anode_over_voltage = 103;
void DrbIoData::clear_xray_anode_over_voltage() {
  xray_anode_over_voltage_ = false;
}
 bool DrbIoData::xray_anode_over_voltage() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.xray_anode_over_voltage)
  return xray_anode_over_voltage_;
}
 void DrbIoData::set_xray_anode_over_voltage(bool value) {
  
  xray_anode_over_voltage_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.xray_anode_over_voltage)
}

// optional bool xray_over_temperature = 104;
void DrbIoData::clear_xray_over_temperature() {
  xray_over_temperature_ = false;
}
 bool DrbIoData::xray_over_temperature() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.xray_over_temperature)
  return xray_over_temperature_;
}
 void DrbIoData::set_xray_over_temperature(bool value) {
  
  xray_over_temperature_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.xray_over_temperature)
}

// optional bool xray_arc_fault = 105;
void DrbIoData::clear_xray_arc_fault() {
  xray_arc_fault_ = false;
}
 bool DrbIoData::xray_arc_fault() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.xray_arc_fault)
  return xray_arc_fault_;
}
 void DrbIoData::set_xray_arc_fault(bool value) {
  
  xray_arc_fault_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.xray_arc_fault)
}

// optional bool xray_over_current = 106;
void DrbIoData::clear_xray_over_current() {
  xray_over_current_ = false;
}
 bool DrbIoData::xray_over_current() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.xray_over_current)
  return xray_over_current_;
}
 void DrbIoData::set_xray_over_current(bool value) {
  
  xray_over_current_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.xray_over_current)
}

// optional bool xray_power_limit_fault = 107;
void DrbIoData::clear_xray_power_limit_fault() {
  xray_power_limit_fault_ = false;
}
 bool DrbIoData::xray_power_limit_fault() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.xray_power_limit_fault)
  return xray_power_limit_fault_;
}
 void DrbIoData::set_xray_power_limit_fault(bool value) {
  
  xray_power_limit_fault_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.xray_power_limit_fault)
}

// optional bool xray_over_voltage = 108;
void DrbIoData::clear_xray_over_voltage() {
  xray_over_voltage_ = false;
}
 bool DrbIoData::xray_over_voltage() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.xray_over_voltage)
  return xray_over_voltage_;
}
 void DrbIoData::set_xray_over_voltage(bool value) {
  
  xray_over_voltage_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.xray_over_voltage)
}

// optional bool duty_cycle_mode = 109;
void DrbIoData::clear_duty_cycle_mode() {
  duty_cycle_mode_ = false;
}
 bool DrbIoData::duty_cycle_mode() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.duty_cycle_mode)
  return duty_cycle_mode_;
}
 void DrbIoData::set_duty_cycle_mode(bool value) {
  
  duty_cycle_mode_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.duty_cycle_mode)
}

// optional bool xray_minimization = 110;
void DrbIoData::clear_xray_minimization() {
  xray_minimization_ = false;
}
 bool DrbIoData::xray_minimization() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.xray_minimization)
  return xray_minimization_;
}
 void DrbIoData::set_xray_minimization(bool value) {
  
  xray_minimization_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.xray_minimization)
}

// optional bool xray_seasoning_in_progress = 111;
void DrbIoData::clear_xray_seasoning_in_progress() {
  xray_seasoning_in_progress_ = false;
}
 bool DrbIoData::xray_seasoning_in_progress() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.xray_seasoning_in_progress)
  return xray_seasoning_in_progress_;
}
 void DrbIoData::set_xray_seasoning_in_progress(bool value) {
  
  xray_seasoning_in_progress_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.xray_seasoning_in_progress)
}

// optional bool xray_watchdog_status = 112;
void DrbIoData::clear_xray_watchdog_status() {
  xray_watchdog_status_ = false;
}
 bool DrbIoData::xray_watchdog_status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.xray_watchdog_status)
  return xray_watchdog_status_;
}
 void DrbIoData::set_xray_watchdog_status(bool value) {
  
  xray_watchdog_status_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.xray_watchdog_status)
}

// optional bool xray_enable = 113;
void DrbIoData::clear_xray_enable() {
  xray_enable_ = false;
}
 bool DrbIoData::xray_enable() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.xray_enable)
  return xray_enable_;
}
 void DrbIoData::set_xray_enable(bool value) {
  
  xray_enable_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.xray_enable)
}

// optional bool xray_high_voltage_on = 114;
void DrbIoData::clear_xray_high_voltage_on() {
  xray_high_voltage_on_ = false;
}
 bool DrbIoData::xray_high_voltage_on() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.xray_high_voltage_on)
  return xray_high_voltage_on_;
}
 void DrbIoData::set_xray_high_voltage_on(bool value) {
  
  xray_high_voltage_on_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.xray_high_voltage_on)
}

// optional bool xray_interlock = 115;
void DrbIoData::clear_xray_interlock() {
  xray_interlock_ = false;
}
 bool DrbIoData::xray_interlock() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.xray_interlock)
  return xray_interlock_;
}
 void DrbIoData::set_xray_interlock(bool value) {
  
  xray_interlock_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.xray_interlock)
}

// optional bool xray_on = 116;
void DrbIoData::clear_xray_on() {
  xray_on_ = false;
}
 bool DrbIoData::xray_on() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.xray_on)
  return xray_on_;
}
 void DrbIoData::set_xray_on(bool value) {
  
  xray_on_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.xray_on)
}

// optional bool opto_trigger_1_home = 117;
void DrbIoData::clear_opto_trigger_1_home() {
  opto_trigger_1_home_ = false;
}
 bool DrbIoData::opto_trigger_1_home() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.opto_trigger_1_home)
  return opto_trigger_1_home_;
}
 void DrbIoData::set_opto_trigger_1_home(bool value) {
  
  opto_trigger_1_home_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.opto_trigger_1_home)
}

// optional bool opto_trigger_2 = 118;
void DrbIoData::clear_opto_trigger_2() {
  opto_trigger_2_ = false;
}
 bool DrbIoData::opto_trigger_2() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.opto_trigger_2)
  return opto_trigger_2_;
}
 void DrbIoData::set_opto_trigger_2(bool value) {
  
  opto_trigger_2_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.opto_trigger_2)
}

// optional bool opto_trigger_3 = 119;
void DrbIoData::clear_opto_trigger_3() {
  opto_trigger_3_ = false;
}
 bool DrbIoData::opto_trigger_3() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.opto_trigger_3)
  return opto_trigger_3_;
}
 void DrbIoData::set_opto_trigger_3(bool value) {
  
  opto_trigger_3_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.opto_trigger_3)
}

// optional bool opto_trigger_4 = 120;
void DrbIoData::clear_opto_trigger_4() {
  opto_trigger_4_ = false;
}
 bool DrbIoData::opto_trigger_4() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.opto_trigger_4)
  return opto_trigger_4_;
}
 void DrbIoData::set_opto_trigger_4(bool value) {
  
  opto_trigger_4_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.opto_trigger_4)
}

// optional bool rectifier_temperature = 121;
void DrbIoData::clear_rectifier_temperature() {
  rectifier_temperature_ = false;
}
 bool DrbIoData::rectifier_temperature() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.rectifier_temperature)
  return rectifier_temperature_;
}
 void DrbIoData::set_rectifier_temperature(bool value) {
  
  rectifier_temperature_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.rectifier_temperature)
}

// optional bool rectifier_under_voltage = 122;
void DrbIoData::clear_rectifier_under_voltage() {
  rectifier_under_voltage_ = false;
}
 bool DrbIoData::rectifier_under_voltage() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.rectifier_under_voltage)
  return rectifier_under_voltage_;
}
 void DrbIoData::set_rectifier_under_voltage(bool value) {
  
  rectifier_under_voltage_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.rectifier_under_voltage)
}

// optional bool rectifier_over_voltage = 123;
void DrbIoData::clear_rectifier_over_voltage() {
  rectifier_over_voltage_ = false;
}
 bool DrbIoData::rectifier_over_voltage() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.rectifier_over_voltage)
  return rectifier_over_voltage_;
}
 void DrbIoData::set_rectifier_over_voltage(bool value) {
  
  rectifier_over_voltage_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.rectifier_over_voltage)
}

// optional bool rectifier_fan_load = 124;
void DrbIoData::clear_rectifier_fan_load() {
  rectifier_fan_load_ = false;
}
 bool DrbIoData::rectifier_fan_load() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.rectifier_fan_load)
  return rectifier_fan_load_;
}
 void DrbIoData::set_rectifier_fan_load(bool value) {
  
  rectifier_fan_load_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.rectifier_fan_load)
}

// optional bool rectifier_das_load = 125;
void DrbIoData::clear_rectifier_das_load() {
  rectifier_das_load_ = false;
}
 bool DrbIoData::rectifier_das_load() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.rectifier_das_load)
  return rectifier_das_load_;
}
 void DrbIoData::set_rectifier_das_load(bool value) {
  
  rectifier_das_load_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.rectifier_das_load)
}

// optional bool rectifier_rcb_load = 126;
void DrbIoData::clear_rectifier_rcb_load() {
  rectifier_rcb_load_ = false;
}
 bool DrbIoData::rectifier_rcb_load() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.rectifier_rcb_load)
  return rectifier_rcb_load_;
}
 void DrbIoData::set_rectifier_rcb_load(bool value) {
  
  rectifier_rcb_load_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.rectifier_rcb_load)
}

// optional bool rectifier_xray_cooler = 127;
void DrbIoData::clear_rectifier_xray_cooler() {
  rectifier_xray_cooler_ = false;
}
 bool DrbIoData::rectifier_xray_cooler() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.rectifier_xray_cooler)
  return rectifier_xray_cooler_;
}
 void DrbIoData::set_rectifier_xray_cooler(bool value) {
  
  rectifier_xray_cooler_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.rectifier_xray_cooler)
}

// optional bool rectifier_xray_gen_controller = 128;
void DrbIoData::clear_rectifier_xray_gen_controller() {
  rectifier_xray_gen_controller_ = false;
}
 bool DrbIoData::rectifier_xray_gen_controller() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.rectifier_xray_gen_controller)
  return rectifier_xray_gen_controller_;
}
 void DrbIoData::set_rectifier_xray_gen_controller(bool value) {
  
  rectifier_xray_gen_controller_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.rectifier_xray_gen_controller)
}

// optional bool rectifier_xray_controller_fan = 129;
void DrbIoData::clear_rectifier_xray_controller_fan() {
  rectifier_xray_controller_fan_ = false;
}
 bool DrbIoData::rectifier_xray_controller_fan() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.rectifier_xray_controller_fan)
  return rectifier_xray_controller_fan_;
}
 void DrbIoData::set_rectifier_xray_controller_fan(bool value) {
  
  rectifier_xray_controller_fan_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.rectifier_xray_controller_fan)
}

// optional bool rectifier_ok = 130;
void DrbIoData::clear_rectifier_ok() {
  rectifier_ok_ = false;
}
 bool DrbIoData::rectifier_ok() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.rectifier_ok)
  return rectifier_ok_;
}
 void DrbIoData::set_rectifier_ok(bool value) {
  
  rectifier_ok_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.rectifier_ok)
}

// optional string drb_firmware_version = 131;
void DrbIoData::clear_drb_firmware_version() {
  drb_firmware_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DrbIoData::drb_firmware_version() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.drb_firmware_version)
  return drb_firmware_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DrbIoData::set_drb_firmware_version(const ::std::string& value) {
  
  drb_firmware_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.drb_firmware_version)
}
 void DrbIoData::set_drb_firmware_version(const char* value) {
  
  drb_firmware_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.DrbIoData.drb_firmware_version)
}
 void DrbIoData::set_drb_firmware_version(const char* value, size_t size) {
  
  drb_firmware_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.DrbIoData.drb_firmware_version)
}
 ::std::string* DrbIoData::mutable_drb_firmware_version() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.DrbIoData.drb_firmware_version)
  return drb_firmware_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DrbIoData::release_drb_firmware_version() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.DrbIoData.drb_firmware_version)
  
  return drb_firmware_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DrbIoData::set_allocated_drb_firmware_version(::std::string* drb_firmware_version) {
  if (drb_firmware_version != NULL) {
    
  } else {
    
  }
  drb_firmware_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), drb_firmware_version);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.DrbIoData.drb_firmware_version)
}

// optional bool drb_ready = 132;
void DrbIoData::clear_drb_ready() {
  drb_ready_ = false;
}
 bool DrbIoData::drb_ready() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.drb_ready)
  return drb_ready_;
}
 void DrbIoData::set_drb_ready(bool value) {
  
  drb_ready_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.drb_ready)
}

// optional bool rcb_comm_loss = 133;
void DrbIoData::clear_rcb_comm_loss() {
  rcb_comm_loss_ = false;
}
 bool DrbIoData::rcb_comm_loss() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.rcb_comm_loss)
  return rcb_comm_loss_;
}
 void DrbIoData::set_rcb_comm_loss(bool value) {
  
  rcb_comm_loss_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.rcb_comm_loss)
}

// optional bool watch_dog_detection_time_error = 134;
void DrbIoData::clear_watch_dog_detection_time_error() {
  watch_dog_detection_time_error_ = false;
}
 bool DrbIoData::watch_dog_detection_time_error() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.watch_dog_detection_time_error)
  return watch_dog_detection_time_error_;
}
 void DrbIoData::set_watch_dog_detection_time_error(bool value) {
  
  watch_dog_detection_time_error_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.watch_dog_detection_time_error)
}

// optional bool rcb_control_packet_fifo_full_error = 135;
void DrbIoData::clear_rcb_control_packet_fifo_full_error() {
  rcb_control_packet_fifo_full_error_ = false;
}
 bool DrbIoData::rcb_control_packet_fifo_full_error() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.rcb_control_packet_fifo_full_error)
  return rcb_control_packet_fifo_full_error_;
}
 void DrbIoData::set_rcb_control_packet_fifo_full_error(bool value) {
  
  rcb_control_packet_fifo_full_error_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.rcb_control_packet_fifo_full_error)
}

// optional bool conveyor_belt_quad_encoder_error = 136;
void DrbIoData::clear_conveyor_belt_quad_encoder_error() {
  conveyor_belt_quad_encoder_error_ = false;
}
 bool DrbIoData::conveyor_belt_quad_encoder_error() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.conveyor_belt_quad_encoder_error)
  return conveyor_belt_quad_encoder_error_;
}
 void DrbIoData::set_conveyor_belt_quad_encoder_error(bool value) {
  
  conveyor_belt_quad_encoder_error_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.conveyor_belt_quad_encoder_error)
}

// optional bool uplink_cmd_bit_0 = 137;
void DrbIoData::clear_uplink_cmd_bit_0() {
  uplink_cmd_bit_0_ = false;
}
 bool DrbIoData::uplink_cmd_bit_0() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.uplink_cmd_bit_0)
  return uplink_cmd_bit_0_;
}
 void DrbIoData::set_uplink_cmd_bit_0(bool value) {
  
  uplink_cmd_bit_0_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.uplink_cmd_bit_0)
}

// optional bool uplink_cmd_bit_1 = 138;
void DrbIoData::clear_uplink_cmd_bit_1() {
  uplink_cmd_bit_1_ = false;
}
 bool DrbIoData::uplink_cmd_bit_1() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.uplink_cmd_bit_1)
  return uplink_cmd_bit_1_;
}
 void DrbIoData::set_uplink_cmd_bit_1(bool value) {
  
  uplink_cmd_bit_1_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.uplink_cmd_bit_1)
}

// optional bool uplink_cmd_bit_2 = 139;
void DrbIoData::clear_uplink_cmd_bit_2() {
  uplink_cmd_bit_2_ = false;
}
 bool DrbIoData::uplink_cmd_bit_2() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.uplink_cmd_bit_2)
  return uplink_cmd_bit_2_;
}
 void DrbIoData::set_uplink_cmd_bit_2(bool value) {
  
  uplink_cmd_bit_2_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.uplink_cmd_bit_2)
}

// optional fixed32 dcb1_xdmms_present = 140;
void DrbIoData::clear_dcb1_xdmms_present() {
  dcb1_xdmms_present_ = 0u;
}
 ::google::protobuf::uint32 DrbIoData::dcb1_xdmms_present() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.dcb1_xdmms_present)
  return dcb1_xdmms_present_;
}
 void DrbIoData::set_dcb1_xdmms_present(::google::protobuf::uint32 value) {
  
  dcb1_xdmms_present_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.dcb1_xdmms_present)
}

// optional fixed32 dcb2_xdmms_present = 141;
void DrbIoData::clear_dcb2_xdmms_present() {
  dcb2_xdmms_present_ = 0u;
}
 ::google::protobuf::uint32 DrbIoData::dcb2_xdmms_present() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.dcb2_xdmms_present)
  return dcb2_xdmms_present_;
}
 void DrbIoData::set_dcb2_xdmms_present(::google::protobuf::uint32 value) {
  
  dcb2_xdmms_present_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.dcb2_xdmms_present)
}

// optional fixed32 dcb3_xdmms_present = 142;
void DrbIoData::clear_dcb3_xdmms_present() {
  dcb3_xdmms_present_ = 0u;
}
 ::google::protobuf::uint32 DrbIoData::dcb3_xdmms_present() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.dcb3_xdmms_present)
  return dcb3_xdmms_present_;
}
 void DrbIoData::set_dcb3_xdmms_present(::google::protobuf::uint32 value) {
  
  dcb3_xdmms_present_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.dcb3_xdmms_present)
}

// optional fixed32 dcb4_xdmms_present = 143;
void DrbIoData::clear_dcb4_xdmms_present() {
  dcb4_xdmms_present_ = 0u;
}
 ::google::protobuf::uint32 DrbIoData::dcb4_xdmms_present() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.dcb4_xdmms_present)
  return dcb4_xdmms_present_;
}
 void DrbIoData::set_dcb4_xdmms_present(::google::protobuf::uint32 value) {
  
  dcb4_xdmms_present_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.dcb4_xdmms_present)
}

// optional fixed32 dcb5_xdmms_present = 144;
void DrbIoData::clear_dcb5_xdmms_present() {
  dcb5_xdmms_present_ = 0u;
}
 ::google::protobuf::uint32 DrbIoData::dcb5_xdmms_present() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.dcb5_xdmms_present)
  return dcb5_xdmms_present_;
}
 void DrbIoData::set_dcb5_xdmms_present(::google::protobuf::uint32 value) {
  
  dcb5_xdmms_present_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.dcb5_xdmms_present)
}

// optional fixed64 number_of_bad_views = 160;
void DrbIoData::clear_number_of_bad_views() {
  number_of_bad_views_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 DrbIoData::number_of_bad_views() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.number_of_bad_views)
  return number_of_bad_views_;
}
 void DrbIoData::set_number_of_bad_views(::google::protobuf::uint64 value) {
  
  number_of_bad_views_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.number_of_bad_views)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* DrbCommMsg_CmdId_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DrbCommMsg_CmdId_descriptor_;
}
bool DrbCommMsg_CmdId_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DrbCommMsg_CmdId DrbCommMsg::BOGUS_PLACE_HOLDER;
const DrbCommMsg_CmdId DrbCommMsg::RESET_DRB_VIEW_PROCESSOR_FAULT;
const DrbCommMsg_CmdId DrbCommMsg::FORCE_RESET_DRB_VIEW_PROCESSOR_FAULT;
const DrbCommMsg_CmdId DrbCommMsg::RESET_CONVEYOR_POSITION;
const DrbCommMsg_CmdId DrbCommMsg::RESET_BAD_VIEW_COUNT;
const DrbCommMsg_CmdId DrbCommMsg::CmdId_MIN;
const DrbCommMsg_CmdId DrbCommMsg::CmdId_MAX;
const int DrbCommMsg::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DrbCommMsg::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DrbCommMsg::DrbCommMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analogic.ancp00.DrbCommMsg)
}

void DrbCommMsg::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DrbCommMsg::DrbCommMsg(const DrbCommMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analogic.ancp00.DrbCommMsg)
}

void DrbCommMsg::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  id_ = 0;
}

DrbCommMsg::~DrbCommMsg() {
  // @@protoc_insertion_point(destructor:analogic.ancp00.DrbCommMsg)
  SharedDtor();
}

void DrbCommMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DrbCommMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DrbCommMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DrbCommMsg_descriptor_;
}

const DrbCommMsg& DrbCommMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fDrbComm_2eproto();
  return *default_instance_;
}

DrbCommMsg* DrbCommMsg::default_instance_ = NULL;

DrbCommMsg* DrbCommMsg::New(::google::protobuf::Arena* arena) const {
  DrbCommMsg* n = new DrbCommMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DrbCommMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:analogic.ancp00.DrbCommMsg)
  id_ = 0;
}

bool DrbCommMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analogic.ancp00.DrbCommMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .analogic.ancp00.DrbCommMsg.CmdId id = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_id(static_cast< ::analogic::ancp00::DrbCommMsg_CmdId >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:analogic.ancp00.DrbCommMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analogic.ancp00.DrbCommMsg)
  return false;
#undef DO_
}

void DrbCommMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analogic.ancp00.DrbCommMsg)
  // optional .analogic.ancp00.DrbCommMsg.CmdId id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->id(), output);
  }

  // @@protoc_insertion_point(serialize_end:analogic.ancp00.DrbCommMsg)
}

::google::protobuf::uint8* DrbCommMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analogic.ancp00.DrbCommMsg)
  // optional .analogic.ancp00.DrbCommMsg.CmdId id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:analogic.ancp00.DrbCommMsg)
  return target;
}

int DrbCommMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:analogic.ancp00.DrbCommMsg)
  int total_size = 0;

  // optional .analogic.ancp00.DrbCommMsg.CmdId id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DrbCommMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analogic.ancp00.DrbCommMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DrbCommMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DrbCommMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analogic.ancp00.DrbCommMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analogic.ancp00.DrbCommMsg)
    MergeFrom(*source);
  }
}

void DrbCommMsg::MergeFrom(const DrbCommMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analogic.ancp00.DrbCommMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void DrbCommMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analogic.ancp00.DrbCommMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DrbCommMsg::CopyFrom(const DrbCommMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analogic.ancp00.DrbCommMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrbCommMsg::IsInitialized() const {

  return true;
}

void DrbCommMsg::Swap(DrbCommMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DrbCommMsg::InternalSwap(DrbCommMsg* other) {
  std::swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DrbCommMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DrbCommMsg_descriptor_;
  metadata.reflection = DrbCommMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DrbCommMsg

// optional .analogic.ancp00.DrbCommMsg.CmdId id = 1;
void DrbCommMsg::clear_id() {
  id_ = 0;
}
 ::analogic::ancp00::DrbCommMsg_CmdId DrbCommMsg::id() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbCommMsg.id)
  return static_cast< ::analogic::ancp00::DrbCommMsg_CmdId >(id_);
}
 void DrbCommMsg::set_id(::analogic::ancp00::DrbCommMsg_CmdId value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbCommMsg.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ancp00
}  // namespace analogic

// @@protoc_insertion_point(global_scope)
