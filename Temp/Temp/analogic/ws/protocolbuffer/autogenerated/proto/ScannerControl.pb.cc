// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/ScannerControl.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/ScannerControl.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace analogic {
namespace ancp00 {

namespace {

const ::google::protobuf::Descriptor* ScannerControlMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScannerControlMsg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ScannerControlMsg_SCANNER_CONTROL_CMD_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ScannerControlStatusMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScannerControlStatusMsg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ScannerControlStatusMsg_SCANNER_CONTROL_STATE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ScannerControlStatusMsg_SCANNER_CONTROL_SUBSTATE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ScannerControlRpcSeq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScannerControlRpcSeq_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ScannerControlRpcSeq_SCANNER_CONTROL_RPC_SEQ_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CtrlSeqStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CtrlSeqStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CtrlSeqStatus_CTRL_SEQ_STATUS_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CtrlSeqStatus_CTRL_SEQ_ERROR_CODE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DYNAMIC_AIR_CAL_STATE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DYNAMIC_OFFSET_CAL_STATE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BHS_TYPE_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_2fScannerControl_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_proto_2fScannerControl_2eproto() {
  protobuf_AddDesc_proto_2fScannerControl_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto/ScannerControl.proto");
  GOOGLE_CHECK(file != NULL);
  ScannerControlMsg_descriptor_ = file->message_type(0);
  static const int ScannerControlMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScannerControlMsg, cmd_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScannerControlMsg, text_),
  };
  ScannerControlMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ScannerControlMsg_descriptor_,
      ScannerControlMsg::default_instance_,
      ScannerControlMsg_offsets_,
      -1,
      -1,
      -1,
      sizeof(ScannerControlMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScannerControlMsg, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScannerControlMsg, _is_default_instance_));
  ScannerControlMsg_SCANNER_CONTROL_CMD_descriptor_ = ScannerControlMsg_descriptor_->enum_type(0);
  ScannerControlStatusMsg_descriptor_ = file->message_type(1);
  static const int ScannerControlStatusMsg_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScannerControlStatusMsg, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScannerControlStatusMsg, substate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScannerControlStatusMsg, scanner_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScannerControlStatusMsg, scanner_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScannerControlStatusMsg, xray_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScannerControlStatusMsg, current_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScannerControlStatusMsg, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScannerControlStatusMsg, xray_on_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScannerControlStatusMsg, last_air_cal_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScannerControlStatusMsg, last_offset_cal_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScannerControlStatusMsg, rtr_),
  };
  ScannerControlStatusMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ScannerControlStatusMsg_descriptor_,
      ScannerControlStatusMsg::default_instance_,
      ScannerControlStatusMsg_offsets_,
      -1,
      -1,
      -1,
      sizeof(ScannerControlStatusMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScannerControlStatusMsg, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScannerControlStatusMsg, _is_default_instance_));
  ScannerControlStatusMsg_SCANNER_CONTROL_STATE_descriptor_ = ScannerControlStatusMsg_descriptor_->enum_type(0);
  ScannerControlStatusMsg_SCANNER_CONTROL_SUBSTATE_descriptor_ = ScannerControlStatusMsg_descriptor_->enum_type(1);
  ScannerControlRpcSeq_descriptor_ = file->message_type(2);
  static const int ScannerControlRpcSeq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScannerControlRpcSeq, id_),
  };
  ScannerControlRpcSeq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ScannerControlRpcSeq_descriptor_,
      ScannerControlRpcSeq::default_instance_,
      ScannerControlRpcSeq_offsets_,
      -1,
      -1,
      -1,
      sizeof(ScannerControlRpcSeq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScannerControlRpcSeq, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScannerControlRpcSeq, _is_default_instance_));
  ScannerControlRpcSeq_SCANNER_CONTROL_RPC_SEQ_ID_descriptor_ = ScannerControlRpcSeq_descriptor_->enum_type(0);
  CtrlSeqStatus_descriptor_ = file->message_type(3);
  static const int CtrlSeqStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlSeqStatus, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlSeqStatus, error_code_),
  };
  CtrlSeqStatus_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CtrlSeqStatus_descriptor_,
      CtrlSeqStatus::default_instance_,
      CtrlSeqStatus_offsets_,
      -1,
      -1,
      -1,
      sizeof(CtrlSeqStatus),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlSeqStatus, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlSeqStatus, _is_default_instance_));
  CtrlSeqStatus_CTRL_SEQ_STATUS_descriptor_ = CtrlSeqStatus_descriptor_->enum_type(0);
  CtrlSeqStatus_CTRL_SEQ_ERROR_CODE_descriptor_ = CtrlSeqStatus_descriptor_->enum_type(1);
  DYNAMIC_AIR_CAL_STATE_descriptor_ = file->enum_type(0);
  DYNAMIC_OFFSET_CAL_STATE_descriptor_ = file->enum_type(1);
  BHS_TYPE_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_2fScannerControl_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ScannerControlMsg_descriptor_, &ScannerControlMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ScannerControlStatusMsg_descriptor_, &ScannerControlStatusMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ScannerControlRpcSeq_descriptor_, &ScannerControlRpcSeq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CtrlSeqStatus_descriptor_, &CtrlSeqStatus::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_2fScannerControl_2eproto() {
  delete ScannerControlMsg::default_instance_;
  delete ScannerControlMsg_reflection_;
  delete ScannerControlStatusMsg::default_instance_;
  delete ScannerControlStatusMsg_reflection_;
  delete ScannerControlRpcSeq::default_instance_;
  delete ScannerControlRpcSeq_reflection_;
  delete CtrlSeqStatus::default_instance_;
  delete CtrlSeqStatus_reflection_;
}

void protobuf_AddDesc_proto_2fScannerControl_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_proto_2fScannerControl_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032proto/ScannerControl.proto\022\017analogic.a"
    "ncp00\"\210\005\n\021ScannerControlMsg\022F\n\006cmd_id\030\001 "
    "\001(\01626.analogic.ancp00.ScannerControlMsg."
    "SCANNER_CONTROL_CMD\022\014\n\004text\030\002 \001(\t\"\234\004\n\023SC"
    "ANNER_CONTROL_CMD\022\014\n\010IDLE_CMD\020\000\022\014\n\010SCAN_"
    "CMD\020\001\022\017\n\013STANDBY_CMD\020\002\022\020\n\014PASSTHRU_CMD\020\003"
    "\022\023\n\017RESET_FAULT_CMD\020\004\022\020\n\014SHUTDOWN_CMD\020\005\022"
    "\026\n\022SERVICE_ACTIVE_CMD\020\006\022\030\n\024SERVICE_INACT"
    "IVE_CMD\020\007\022\021\n\rRAISE_RTR_REQ\020\010\022\021\n\rLOWER_RT"
    "R_REQ\020\t\022\023\n\017RECON_START_CMD\020\014\022\022\n\016RECON_ST"
    "OP_CMD\020\r\022\025\n\021CONVEYOR_STOP_CMD\020\016\022\024\n\020CONVE"
    "YOR_RUN_CMD\020\017\022\036\n\032ENTRANCE_CONVEYOR_STOP_"
    "CMD\020\020\022\035\n\031ENTRANCE_CONVEYOR_RUN_CMD\020\021\022\032\n\026"
    "EXIT_CONVEYOR_STOP_CMD\020\022\022\031\n\025EXIT_CONVEYO"
    "R_RUN_CMD\020\023\022\031\n\025BHS_EMERGENCY_REQUEST\020\024\022\031"
    "\n\025BHS_EMERGENCY_RELEASE\020\025\022\023\n\017GANTRY_STOP"
    "_CMD\020\026\022\022\n\016GANTRY_RUN_CMD\020\027\022\034\n\030CONVEYOR_R"
    "UN_REVERSE_CMD\020\030\"\257\t\n\027ScannerControlStatu"
    "sMsg\022M\n\005state\030\001 \001(\0162>.analogic.ancp00.Sc"
    "annerControlStatusMsg.SCANNER_CONTROL_ST"
    "ATE\022S\n\010substate\030\002 \001(\0162A.analogic.ancp00."
    "ScannerControlStatusMsg.SCANNER_CONTROL_"
    "SUBSTATE\022\024\n\014scanner_name\030\024 \001(\t\022\025\n\rscanne"
    "r_state\030\025 \001(\t\022\022\n\nxray_state\030\026 \001(\t\022\024\n\014cur"
    "rent_date\030\027 \001(\t\022\021\n\tuser_name\030\030 \001(\t\022\017\n\007xr"
    "ay_on\030\031 \001(\010\022\031\n\021last_air_cal_time\030\032 \001(\t\022\034"
    "\n\024last_offset_cal_time\030\033 \001(\t\022\013\n\003rtr\030\034 \001("
    "\010\"|\n\025SCANNER_CONTROL_STATE\022\n\n\006UNINIT\020\000\022\010"
    "\n\004IDLE\020\001\022\014\n\010PASSTHRU\020\002\022\013\n\007STANDBY\020\003\022\010\n\004S"
    "CAN\020\004\022\t\n\005FAULT\020\005\022\017\n\013CAL_SERVICE\020\006\022\014\n\010SHU"
    "TDOWN\020\007\"\260\005\n\030SCANNER_CONTROL_SUBSTATE\022\017\n\013"
    "NOT_USED_SS\020\000\022\013\n\007IDLE_SS\020\002\022\030\n\024GOING_TO_P"
    "ASSTHRU_SS\020\003\022\017\n\013PASSTHRU_SS\020\004\022\030\n\024GOING_T"
    "O_STANDYBY_SS\020\005\022\016\n\nSTANDBY_SS\020\006\022\035\n\031STAND"
    "BY_XRAY_SEASONING_SS\020\007\022\017\n\013SCANNING_SS\020\n\022"
    "\027\n\023SCANNING_NOT_RTR_SS\020\013\022\024\n\020GOING_TO_SCA"
    "N_SS\020\024\022\024\n\020GANTRY_SPINUP_SS\020\025\022\025\n\021XRAY_SEA"
    "SONING_SS\020\026\022\026\n\022XRAY_ENERGIZING_SS\020\027\022\022\n\016C"
    "ALIBRATING_SS\020\030\022\027\n\023CONVEYOR_STARTUP_SS\020\031"
    "\022\033\n\027POWERLINK_COMM_CHECK_SS\020\032\022\026\n\022CONVEYO"
    "R_RUNOUT_SS\020\033\022\025\n\021XRAY_MINIMIZED_SS\020\034\022\033\n\027"
    "SHUTDOWN_IN_PROGRESS_SS\020\036\022\016\n\nAIR_CAL_SS\020"
    "2\022\021\n\rOFFSET_CAL_SS\0203\022\016\n\nPIN_CAL_SS\0204\022\020\n\014"
    "ZEE_ALIGN_SS\0205\022\023\n\017SPECTRAL_CAL_SS\0206\022\021\n\rR"
    "AD_SURVEY_SS\0207\022\024\n\020IMAGE_QUALITY_SS\0208\022\027\n\023"
    "RAW_DATA_COLLECT_SS\020:\022\030\n\024RAD_SURVEY_CANC"
    "EL_SS\020;\022\026\n\022BELT_TUNNEL_CAL_SS\020A\022\031\n\025INTRU"
    "SION_DETECTED_SS\020F\"\255\016\n\024ScannerControlRpc"
    "Seq\022L\n\002id\030\001 \001(\0162@.analogic.ancp00.Scanne"
    "rControlRpcSeq.SCANNER_CONTROL_RPC_SEQ_I"
    "D\"\306\r\n\032SCANNER_CONTROL_RPC_SEQ_ID\022\025\n\021GET_"
    "COMPUTER_INFO\020\000\022\036\n\032GET_BAD_DETECTOR_MAP_"
    "FILES\020\001\022 \n\034GET_BAD_DETECTOR_MANUAL_FILE\020"
    "\002\022#\n\037UPDATE_BAD_DETECTOR_MANUAL_FILE\020\003\022\026"
    "\n\022GET_ERROR_LOG_FILE\020\004\022\037\n\033GET_IMAGE_CALI"
    "BRATION_FILES\020\005\022\035\n\031VIEW_IMAGE_QUALITY_RE"
    "PORT\020\010\022\031\n\025RUN_IMAGE_CALIBRATION\020\t\022(\n$UPD"
    "ATE_IMAGE_CALIBRATION_BELT_HEIGHT\020\n\022(\n$U"
    "PDATE_IMAGE_CALIBRATION_NYLON_SCALE\020\013\022\020\n"
    "\014EXPORT_FILES\020\014\022\033\n\027GET_SCANNER_CONFIG_FI"
    "LE\020\r\022\036\n\032UPDATE_SCANNER_CONFIG_FILE\020\016\022\036\n\032"
    "GET_WS_SCANNER_CONFIG_FILE\020\017\022!\n\035UPDATE_W"
    "S_SCANNER_CONFIG_FILE\020\020\022!\n\035GET_IMAGE_QUA"
    "LITY_MASS_VALUES\020\021\022\034\n\030GET_INSTALLED_ALAR"
    "M_LIBS\020\022\022\036\n\032GET_INSTALLABLE_ALARM_LIBS\020\023"
    "\022\025\n\021INSTALL_ALARM_LIB\020\024\022&\n\"UPDATE_IMAGE_"
    "CALIBRATION_BELT_FREQ\020\025\022\031\n\025EXPORT_CAL_PA"
    "RAM_DATA\020\026\022\031\n\025IMPORT_CAL_PARAM_DATA\020\027\022\014\n"
    "\007AIR_CAL\020\350\007\022\017\n\nOFFSET_CAL\020\351\007\022\014\n\007PIN_CAL\020"
    "\352\007\022\016\n\tZEE_ALIGN\020\353\007\022\021\n\014SPECTRAL_CAL\020\354\007\022\025\n"
    "\020RADIATION_SURVEY\020\355\007\022\034\n\027RADIATION_SURVEY"
    "_CANCEL\020\356\007\022\025\n\020RAW_DATA_COLLECT\020\357\007\022\033\n\026IMA"
    "GE_QUALITY_TEST_RUN\020\360\007\022\036\n\031IMAGE_QUALITY_"
    "TEST_CANCEL\020\361\007\022\020\n\013CAL_PROCEED\020\362\007\022\017\n\nCAL_"
    "CANCEL\020\363\007\022\035\n\030ZEE_PIN_SPECTRAL_CAL_SEQ\020\364\007"
    "\022\036\n\031BELT_TUNNEL_CAL_NO_WINDOW\020\365\007\022 \n\033BELT"
    "_TUNNEL_CAL_WITH_WINDOW\020\366\007\022\027\n\022GANTRY_CON"
    "TROL_SEQ\020\210\'\022\031\n\024CONVEYOR_CONTROL_SEQ\020\211\'\022\025"
    "\n\020XRAY_CONTROL_SEQ\020\212\'\022\024\n\017XRAY_SEASON_SEQ"
    "\020\213\'\022\023\n\016GO_TO_IDLE_SEQ\020\214\'\022\023\n\016GO_TO_SCAN_S"
    "EQ\020\215\'\022\027\n\022GO_TO_PASSTHRU_SEQ\020\216\'\022\026\n\021GO_TO_"
    "STANDBY_SEQ\020\217\'\022\024\n\017RESET_FAULT_SEQ\020\220\'\022\021\n\014"
    "SHUTDOWN_SEQ\020\221\'\022\030\n\023DYNAMIC_AIR_CAL_SEQ\020\222"
    "\'\022\033\n\026DYNAMIC_OFFSET_CAL_SEQ\020\223\'\022\033\n\026CONV_S"
    "TOP_XRAY_MIN_SEQ\020\224\'\022\032\n\025XRAY_MAX_CONV_RUN"
    "_SEQ\020\225\'\022$\n\037CONV_STOP_XRAY_MIN_CONV_RUN_S"
    "EQ\020\226\'\022\027\n\022CONVEYOR_FLUSH_SEQ\020\227\'\022\023\n\016GANTRY"
    "_RUN_SEQ\020\272\'\022\024\n\017GANTRY_STOP_SEQ\020\273\'\022\025\n\020CON"
    "VEYOR_RUN_SEQ\020\274\'\022\026\n\021CONVEYOR_STOP_SEQ\020\275\'"
    "\022\020\n\013XRAY_ON_SEQ\020\354\'\022\021\n\014XRAY_OFF_SEQ\020\355\'\022\026\n"
    "\021XRAY_MINIMIZE_SEQ\020\356\'\022\026\n\021XRAY_MAXIMIZE_S"
    "EQ\020\357\'\022\035\n\030XRAY_SEASONING_SHORT_SEQ\020\360\'\022\036\n\031"
    "XRAY_SEASONING_MEDIUM_SEQ\020\361\'\022\034\n\027XRAY_SEA"
    "SONING_LONG_SEQ\020\362\'\"\244\003\n\rCtrlSeqStatus\022>\n\006"
    "status\030\001 \001(\0162..analogic.ancp00.CtrlSeqSt"
    "atus.CTRL_SEQ_STATUS\022F\n\nerror_code\030\002 \001(\016"
    "22.analogic.ancp00.CtrlSeqStatus.CTRL_SE"
    "Q_ERROR_CODE\"\246\001\n\017CTRL_SEQ_STATUS\022\021\n\rCTRL"
    "_SEQ_IDLE\020\000\022\024\n\020CTRL_SEQ_RUNNING\020\001\022\023\n\017CTR"
    "L_SEQ_PAUSED\020\002\022\024\n\020CTRL_SEQ_RESUMED\020\003\022\025\n\021"
    "CTRL_SEQ_COMPLETE\020\004\022\022\n\016CTRL_SEQ_ERROR\020\005\022"
    "\024\n\020CTRL_SEQ_ABORTED\020\006\"b\n\023CTRL_SEQ_ERROR_"
    "CODE\022\027\n\023CTRL_SEQ_ERROR_NONE\020\000\022\032\n\026CTRL_SE"
    "Q_ERROR_TIMEOUT\020\001\022\026\n\022CTRL_SEQ_SEQ_ERROR\020"
    "\002*\217\001\n\025DYNAMIC_AIR_CAL_STATE\022\033\n\027DYN_AIR_C"
    "AL_CLEAR_ERROR\020\000\022 \n\034DYN_AIR_CAL_CONVEYOR"
    "_CONTROL\020\001\022\031\n\025DYN_AIR_CAL_CALIBRATE\020\002\022\034\n"
    "\030DYN_AIR_CAL_CONVEYOR_RUN\020\003*\324\001\n\030DYNAMIC_"
    "OFFSET_CAL_STATE\022\036\n\032DYN_OFFSET_CAL_CLEAR"
    "_ERROR\020\000\022 \n\034DYN_OFFSET_CAL_CONVEYOR_STOP"
    "\020\001\022\033\n\027DYN_OFFSET_CAL_XRAY_OFF\020\002\022\034\n\030DYN_O"
    "FFSET_CAL_CALIBRATE\020\003\022\032\n\026DYN_OFFSET_CAL_"
    "XRAY_ON\020\004\022\037\n\033DYN_OFFSET_CAL_CONVEYOR_RUN"
    "\020\005*-\n\010BHS_TYPE\022\014\n\010BHS_NONE\020\000\022\023\n\017BHS_SCAR"
    "ABEE_SL\020\001b\006proto3", 4577);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/ScannerControl.proto", &protobuf_RegisterTypes);
  ScannerControlMsg::default_instance_ = new ScannerControlMsg();
  ScannerControlStatusMsg::default_instance_ = new ScannerControlStatusMsg();
  ScannerControlRpcSeq::default_instance_ = new ScannerControlRpcSeq();
  CtrlSeqStatus::default_instance_ = new CtrlSeqStatus();
  ScannerControlMsg::default_instance_->InitAsDefaultInstance();
  ScannerControlStatusMsg::default_instance_->InitAsDefaultInstance();
  ScannerControlRpcSeq::default_instance_->InitAsDefaultInstance();
  CtrlSeqStatus::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2fScannerControl_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2fScannerControl_2eproto {
  StaticDescriptorInitializer_proto_2fScannerControl_2eproto() {
    protobuf_AddDesc_proto_2fScannerControl_2eproto();
  }
} static_descriptor_initializer_proto_2fScannerControl_2eproto_;
const ::google::protobuf::EnumDescriptor* DYNAMIC_AIR_CAL_STATE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DYNAMIC_AIR_CAL_STATE_descriptor_;
}
bool DYNAMIC_AIR_CAL_STATE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DYNAMIC_OFFSET_CAL_STATE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DYNAMIC_OFFSET_CAL_STATE_descriptor_;
}
bool DYNAMIC_OFFSET_CAL_STATE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BHS_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BHS_TYPE_descriptor_;
}
bool BHS_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ScannerControlMsg_SCANNER_CONTROL_CMD_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScannerControlMsg_SCANNER_CONTROL_CMD_descriptor_;
}
bool ScannerControlMsg_SCANNER_CONTROL_CMD_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ScannerControlMsg_SCANNER_CONTROL_CMD ScannerControlMsg::IDLE_CMD;
const ScannerControlMsg_SCANNER_CONTROL_CMD ScannerControlMsg::SCAN_CMD;
const ScannerControlMsg_SCANNER_CONTROL_CMD ScannerControlMsg::STANDBY_CMD;
const ScannerControlMsg_SCANNER_CONTROL_CMD ScannerControlMsg::PASSTHRU_CMD;
const ScannerControlMsg_SCANNER_CONTROL_CMD ScannerControlMsg::RESET_FAULT_CMD;
const ScannerControlMsg_SCANNER_CONTROL_CMD ScannerControlMsg::SHUTDOWN_CMD;
const ScannerControlMsg_SCANNER_CONTROL_CMD ScannerControlMsg::SERVICE_ACTIVE_CMD;
const ScannerControlMsg_SCANNER_CONTROL_CMD ScannerControlMsg::SERVICE_INACTIVE_CMD;
const ScannerControlMsg_SCANNER_CONTROL_CMD ScannerControlMsg::RAISE_RTR_REQ;
const ScannerControlMsg_SCANNER_CONTROL_CMD ScannerControlMsg::LOWER_RTR_REQ;
const ScannerControlMsg_SCANNER_CONTROL_CMD ScannerControlMsg::RECON_START_CMD;
const ScannerControlMsg_SCANNER_CONTROL_CMD ScannerControlMsg::RECON_STOP_CMD;
const ScannerControlMsg_SCANNER_CONTROL_CMD ScannerControlMsg::CONVEYOR_STOP_CMD;
const ScannerControlMsg_SCANNER_CONTROL_CMD ScannerControlMsg::CONVEYOR_RUN_CMD;
const ScannerControlMsg_SCANNER_CONTROL_CMD ScannerControlMsg::ENTRANCE_CONVEYOR_STOP_CMD;
const ScannerControlMsg_SCANNER_CONTROL_CMD ScannerControlMsg::ENTRANCE_CONVEYOR_RUN_CMD;
const ScannerControlMsg_SCANNER_CONTROL_CMD ScannerControlMsg::EXIT_CONVEYOR_STOP_CMD;
const ScannerControlMsg_SCANNER_CONTROL_CMD ScannerControlMsg::EXIT_CONVEYOR_RUN_CMD;
const ScannerControlMsg_SCANNER_CONTROL_CMD ScannerControlMsg::BHS_EMERGENCY_REQUEST;
const ScannerControlMsg_SCANNER_CONTROL_CMD ScannerControlMsg::BHS_EMERGENCY_RELEASE;
const ScannerControlMsg_SCANNER_CONTROL_CMD ScannerControlMsg::GANTRY_STOP_CMD;
const ScannerControlMsg_SCANNER_CONTROL_CMD ScannerControlMsg::GANTRY_RUN_CMD;
const ScannerControlMsg_SCANNER_CONTROL_CMD ScannerControlMsg::CONVEYOR_RUN_REVERSE_CMD;
const ScannerControlMsg_SCANNER_CONTROL_CMD ScannerControlMsg::SCANNER_CONTROL_CMD_MIN;
const ScannerControlMsg_SCANNER_CONTROL_CMD ScannerControlMsg::SCANNER_CONTROL_CMD_MAX;
const int ScannerControlMsg::SCANNER_CONTROL_CMD_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScannerControlMsg::kCmdIdFieldNumber;
const int ScannerControlMsg::kTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScannerControlMsg::ScannerControlMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analogic.ancp00.ScannerControlMsg)
}

void ScannerControlMsg::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ScannerControlMsg::ScannerControlMsg(const ScannerControlMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analogic.ancp00.ScannerControlMsg)
}

void ScannerControlMsg::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_id_ = 0;
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ScannerControlMsg::~ScannerControlMsg() {
  // @@protoc_insertion_point(destructor:analogic.ancp00.ScannerControlMsg)
  SharedDtor();
}

void ScannerControlMsg::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ScannerControlMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScannerControlMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScannerControlMsg_descriptor_;
}

const ScannerControlMsg& ScannerControlMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fScannerControl_2eproto();
  return *default_instance_;
}

ScannerControlMsg* ScannerControlMsg::default_instance_ = NULL;

ScannerControlMsg* ScannerControlMsg::New(::google::protobuf::Arena* arena) const {
  ScannerControlMsg* n = new ScannerControlMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ScannerControlMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:analogic.ancp00.ScannerControlMsg)
  cmd_id_ = 0;
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ScannerControlMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analogic.ancp00.ScannerControlMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .analogic.ancp00.ScannerControlMsg.SCANNER_CONTROL_CMD cmd_id = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_cmd_id(static_cast< ::analogic::ancp00::ScannerControlMsg_SCANNER_CONTROL_CMD >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_text;
        break;
      }

      // optional string text = 2;
      case 2: {
        if (tag == 18) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.ScannerControlMsg.text"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:analogic.ancp00.ScannerControlMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analogic.ancp00.ScannerControlMsg)
  return false;
#undef DO_
}

void ScannerControlMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analogic.ancp00.ScannerControlMsg)
  // optional .analogic.ancp00.ScannerControlMsg.SCANNER_CONTROL_CMD cmd_id = 1;
  if (this->cmd_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd_id(), output);
  }

  // optional string text = 2;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ScannerControlMsg.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->text(), output);
  }

  // @@protoc_insertion_point(serialize_end:analogic.ancp00.ScannerControlMsg)
}

::google::protobuf::uint8* ScannerControlMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analogic.ancp00.ScannerControlMsg)
  // optional .analogic.ancp00.ScannerControlMsg.SCANNER_CONTROL_CMD cmd_id = 1;
  if (this->cmd_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd_id(), target);
  }

  // optional string text = 2;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ScannerControlMsg.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:analogic.ancp00.ScannerControlMsg)
  return target;
}

int ScannerControlMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:analogic.ancp00.ScannerControlMsg)
  int total_size = 0;

  // optional .analogic.ancp00.ScannerControlMsg.SCANNER_CONTROL_CMD cmd_id = 1;
  if (this->cmd_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd_id());
  }

  // optional string text = 2;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScannerControlMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analogic.ancp00.ScannerControlMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ScannerControlMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ScannerControlMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analogic.ancp00.ScannerControlMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analogic.ancp00.ScannerControlMsg)
    MergeFrom(*source);
  }
}

void ScannerControlMsg::MergeFrom(const ScannerControlMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analogic.ancp00.ScannerControlMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.cmd_id() != 0) {
    set_cmd_id(from.cmd_id());
  }
  if (from.text().size() > 0) {

    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
}

void ScannerControlMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analogic.ancp00.ScannerControlMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScannerControlMsg::CopyFrom(const ScannerControlMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analogic.ancp00.ScannerControlMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScannerControlMsg::IsInitialized() const {

  return true;
}

void ScannerControlMsg::Swap(ScannerControlMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScannerControlMsg::InternalSwap(ScannerControlMsg* other) {
  std::swap(cmd_id_, other->cmd_id_);
  text_.Swap(&other->text_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ScannerControlMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScannerControlMsg_descriptor_;
  metadata.reflection = ScannerControlMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ScannerControlMsg

// optional .analogic.ancp00.ScannerControlMsg.SCANNER_CONTROL_CMD cmd_id = 1;
void ScannerControlMsg::clear_cmd_id() {
  cmd_id_ = 0;
}
 ::analogic::ancp00::ScannerControlMsg_SCANNER_CONTROL_CMD ScannerControlMsg::cmd_id() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ScannerControlMsg.cmd_id)
  return static_cast< ::analogic::ancp00::ScannerControlMsg_SCANNER_CONTROL_CMD >(cmd_id_);
}
 void ScannerControlMsg::set_cmd_id(::analogic::ancp00::ScannerControlMsg_SCANNER_CONTROL_CMD value) {
  
  cmd_id_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.ScannerControlMsg.cmd_id)
}

// optional string text = 2;
void ScannerControlMsg::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ScannerControlMsg::text() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ScannerControlMsg.text)
  return text_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ScannerControlMsg::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.ScannerControlMsg.text)
}
 void ScannerControlMsg::set_text(const char* value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.ScannerControlMsg.text)
}
 void ScannerControlMsg::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.ScannerControlMsg.text)
}
 ::std::string* ScannerControlMsg::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.ScannerControlMsg.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ScannerControlMsg::release_text() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.ScannerControlMsg.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ScannerControlMsg::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.ScannerControlMsg.text)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* ScannerControlStatusMsg_SCANNER_CONTROL_STATE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScannerControlStatusMsg_SCANNER_CONTROL_STATE_descriptor_;
}
bool ScannerControlStatusMsg_SCANNER_CONTROL_STATE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ScannerControlStatusMsg_SCANNER_CONTROL_STATE ScannerControlStatusMsg::UNINIT;
const ScannerControlStatusMsg_SCANNER_CONTROL_STATE ScannerControlStatusMsg::IDLE;
const ScannerControlStatusMsg_SCANNER_CONTROL_STATE ScannerControlStatusMsg::PASSTHRU;
const ScannerControlStatusMsg_SCANNER_CONTROL_STATE ScannerControlStatusMsg::STANDBY;
const ScannerControlStatusMsg_SCANNER_CONTROL_STATE ScannerControlStatusMsg::SCAN;
const ScannerControlStatusMsg_SCANNER_CONTROL_STATE ScannerControlStatusMsg::FAULT;
const ScannerControlStatusMsg_SCANNER_CONTROL_STATE ScannerControlStatusMsg::CAL_SERVICE;
const ScannerControlStatusMsg_SCANNER_CONTROL_STATE ScannerControlStatusMsg::SHUTDOWN;
const ScannerControlStatusMsg_SCANNER_CONTROL_STATE ScannerControlStatusMsg::SCANNER_CONTROL_STATE_MIN;
const ScannerControlStatusMsg_SCANNER_CONTROL_STATE ScannerControlStatusMsg::SCANNER_CONTROL_STATE_MAX;
const int ScannerControlStatusMsg::SCANNER_CONTROL_STATE_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ScannerControlStatusMsg_SCANNER_CONTROL_SUBSTATE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScannerControlStatusMsg_SCANNER_CONTROL_SUBSTATE_descriptor_;
}
bool ScannerControlStatusMsg_SCANNER_CONTROL_SUBSTATE_IsValid(int value) {
  switch(value) {
    case 0:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 10:
    case 11:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 30:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 58:
    case 59:
    case 65:
    case 70:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ScannerControlStatusMsg_SCANNER_CONTROL_SUBSTATE ScannerControlStatusMsg::NOT_USED_SS;
const ScannerControlStatusMsg_SCANNER_CONTROL_SUBSTATE ScannerControlStatusMsg::IDLE_SS;
const ScannerControlStatusMsg_SCANNER_CONTROL_SUBSTATE ScannerControlStatusMsg::GOING_TO_PASSTHRU_SS;
const ScannerControlStatusMsg_SCANNER_CONTROL_SUBSTATE ScannerControlStatusMsg::PASSTHRU_SS;
const ScannerControlStatusMsg_SCANNER_CONTROL_SUBSTATE ScannerControlStatusMsg::GOING_TO_STANDYBY_SS;
const ScannerControlStatusMsg_SCANNER_CONTROL_SUBSTATE ScannerControlStatusMsg::STANDBY_SS;
const ScannerControlStatusMsg_SCANNER_CONTROL_SUBSTATE ScannerControlStatusMsg::STANDBY_XRAY_SEASONING_SS;
const ScannerControlStatusMsg_SCANNER_CONTROL_SUBSTATE ScannerControlStatusMsg::SCANNING_SS;
const ScannerControlStatusMsg_SCANNER_CONTROL_SUBSTATE ScannerControlStatusMsg::SCANNING_NOT_RTR_SS;
const ScannerControlStatusMsg_SCANNER_CONTROL_SUBSTATE ScannerControlStatusMsg::GOING_TO_SCAN_SS;
const ScannerControlStatusMsg_SCANNER_CONTROL_SUBSTATE ScannerControlStatusMsg::GANTRY_SPINUP_SS;
const ScannerControlStatusMsg_SCANNER_CONTROL_SUBSTATE ScannerControlStatusMsg::XRAY_SEASONING_SS;
const ScannerControlStatusMsg_SCANNER_CONTROL_SUBSTATE ScannerControlStatusMsg::XRAY_ENERGIZING_SS;
const ScannerControlStatusMsg_SCANNER_CONTROL_SUBSTATE ScannerControlStatusMsg::CALIBRATING_SS;
const ScannerControlStatusMsg_SCANNER_CONTROL_SUBSTATE ScannerControlStatusMsg::CONVEYOR_STARTUP_SS;
const ScannerControlStatusMsg_SCANNER_CONTROL_SUBSTATE ScannerControlStatusMsg::POWERLINK_COMM_CHECK_SS;
const ScannerControlStatusMsg_SCANNER_CONTROL_SUBSTATE ScannerControlStatusMsg::CONVEYOR_RUNOUT_SS;
const ScannerControlStatusMsg_SCANNER_CONTROL_SUBSTATE ScannerControlStatusMsg::XRAY_MINIMIZED_SS;
const ScannerControlStatusMsg_SCANNER_CONTROL_SUBSTATE ScannerControlStatusMsg::SHUTDOWN_IN_PROGRESS_SS;
const ScannerControlStatusMsg_SCANNER_CONTROL_SUBSTATE ScannerControlStatusMsg::AIR_CAL_SS;
const ScannerControlStatusMsg_SCANNER_CONTROL_SUBSTATE ScannerControlStatusMsg::OFFSET_CAL_SS;
const ScannerControlStatusMsg_SCANNER_CONTROL_SUBSTATE ScannerControlStatusMsg::PIN_CAL_SS;
const ScannerControlStatusMsg_SCANNER_CONTROL_SUBSTATE ScannerControlStatusMsg::ZEE_ALIGN_SS;
const ScannerControlStatusMsg_SCANNER_CONTROL_SUBSTATE ScannerControlStatusMsg::SPECTRAL_CAL_SS;
const ScannerControlStatusMsg_SCANNER_CONTROL_SUBSTATE ScannerControlStatusMsg::RAD_SURVEY_SS;
const ScannerControlStatusMsg_SCANNER_CONTROL_SUBSTATE ScannerControlStatusMsg::IMAGE_QUALITY_SS;
const ScannerControlStatusMsg_SCANNER_CONTROL_SUBSTATE ScannerControlStatusMsg::RAW_DATA_COLLECT_SS;
const ScannerControlStatusMsg_SCANNER_CONTROL_SUBSTATE ScannerControlStatusMsg::RAD_SURVEY_CANCEL_SS;
const ScannerControlStatusMsg_SCANNER_CONTROL_SUBSTATE ScannerControlStatusMsg::BELT_TUNNEL_CAL_SS;
const ScannerControlStatusMsg_SCANNER_CONTROL_SUBSTATE ScannerControlStatusMsg::INTRUSION_DETECTED_SS;
const ScannerControlStatusMsg_SCANNER_CONTROL_SUBSTATE ScannerControlStatusMsg::SCANNER_CONTROL_SUBSTATE_MIN;
const ScannerControlStatusMsg_SCANNER_CONTROL_SUBSTATE ScannerControlStatusMsg::SCANNER_CONTROL_SUBSTATE_MAX;
const int ScannerControlStatusMsg::SCANNER_CONTROL_SUBSTATE_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScannerControlStatusMsg::kStateFieldNumber;
const int ScannerControlStatusMsg::kSubstateFieldNumber;
const int ScannerControlStatusMsg::kScannerNameFieldNumber;
const int ScannerControlStatusMsg::kScannerStateFieldNumber;
const int ScannerControlStatusMsg::kXrayStateFieldNumber;
const int ScannerControlStatusMsg::kCurrentDateFieldNumber;
const int ScannerControlStatusMsg::kUserNameFieldNumber;
const int ScannerControlStatusMsg::kXrayOnFieldNumber;
const int ScannerControlStatusMsg::kLastAirCalTimeFieldNumber;
const int ScannerControlStatusMsg::kLastOffsetCalTimeFieldNumber;
const int ScannerControlStatusMsg::kRtrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScannerControlStatusMsg::ScannerControlStatusMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analogic.ancp00.ScannerControlStatusMsg)
}

void ScannerControlStatusMsg::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ScannerControlStatusMsg::ScannerControlStatusMsg(const ScannerControlStatusMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analogic.ancp00.ScannerControlStatusMsg)
}

void ScannerControlStatusMsg::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  state_ = 0;
  substate_ = 0;
  scanner_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scanner_state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  xray_state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  current_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  xray_on_ = false;
  last_air_cal_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_offset_cal_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rtr_ = false;
}

ScannerControlStatusMsg::~ScannerControlStatusMsg() {
  // @@protoc_insertion_point(destructor:analogic.ancp00.ScannerControlStatusMsg)
  SharedDtor();
}

void ScannerControlStatusMsg::SharedDtor() {
  scanner_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scanner_state_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  xray_state_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  current_date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_air_cal_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_offset_cal_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ScannerControlStatusMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScannerControlStatusMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScannerControlStatusMsg_descriptor_;
}

const ScannerControlStatusMsg& ScannerControlStatusMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fScannerControl_2eproto();
  return *default_instance_;
}

ScannerControlStatusMsg* ScannerControlStatusMsg::default_instance_ = NULL;

ScannerControlStatusMsg* ScannerControlStatusMsg::New(::google::protobuf::Arena* arena) const {
  ScannerControlStatusMsg* n = new ScannerControlStatusMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ScannerControlStatusMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:analogic.ancp00.ScannerControlStatusMsg)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ScannerControlStatusMsg, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ScannerControlStatusMsg*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(state_, substate_);
  scanner_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scanner_state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  xray_state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  current_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  xray_on_ = false;
  last_air_cal_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_offset_cal_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rtr_ = false;

#undef ZR_HELPER_
#undef ZR_

}

bool ScannerControlStatusMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analogic.ancp00.ScannerControlStatusMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .analogic.ancp00.ScannerControlStatusMsg.SCANNER_CONTROL_STATE state = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::analogic::ancp00::ScannerControlStatusMsg_SCANNER_CONTROL_STATE >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_substate;
        break;
      }

      // optional .analogic.ancp00.ScannerControlStatusMsg.SCANNER_CONTROL_SUBSTATE substate = 2;
      case 2: {
        if (tag == 16) {
         parse_substate:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_substate(static_cast< ::analogic::ancp00::ScannerControlStatusMsg_SCANNER_CONTROL_SUBSTATE >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_scanner_name;
        break;
      }

      // optional string scanner_name = 20;
      case 20: {
        if (tag == 162) {
         parse_scanner_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scanner_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->scanner_name().data(), this->scanner_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.ScannerControlStatusMsg.scanner_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_scanner_state;
        break;
      }

      // optional string scanner_state = 21;
      case 21: {
        if (tag == 170) {
         parse_scanner_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scanner_state()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->scanner_state().data(), this->scanner_state().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.ScannerControlStatusMsg.scanner_state"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_xray_state;
        break;
      }

      // optional string xray_state = 22;
      case 22: {
        if (tag == 178) {
         parse_xray_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_xray_state()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->xray_state().data(), this->xray_state().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.ScannerControlStatusMsg.xray_state"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_current_date;
        break;
      }

      // optional string current_date = 23;
      case 23: {
        if (tag == 186) {
         parse_current_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_current_date()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->current_date().data(), this->current_date().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.ScannerControlStatusMsg.current_date"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_user_name;
        break;
      }

      // optional string user_name = 24;
      case 24: {
        if (tag == 194) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.ScannerControlStatusMsg.user_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_xray_on;
        break;
      }

      // optional bool xray_on = 25;
      case 25: {
        if (tag == 200) {
         parse_xray_on:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &xray_on_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_last_air_cal_time;
        break;
      }

      // optional string last_air_cal_time = 26;
      case 26: {
        if (tag == 210) {
         parse_last_air_cal_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_last_air_cal_time()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->last_air_cal_time().data(), this->last_air_cal_time().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.ScannerControlStatusMsg.last_air_cal_time"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_last_offset_cal_time;
        break;
      }

      // optional string last_offset_cal_time = 27;
      case 27: {
        if (tag == 218) {
         parse_last_offset_cal_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_last_offset_cal_time()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->last_offset_cal_time().data(), this->last_offset_cal_time().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.ScannerControlStatusMsg.last_offset_cal_time"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_rtr;
        break;
      }

      // optional bool rtr = 28;
      case 28: {
        if (tag == 224) {
         parse_rtr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rtr_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:analogic.ancp00.ScannerControlStatusMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analogic.ancp00.ScannerControlStatusMsg)
  return false;
#undef DO_
}

void ScannerControlStatusMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analogic.ancp00.ScannerControlStatusMsg)
  // optional .analogic.ancp00.ScannerControlStatusMsg.SCANNER_CONTROL_STATE state = 1;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  // optional .analogic.ancp00.ScannerControlStatusMsg.SCANNER_CONTROL_SUBSTATE substate = 2;
  if (this->substate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->substate(), output);
  }

  // optional string scanner_name = 20;
  if (this->scanner_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->scanner_name().data(), this->scanner_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ScannerControlStatusMsg.scanner_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->scanner_name(), output);
  }

  // optional string scanner_state = 21;
  if (this->scanner_state().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->scanner_state().data(), this->scanner_state().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ScannerControlStatusMsg.scanner_state");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->scanner_state(), output);
  }

  // optional string xray_state = 22;
  if (this->xray_state().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->xray_state().data(), this->xray_state().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ScannerControlStatusMsg.xray_state");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->xray_state(), output);
  }

  // optional string current_date = 23;
  if (this->current_date().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->current_date().data(), this->current_date().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ScannerControlStatusMsg.current_date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      23, this->current_date(), output);
  }

  // optional string user_name = 24;
  if (this->user_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ScannerControlStatusMsg.user_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      24, this->user_name(), output);
  }

  // optional bool xray_on = 25;
  if (this->xray_on() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->xray_on(), output);
  }

  // optional string last_air_cal_time = 26;
  if (this->last_air_cal_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->last_air_cal_time().data(), this->last_air_cal_time().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ScannerControlStatusMsg.last_air_cal_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      26, this->last_air_cal_time(), output);
  }

  // optional string last_offset_cal_time = 27;
  if (this->last_offset_cal_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->last_offset_cal_time().data(), this->last_offset_cal_time().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ScannerControlStatusMsg.last_offset_cal_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      27, this->last_offset_cal_time(), output);
  }

  // optional bool rtr = 28;
  if (this->rtr() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(28, this->rtr(), output);
  }

  // @@protoc_insertion_point(serialize_end:analogic.ancp00.ScannerControlStatusMsg)
}

::google::protobuf::uint8* ScannerControlStatusMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analogic.ancp00.ScannerControlStatusMsg)
  // optional .analogic.ancp00.ScannerControlStatusMsg.SCANNER_CONTROL_STATE state = 1;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }

  // optional .analogic.ancp00.ScannerControlStatusMsg.SCANNER_CONTROL_SUBSTATE substate = 2;
  if (this->substate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->substate(), target);
  }

  // optional string scanner_name = 20;
  if (this->scanner_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->scanner_name().data(), this->scanner_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ScannerControlStatusMsg.scanner_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->scanner_name(), target);
  }

  // optional string scanner_state = 21;
  if (this->scanner_state().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->scanner_state().data(), this->scanner_state().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ScannerControlStatusMsg.scanner_state");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->scanner_state(), target);
  }

  // optional string xray_state = 22;
  if (this->xray_state().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->xray_state().data(), this->xray_state().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ScannerControlStatusMsg.xray_state");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->xray_state(), target);
  }

  // optional string current_date = 23;
  if (this->current_date().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->current_date().data(), this->current_date().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ScannerControlStatusMsg.current_date");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->current_date(), target);
  }

  // optional string user_name = 24;
  if (this->user_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ScannerControlStatusMsg.user_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->user_name(), target);
  }

  // optional bool xray_on = 25;
  if (this->xray_on() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(25, this->xray_on(), target);
  }

  // optional string last_air_cal_time = 26;
  if (this->last_air_cal_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->last_air_cal_time().data(), this->last_air_cal_time().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ScannerControlStatusMsg.last_air_cal_time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->last_air_cal_time(), target);
  }

  // optional string last_offset_cal_time = 27;
  if (this->last_offset_cal_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->last_offset_cal_time().data(), this->last_offset_cal_time().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ScannerControlStatusMsg.last_offset_cal_time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->last_offset_cal_time(), target);
  }

  // optional bool rtr = 28;
  if (this->rtr() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(28, this->rtr(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:analogic.ancp00.ScannerControlStatusMsg)
  return target;
}

int ScannerControlStatusMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:analogic.ancp00.ScannerControlStatusMsg)
  int total_size = 0;

  // optional .analogic.ancp00.ScannerControlStatusMsg.SCANNER_CONTROL_STATE state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  // optional .analogic.ancp00.ScannerControlStatusMsg.SCANNER_CONTROL_SUBSTATE substate = 2;
  if (this->substate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->substate());
  }

  // optional string scanner_name = 20;
  if (this->scanner_name().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->scanner_name());
  }

  // optional string scanner_state = 21;
  if (this->scanner_state().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->scanner_state());
  }

  // optional string xray_state = 22;
  if (this->xray_state().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->xray_state());
  }

  // optional string current_date = 23;
  if (this->current_date().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->current_date());
  }

  // optional string user_name = 24;
  if (this->user_name().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_name());
  }

  // optional bool xray_on = 25;
  if (this->xray_on() != 0) {
    total_size += 2 + 1;
  }

  // optional string last_air_cal_time = 26;
  if (this->last_air_cal_time().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->last_air_cal_time());
  }

  // optional string last_offset_cal_time = 27;
  if (this->last_offset_cal_time().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->last_offset_cal_time());
  }

  // optional bool rtr = 28;
  if (this->rtr() != 0) {
    total_size += 2 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScannerControlStatusMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analogic.ancp00.ScannerControlStatusMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ScannerControlStatusMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ScannerControlStatusMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analogic.ancp00.ScannerControlStatusMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analogic.ancp00.ScannerControlStatusMsg)
    MergeFrom(*source);
  }
}

void ScannerControlStatusMsg::MergeFrom(const ScannerControlStatusMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analogic.ancp00.ScannerControlStatusMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
  if (from.substate() != 0) {
    set_substate(from.substate());
  }
  if (from.scanner_name().size() > 0) {

    scanner_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.scanner_name_);
  }
  if (from.scanner_state().size() > 0) {

    scanner_state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.scanner_state_);
  }
  if (from.xray_state().size() > 0) {

    xray_state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.xray_state_);
  }
  if (from.current_date().size() > 0) {

    current_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.current_date_);
  }
  if (from.user_name().size() > 0) {

    user_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  if (from.xray_on() != 0) {
    set_xray_on(from.xray_on());
  }
  if (from.last_air_cal_time().size() > 0) {

    last_air_cal_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_air_cal_time_);
  }
  if (from.last_offset_cal_time().size() > 0) {

    last_offset_cal_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_offset_cal_time_);
  }
  if (from.rtr() != 0) {
    set_rtr(from.rtr());
  }
}

void ScannerControlStatusMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analogic.ancp00.ScannerControlStatusMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScannerControlStatusMsg::CopyFrom(const ScannerControlStatusMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analogic.ancp00.ScannerControlStatusMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScannerControlStatusMsg::IsInitialized() const {

  return true;
}

void ScannerControlStatusMsg::Swap(ScannerControlStatusMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScannerControlStatusMsg::InternalSwap(ScannerControlStatusMsg* other) {
  std::swap(state_, other->state_);
  std::swap(substate_, other->substate_);
  scanner_name_.Swap(&other->scanner_name_);
  scanner_state_.Swap(&other->scanner_state_);
  xray_state_.Swap(&other->xray_state_);
  current_date_.Swap(&other->current_date_);
  user_name_.Swap(&other->user_name_);
  std::swap(xray_on_, other->xray_on_);
  last_air_cal_time_.Swap(&other->last_air_cal_time_);
  last_offset_cal_time_.Swap(&other->last_offset_cal_time_);
  std::swap(rtr_, other->rtr_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ScannerControlStatusMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScannerControlStatusMsg_descriptor_;
  metadata.reflection = ScannerControlStatusMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ScannerControlStatusMsg

// optional .analogic.ancp00.ScannerControlStatusMsg.SCANNER_CONTROL_STATE state = 1;
void ScannerControlStatusMsg::clear_state() {
  state_ = 0;
}
 ::analogic::ancp00::ScannerControlStatusMsg_SCANNER_CONTROL_STATE ScannerControlStatusMsg::state() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ScannerControlStatusMsg.state)
  return static_cast< ::analogic::ancp00::ScannerControlStatusMsg_SCANNER_CONTROL_STATE >(state_);
}
 void ScannerControlStatusMsg::set_state(::analogic::ancp00::ScannerControlStatusMsg_SCANNER_CONTROL_STATE value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.ScannerControlStatusMsg.state)
}

// optional .analogic.ancp00.ScannerControlStatusMsg.SCANNER_CONTROL_SUBSTATE substate = 2;
void ScannerControlStatusMsg::clear_substate() {
  substate_ = 0;
}
 ::analogic::ancp00::ScannerControlStatusMsg_SCANNER_CONTROL_SUBSTATE ScannerControlStatusMsg::substate() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ScannerControlStatusMsg.substate)
  return static_cast< ::analogic::ancp00::ScannerControlStatusMsg_SCANNER_CONTROL_SUBSTATE >(substate_);
}
 void ScannerControlStatusMsg::set_substate(::analogic::ancp00::ScannerControlStatusMsg_SCANNER_CONTROL_SUBSTATE value) {
  
  substate_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.ScannerControlStatusMsg.substate)
}

// optional string scanner_name = 20;
void ScannerControlStatusMsg::clear_scanner_name() {
  scanner_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ScannerControlStatusMsg::scanner_name() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ScannerControlStatusMsg.scanner_name)
  return scanner_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ScannerControlStatusMsg::set_scanner_name(const ::std::string& value) {
  
  scanner_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.ScannerControlStatusMsg.scanner_name)
}
 void ScannerControlStatusMsg::set_scanner_name(const char* value) {
  
  scanner_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.ScannerControlStatusMsg.scanner_name)
}
 void ScannerControlStatusMsg::set_scanner_name(const char* value, size_t size) {
  
  scanner_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.ScannerControlStatusMsg.scanner_name)
}
 ::std::string* ScannerControlStatusMsg::mutable_scanner_name() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.ScannerControlStatusMsg.scanner_name)
  return scanner_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ScannerControlStatusMsg::release_scanner_name() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.ScannerControlStatusMsg.scanner_name)
  
  return scanner_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ScannerControlStatusMsg::set_allocated_scanner_name(::std::string* scanner_name) {
  if (scanner_name != NULL) {
    
  } else {
    
  }
  scanner_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scanner_name);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.ScannerControlStatusMsg.scanner_name)
}

// optional string scanner_state = 21;
void ScannerControlStatusMsg::clear_scanner_state() {
  scanner_state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ScannerControlStatusMsg::scanner_state() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ScannerControlStatusMsg.scanner_state)
  return scanner_state_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ScannerControlStatusMsg::set_scanner_state(const ::std::string& value) {
  
  scanner_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.ScannerControlStatusMsg.scanner_state)
}
 void ScannerControlStatusMsg::set_scanner_state(const char* value) {
  
  scanner_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.ScannerControlStatusMsg.scanner_state)
}
 void ScannerControlStatusMsg::set_scanner_state(const char* value, size_t size) {
  
  scanner_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.ScannerControlStatusMsg.scanner_state)
}
 ::std::string* ScannerControlStatusMsg::mutable_scanner_state() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.ScannerControlStatusMsg.scanner_state)
  return scanner_state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ScannerControlStatusMsg::release_scanner_state() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.ScannerControlStatusMsg.scanner_state)
  
  return scanner_state_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ScannerControlStatusMsg::set_allocated_scanner_state(::std::string* scanner_state) {
  if (scanner_state != NULL) {
    
  } else {
    
  }
  scanner_state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scanner_state);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.ScannerControlStatusMsg.scanner_state)
}

// optional string xray_state = 22;
void ScannerControlStatusMsg::clear_xray_state() {
  xray_state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ScannerControlStatusMsg::xray_state() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ScannerControlStatusMsg.xray_state)
  return xray_state_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ScannerControlStatusMsg::set_xray_state(const ::std::string& value) {
  
  xray_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.ScannerControlStatusMsg.xray_state)
}
 void ScannerControlStatusMsg::set_xray_state(const char* value) {
  
  xray_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.ScannerControlStatusMsg.xray_state)
}
 void ScannerControlStatusMsg::set_xray_state(const char* value, size_t size) {
  
  xray_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.ScannerControlStatusMsg.xray_state)
}
 ::std::string* ScannerControlStatusMsg::mutable_xray_state() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.ScannerControlStatusMsg.xray_state)
  return xray_state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ScannerControlStatusMsg::release_xray_state() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.ScannerControlStatusMsg.xray_state)
  
  return xray_state_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ScannerControlStatusMsg::set_allocated_xray_state(::std::string* xray_state) {
  if (xray_state != NULL) {
    
  } else {
    
  }
  xray_state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), xray_state);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.ScannerControlStatusMsg.xray_state)
}

// optional string current_date = 23;
void ScannerControlStatusMsg::clear_current_date() {
  current_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ScannerControlStatusMsg::current_date() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ScannerControlStatusMsg.current_date)
  return current_date_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ScannerControlStatusMsg::set_current_date(const ::std::string& value) {
  
  current_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.ScannerControlStatusMsg.current_date)
}
 void ScannerControlStatusMsg::set_current_date(const char* value) {
  
  current_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.ScannerControlStatusMsg.current_date)
}
 void ScannerControlStatusMsg::set_current_date(const char* value, size_t size) {
  
  current_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.ScannerControlStatusMsg.current_date)
}
 ::std::string* ScannerControlStatusMsg::mutable_current_date() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.ScannerControlStatusMsg.current_date)
  return current_date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ScannerControlStatusMsg::release_current_date() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.ScannerControlStatusMsg.current_date)
  
  return current_date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ScannerControlStatusMsg::set_allocated_current_date(::std::string* current_date) {
  if (current_date != NULL) {
    
  } else {
    
  }
  current_date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), current_date);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.ScannerControlStatusMsg.current_date)
}

// optional string user_name = 24;
void ScannerControlStatusMsg::clear_user_name() {
  user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ScannerControlStatusMsg::user_name() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ScannerControlStatusMsg.user_name)
  return user_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ScannerControlStatusMsg::set_user_name(const ::std::string& value) {
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.ScannerControlStatusMsg.user_name)
}
 void ScannerControlStatusMsg::set_user_name(const char* value) {
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.ScannerControlStatusMsg.user_name)
}
 void ScannerControlStatusMsg::set_user_name(const char* value, size_t size) {
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.ScannerControlStatusMsg.user_name)
}
 ::std::string* ScannerControlStatusMsg::mutable_user_name() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.ScannerControlStatusMsg.user_name)
  return user_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ScannerControlStatusMsg::release_user_name() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.ScannerControlStatusMsg.user_name)
  
  return user_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ScannerControlStatusMsg::set_allocated_user_name(::std::string* user_name) {
  if (user_name != NULL) {
    
  } else {
    
  }
  user_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_name);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.ScannerControlStatusMsg.user_name)
}

// optional bool xray_on = 25;
void ScannerControlStatusMsg::clear_xray_on() {
  xray_on_ = false;
}
 bool ScannerControlStatusMsg::xray_on() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ScannerControlStatusMsg.xray_on)
  return xray_on_;
}
 void ScannerControlStatusMsg::set_xray_on(bool value) {
  
  xray_on_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.ScannerControlStatusMsg.xray_on)
}

// optional string last_air_cal_time = 26;
void ScannerControlStatusMsg::clear_last_air_cal_time() {
  last_air_cal_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ScannerControlStatusMsg::last_air_cal_time() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ScannerControlStatusMsg.last_air_cal_time)
  return last_air_cal_time_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ScannerControlStatusMsg::set_last_air_cal_time(const ::std::string& value) {
  
  last_air_cal_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.ScannerControlStatusMsg.last_air_cal_time)
}
 void ScannerControlStatusMsg::set_last_air_cal_time(const char* value) {
  
  last_air_cal_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.ScannerControlStatusMsg.last_air_cal_time)
}
 void ScannerControlStatusMsg::set_last_air_cal_time(const char* value, size_t size) {
  
  last_air_cal_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.ScannerControlStatusMsg.last_air_cal_time)
}
 ::std::string* ScannerControlStatusMsg::mutable_last_air_cal_time() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.ScannerControlStatusMsg.last_air_cal_time)
  return last_air_cal_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ScannerControlStatusMsg::release_last_air_cal_time() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.ScannerControlStatusMsg.last_air_cal_time)
  
  return last_air_cal_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ScannerControlStatusMsg::set_allocated_last_air_cal_time(::std::string* last_air_cal_time) {
  if (last_air_cal_time != NULL) {
    
  } else {
    
  }
  last_air_cal_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), last_air_cal_time);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.ScannerControlStatusMsg.last_air_cal_time)
}

// optional string last_offset_cal_time = 27;
void ScannerControlStatusMsg::clear_last_offset_cal_time() {
  last_offset_cal_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ScannerControlStatusMsg::last_offset_cal_time() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ScannerControlStatusMsg.last_offset_cal_time)
  return last_offset_cal_time_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ScannerControlStatusMsg::set_last_offset_cal_time(const ::std::string& value) {
  
  last_offset_cal_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.ScannerControlStatusMsg.last_offset_cal_time)
}
 void ScannerControlStatusMsg::set_last_offset_cal_time(const char* value) {
  
  last_offset_cal_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.ScannerControlStatusMsg.last_offset_cal_time)
}
 void ScannerControlStatusMsg::set_last_offset_cal_time(const char* value, size_t size) {
  
  last_offset_cal_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.ScannerControlStatusMsg.last_offset_cal_time)
}
 ::std::string* ScannerControlStatusMsg::mutable_last_offset_cal_time() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.ScannerControlStatusMsg.last_offset_cal_time)
  return last_offset_cal_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ScannerControlStatusMsg::release_last_offset_cal_time() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.ScannerControlStatusMsg.last_offset_cal_time)
  
  return last_offset_cal_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ScannerControlStatusMsg::set_allocated_last_offset_cal_time(::std::string* last_offset_cal_time) {
  if (last_offset_cal_time != NULL) {
    
  } else {
    
  }
  last_offset_cal_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), last_offset_cal_time);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.ScannerControlStatusMsg.last_offset_cal_time)
}

// optional bool rtr = 28;
void ScannerControlStatusMsg::clear_rtr() {
  rtr_ = false;
}
 bool ScannerControlStatusMsg::rtr() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ScannerControlStatusMsg.rtr)
  return rtr_;
}
 void ScannerControlStatusMsg::set_rtr(bool value) {
  
  rtr_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.ScannerControlStatusMsg.rtr)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* ScannerControlRpcSeq_SCANNER_CONTROL_RPC_SEQ_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScannerControlRpcSeq_SCANNER_CONTROL_RPC_SEQ_ID_descriptor_;
}
bool ScannerControlRpcSeq_SCANNER_CONTROL_RPC_SEQ_ID_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 1000:
    case 1001:
    case 1002:
    case 1003:
    case 1004:
    case 1005:
    case 1006:
    case 1007:
    case 1008:
    case 1009:
    case 1010:
    case 1011:
    case 1012:
    case 1013:
    case 1014:
    case 5000:
    case 5001:
    case 5002:
    case 5003:
    case 5004:
    case 5005:
    case 5006:
    case 5007:
    case 5008:
    case 5009:
    case 5010:
    case 5011:
    case 5012:
    case 5013:
    case 5014:
    case 5015:
    case 5050:
    case 5051:
    case 5052:
    case 5053:
    case 5100:
    case 5101:
    case 5102:
    case 5103:
    case 5104:
    case 5105:
    case 5106:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ScannerControlRpcSeq_SCANNER_CONTROL_RPC_SEQ_ID ScannerControlRpcSeq::GET_COMPUTER_INFO;
const ScannerControlRpcSeq_SCANNER_CONTROL_RPC_SEQ_ID ScannerControlRpcSeq::GET_BAD_DETECTOR_MAP_FILES;
const ScannerControlRpcSeq_SCANNER_CONTROL_RPC_SEQ_ID ScannerControlRpcSeq::GET_BAD_DETECTOR_MANUAL_FILE;
const ScannerControlRpcSeq_SCANNER_CONTROL_RPC_SEQ_ID ScannerControlRpcSeq::UPDATE_BAD_DETECTOR_MANUAL_FILE;
const ScannerControlRpcSeq_SCANNER_CONTROL_RPC_SEQ_ID ScannerControlRpcSeq::GET_ERROR_LOG_FILE;
const ScannerControlRpcSeq_SCANNER_CONTROL_RPC_SEQ_ID ScannerControlRpcSeq::GET_IMAGE_CALIBRATION_FILES;
const ScannerControlRpcSeq_SCANNER_CONTROL_RPC_SEQ_ID ScannerControlRpcSeq::VIEW_IMAGE_QUALITY_REPORT;
const ScannerControlRpcSeq_SCANNER_CONTROL_RPC_SEQ_ID ScannerControlRpcSeq::RUN_IMAGE_CALIBRATION;
const ScannerControlRpcSeq_SCANNER_CONTROL_RPC_SEQ_ID ScannerControlRpcSeq::UPDATE_IMAGE_CALIBRATION_BELT_HEIGHT;
const ScannerControlRpcSeq_SCANNER_CONTROL_RPC_SEQ_ID ScannerControlRpcSeq::UPDATE_IMAGE_CALIBRATION_NYLON_SCALE;
const ScannerControlRpcSeq_SCANNER_CONTROL_RPC_SEQ_ID ScannerControlRpcSeq::EXPORT_FILES;
const ScannerControlRpcSeq_SCANNER_CONTROL_RPC_SEQ_ID ScannerControlRpcSeq::GET_SCANNER_CONFIG_FILE;
const ScannerControlRpcSeq_SCANNER_CONTROL_RPC_SEQ_ID ScannerControlRpcSeq::UPDATE_SCANNER_CONFIG_FILE;
const ScannerControlRpcSeq_SCANNER_CONTROL_RPC_SEQ_ID ScannerControlRpcSeq::GET_WS_SCANNER_CONFIG_FILE;
const ScannerControlRpcSeq_SCANNER_CONTROL_RPC_SEQ_ID ScannerControlRpcSeq::UPDATE_WS_SCANNER_CONFIG_FILE;
const ScannerControlRpcSeq_SCANNER_CONTROL_RPC_SEQ_ID ScannerControlRpcSeq::GET_IMAGE_QUALITY_MASS_VALUES;
const ScannerControlRpcSeq_SCANNER_CONTROL_RPC_SEQ_ID ScannerControlRpcSeq::GET_INSTALLED_ALARM_LIBS;
const ScannerControlRpcSeq_SCANNER_CONTROL_RPC_SEQ_ID ScannerControlRpcSeq::GET_INSTALLABLE_ALARM_LIBS;
const ScannerControlRpcSeq_SCANNER_CONTROL_RPC_SEQ_ID ScannerControlRpcSeq::INSTALL_ALARM_LIB;
const ScannerControlRpcSeq_SCANNER_CONTROL_RPC_SEQ_ID ScannerControlRpcSeq::UPDATE_IMAGE_CALIBRATION_BELT_FREQ;
const ScannerControlRpcSeq_SCANNER_CONTROL_RPC_SEQ_ID ScannerControlRpcSeq::EXPORT_CAL_PARAM_DATA;
const ScannerControlRpcSeq_SCANNER_CONTROL_RPC_SEQ_ID ScannerControlRpcSeq::IMPORT_CAL_PARAM_DATA;
const ScannerControlRpcSeq_SCANNER_CONTROL_RPC_SEQ_ID ScannerControlRpcSeq::AIR_CAL;
const ScannerControlRpcSeq_SCANNER_CONTROL_RPC_SEQ_ID ScannerControlRpcSeq::OFFSET_CAL;
const ScannerControlRpcSeq_SCANNER_CONTROL_RPC_SEQ_ID ScannerControlRpcSeq::PIN_CAL;
const ScannerControlRpcSeq_SCANNER_CONTROL_RPC_SEQ_ID ScannerControlRpcSeq::ZEE_ALIGN;
const ScannerControlRpcSeq_SCANNER_CONTROL_RPC_SEQ_ID ScannerControlRpcSeq::SPECTRAL_CAL;
const ScannerControlRpcSeq_SCANNER_CONTROL_RPC_SEQ_ID ScannerControlRpcSeq::RADIATION_SURVEY;
const ScannerControlRpcSeq_SCANNER_CONTROL_RPC_SEQ_ID ScannerControlRpcSeq::RADIATION_SURVEY_CANCEL;
const ScannerControlRpcSeq_SCANNER_CONTROL_RPC_SEQ_ID ScannerControlRpcSeq::RAW_DATA_COLLECT;
const ScannerControlRpcSeq_SCANNER_CONTROL_RPC_SEQ_ID ScannerControlRpcSeq::IMAGE_QUALITY_TEST_RUN;
const ScannerControlRpcSeq_SCANNER_CONTROL_RPC_SEQ_ID ScannerControlRpcSeq::IMAGE_QUALITY_TEST_CANCEL;
const ScannerControlRpcSeq_SCANNER_CONTROL_RPC_SEQ_ID ScannerControlRpcSeq::CAL_PROCEED;
const ScannerControlRpcSeq_SCANNER_CONTROL_RPC_SEQ_ID ScannerControlRpcSeq::CAL_CANCEL;
const ScannerControlRpcSeq_SCANNER_CONTROL_RPC_SEQ_ID ScannerControlRpcSeq::ZEE_PIN_SPECTRAL_CAL_SEQ;
const ScannerControlRpcSeq_SCANNER_CONTROL_RPC_SEQ_ID ScannerControlRpcSeq::BELT_TUNNEL_CAL_NO_WINDOW;
const ScannerControlRpcSeq_SCANNER_CONTROL_RPC_SEQ_ID ScannerControlRpcSeq::BELT_TUNNEL_CAL_WITH_WINDOW;
const ScannerControlRpcSeq_SCANNER_CONTROL_RPC_SEQ_ID ScannerControlRpcSeq::GANTRY_CONTROL_SEQ;
const ScannerControlRpcSeq_SCANNER_CONTROL_RPC_SEQ_ID ScannerControlRpcSeq::CONVEYOR_CONTROL_SEQ;
const ScannerControlRpcSeq_SCANNER_CONTROL_RPC_SEQ_ID ScannerControlRpcSeq::XRAY_CONTROL_SEQ;
const ScannerControlRpcSeq_SCANNER_CONTROL_RPC_SEQ_ID ScannerControlRpcSeq::XRAY_SEASON_SEQ;
const ScannerControlRpcSeq_SCANNER_CONTROL_RPC_SEQ_ID ScannerControlRpcSeq::GO_TO_IDLE_SEQ;
const ScannerControlRpcSeq_SCANNER_CONTROL_RPC_SEQ_ID ScannerControlRpcSeq::GO_TO_SCAN_SEQ;
const ScannerControlRpcSeq_SCANNER_CONTROL_RPC_SEQ_ID ScannerControlRpcSeq::GO_TO_PASSTHRU_SEQ;
const ScannerControlRpcSeq_SCANNER_CONTROL_RPC_SEQ_ID ScannerControlRpcSeq::GO_TO_STANDBY_SEQ;
const ScannerControlRpcSeq_SCANNER_CONTROL_RPC_SEQ_ID ScannerControlRpcSeq::RESET_FAULT_SEQ;
const ScannerControlRpcSeq_SCANNER_CONTROL_RPC_SEQ_ID ScannerControlRpcSeq::SHUTDOWN_SEQ;
const ScannerControlRpcSeq_SCANNER_CONTROL_RPC_SEQ_ID ScannerControlRpcSeq::DYNAMIC_AIR_CAL_SEQ;
const ScannerControlRpcSeq_SCANNER_CONTROL_RPC_SEQ_ID ScannerControlRpcSeq::DYNAMIC_OFFSET_CAL_SEQ;
const ScannerControlRpcSeq_SCANNER_CONTROL_RPC_SEQ_ID ScannerControlRpcSeq::CONV_STOP_XRAY_MIN_SEQ;
const ScannerControlRpcSeq_SCANNER_CONTROL_RPC_SEQ_ID ScannerControlRpcSeq::XRAY_MAX_CONV_RUN_SEQ;
const ScannerControlRpcSeq_SCANNER_CONTROL_RPC_SEQ_ID ScannerControlRpcSeq::CONV_STOP_XRAY_MIN_CONV_RUN_SEQ;
const ScannerControlRpcSeq_SCANNER_CONTROL_RPC_SEQ_ID ScannerControlRpcSeq::CONVEYOR_FLUSH_SEQ;
const ScannerControlRpcSeq_SCANNER_CONTROL_RPC_SEQ_ID ScannerControlRpcSeq::GANTRY_RUN_SEQ;
const ScannerControlRpcSeq_SCANNER_CONTROL_RPC_SEQ_ID ScannerControlRpcSeq::GANTRY_STOP_SEQ;
const ScannerControlRpcSeq_SCANNER_CONTROL_RPC_SEQ_ID ScannerControlRpcSeq::CONVEYOR_RUN_SEQ;
const ScannerControlRpcSeq_SCANNER_CONTROL_RPC_SEQ_ID ScannerControlRpcSeq::CONVEYOR_STOP_SEQ;
const ScannerControlRpcSeq_SCANNER_CONTROL_RPC_SEQ_ID ScannerControlRpcSeq::XRAY_ON_SEQ;
const ScannerControlRpcSeq_SCANNER_CONTROL_RPC_SEQ_ID ScannerControlRpcSeq::XRAY_OFF_SEQ;
const ScannerControlRpcSeq_SCANNER_CONTROL_RPC_SEQ_ID ScannerControlRpcSeq::XRAY_MINIMIZE_SEQ;
const ScannerControlRpcSeq_SCANNER_CONTROL_RPC_SEQ_ID ScannerControlRpcSeq::XRAY_MAXIMIZE_SEQ;
const ScannerControlRpcSeq_SCANNER_CONTROL_RPC_SEQ_ID ScannerControlRpcSeq::XRAY_SEASONING_SHORT_SEQ;
const ScannerControlRpcSeq_SCANNER_CONTROL_RPC_SEQ_ID ScannerControlRpcSeq::XRAY_SEASONING_MEDIUM_SEQ;
const ScannerControlRpcSeq_SCANNER_CONTROL_RPC_SEQ_ID ScannerControlRpcSeq::XRAY_SEASONING_LONG_SEQ;
const ScannerControlRpcSeq_SCANNER_CONTROL_RPC_SEQ_ID ScannerControlRpcSeq::SCANNER_CONTROL_RPC_SEQ_ID_MIN;
const ScannerControlRpcSeq_SCANNER_CONTROL_RPC_SEQ_ID ScannerControlRpcSeq::SCANNER_CONTROL_RPC_SEQ_ID_MAX;
const int ScannerControlRpcSeq::SCANNER_CONTROL_RPC_SEQ_ID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScannerControlRpcSeq::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScannerControlRpcSeq::ScannerControlRpcSeq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analogic.ancp00.ScannerControlRpcSeq)
}

void ScannerControlRpcSeq::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ScannerControlRpcSeq::ScannerControlRpcSeq(const ScannerControlRpcSeq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analogic.ancp00.ScannerControlRpcSeq)
}

void ScannerControlRpcSeq::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  id_ = 0;
}

ScannerControlRpcSeq::~ScannerControlRpcSeq() {
  // @@protoc_insertion_point(destructor:analogic.ancp00.ScannerControlRpcSeq)
  SharedDtor();
}

void ScannerControlRpcSeq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ScannerControlRpcSeq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScannerControlRpcSeq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScannerControlRpcSeq_descriptor_;
}

const ScannerControlRpcSeq& ScannerControlRpcSeq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fScannerControl_2eproto();
  return *default_instance_;
}

ScannerControlRpcSeq* ScannerControlRpcSeq::default_instance_ = NULL;

ScannerControlRpcSeq* ScannerControlRpcSeq::New(::google::protobuf::Arena* arena) const {
  ScannerControlRpcSeq* n = new ScannerControlRpcSeq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ScannerControlRpcSeq::Clear() {
// @@protoc_insertion_point(message_clear_start:analogic.ancp00.ScannerControlRpcSeq)
  id_ = 0;
}

bool ScannerControlRpcSeq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analogic.ancp00.ScannerControlRpcSeq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .analogic.ancp00.ScannerControlRpcSeq.SCANNER_CONTROL_RPC_SEQ_ID id = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_id(static_cast< ::analogic::ancp00::ScannerControlRpcSeq_SCANNER_CONTROL_RPC_SEQ_ID >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:analogic.ancp00.ScannerControlRpcSeq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analogic.ancp00.ScannerControlRpcSeq)
  return false;
#undef DO_
}

void ScannerControlRpcSeq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analogic.ancp00.ScannerControlRpcSeq)
  // optional .analogic.ancp00.ScannerControlRpcSeq.SCANNER_CONTROL_RPC_SEQ_ID id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->id(), output);
  }

  // @@protoc_insertion_point(serialize_end:analogic.ancp00.ScannerControlRpcSeq)
}

::google::protobuf::uint8* ScannerControlRpcSeq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analogic.ancp00.ScannerControlRpcSeq)
  // optional .analogic.ancp00.ScannerControlRpcSeq.SCANNER_CONTROL_RPC_SEQ_ID id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:analogic.ancp00.ScannerControlRpcSeq)
  return target;
}

int ScannerControlRpcSeq::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:analogic.ancp00.ScannerControlRpcSeq)
  int total_size = 0;

  // optional .analogic.ancp00.ScannerControlRpcSeq.SCANNER_CONTROL_RPC_SEQ_ID id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScannerControlRpcSeq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analogic.ancp00.ScannerControlRpcSeq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ScannerControlRpcSeq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ScannerControlRpcSeq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analogic.ancp00.ScannerControlRpcSeq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analogic.ancp00.ScannerControlRpcSeq)
    MergeFrom(*source);
  }
}

void ScannerControlRpcSeq::MergeFrom(const ScannerControlRpcSeq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analogic.ancp00.ScannerControlRpcSeq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void ScannerControlRpcSeq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analogic.ancp00.ScannerControlRpcSeq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScannerControlRpcSeq::CopyFrom(const ScannerControlRpcSeq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analogic.ancp00.ScannerControlRpcSeq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScannerControlRpcSeq::IsInitialized() const {

  return true;
}

void ScannerControlRpcSeq::Swap(ScannerControlRpcSeq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScannerControlRpcSeq::InternalSwap(ScannerControlRpcSeq* other) {
  std::swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ScannerControlRpcSeq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScannerControlRpcSeq_descriptor_;
  metadata.reflection = ScannerControlRpcSeq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ScannerControlRpcSeq

// optional .analogic.ancp00.ScannerControlRpcSeq.SCANNER_CONTROL_RPC_SEQ_ID id = 1;
void ScannerControlRpcSeq::clear_id() {
  id_ = 0;
}
 ::analogic::ancp00::ScannerControlRpcSeq_SCANNER_CONTROL_RPC_SEQ_ID ScannerControlRpcSeq::id() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ScannerControlRpcSeq.id)
  return static_cast< ::analogic::ancp00::ScannerControlRpcSeq_SCANNER_CONTROL_RPC_SEQ_ID >(id_);
}
 void ScannerControlRpcSeq::set_id(::analogic::ancp00::ScannerControlRpcSeq_SCANNER_CONTROL_RPC_SEQ_ID value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.ScannerControlRpcSeq.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* CtrlSeqStatus_CTRL_SEQ_STATUS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CtrlSeqStatus_CTRL_SEQ_STATUS_descriptor_;
}
bool CtrlSeqStatus_CTRL_SEQ_STATUS_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CtrlSeqStatus_CTRL_SEQ_STATUS CtrlSeqStatus::CTRL_SEQ_IDLE;
const CtrlSeqStatus_CTRL_SEQ_STATUS CtrlSeqStatus::CTRL_SEQ_RUNNING;
const CtrlSeqStatus_CTRL_SEQ_STATUS CtrlSeqStatus::CTRL_SEQ_PAUSED;
const CtrlSeqStatus_CTRL_SEQ_STATUS CtrlSeqStatus::CTRL_SEQ_RESUMED;
const CtrlSeqStatus_CTRL_SEQ_STATUS CtrlSeqStatus::CTRL_SEQ_COMPLETE;
const CtrlSeqStatus_CTRL_SEQ_STATUS CtrlSeqStatus::CTRL_SEQ_ERROR;
const CtrlSeqStatus_CTRL_SEQ_STATUS CtrlSeqStatus::CTRL_SEQ_ABORTED;
const CtrlSeqStatus_CTRL_SEQ_STATUS CtrlSeqStatus::CTRL_SEQ_STATUS_MIN;
const CtrlSeqStatus_CTRL_SEQ_STATUS CtrlSeqStatus::CTRL_SEQ_STATUS_MAX;
const int CtrlSeqStatus::CTRL_SEQ_STATUS_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CtrlSeqStatus_CTRL_SEQ_ERROR_CODE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CtrlSeqStatus_CTRL_SEQ_ERROR_CODE_descriptor_;
}
bool CtrlSeqStatus_CTRL_SEQ_ERROR_CODE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CtrlSeqStatus_CTRL_SEQ_ERROR_CODE CtrlSeqStatus::CTRL_SEQ_ERROR_NONE;
const CtrlSeqStatus_CTRL_SEQ_ERROR_CODE CtrlSeqStatus::CTRL_SEQ_ERROR_TIMEOUT;
const CtrlSeqStatus_CTRL_SEQ_ERROR_CODE CtrlSeqStatus::CTRL_SEQ_SEQ_ERROR;
const CtrlSeqStatus_CTRL_SEQ_ERROR_CODE CtrlSeqStatus::CTRL_SEQ_ERROR_CODE_MIN;
const CtrlSeqStatus_CTRL_SEQ_ERROR_CODE CtrlSeqStatus::CTRL_SEQ_ERROR_CODE_MAX;
const int CtrlSeqStatus::CTRL_SEQ_ERROR_CODE_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CtrlSeqStatus::kStatusFieldNumber;
const int CtrlSeqStatus::kErrorCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CtrlSeqStatus::CtrlSeqStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analogic.ancp00.CtrlSeqStatus)
}

void CtrlSeqStatus::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CtrlSeqStatus::CtrlSeqStatus(const CtrlSeqStatus& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analogic.ancp00.CtrlSeqStatus)
}

void CtrlSeqStatus::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  status_ = 0;
  error_code_ = 0;
}

CtrlSeqStatus::~CtrlSeqStatus() {
  // @@protoc_insertion_point(destructor:analogic.ancp00.CtrlSeqStatus)
  SharedDtor();
}

void CtrlSeqStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CtrlSeqStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CtrlSeqStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CtrlSeqStatus_descriptor_;
}

const CtrlSeqStatus& CtrlSeqStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fScannerControl_2eproto();
  return *default_instance_;
}

CtrlSeqStatus* CtrlSeqStatus::default_instance_ = NULL;

CtrlSeqStatus* CtrlSeqStatus::New(::google::protobuf::Arena* arena) const {
  CtrlSeqStatus* n = new CtrlSeqStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CtrlSeqStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:analogic.ancp00.CtrlSeqStatus)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CtrlSeqStatus, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CtrlSeqStatus*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(status_, error_code_);

#undef ZR_HELPER_
#undef ZR_

}

bool CtrlSeqStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analogic.ancp00.CtrlSeqStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .analogic.ancp00.CtrlSeqStatus.CTRL_SEQ_STATUS status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::analogic::ancp00::CtrlSeqStatus_CTRL_SEQ_STATUS >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_error_code;
        break;
      }

      // optional .analogic.ancp00.CtrlSeqStatus.CTRL_SEQ_ERROR_CODE error_code = 2;
      case 2: {
        if (tag == 16) {
         parse_error_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_error_code(static_cast< ::analogic::ancp00::CtrlSeqStatus_CTRL_SEQ_ERROR_CODE >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:analogic.ancp00.CtrlSeqStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analogic.ancp00.CtrlSeqStatus)
  return false;
#undef DO_
}

void CtrlSeqStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analogic.ancp00.CtrlSeqStatus)
  // optional .analogic.ancp00.CtrlSeqStatus.CTRL_SEQ_STATUS status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // optional .analogic.ancp00.CtrlSeqStatus.CTRL_SEQ_ERROR_CODE error_code = 2;
  if (this->error_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->error_code(), output);
  }

  // @@protoc_insertion_point(serialize_end:analogic.ancp00.CtrlSeqStatus)
}

::google::protobuf::uint8* CtrlSeqStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analogic.ancp00.CtrlSeqStatus)
  // optional .analogic.ancp00.CtrlSeqStatus.CTRL_SEQ_STATUS status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // optional .analogic.ancp00.CtrlSeqStatus.CTRL_SEQ_ERROR_CODE error_code = 2;
  if (this->error_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->error_code(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:analogic.ancp00.CtrlSeqStatus)
  return target;
}

int CtrlSeqStatus::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:analogic.ancp00.CtrlSeqStatus)
  int total_size = 0;

  // optional .analogic.ancp00.CtrlSeqStatus.CTRL_SEQ_STATUS status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // optional .analogic.ancp00.CtrlSeqStatus.CTRL_SEQ_ERROR_CODE error_code = 2;
  if (this->error_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CtrlSeqStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analogic.ancp00.CtrlSeqStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CtrlSeqStatus* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CtrlSeqStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analogic.ancp00.CtrlSeqStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analogic.ancp00.CtrlSeqStatus)
    MergeFrom(*source);
  }
}

void CtrlSeqStatus::MergeFrom(const CtrlSeqStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analogic.ancp00.CtrlSeqStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.error_code() != 0) {
    set_error_code(from.error_code());
  }
}

void CtrlSeqStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analogic.ancp00.CtrlSeqStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CtrlSeqStatus::CopyFrom(const CtrlSeqStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analogic.ancp00.CtrlSeqStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CtrlSeqStatus::IsInitialized() const {

  return true;
}

void CtrlSeqStatus::Swap(CtrlSeqStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CtrlSeqStatus::InternalSwap(CtrlSeqStatus* other) {
  std::swap(status_, other->status_);
  std::swap(error_code_, other->error_code_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CtrlSeqStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CtrlSeqStatus_descriptor_;
  metadata.reflection = CtrlSeqStatus_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CtrlSeqStatus

// optional .analogic.ancp00.CtrlSeqStatus.CTRL_SEQ_STATUS status = 1;
void CtrlSeqStatus::clear_status() {
  status_ = 0;
}
 ::analogic::ancp00::CtrlSeqStatus_CTRL_SEQ_STATUS CtrlSeqStatus::status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.CtrlSeqStatus.status)
  return static_cast< ::analogic::ancp00::CtrlSeqStatus_CTRL_SEQ_STATUS >(status_);
}
 void CtrlSeqStatus::set_status(::analogic::ancp00::CtrlSeqStatus_CTRL_SEQ_STATUS value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.CtrlSeqStatus.status)
}

// optional .analogic.ancp00.CtrlSeqStatus.CTRL_SEQ_ERROR_CODE error_code = 2;
void CtrlSeqStatus::clear_error_code() {
  error_code_ = 0;
}
 ::analogic::ancp00::CtrlSeqStatus_CTRL_SEQ_ERROR_CODE CtrlSeqStatus::error_code() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.CtrlSeqStatus.error_code)
  return static_cast< ::analogic::ancp00::CtrlSeqStatus_CTRL_SEQ_ERROR_CODE >(error_code_);
}
 void CtrlSeqStatus::set_error_code(::analogic::ancp00::CtrlSeqStatus_CTRL_SEQ_ERROR_CODE value) {
  
  error_code_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.CtrlSeqStatus.error_code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ancp00
}  // namespace analogic

// @@protoc_insertion_point(global_scope)
