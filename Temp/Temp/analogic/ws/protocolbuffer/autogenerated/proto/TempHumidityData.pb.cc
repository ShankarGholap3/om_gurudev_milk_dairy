// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/TempHumidityData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/TempHumidityData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace analogic {
namespace ancp00 {

namespace {

const ::google::protobuf::Descriptor* TempHumidityData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TempHumidityData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_2fTempHumidityData_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_proto_2fTempHumidityData_2eproto() {
  protobuf_AddDesc_proto_2fTempHumidityData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto/TempHumidityData.proto");
  GOOGLE_CHECK(file != NULL);
  TempHumidityData_descriptor_ = file->message_type(0);
  static const int TempHumidityData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TempHumidityData, temp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TempHumidityData, humidity_),
  };
  TempHumidityData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TempHumidityData_descriptor_,
      TempHumidityData::default_instance_,
      TempHumidityData_offsets_,
      -1,
      -1,
      -1,
      sizeof(TempHumidityData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TempHumidityData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TempHumidityData, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_2fTempHumidityData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TempHumidityData_descriptor_, &TempHumidityData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_2fTempHumidityData_2eproto() {
  delete TempHumidityData::default_instance_;
  delete TempHumidityData_reflection_;
}

void protobuf_AddDesc_proto_2fTempHumidityData_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_proto_2fTempHumidityData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034proto/TempHumidityData.proto\022\017analogic"
    ".ancp00\"2\n\020TempHumidityData\022\014\n\004temp\030\001 \001("
    "\002\022\020\n\010humidity\030\002 \001(\002b\006proto3", 107);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/TempHumidityData.proto", &protobuf_RegisterTypes);
  TempHumidityData::default_instance_ = new TempHumidityData();
  TempHumidityData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2fTempHumidityData_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2fTempHumidityData_2eproto {
  StaticDescriptorInitializer_proto_2fTempHumidityData_2eproto() {
    protobuf_AddDesc_proto_2fTempHumidityData_2eproto();
  }
} static_descriptor_initializer_proto_2fTempHumidityData_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TempHumidityData::kTempFieldNumber;
const int TempHumidityData::kHumidityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TempHumidityData::TempHumidityData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analogic.ancp00.TempHumidityData)
}

void TempHumidityData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TempHumidityData::TempHumidityData(const TempHumidityData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analogic.ancp00.TempHumidityData)
}

void TempHumidityData::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  temp_ = 0;
  humidity_ = 0;
}

TempHumidityData::~TempHumidityData() {
  // @@protoc_insertion_point(destructor:analogic.ancp00.TempHumidityData)
  SharedDtor();
}

void TempHumidityData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TempHumidityData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TempHumidityData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TempHumidityData_descriptor_;
}

const TempHumidityData& TempHumidityData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fTempHumidityData_2eproto();
  return *default_instance_;
}

TempHumidityData* TempHumidityData::default_instance_ = NULL;

TempHumidityData* TempHumidityData::New(::google::protobuf::Arena* arena) const {
  TempHumidityData* n = new TempHumidityData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TempHumidityData::Clear() {
// @@protoc_insertion_point(message_clear_start:analogic.ancp00.TempHumidityData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TempHumidityData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TempHumidityData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(temp_, humidity_);

#undef ZR_HELPER_
#undef ZR_

}

bool TempHumidityData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analogic.ancp00.TempHumidityData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float temp = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &temp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_humidity;
        break;
      }

      // optional float humidity = 2;
      case 2: {
        if (tag == 21) {
         parse_humidity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &humidity_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:analogic.ancp00.TempHumidityData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analogic.ancp00.TempHumidityData)
  return false;
#undef DO_
}

void TempHumidityData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analogic.ancp00.TempHumidityData)
  // optional float temp = 1;
  if (this->temp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->temp(), output);
  }

  // optional float humidity = 2;
  if (this->humidity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->humidity(), output);
  }

  // @@protoc_insertion_point(serialize_end:analogic.ancp00.TempHumidityData)
}

::google::protobuf::uint8* TempHumidityData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analogic.ancp00.TempHumidityData)
  // optional float temp = 1;
  if (this->temp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->temp(), target);
  }

  // optional float humidity = 2;
  if (this->humidity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->humidity(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:analogic.ancp00.TempHumidityData)
  return target;
}

int TempHumidityData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:analogic.ancp00.TempHumidityData)
  int total_size = 0;

  // optional float temp = 1;
  if (this->temp() != 0) {
    total_size += 1 + 4;
  }

  // optional float humidity = 2;
  if (this->humidity() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TempHumidityData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analogic.ancp00.TempHumidityData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TempHumidityData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TempHumidityData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analogic.ancp00.TempHumidityData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analogic.ancp00.TempHumidityData)
    MergeFrom(*source);
  }
}

void TempHumidityData::MergeFrom(const TempHumidityData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analogic.ancp00.TempHumidityData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.temp() != 0) {
    set_temp(from.temp());
  }
  if (from.humidity() != 0) {
    set_humidity(from.humidity());
  }
}

void TempHumidityData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analogic.ancp00.TempHumidityData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TempHumidityData::CopyFrom(const TempHumidityData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analogic.ancp00.TempHumidityData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TempHumidityData::IsInitialized() const {

  return true;
}

void TempHumidityData::Swap(TempHumidityData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TempHumidityData::InternalSwap(TempHumidityData* other) {
  std::swap(temp_, other->temp_);
  std::swap(humidity_, other->humidity_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TempHumidityData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TempHumidityData_descriptor_;
  metadata.reflection = TempHumidityData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TempHumidityData

// optional float temp = 1;
void TempHumidityData::clear_temp() {
  temp_ = 0;
}
 float TempHumidityData::temp() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.TempHumidityData.temp)
  return temp_;
}
 void TempHumidityData::set_temp(float value) {
  
  temp_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.TempHumidityData.temp)
}

// optional float humidity = 2;
void TempHumidityData::clear_humidity() {
  humidity_ = 0;
}
 float TempHumidityData::humidity() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.TempHumidityData.humidity)
  return humidity_;
}
 void TempHumidityData::set_humidity(float value) {
  
  humidity_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.TempHumidityData.humidity)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ancp00
}  // namespace analogic

// @@protoc_insertion_point(global_scope)
