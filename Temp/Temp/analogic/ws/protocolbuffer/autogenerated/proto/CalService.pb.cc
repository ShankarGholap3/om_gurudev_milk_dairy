// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/CalService.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/CalService.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace analogic {

namespace {

const ::google::protobuf::Descriptor* RpcReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpcReply_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RpcReply_RPC_REPLY_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RpcReply_RPC_ERROR_CODE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* XrayControlRpc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  XrayControlRpc_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* XrayControlRpc_XRAY_STATE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* RawDataCollectRpc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RawDataCollectRpc_reflection_ = NULL;
const ::google::protobuf::Descriptor* AirCalRpc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AirCalRpc_reflection_ = NULL;
const ::google::protobuf::Descriptor* OffsetCalRpc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OffsetCalRpc_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImageQualityTestRpc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImageQualityTestRpc_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ImageQualityTestRpc_IQ_TEST_TYPE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GetImageQualityMassValuesRpc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetImageQualityMassValuesRpc_reflection_ = NULL;
const ::google::protobuf::Descriptor* RadiationSurveyRpc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RadiationSurveyRpc_reflection_ = NULL;
const ::google::protobuf::Descriptor* RadSurveyRpcCancel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RadSurveyRpcCancel_reflection_ = NULL;
const ::google::protobuf::Descriptor* BeltTunnelCalRpc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BeltTunnelCalRpc_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetBadDetectorMapFilesRpc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetBadDetectorMapFilesRpc_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetBadDetectorManualFileRpc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetBadDetectorManualFileRpc_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateBadDetectorManualFileRpc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateBadDetectorManualFileRpc_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetErrorLogFileRpc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetErrorLogFileRpc_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetScannerConfigFileRpc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetScannerConfigFileRpc_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateScannerConfigFileRpc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateScannerConfigFileRpc_reflection_ = NULL;
const ::google::protobuf::Descriptor* SdswStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SdswStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SdswStatus_AIR_CAL_STATE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SdswStatus_OFFSET_CAL_STATE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SdswStatus_PIN_CAL_STATE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SdswStatus_BELT_HEIGHT_CAL_STATE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SdswStatus_SPECTRAL_CAL_STATE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SdswStatus_RADIATION_SURVEY_STATE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SdswStatus_RADIATION_SURVEY_CANCEL_STATE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SdswStatus_IMAGE_QUALITY_STATE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SdswStatus_IMAGE_QUALITY_CANCEL_STATE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SdswStatus_BASE_SEQ_1_STATE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SdswStatus_ZEE_PIN_SPECTRAL_CAL_STATE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SdswStatus_CONV_STOP_XRAY_MIN_STATE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SdswStatus_XMAX_CONVEYOR_RUN_STATE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SdswStatus_CONV_STOP_XRAY_MIN_STATE_CONV_RUN_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SdswStatus_BELT_TUNNEL_CAL_STATE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GetImageCalibrationFilesRpc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetImageCalibrationFilesRpc_reflection_ = NULL;
const ::google::protobuf::Descriptor* RunImageCalibrationRpc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RunImageCalibrationRpc_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateImageCalibrationBeltHeightRpc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateImageCalibrationBeltHeightRpc_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateImageCalibrationNylonScaleRpc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateImageCalibrationNylonScaleRpc_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateImageCalibrationBeltFreqRpc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateImageCalibrationBeltFreqRpc_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExportFilesRpc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExportFilesRpc_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ExportFilesRpc_FILE_TYPES_descriptor_ = NULL;
const ::google::protobuf::Descriptor* AirCalibrationRpc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AirCalibrationRpc_reflection_ = NULL;
const ::google::protobuf::Descriptor* OffsetCalibrationRpc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OffsetCalibrationRpc_reflection_ = NULL;
const ::google::protobuf::Descriptor* CalibrationRpc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CalibrationRpc_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CalibrationRpc_CAL_COMMAND_descriptor_ = NULL;
const ::google::protobuf::Descriptor* AlarmLibInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AlarmLibInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* InstalledAlarmLibInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InstalledAlarmLibInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetInstalledAlarmLibsRpc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetInstalledAlarmLibsRpc_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetInstalledAlarmLibsReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetInstalledAlarmLibsReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetInstallableAlarmLibsRpc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetInstallableAlarmLibsRpc_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetInstallableAlarmLibsReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetInstallableAlarmLibsReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* InstallAlarmLibRpc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InstallAlarmLibRpc_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExportCalParamDataRpc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExportCalParamDataRpc_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImportCalParamDataRpc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImportCalParamDataRpc_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_2fCalService_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_proto_2fCalService_2eproto() {
  protobuf_AddDesc_proto_2fCalService_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto/CalService.proto");
  GOOGLE_CHECK(file != NULL);
  RpcReply_descriptor_ = file->message_type(0);
  static const int RpcReply_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcReply, reply_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcReply, file_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcReply, belt_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcReply, nylon_scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcReply, file_name_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcReply, float_data_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcReply, float_data_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcReply, float_data_3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcReply, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcReply, belt_frequency_),
  };
  RpcReply_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RpcReply_descriptor_,
      RpcReply::default_instance_,
      RpcReply_offsets_,
      -1,
      -1,
      -1,
      sizeof(RpcReply),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcReply, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcReply, _is_default_instance_));
  RpcReply_RPC_REPLY_descriptor_ = RpcReply_descriptor_->enum_type(0);
  RpcReply_RPC_ERROR_CODE_descriptor_ = RpcReply_descriptor_->enum_type(1);
  XrayControlRpc_descriptor_ = file->message_type(1);
  static const int XrayControlRpc_offsets_[1] = {
  };
  XrayControlRpc_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      XrayControlRpc_descriptor_,
      XrayControlRpc::default_instance_,
      XrayControlRpc_offsets_,
      -1,
      -1,
      -1,
      sizeof(XrayControlRpc),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XrayControlRpc, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XrayControlRpc, _is_default_instance_));
  XrayControlRpc_XRAY_STATE_descriptor_ = XrayControlRpc_descriptor_->enum_type(0);
  RawDataCollectRpc_descriptor_ = file->message_type(2);
  static const int RawDataCollectRpc_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawDataCollectRpc, xray_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawDataCollectRpc, gantry_on_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawDataCollectRpc, conveyor_on_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawDataCollectRpc, num_rotations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawDataCollectRpc, file_path_),
  };
  RawDataCollectRpc_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RawDataCollectRpc_descriptor_,
      RawDataCollectRpc::default_instance_,
      RawDataCollectRpc_offsets_,
      -1,
      -1,
      -1,
      sizeof(RawDataCollectRpc),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawDataCollectRpc, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawDataCollectRpc, _is_default_instance_));
  AirCalRpc_descriptor_ = file->message_type(3);
  static const int AirCalRpc_offsets_[1] = {
  };
  AirCalRpc_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AirCalRpc_descriptor_,
      AirCalRpc::default_instance_,
      AirCalRpc_offsets_,
      -1,
      -1,
      -1,
      sizeof(AirCalRpc),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AirCalRpc, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AirCalRpc, _is_default_instance_));
  OffsetCalRpc_descriptor_ = file->message_type(4);
  static const int OffsetCalRpc_offsets_[1] = {
  };
  OffsetCalRpc_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OffsetCalRpc_descriptor_,
      OffsetCalRpc::default_instance_,
      OffsetCalRpc_offsets_,
      -1,
      -1,
      -1,
      sizeof(OffsetCalRpc),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffsetCalRpc, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffsetCalRpc, _is_default_instance_));
  ImageQualityTestRpc_descriptor_ = file->message_type(5);
  static const int ImageQualityTestRpc_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageQualityTestRpc, dest_folder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageQualityTestRpc, float_data_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageQualityTestRpc, float_data_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageQualityTestRpc, float_data_3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageQualityTestRpc, source_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageQualityTestRpc, iq_test_type_),
  };
  ImageQualityTestRpc_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ImageQualityTestRpc_descriptor_,
      ImageQualityTestRpc::default_instance_,
      ImageQualityTestRpc_offsets_,
      -1,
      -1,
      -1,
      sizeof(ImageQualityTestRpc),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageQualityTestRpc, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageQualityTestRpc, _is_default_instance_));
  ImageQualityTestRpc_IQ_TEST_TYPE_descriptor_ = ImageQualityTestRpc_descriptor_->enum_type(0);
  GetImageQualityMassValuesRpc_descriptor_ = file->message_type(6);
  static const int GetImageQualityMassValuesRpc_offsets_[1] = {
  };
  GetImageQualityMassValuesRpc_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetImageQualityMassValuesRpc_descriptor_,
      GetImageQualityMassValuesRpc::default_instance_,
      GetImageQualityMassValuesRpc_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetImageQualityMassValuesRpc),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetImageQualityMassValuesRpc, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetImageQualityMassValuesRpc, _is_default_instance_));
  RadiationSurveyRpc_descriptor_ = file->message_type(7);
  static const int RadiationSurveyRpc_offsets_[1] = {
  };
  RadiationSurveyRpc_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RadiationSurveyRpc_descriptor_,
      RadiationSurveyRpc::default_instance_,
      RadiationSurveyRpc_offsets_,
      -1,
      -1,
      -1,
      sizeof(RadiationSurveyRpc),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadiationSurveyRpc, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadiationSurveyRpc, _is_default_instance_));
  RadSurveyRpcCancel_descriptor_ = file->message_type(8);
  static const int RadSurveyRpcCancel_offsets_[1] = {
  };
  RadSurveyRpcCancel_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RadSurveyRpcCancel_descriptor_,
      RadSurveyRpcCancel::default_instance_,
      RadSurveyRpcCancel_offsets_,
      -1,
      -1,
      -1,
      sizeof(RadSurveyRpcCancel),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadSurveyRpcCancel, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadSurveyRpcCancel, _is_default_instance_));
  BeltTunnelCalRpc_descriptor_ = file->message_type(9);
  static const int BeltTunnelCalRpc_offsets_[1] = {
  };
  BeltTunnelCalRpc_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BeltTunnelCalRpc_descriptor_,
      BeltTunnelCalRpc::default_instance_,
      BeltTunnelCalRpc_offsets_,
      -1,
      -1,
      -1,
      sizeof(BeltTunnelCalRpc),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeltTunnelCalRpc, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeltTunnelCalRpc, _is_default_instance_));
  GetBadDetectorMapFilesRpc_descriptor_ = file->message_type(10);
  static const int GetBadDetectorMapFilesRpc_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBadDetectorMapFilesRpc, file_path_),
  };
  GetBadDetectorMapFilesRpc_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetBadDetectorMapFilesRpc_descriptor_,
      GetBadDetectorMapFilesRpc::default_instance_,
      GetBadDetectorMapFilesRpc_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetBadDetectorMapFilesRpc),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBadDetectorMapFilesRpc, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBadDetectorMapFilesRpc, _is_default_instance_));
  GetBadDetectorManualFileRpc_descriptor_ = file->message_type(11);
  static const int GetBadDetectorManualFileRpc_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBadDetectorManualFileRpc, file_path_),
  };
  GetBadDetectorManualFileRpc_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetBadDetectorManualFileRpc_descriptor_,
      GetBadDetectorManualFileRpc::default_instance_,
      GetBadDetectorManualFileRpc_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetBadDetectorManualFileRpc),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBadDetectorManualFileRpc, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBadDetectorManualFileRpc, _is_default_instance_));
  UpdateBadDetectorManualFileRpc_descriptor_ = file->message_type(12);
  static const int UpdateBadDetectorManualFileRpc_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateBadDetectorManualFileRpc, content_),
  };
  UpdateBadDetectorManualFileRpc_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UpdateBadDetectorManualFileRpc_descriptor_,
      UpdateBadDetectorManualFileRpc::default_instance_,
      UpdateBadDetectorManualFileRpc_offsets_,
      -1,
      -1,
      -1,
      sizeof(UpdateBadDetectorManualFileRpc),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateBadDetectorManualFileRpc, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateBadDetectorManualFileRpc, _is_default_instance_));
  GetErrorLogFileRpc_descriptor_ = file->message_type(13);
  static const int GetErrorLogFileRpc_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetErrorLogFileRpc, file_path_),
  };
  GetErrorLogFileRpc_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetErrorLogFileRpc_descriptor_,
      GetErrorLogFileRpc::default_instance_,
      GetErrorLogFileRpc_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetErrorLogFileRpc),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetErrorLogFileRpc, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetErrorLogFileRpc, _is_default_instance_));
  GetScannerConfigFileRpc_descriptor_ = file->message_type(14);
  static const int GetScannerConfigFileRpc_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetScannerConfigFileRpc, file_path_),
  };
  GetScannerConfigFileRpc_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetScannerConfigFileRpc_descriptor_,
      GetScannerConfigFileRpc::default_instance_,
      GetScannerConfigFileRpc_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetScannerConfigFileRpc),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetScannerConfigFileRpc, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetScannerConfigFileRpc, _is_default_instance_));
  UpdateScannerConfigFileRpc_descriptor_ = file->message_type(15);
  static const int UpdateScannerConfigFileRpc_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateScannerConfigFileRpc, content_),
  };
  UpdateScannerConfigFileRpc_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UpdateScannerConfigFileRpc_descriptor_,
      UpdateScannerConfigFileRpc::default_instance_,
      UpdateScannerConfigFileRpc_offsets_,
      -1,
      -1,
      -1,
      sizeof(UpdateScannerConfigFileRpc),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateScannerConfigFileRpc, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateScannerConfigFileRpc, _is_default_instance_));
  SdswStatus_descriptor_ = file->message_type(16);
  static const int SdswStatus_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdswStatus, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdswStatus, current_step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdswStatus, number_of_steps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdswStatus, text_),
  };
  SdswStatus_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SdswStatus_descriptor_,
      SdswStatus::default_instance_,
      SdswStatus_offsets_,
      -1,
      -1,
      -1,
      sizeof(SdswStatus),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdswStatus, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SdswStatus, _is_default_instance_));
  SdswStatus_AIR_CAL_STATE_descriptor_ = SdswStatus_descriptor_->enum_type(0);
  SdswStatus_OFFSET_CAL_STATE_descriptor_ = SdswStatus_descriptor_->enum_type(1);
  SdswStatus_PIN_CAL_STATE_descriptor_ = SdswStatus_descriptor_->enum_type(2);
  SdswStatus_BELT_HEIGHT_CAL_STATE_descriptor_ = SdswStatus_descriptor_->enum_type(3);
  SdswStatus_SPECTRAL_CAL_STATE_descriptor_ = SdswStatus_descriptor_->enum_type(4);
  SdswStatus_RADIATION_SURVEY_STATE_descriptor_ = SdswStatus_descriptor_->enum_type(5);
  SdswStatus_RADIATION_SURVEY_CANCEL_STATE_descriptor_ = SdswStatus_descriptor_->enum_type(6);
  SdswStatus_IMAGE_QUALITY_STATE_descriptor_ = SdswStatus_descriptor_->enum_type(7);
  SdswStatus_IMAGE_QUALITY_CANCEL_STATE_descriptor_ = SdswStatus_descriptor_->enum_type(8);
  SdswStatus_BASE_SEQ_1_STATE_descriptor_ = SdswStatus_descriptor_->enum_type(9);
  SdswStatus_ZEE_PIN_SPECTRAL_CAL_STATE_descriptor_ = SdswStatus_descriptor_->enum_type(10);
  SdswStatus_CONV_STOP_XRAY_MIN_STATE_descriptor_ = SdswStatus_descriptor_->enum_type(11);
  SdswStatus_XMAX_CONVEYOR_RUN_STATE_descriptor_ = SdswStatus_descriptor_->enum_type(12);
  SdswStatus_CONV_STOP_XRAY_MIN_STATE_CONV_RUN_descriptor_ = SdswStatus_descriptor_->enum_type(13);
  SdswStatus_BELT_TUNNEL_CAL_STATE_descriptor_ = SdswStatus_descriptor_->enum_type(14);
  GetImageCalibrationFilesRpc_descriptor_ = file->message_type(17);
  static const int GetImageCalibrationFilesRpc_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetImageCalibrationFilesRpc, file_path_),
  };
  GetImageCalibrationFilesRpc_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetImageCalibrationFilesRpc_descriptor_,
      GetImageCalibrationFilesRpc::default_instance_,
      GetImageCalibrationFilesRpc_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetImageCalibrationFilesRpc),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetImageCalibrationFilesRpc, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetImageCalibrationFilesRpc, _is_default_instance_));
  RunImageCalibrationRpc_descriptor_ = file->message_type(18);
  static const int RunImageCalibrationRpc_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunImageCalibrationRpc, filename1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunImageCalibrationRpc, filename2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunImageCalibrationRpc, filename3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunImageCalibrationRpc, filename4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunImageCalibrationRpc, filename5_),
  };
  RunImageCalibrationRpc_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RunImageCalibrationRpc_descriptor_,
      RunImageCalibrationRpc::default_instance_,
      RunImageCalibrationRpc_offsets_,
      -1,
      -1,
      -1,
      sizeof(RunImageCalibrationRpc),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunImageCalibrationRpc, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunImageCalibrationRpc, _is_default_instance_));
  UpdateImageCalibrationBeltHeightRpc_descriptor_ = file->message_type(19);
  static const int UpdateImageCalibrationBeltHeightRpc_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateImageCalibrationBeltHeightRpc, belt_height_),
  };
  UpdateImageCalibrationBeltHeightRpc_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UpdateImageCalibrationBeltHeightRpc_descriptor_,
      UpdateImageCalibrationBeltHeightRpc::default_instance_,
      UpdateImageCalibrationBeltHeightRpc_offsets_,
      -1,
      -1,
      -1,
      sizeof(UpdateImageCalibrationBeltHeightRpc),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateImageCalibrationBeltHeightRpc, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateImageCalibrationBeltHeightRpc, _is_default_instance_));
  UpdateImageCalibrationNylonScaleRpc_descriptor_ = file->message_type(20);
  static const int UpdateImageCalibrationNylonScaleRpc_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateImageCalibrationNylonScaleRpc, nylon_scale_),
  };
  UpdateImageCalibrationNylonScaleRpc_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UpdateImageCalibrationNylonScaleRpc_descriptor_,
      UpdateImageCalibrationNylonScaleRpc::default_instance_,
      UpdateImageCalibrationNylonScaleRpc_offsets_,
      -1,
      -1,
      -1,
      sizeof(UpdateImageCalibrationNylonScaleRpc),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateImageCalibrationNylonScaleRpc, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateImageCalibrationNylonScaleRpc, _is_default_instance_));
  UpdateImageCalibrationBeltFreqRpc_descriptor_ = file->message_type(21);
  static const int UpdateImageCalibrationBeltFreqRpc_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateImageCalibrationBeltFreqRpc, belt_freq_),
  };
  UpdateImageCalibrationBeltFreqRpc_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UpdateImageCalibrationBeltFreqRpc_descriptor_,
      UpdateImageCalibrationBeltFreqRpc::default_instance_,
      UpdateImageCalibrationBeltFreqRpc_offsets_,
      -1,
      -1,
      -1,
      sizeof(UpdateImageCalibrationBeltFreqRpc),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateImageCalibrationBeltFreqRpc, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateImageCalibrationBeltFreqRpc, _is_default_instance_));
  ExportFilesRpc_descriptor_ = file->message_type(22);
  static const int ExportFilesRpc_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExportFilesRpc, file_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExportFilesRpc, file_types_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExportFilesRpc, start_time_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExportFilesRpc, end_time_string_),
  };
  ExportFilesRpc_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ExportFilesRpc_descriptor_,
      ExportFilesRpc::default_instance_,
      ExportFilesRpc_offsets_,
      -1,
      -1,
      -1,
      sizeof(ExportFilesRpc),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExportFilesRpc, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExportFilesRpc, _is_default_instance_));
  ExportFilesRpc_FILE_TYPES_descriptor_ = ExportFilesRpc_descriptor_->enum_type(0);
  AirCalibrationRpc_descriptor_ = file->message_type(23);
  static const int AirCalibrationRpc_offsets_[1] = {
  };
  AirCalibrationRpc_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AirCalibrationRpc_descriptor_,
      AirCalibrationRpc::default_instance_,
      AirCalibrationRpc_offsets_,
      -1,
      -1,
      -1,
      sizeof(AirCalibrationRpc),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AirCalibrationRpc, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AirCalibrationRpc, _is_default_instance_));
  OffsetCalibrationRpc_descriptor_ = file->message_type(24);
  static const int OffsetCalibrationRpc_offsets_[1] = {
  };
  OffsetCalibrationRpc_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OffsetCalibrationRpc_descriptor_,
      OffsetCalibrationRpc::default_instance_,
      OffsetCalibrationRpc_offsets_,
      -1,
      -1,
      -1,
      sizeof(OffsetCalibrationRpc),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffsetCalibrationRpc, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OffsetCalibrationRpc, _is_default_instance_));
  CalibrationRpc_descriptor_ = file->message_type(25);
  static const int CalibrationRpc_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalibrationRpc, cmd_),
  };
  CalibrationRpc_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CalibrationRpc_descriptor_,
      CalibrationRpc::default_instance_,
      CalibrationRpc_offsets_,
      -1,
      -1,
      -1,
      sizeof(CalibrationRpc),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalibrationRpc, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalibrationRpc, _is_default_instance_));
  CalibrationRpc_CAL_COMMAND_descriptor_ = CalibrationRpc_descriptor_->enum_type(0);
  AlarmLibInfo_descriptor_ = file->message_type(26);
  static const int AlarmLibInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmLibInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmLibInfo, version_),
  };
  AlarmLibInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AlarmLibInfo_descriptor_,
      AlarmLibInfo::default_instance_,
      AlarmLibInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(AlarmLibInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmLibInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmLibInfo, _is_default_instance_));
  InstalledAlarmLibInfo_descriptor_ = file->message_type(27);
  static const int InstalledAlarmLibInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstalledAlarmLibInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstalledAlarmLibInfo, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstalledAlarmLibInfo, corrupted_),
  };
  InstalledAlarmLibInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InstalledAlarmLibInfo_descriptor_,
      InstalledAlarmLibInfo::default_instance_,
      InstalledAlarmLibInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(InstalledAlarmLibInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstalledAlarmLibInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstalledAlarmLibInfo, _is_default_instance_));
  GetInstalledAlarmLibsRpc_descriptor_ = file->message_type(28);
  static const int GetInstalledAlarmLibsRpc_offsets_[1] = {
  };
  GetInstalledAlarmLibsRpc_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetInstalledAlarmLibsRpc_descriptor_,
      GetInstalledAlarmLibsRpc::default_instance_,
      GetInstalledAlarmLibsRpc_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetInstalledAlarmLibsRpc),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInstalledAlarmLibsRpc, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInstalledAlarmLibsRpc, _is_default_instance_));
  GetInstalledAlarmLibsReply_descriptor_ = file->message_type(29);
  static const int GetInstalledAlarmLibsReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInstalledAlarmLibsReply, installed_alarmlibs_),
  };
  GetInstalledAlarmLibsReply_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetInstalledAlarmLibsReply_descriptor_,
      GetInstalledAlarmLibsReply::default_instance_,
      GetInstalledAlarmLibsReply_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetInstalledAlarmLibsReply),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInstalledAlarmLibsReply, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInstalledAlarmLibsReply, _is_default_instance_));
  GetInstallableAlarmLibsRpc_descriptor_ = file->message_type(30);
  static const int GetInstallableAlarmLibsRpc_offsets_[1] = {
  };
  GetInstallableAlarmLibsRpc_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetInstallableAlarmLibsRpc_descriptor_,
      GetInstallableAlarmLibsRpc::default_instance_,
      GetInstallableAlarmLibsRpc_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetInstallableAlarmLibsRpc),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInstallableAlarmLibsRpc, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInstallableAlarmLibsRpc, _is_default_instance_));
  GetInstallableAlarmLibsReply_descriptor_ = file->message_type(31);
  static const int GetInstallableAlarmLibsReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInstallableAlarmLibsReply, installable_alarmlibs_),
  };
  GetInstallableAlarmLibsReply_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetInstallableAlarmLibsReply_descriptor_,
      GetInstallableAlarmLibsReply::default_instance_,
      GetInstallableAlarmLibsReply_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetInstallableAlarmLibsReply),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInstallableAlarmLibsReply, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInstallableAlarmLibsReply, _is_default_instance_));
  InstallAlarmLibRpc_descriptor_ = file->message_type(32);
  static const int InstallAlarmLibRpc_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstallAlarmLibRpc, alarmlib_info_),
  };
  InstallAlarmLibRpc_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InstallAlarmLibRpc_descriptor_,
      InstallAlarmLibRpc::default_instance_,
      InstallAlarmLibRpc_offsets_,
      -1,
      -1,
      -1,
      sizeof(InstallAlarmLibRpc),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstallAlarmLibRpc, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstallAlarmLibRpc, _is_default_instance_));
  ExportCalParamDataRpc_descriptor_ = file->message_type(33);
  static const int ExportCalParamDataRpc_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExportCalParamDataRpc, file_path_),
  };
  ExportCalParamDataRpc_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ExportCalParamDataRpc_descriptor_,
      ExportCalParamDataRpc::default_instance_,
      ExportCalParamDataRpc_offsets_,
      -1,
      -1,
      -1,
      sizeof(ExportCalParamDataRpc),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExportCalParamDataRpc, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExportCalParamDataRpc, _is_default_instance_));
  ImportCalParamDataRpc_descriptor_ = file->message_type(34);
  static const int ImportCalParamDataRpc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportCalParamDataRpc, file_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportCalParamDataRpc, file_name_),
  };
  ImportCalParamDataRpc_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ImportCalParamDataRpc_descriptor_,
      ImportCalParamDataRpc::default_instance_,
      ImportCalParamDataRpc_offsets_,
      -1,
      -1,
      -1,
      sizeof(ImportCalParamDataRpc),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportCalParamDataRpc, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportCalParamDataRpc, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_2fCalService_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RpcReply_descriptor_, &RpcReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      XrayControlRpc_descriptor_, &XrayControlRpc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RawDataCollectRpc_descriptor_, &RawDataCollectRpc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AirCalRpc_descriptor_, &AirCalRpc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OffsetCalRpc_descriptor_, &OffsetCalRpc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ImageQualityTestRpc_descriptor_, &ImageQualityTestRpc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetImageQualityMassValuesRpc_descriptor_, &GetImageQualityMassValuesRpc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RadiationSurveyRpc_descriptor_, &RadiationSurveyRpc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RadSurveyRpcCancel_descriptor_, &RadSurveyRpcCancel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BeltTunnelCalRpc_descriptor_, &BeltTunnelCalRpc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetBadDetectorMapFilesRpc_descriptor_, &GetBadDetectorMapFilesRpc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetBadDetectorManualFileRpc_descriptor_, &GetBadDetectorManualFileRpc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UpdateBadDetectorManualFileRpc_descriptor_, &UpdateBadDetectorManualFileRpc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetErrorLogFileRpc_descriptor_, &GetErrorLogFileRpc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetScannerConfigFileRpc_descriptor_, &GetScannerConfigFileRpc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UpdateScannerConfigFileRpc_descriptor_, &UpdateScannerConfigFileRpc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SdswStatus_descriptor_, &SdswStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetImageCalibrationFilesRpc_descriptor_, &GetImageCalibrationFilesRpc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RunImageCalibrationRpc_descriptor_, &RunImageCalibrationRpc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UpdateImageCalibrationBeltHeightRpc_descriptor_, &UpdateImageCalibrationBeltHeightRpc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UpdateImageCalibrationNylonScaleRpc_descriptor_, &UpdateImageCalibrationNylonScaleRpc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UpdateImageCalibrationBeltFreqRpc_descriptor_, &UpdateImageCalibrationBeltFreqRpc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ExportFilesRpc_descriptor_, &ExportFilesRpc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AirCalibrationRpc_descriptor_, &AirCalibrationRpc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OffsetCalibrationRpc_descriptor_, &OffsetCalibrationRpc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CalibrationRpc_descriptor_, &CalibrationRpc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AlarmLibInfo_descriptor_, &AlarmLibInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InstalledAlarmLibInfo_descriptor_, &InstalledAlarmLibInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetInstalledAlarmLibsRpc_descriptor_, &GetInstalledAlarmLibsRpc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetInstalledAlarmLibsReply_descriptor_, &GetInstalledAlarmLibsReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetInstallableAlarmLibsRpc_descriptor_, &GetInstallableAlarmLibsRpc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetInstallableAlarmLibsReply_descriptor_, &GetInstallableAlarmLibsReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InstallAlarmLibRpc_descriptor_, &InstallAlarmLibRpc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ExportCalParamDataRpc_descriptor_, &ExportCalParamDataRpc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ImportCalParamDataRpc_descriptor_, &ImportCalParamDataRpc::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_2fCalService_2eproto() {
  delete RpcReply::default_instance_;
  delete RpcReply_reflection_;
  delete XrayControlRpc::default_instance_;
  delete XrayControlRpc_reflection_;
  delete RawDataCollectRpc::default_instance_;
  delete RawDataCollectRpc_reflection_;
  delete AirCalRpc::default_instance_;
  delete AirCalRpc_reflection_;
  delete OffsetCalRpc::default_instance_;
  delete OffsetCalRpc_reflection_;
  delete ImageQualityTestRpc::default_instance_;
  delete ImageQualityTestRpc_reflection_;
  delete GetImageQualityMassValuesRpc::default_instance_;
  delete GetImageQualityMassValuesRpc_reflection_;
  delete RadiationSurveyRpc::default_instance_;
  delete RadiationSurveyRpc_reflection_;
  delete RadSurveyRpcCancel::default_instance_;
  delete RadSurveyRpcCancel_reflection_;
  delete BeltTunnelCalRpc::default_instance_;
  delete BeltTunnelCalRpc_reflection_;
  delete GetBadDetectorMapFilesRpc::default_instance_;
  delete GetBadDetectorMapFilesRpc_reflection_;
  delete GetBadDetectorManualFileRpc::default_instance_;
  delete GetBadDetectorManualFileRpc_reflection_;
  delete UpdateBadDetectorManualFileRpc::default_instance_;
  delete UpdateBadDetectorManualFileRpc_reflection_;
  delete GetErrorLogFileRpc::default_instance_;
  delete GetErrorLogFileRpc_reflection_;
  delete GetScannerConfigFileRpc::default_instance_;
  delete GetScannerConfigFileRpc_reflection_;
  delete UpdateScannerConfigFileRpc::default_instance_;
  delete UpdateScannerConfigFileRpc_reflection_;
  delete SdswStatus::default_instance_;
  delete SdswStatus_reflection_;
  delete GetImageCalibrationFilesRpc::default_instance_;
  delete GetImageCalibrationFilesRpc_reflection_;
  delete RunImageCalibrationRpc::default_instance_;
  delete RunImageCalibrationRpc_reflection_;
  delete UpdateImageCalibrationBeltHeightRpc::default_instance_;
  delete UpdateImageCalibrationBeltHeightRpc_reflection_;
  delete UpdateImageCalibrationNylonScaleRpc::default_instance_;
  delete UpdateImageCalibrationNylonScaleRpc_reflection_;
  delete UpdateImageCalibrationBeltFreqRpc::default_instance_;
  delete UpdateImageCalibrationBeltFreqRpc_reflection_;
  delete ExportFilesRpc::default_instance_;
  delete ExportFilesRpc_reflection_;
  delete AirCalibrationRpc::default_instance_;
  delete AirCalibrationRpc_reflection_;
  delete OffsetCalibrationRpc::default_instance_;
  delete OffsetCalibrationRpc_reflection_;
  delete CalibrationRpc::default_instance_;
  delete CalibrationRpc_reflection_;
  delete AlarmLibInfo::default_instance_;
  delete AlarmLibInfo_reflection_;
  delete InstalledAlarmLibInfo::default_instance_;
  delete InstalledAlarmLibInfo_reflection_;
  delete GetInstalledAlarmLibsRpc::default_instance_;
  delete GetInstalledAlarmLibsRpc_reflection_;
  delete GetInstalledAlarmLibsReply::default_instance_;
  delete GetInstalledAlarmLibsReply_reflection_;
  delete GetInstallableAlarmLibsRpc::default_instance_;
  delete GetInstallableAlarmLibsRpc_reflection_;
  delete GetInstallableAlarmLibsReply::default_instance_;
  delete GetInstallableAlarmLibsReply_reflection_;
  delete InstallAlarmLibRpc::default_instance_;
  delete InstallAlarmLibRpc_reflection_;
  delete ExportCalParamDataRpc::default_instance_;
  delete ExportCalParamDataRpc_reflection_;
  delete ImportCalParamDataRpc::default_instance_;
  delete ImportCalParamDataRpc_reflection_;
}

void protobuf_AddDesc_proto_2fCalService_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_proto_2fCalService_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::analogic::ancp00::protobuf_AddDesc_proto_2fScannerControl_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026proto/CalService.proto\022\010analogic\032\032prot"
    "o/ScannerControl.proto\"\266\003\n\010RpcReply\022.\n\010r"
    "eply_id\030\001 \001(\0162\034.analogic.RpcReply.RPC_RE"
    "PLY\022\021\n\tfile_name\030\002 \001(\t\022\023\n\013belt_height\030\003 "
    "\001(\002\022\023\n\013nylon_scale\030\004 \001(\002\022\023\n\013file_name_2\030"
    "\005 \001(\t\022\024\n\014float_data_1\030\006 \001(\002\022\024\n\014float_dat"
    "a_2\030\007 \001(\002\022\024\n\014float_data_3\030\010 \001(\002\0225\n\nerror"
    "_code\030\t \001(\0162!.analogic.RpcReply.RPC_ERRO"
    "R_CODE\022\026\n\016belt_frequency\030\n \001(\005\"F\n\tRPC_RE"
    "PLY\022\014\n\010COMPLETE\020\000\022\010\n\004BUSY\020\001\022\013\n\007TIMEOUT\020\002"
    "\022\t\n\005ERROR\020\003\022\t\n\005READY\020\004\"O\n\016RPC_ERROR_CODE"
    "\022\023\n\017COMMAND_FAILURE\020\000\022\022\n\016FILE_NOT_FOUND\020"
    "\001\022\024\n\020FILE_NOT_CREATED\020\002\"M\n\016XrayControlRp"
    "c\";\n\nXRAY_STATE\022\014\n\010XRAY_OFF\020\000\022\013\n\007XRAY_ON"
    "\020\001\022\022\n\016XRAY_MINIMIZED\020\002\"\236\001\n\021RawDataCollec"
    "tRpc\0227\n\nxray_state\030\001 \001(\0162#.analogic.Xray"
    "ControlRpc.XRAY_STATE\022\021\n\tgantry_on\030\002 \001(\010"
    "\022\023\n\013conveyor_on\030\003 \001(\010\022\025\n\rnum_rotations\030\004"
    " \001(\005\022\021\n\tfile_path\030\005 \001(\t\"\013\n\tAirCalRpc\"\016\n\014"
    "OffsetCalRpc\"\222\002\n\023ImageQualityTestRpc\022\023\n\013"
    "dest_folder\030\001 \001(\t\022\024\n\014float_data_1\030\002 \001(\002\022"
    "\024\n\014float_data_2\030\003 \001(\002\022\024\n\014float_data_3\030\004 "
    "\001(\002\022\023\n\013source_user\030\005 \001(\t\022@\n\014iq_test_type"
    "\030\006 \001(\0162*.analogic.ImageQualityTestRpc.IQ"
    "_TEST_TYPE\"M\n\014IQ_TEST_TYPE\022\013\n\007IQ_NONE\020\000\022"
    "\020\n\014IQT_ANALOGIC\020\001\022\016\n\nIQT_NIST_A\020\002\022\016\n\nIQT"
    "_NIST_B\020\003\"\036\n\034GetImageQualityMassValuesRp"
    "c\"\024\n\022RadiationSurveyRpc\"\024\n\022RadSurveyRpcC"
    "ancel\"\022\n\020BeltTunnelCalRpc\".\n\031GetBadDetec"
    "torMapFilesRpc\022\021\n\tfile_path\030\001 \001(\t\"0\n\033Get"
    "BadDetectorManualFileRpc\022\021\n\tfile_path\030\001 "
    "\001(\t\"1\n\036UpdateBadDetectorManualFileRpc\022\017\n"
    "\007content\030\001 \001(\t\"\'\n\022GetErrorLogFileRpc\022\021\n\t"
    "file_path\030\001 \001(\t\",\n\027GetScannerConfigFileR"
    "pc\022\021\n\tfile_path\030\001 \001(\t\"-\n\032UpdateScannerCo"
    "nfigFileRpc\022\017\n\007content\030\001 \001(\t\"\310\026\n\nSdswSta"
    "tus\022L\n\002id\030\001 \001(\0162@.analogic.ancp00.Scanne"
    "rControlRpcSeq.SCANNER_CONTROL_RPC_SEQ_I"
    "D\022\024\n\014current_step\030\002 \001(\r\022\027\n\017number_of_ste"
    "ps\030\003 \001(\r\022\014\n\004text\030\004 \001(\t\"!\n\rAIR_CAL_STATE\022"
    "\020\n\014AIR_CAL_IDLE\020\000\"\'\n\020OFFSET_CAL_STATE\022\023\n"
    "\017OFFSET_CAL_IDLE\020\000\"!\n\rPIN_CAL_STATE\022\020\n\014P"
    "IN_CAL_IDLE\020\000\"-\n\025BELT_HEIGHT_CAL_STATE\022\024"
    "\n\020BELT_HEIGHT_IDLE\020\000\"+\n\022SPECTRAL_CAL_STA"
    "TE\022\025\n\021SPECTRAL_CAL_IDLE\020\000\"\361\001\n\026RADIATION_"
    "SURVEY_STATE\022\031\n\025RADIATION_SURVEY_IDLE\020\000\022"
    "\037\n\033RADIATION_SURVEY_GO_TO_SCAN\020\001\0221\n-RADI"
    "ATION_SURVEY_WAITING_FOR_BAG_TO_BE_PLACE"
    "D\020\002\0220\n,RADIATION_SURVEY_WAITING_FOR_BAG_"
    "IN_POSITION\020\003\022\032\n\026RADIATION_SURVEY_READY\020"
    "\004\022\032\n\026RADIATION_SURVEY_ERROR\020\005\"\332\001\n\035RADIAT"
    "ION_SURVEY_CANCEL_STATE\022 \n\034RADIATION_SUR"
    "VEY_CANCEL_IDLE\020\000\022$\n RADIATION_SURVEY_CA"
    "NCEL_XRAY_OFF\020\001\022(\n$RADIATION_SURVEY_CANC"
    "EL_CONVEYOR_RUN\020\002\022$\n RADIATION_SURVEY_CA"
    "NCEL_COMPLETE\020\003\022!\n\035RADIATION_SURVEY_CANC"
    "EL_ERROR\020\004\"\372\001\n\023IMAGE_QUALITY_STATE\022\026\n\022IM"
    "AGE_QUALITY_IDLE\020\000\022\034\n\030IMAGE_QUALITY_GO_T"
    "O_SCAN\020\001\022\034\n\030IMAGE_QUALITY_PROCESSING\020\002\022\033"
    "\n\027IMAGE_QUALITY_PROCESSED\020\003\022 \n\034IMAGE_QUA"
    "LITY_CONVEYOR_FLUSH\020\004\022\033\n\027IMAGE_QUALITY_X"
    "RAYS_OFF\020\005\022\032\n\026IMAGE_QUALITY_COMPLETE\020\006\022\027"
    "\n\023IMAGE_QUALITY_ERROR\020\007\"\207\001\n\032IMAGE_QUALIT"
    "Y_CANCEL_STATE\022!\n\035IMAGE_QUALITY_CANCEL_X"
    "RAY_OFF\020\000\022&\n\"IMAGE_QUALITY_CANCEL_CONVEY"
    "OR_STOP\020\001\022\036\n\032IMAGE_QUALITY_CANCEL_ERROR\020"
    "\002\"\317\001\n\020BASE_SEQ_1_STATE\022\023\n\017BASE_SEQ_1_IDL"
    "E\020\000\022\035\n\031BASE_SEQ_1_GANTRY_STARTUP\020\001\022\033\n\027BA"
    "SE_SEQ_1_XRAY_STARTUP\020\002\022\037\n\033BASE_SEQ_1_CO"
    "NVEYOR_CONTROL\020\003\022\031\n\025BASE_SEQ_1_PROCESSIN"
    "G\020\004\022\030\n\024BASE_SEQ_1_PROCESSED\020\005\022\024\n\020BASE_SE"
    "Q_1_ERROR\020\006\"\271\004\n\032ZEE_PIN_SPECTRAL_CAL_STA"
    "TE\022$\n ZEE_PIN_SPECTRAL_CAL_CLEAR_ERROR\020\000"
    "\022\"\n\036ZEE_PIN_SPECTRAL_CAL_GANTRY_ON\020\001\022&\n\""
    "ZEE_PIN_SPECTRAL_CAL_CONVEYOR_STOP\020\002\022#\n\037"
    "ZEE_PIN_SPECTRAL_CAL_XRAY_OFF_1\020\003\022+\n\'ZEE"
    "_PIN_SPECTRAL_CAL_RAW_DATA_COLLECT_1\020\004\022\""
    "\n\036ZEE_PIN_SPECTRAL_CAL_XRAY_ON_1\020\005\022+\n\'ZE"
    "E_PIN_SPECTRAL_CAL_RAW_DATA_COLLECT_2\020\006\022"
    "#\n\037ZEE_PIN_SPECTRAL_CAL_XRAY_OFF_2\020\007\022+\n\'"
    "ZEE_PIN_SPECTRAL_CAL_WAIT_FOR_PLACEMENT\020"
    "\010\022\"\n\036ZEE_PIN_SPECTRAL_CAL_XRAY_ON_2\020\t\022+\n"
    "\'ZEE_PIN_SPECTRAL_CAL_RAW_DATA_COLLECT_3"
    "\020\n\022 \n\034ZEE_PIN_SPECTRAL_CAL_ANALYZE\020\013\022!\n\035"
    "ZEE_PIN_SPECTRAL_CAL_COMPLETE\020\014\022\036\n\032ZEE_P"
    "IN_SPECTRAL_CAL_ERROR\020\r\"\245\001\n\030CONV_STOP_XR"
    "AY_MIN_STATE\022$\n CONV_STOP_XRAY_MIN_CONVE"
    "YOR_STOP\020\000\022$\n CONV_STOP_XRAY_MIN_XRAY_MI"
    "NIMIZE\020\001\022\037\n\033CONV_STOP_XRAY_MIN_COMPLETE\020"
    "\002\022\034\n\030CONV_STOP_XRAY_MIN_ERROR\020\003\"\237\001\n\027XMAX"
    "_CONVEYOR_RUN_STATE\022#\n\037XRAY_MAX_CONV_RUN"
    "_XRAY_MAXIMIZE\020\000\022\"\n\036XRAY_MAX_CONV_RUN_CO"
    "NVEYOR_RUN\020\001\022\036\n\032XRAY_MAX_CONV_RUN_COMPLE"
    "TE\020\002\022\033\n\027XRAY_MAX_CONV_RUN_ERROR\020\003\"\254\001\n!CO"
    "NV_STOP_XRAY_MIN_STATE_CONV_RUN\022\032\n\026XRAY_"
    "MIN_AND_CONV_STOP\020\000\022\032\n\026CONV_RUN_POST_XRA"
    "Y_MIN\020\001\022(\n$CONV_STOP_XRAY_MIN_CONV_RUN_C"
    "OMPLETE\020\002\022%\n!CONV_STOP_XRAY_MIN_CONV_RUN"
    "_ERROR\020\003\"\204\003\n\025BELT_TUNNEL_CAL_STATE\022\037\n\033BE"
    "LT_TUNNEL_CAL_CLEAR_ERROR\020\000\022\035\n\031BELT_TUNN"
    "EL_CAL_GANTRY_ON\020\001\022!\n\035BELT_TUNNEL_CAL_CO"
    "NVEYOR_STOP\020\002\022\036\n\032BELT_TUNNEL_CAL_XRAY_OF"
    "F_1\020\003\022+\n\'BELT_TUNNEL_CAL_RAW_DATA_COLLEC"
    "T_OFFSET\020\004\022\033\n\027BELT_TUNNEL_CAL_XRAY_ON\020\005\022"
    "(\n$BELT_TUNNEL_CAL_RAW_DATA_COLLECT_AIR\020"
    "\006\022\036\n\032BELT_TUNNEL_CAL_XRAY_OFF_2\020\007\022\033\n\027BEL"
    "T_TUNNEL_CAL_ANALYZE\020\010\022\034\n\030BELT_TUNNEL_CA"
    "L_COMPLETE\020\t\022\031\n\025BELT_TUNNEL_CAL_ERROR\020\n\""
    "0\n\033GetImageCalibrationFilesRpc\022\021\n\tfile_p"
    "ath\030\001 \001(\t\"w\n\026RunImageCalibrationRpc\022\021\n\tf"
    "ilename1\030\001 \001(\t\022\021\n\tfilename2\030\002 \001(\t\022\021\n\tfil"
    "ename3\030\003 \001(\t\022\021\n\tfilename4\030\004 \001(\t\022\021\n\tfilen"
    "ame5\030\005 \001(\t\":\n#UpdateImageCalibrationBelt"
    "HeightRpc\022\023\n\013belt_height\030\001 \001(\002\":\n#Update"
    "ImageCalibrationNylonScaleRpc\022\023\n\013nylon_s"
    "cale\030\001 \001(\002\"6\n!UpdateImageCalibrationBelt"
    "FreqRpc\022\021\n\tbelt_freq\030\001 \001(\005\"\372\001\n\016ExportFil"
    "esRpc\022\021\n\tfile_path\030\001 \001(\t\022\022\n\nfile_types\030\002"
    " \001(\007\022\031\n\021start_time_string\030\003 \001(\t\022\027\n\017end_t"
    "ime_string\030\004 \001(\t\"\214\001\n\nFILE_TYPES\022\r\n\tNULL_"
    "FILE\020\000\022\r\n\tERROR_LOG\020\001\022\020\n\014TEST_RESULTS\020\002\022"
    "\017\n\013CALIBRATION\020\004\022\021\n\rCONFIGURATION\020\010\022\024\n\020O"
    "PERATING_SYSTEM\020\020\022\024\n\020APPLICATION_LOGS\020 \""
    "\023\n\021AirCalibrationRpc\"\026\n\024OffsetCalibratio"
    "nRpc\"v\n\016CalibrationRpc\0221\n\003cmd\030\001 \001(\0162$.an"
    "alogic.CalibrationRpc.CAL_COMMAND\"1\n\013CAL"
    "_COMMAND\022\t\n\005START\020\000\022\013\n\007PROCEED\020\001\022\n\n\006CANC"
    "EL\020\002\"-\n\014AlarmLibInfo\022\014\n\004name\030\001 \001(\t\022\017\n\007ve"
    "rsion\030\002 \001(\t\"I\n\025InstalledAlarmLibInfo\022\014\n\004"
    "name\030\001 \001(\t\022\017\n\007version\030\002 \001(\t\022\021\n\tcorrupted"
    "\030\003 \001(\010\"\032\n\030GetInstalledAlarmLibsRpc\"Z\n\032Ge"
    "tInstalledAlarmLibsReply\022<\n\023installed_al"
    "armlibs\030\001 \003(\0132\037.analogic.InstalledAlarmL"
    "ibInfo\"\034\n\032GetInstallableAlarmLibsRpc\"U\n\034"
    "GetInstallableAlarmLibsReply\0225\n\025installa"
    "ble_alarmlibs\030\001 \003(\0132\026.analogic.AlarmLibI"
    "nfo\"C\n\022InstallAlarmLibRpc\022-\n\ralarmlib_in"
    "fo\030\001 \001(\0132\026.analogic.AlarmLibInfo\"*\n\025Expo"
    "rtCalParamDataRpc\022\021\n\tfile_path\030\001 \001(\t\"=\n\025"
    "ImportCalParamDataRpc\022\021\n\tfile_path\030\001 \001(\t"
    "\022\021\n\tfile_name\030\002 \001(\tb\006proto3", 5627);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/CalService.proto", &protobuf_RegisterTypes);
  RpcReply::default_instance_ = new RpcReply();
  XrayControlRpc::default_instance_ = new XrayControlRpc();
  RawDataCollectRpc::default_instance_ = new RawDataCollectRpc();
  AirCalRpc::default_instance_ = new AirCalRpc();
  OffsetCalRpc::default_instance_ = new OffsetCalRpc();
  ImageQualityTestRpc::default_instance_ = new ImageQualityTestRpc();
  GetImageQualityMassValuesRpc::default_instance_ = new GetImageQualityMassValuesRpc();
  RadiationSurveyRpc::default_instance_ = new RadiationSurveyRpc();
  RadSurveyRpcCancel::default_instance_ = new RadSurveyRpcCancel();
  BeltTunnelCalRpc::default_instance_ = new BeltTunnelCalRpc();
  GetBadDetectorMapFilesRpc::default_instance_ = new GetBadDetectorMapFilesRpc();
  GetBadDetectorManualFileRpc::default_instance_ = new GetBadDetectorManualFileRpc();
  UpdateBadDetectorManualFileRpc::default_instance_ = new UpdateBadDetectorManualFileRpc();
  GetErrorLogFileRpc::default_instance_ = new GetErrorLogFileRpc();
  GetScannerConfigFileRpc::default_instance_ = new GetScannerConfigFileRpc();
  UpdateScannerConfigFileRpc::default_instance_ = new UpdateScannerConfigFileRpc();
  SdswStatus::default_instance_ = new SdswStatus();
  GetImageCalibrationFilesRpc::default_instance_ = new GetImageCalibrationFilesRpc();
  RunImageCalibrationRpc::default_instance_ = new RunImageCalibrationRpc();
  UpdateImageCalibrationBeltHeightRpc::default_instance_ = new UpdateImageCalibrationBeltHeightRpc();
  UpdateImageCalibrationNylonScaleRpc::default_instance_ = new UpdateImageCalibrationNylonScaleRpc();
  UpdateImageCalibrationBeltFreqRpc::default_instance_ = new UpdateImageCalibrationBeltFreqRpc();
  ExportFilesRpc::default_instance_ = new ExportFilesRpc();
  AirCalibrationRpc::default_instance_ = new AirCalibrationRpc();
  OffsetCalibrationRpc::default_instance_ = new OffsetCalibrationRpc();
  CalibrationRpc::default_instance_ = new CalibrationRpc();
  AlarmLibInfo::default_instance_ = new AlarmLibInfo();
  InstalledAlarmLibInfo::default_instance_ = new InstalledAlarmLibInfo();
  GetInstalledAlarmLibsRpc::default_instance_ = new GetInstalledAlarmLibsRpc();
  GetInstalledAlarmLibsReply::default_instance_ = new GetInstalledAlarmLibsReply();
  GetInstallableAlarmLibsRpc::default_instance_ = new GetInstallableAlarmLibsRpc();
  GetInstallableAlarmLibsReply::default_instance_ = new GetInstallableAlarmLibsReply();
  InstallAlarmLibRpc::default_instance_ = new InstallAlarmLibRpc();
  ExportCalParamDataRpc::default_instance_ = new ExportCalParamDataRpc();
  ImportCalParamDataRpc::default_instance_ = new ImportCalParamDataRpc();
  RpcReply::default_instance_->InitAsDefaultInstance();
  XrayControlRpc::default_instance_->InitAsDefaultInstance();
  RawDataCollectRpc::default_instance_->InitAsDefaultInstance();
  AirCalRpc::default_instance_->InitAsDefaultInstance();
  OffsetCalRpc::default_instance_->InitAsDefaultInstance();
  ImageQualityTestRpc::default_instance_->InitAsDefaultInstance();
  GetImageQualityMassValuesRpc::default_instance_->InitAsDefaultInstance();
  RadiationSurveyRpc::default_instance_->InitAsDefaultInstance();
  RadSurveyRpcCancel::default_instance_->InitAsDefaultInstance();
  BeltTunnelCalRpc::default_instance_->InitAsDefaultInstance();
  GetBadDetectorMapFilesRpc::default_instance_->InitAsDefaultInstance();
  GetBadDetectorManualFileRpc::default_instance_->InitAsDefaultInstance();
  UpdateBadDetectorManualFileRpc::default_instance_->InitAsDefaultInstance();
  GetErrorLogFileRpc::default_instance_->InitAsDefaultInstance();
  GetScannerConfigFileRpc::default_instance_->InitAsDefaultInstance();
  UpdateScannerConfigFileRpc::default_instance_->InitAsDefaultInstance();
  SdswStatus::default_instance_->InitAsDefaultInstance();
  GetImageCalibrationFilesRpc::default_instance_->InitAsDefaultInstance();
  RunImageCalibrationRpc::default_instance_->InitAsDefaultInstance();
  UpdateImageCalibrationBeltHeightRpc::default_instance_->InitAsDefaultInstance();
  UpdateImageCalibrationNylonScaleRpc::default_instance_->InitAsDefaultInstance();
  UpdateImageCalibrationBeltFreqRpc::default_instance_->InitAsDefaultInstance();
  ExportFilesRpc::default_instance_->InitAsDefaultInstance();
  AirCalibrationRpc::default_instance_->InitAsDefaultInstance();
  OffsetCalibrationRpc::default_instance_->InitAsDefaultInstance();
  CalibrationRpc::default_instance_->InitAsDefaultInstance();
  AlarmLibInfo::default_instance_->InitAsDefaultInstance();
  InstalledAlarmLibInfo::default_instance_->InitAsDefaultInstance();
  GetInstalledAlarmLibsRpc::default_instance_->InitAsDefaultInstance();
  GetInstalledAlarmLibsReply::default_instance_->InitAsDefaultInstance();
  GetInstallableAlarmLibsRpc::default_instance_->InitAsDefaultInstance();
  GetInstallableAlarmLibsReply::default_instance_->InitAsDefaultInstance();
  InstallAlarmLibRpc::default_instance_->InitAsDefaultInstance();
  ExportCalParamDataRpc::default_instance_->InitAsDefaultInstance();
  ImportCalParamDataRpc::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2fCalService_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2fCalService_2eproto {
  StaticDescriptorInitializer_proto_2fCalService_2eproto() {
    protobuf_AddDesc_proto_2fCalService_2eproto();
  }
} static_descriptor_initializer_proto_2fCalService_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* RpcReply_RPC_REPLY_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpcReply_RPC_REPLY_descriptor_;
}
bool RpcReply_RPC_REPLY_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RpcReply_RPC_REPLY RpcReply::COMPLETE;
const RpcReply_RPC_REPLY RpcReply::BUSY;
const RpcReply_RPC_REPLY RpcReply::TIMEOUT;
const RpcReply_RPC_REPLY RpcReply::ERROR;
const RpcReply_RPC_REPLY RpcReply::READY;
const RpcReply_RPC_REPLY RpcReply::RPC_REPLY_MIN;
const RpcReply_RPC_REPLY RpcReply::RPC_REPLY_MAX;
const int RpcReply::RPC_REPLY_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* RpcReply_RPC_ERROR_CODE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpcReply_RPC_ERROR_CODE_descriptor_;
}
bool RpcReply_RPC_ERROR_CODE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RpcReply_RPC_ERROR_CODE RpcReply::COMMAND_FAILURE;
const RpcReply_RPC_ERROR_CODE RpcReply::FILE_NOT_FOUND;
const RpcReply_RPC_ERROR_CODE RpcReply::FILE_NOT_CREATED;
const RpcReply_RPC_ERROR_CODE RpcReply::RPC_ERROR_CODE_MIN;
const RpcReply_RPC_ERROR_CODE RpcReply::RPC_ERROR_CODE_MAX;
const int RpcReply::RPC_ERROR_CODE_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RpcReply::kReplyIdFieldNumber;
const int RpcReply::kFileNameFieldNumber;
const int RpcReply::kBeltHeightFieldNumber;
const int RpcReply::kNylonScaleFieldNumber;
const int RpcReply::kFileName2FieldNumber;
const int RpcReply::kFloatData1FieldNumber;
const int RpcReply::kFloatData2FieldNumber;
const int RpcReply::kFloatData3FieldNumber;
const int RpcReply::kErrorCodeFieldNumber;
const int RpcReply::kBeltFrequencyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RpcReply::RpcReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analogic.RpcReply)
}

void RpcReply::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RpcReply::RpcReply(const RpcReply& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analogic.RpcReply)
}

void RpcReply::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  reply_id_ = 0;
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  belt_height_ = 0;
  nylon_scale_ = 0;
  file_name_2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  float_data_1_ = 0;
  float_data_2_ = 0;
  float_data_3_ = 0;
  error_code_ = 0;
  belt_frequency_ = 0;
}

RpcReply::~RpcReply() {
  // @@protoc_insertion_point(destructor:analogic.RpcReply)
  SharedDtor();
}

void RpcReply::SharedDtor() {
  file_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_name_2_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void RpcReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpcReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpcReply_descriptor_;
}

const RpcReply& RpcReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fCalService_2eproto();
  return *default_instance_;
}

RpcReply* RpcReply::default_instance_ = NULL;

RpcReply* RpcReply::New(::google::protobuf::Arena* arena) const {
  RpcReply* n = new RpcReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RpcReply::Clear() {
// @@protoc_insertion_point(message_clear_start:analogic.RpcReply)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RpcReply, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RpcReply*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(reply_id_, belt_height_);
  ZR_(nylon_scale_, float_data_3_);
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_name_2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(error_code_, belt_frequency_);

#undef ZR_HELPER_
#undef ZR_

}

bool RpcReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analogic.RpcReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .analogic.RpcReply.RPC_REPLY reply_id = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_reply_id(static_cast< ::analogic::RpcReply_RPC_REPLY >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_file_name;
        break;
      }

      // optional string file_name = 2;
      case 2: {
        if (tag == 18) {
         parse_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file_name().data(), this->file_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.RpcReply.file_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_belt_height;
        break;
      }

      // optional float belt_height = 3;
      case 3: {
        if (tag == 29) {
         parse_belt_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &belt_height_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_nylon_scale;
        break;
      }

      // optional float nylon_scale = 4;
      case 4: {
        if (tag == 37) {
         parse_nylon_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &nylon_scale_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_file_name_2;
        break;
      }

      // optional string file_name_2 = 5;
      case 5: {
        if (tag == 42) {
         parse_file_name_2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name_2()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file_name_2().data(), this->file_name_2().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.RpcReply.file_name_2"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_float_data_1;
        break;
      }

      // optional float float_data_1 = 6;
      case 6: {
        if (tag == 53) {
         parse_float_data_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &float_data_1_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_float_data_2;
        break;
      }

      // optional float float_data_2 = 7;
      case 7: {
        if (tag == 61) {
         parse_float_data_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &float_data_2_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_float_data_3;
        break;
      }

      // optional float float_data_3 = 8;
      case 8: {
        if (tag == 69) {
         parse_float_data_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &float_data_3_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_error_code;
        break;
      }

      // optional .analogic.RpcReply.RPC_ERROR_CODE error_code = 9;
      case 9: {
        if (tag == 72) {
         parse_error_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_error_code(static_cast< ::analogic::RpcReply_RPC_ERROR_CODE >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_belt_frequency;
        break;
      }

      // optional int32 belt_frequency = 10;
      case 10: {
        if (tag == 80) {
         parse_belt_frequency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &belt_frequency_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:analogic.RpcReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analogic.RpcReply)
  return false;
#undef DO_
}

void RpcReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analogic.RpcReply)
  // optional .analogic.RpcReply.RPC_REPLY reply_id = 1;
  if (this->reply_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->reply_id(), output);
  }

  // optional string file_name = 2;
  if (this->file_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.RpcReply.file_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->file_name(), output);
  }

  // optional float belt_height = 3;
  if (this->belt_height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->belt_height(), output);
  }

  // optional float nylon_scale = 4;
  if (this->nylon_scale() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->nylon_scale(), output);
  }

  // optional string file_name_2 = 5;
  if (this->file_name_2().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_name_2().data(), this->file_name_2().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.RpcReply.file_name_2");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->file_name_2(), output);
  }

  // optional float float_data_1 = 6;
  if (this->float_data_1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->float_data_1(), output);
  }

  // optional float float_data_2 = 7;
  if (this->float_data_2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->float_data_2(), output);
  }

  // optional float float_data_3 = 8;
  if (this->float_data_3() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->float_data_3(), output);
  }

  // optional .analogic.RpcReply.RPC_ERROR_CODE error_code = 9;
  if (this->error_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->error_code(), output);
  }

  // optional int32 belt_frequency = 10;
  if (this->belt_frequency() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->belt_frequency(), output);
  }

  // @@protoc_insertion_point(serialize_end:analogic.RpcReply)
}

::google::protobuf::uint8* RpcReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analogic.RpcReply)
  // optional .analogic.RpcReply.RPC_REPLY reply_id = 1;
  if (this->reply_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->reply_id(), target);
  }

  // optional string file_name = 2;
  if (this->file_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.RpcReply.file_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->file_name(), target);
  }

  // optional float belt_height = 3;
  if (this->belt_height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->belt_height(), target);
  }

  // optional float nylon_scale = 4;
  if (this->nylon_scale() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->nylon_scale(), target);
  }

  // optional string file_name_2 = 5;
  if (this->file_name_2().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_name_2().data(), this->file_name_2().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.RpcReply.file_name_2");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->file_name_2(), target);
  }

  // optional float float_data_1 = 6;
  if (this->float_data_1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->float_data_1(), target);
  }

  // optional float float_data_2 = 7;
  if (this->float_data_2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->float_data_2(), target);
  }

  // optional float float_data_3 = 8;
  if (this->float_data_3() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->float_data_3(), target);
  }

  // optional .analogic.RpcReply.RPC_ERROR_CODE error_code = 9;
  if (this->error_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->error_code(), target);
  }

  // optional int32 belt_frequency = 10;
  if (this->belt_frequency() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->belt_frequency(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:analogic.RpcReply)
  return target;
}

int RpcReply::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:analogic.RpcReply)
  int total_size = 0;

  // optional .analogic.RpcReply.RPC_REPLY reply_id = 1;
  if (this->reply_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->reply_id());
  }

  // optional string file_name = 2;
  if (this->file_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_name());
  }

  // optional float belt_height = 3;
  if (this->belt_height() != 0) {
    total_size += 1 + 4;
  }

  // optional float nylon_scale = 4;
  if (this->nylon_scale() != 0) {
    total_size += 1 + 4;
  }

  // optional string file_name_2 = 5;
  if (this->file_name_2().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_name_2());
  }

  // optional float float_data_1 = 6;
  if (this->float_data_1() != 0) {
    total_size += 1 + 4;
  }

  // optional float float_data_2 = 7;
  if (this->float_data_2() != 0) {
    total_size += 1 + 4;
  }

  // optional float float_data_3 = 8;
  if (this->float_data_3() != 0) {
    total_size += 1 + 4;
  }

  // optional .analogic.RpcReply.RPC_ERROR_CODE error_code = 9;
  if (this->error_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
  }

  // optional int32 belt_frequency = 10;
  if (this->belt_frequency() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->belt_frequency());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpcReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analogic.RpcReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RpcReply* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RpcReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analogic.RpcReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analogic.RpcReply)
    MergeFrom(*source);
  }
}

void RpcReply::MergeFrom(const RpcReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analogic.RpcReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.reply_id() != 0) {
    set_reply_id(from.reply_id());
  }
  if (from.file_name().size() > 0) {

    file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  if (from.belt_height() != 0) {
    set_belt_height(from.belt_height());
  }
  if (from.nylon_scale() != 0) {
    set_nylon_scale(from.nylon_scale());
  }
  if (from.file_name_2().size() > 0) {

    file_name_2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_2_);
  }
  if (from.float_data_1() != 0) {
    set_float_data_1(from.float_data_1());
  }
  if (from.float_data_2() != 0) {
    set_float_data_2(from.float_data_2());
  }
  if (from.float_data_3() != 0) {
    set_float_data_3(from.float_data_3());
  }
  if (from.error_code() != 0) {
    set_error_code(from.error_code());
  }
  if (from.belt_frequency() != 0) {
    set_belt_frequency(from.belt_frequency());
  }
}

void RpcReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analogic.RpcReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpcReply::CopyFrom(const RpcReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analogic.RpcReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcReply::IsInitialized() const {

  return true;
}

void RpcReply::Swap(RpcReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RpcReply::InternalSwap(RpcReply* other) {
  std::swap(reply_id_, other->reply_id_);
  file_name_.Swap(&other->file_name_);
  std::swap(belt_height_, other->belt_height_);
  std::swap(nylon_scale_, other->nylon_scale_);
  file_name_2_.Swap(&other->file_name_2_);
  std::swap(float_data_1_, other->float_data_1_);
  std::swap(float_data_2_, other->float_data_2_);
  std::swap(float_data_3_, other->float_data_3_);
  std::swap(error_code_, other->error_code_);
  std::swap(belt_frequency_, other->belt_frequency_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RpcReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpcReply_descriptor_;
  metadata.reflection = RpcReply_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RpcReply

// optional .analogic.RpcReply.RPC_REPLY reply_id = 1;
void RpcReply::clear_reply_id() {
  reply_id_ = 0;
}
 ::analogic::RpcReply_RPC_REPLY RpcReply::reply_id() const {
  // @@protoc_insertion_point(field_get:analogic.RpcReply.reply_id)
  return static_cast< ::analogic::RpcReply_RPC_REPLY >(reply_id_);
}
 void RpcReply::set_reply_id(::analogic::RpcReply_RPC_REPLY value) {
  
  reply_id_ = value;
  // @@protoc_insertion_point(field_set:analogic.RpcReply.reply_id)
}

// optional string file_name = 2;
void RpcReply::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RpcReply::file_name() const {
  // @@protoc_insertion_point(field_get:analogic.RpcReply.file_name)
  return file_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RpcReply::set_file_name(const ::std::string& value) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.RpcReply.file_name)
}
 void RpcReply::set_file_name(const char* value) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.RpcReply.file_name)
}
 void RpcReply::set_file_name(const char* value, size_t size) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.RpcReply.file_name)
}
 ::std::string* RpcReply::mutable_file_name() {
  
  // @@protoc_insertion_point(field_mutable:analogic.RpcReply.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RpcReply::release_file_name() {
  // @@protoc_insertion_point(field_release:analogic.RpcReply.file_name)
  
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RpcReply::set_allocated_file_name(::std::string* file_name) {
  if (file_name != NULL) {
    
  } else {
    
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:analogic.RpcReply.file_name)
}

// optional float belt_height = 3;
void RpcReply::clear_belt_height() {
  belt_height_ = 0;
}
 float RpcReply::belt_height() const {
  // @@protoc_insertion_point(field_get:analogic.RpcReply.belt_height)
  return belt_height_;
}
 void RpcReply::set_belt_height(float value) {
  
  belt_height_ = value;
  // @@protoc_insertion_point(field_set:analogic.RpcReply.belt_height)
}

// optional float nylon_scale = 4;
void RpcReply::clear_nylon_scale() {
  nylon_scale_ = 0;
}
 float RpcReply::nylon_scale() const {
  // @@protoc_insertion_point(field_get:analogic.RpcReply.nylon_scale)
  return nylon_scale_;
}
 void RpcReply::set_nylon_scale(float value) {
  
  nylon_scale_ = value;
  // @@protoc_insertion_point(field_set:analogic.RpcReply.nylon_scale)
}

// optional string file_name_2 = 5;
void RpcReply::clear_file_name_2() {
  file_name_2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RpcReply::file_name_2() const {
  // @@protoc_insertion_point(field_get:analogic.RpcReply.file_name_2)
  return file_name_2_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RpcReply::set_file_name_2(const ::std::string& value) {
  
  file_name_2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.RpcReply.file_name_2)
}
 void RpcReply::set_file_name_2(const char* value) {
  
  file_name_2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.RpcReply.file_name_2)
}
 void RpcReply::set_file_name_2(const char* value, size_t size) {
  
  file_name_2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.RpcReply.file_name_2)
}
 ::std::string* RpcReply::mutable_file_name_2() {
  
  // @@protoc_insertion_point(field_mutable:analogic.RpcReply.file_name_2)
  return file_name_2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RpcReply::release_file_name_2() {
  // @@protoc_insertion_point(field_release:analogic.RpcReply.file_name_2)
  
  return file_name_2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RpcReply::set_allocated_file_name_2(::std::string* file_name_2) {
  if (file_name_2 != NULL) {
    
  } else {
    
  }
  file_name_2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name_2);
  // @@protoc_insertion_point(field_set_allocated:analogic.RpcReply.file_name_2)
}

// optional float float_data_1 = 6;
void RpcReply::clear_float_data_1() {
  float_data_1_ = 0;
}
 float RpcReply::float_data_1() const {
  // @@protoc_insertion_point(field_get:analogic.RpcReply.float_data_1)
  return float_data_1_;
}
 void RpcReply::set_float_data_1(float value) {
  
  float_data_1_ = value;
  // @@protoc_insertion_point(field_set:analogic.RpcReply.float_data_1)
}

// optional float float_data_2 = 7;
void RpcReply::clear_float_data_2() {
  float_data_2_ = 0;
}
 float RpcReply::float_data_2() const {
  // @@protoc_insertion_point(field_get:analogic.RpcReply.float_data_2)
  return float_data_2_;
}
 void RpcReply::set_float_data_2(float value) {
  
  float_data_2_ = value;
  // @@protoc_insertion_point(field_set:analogic.RpcReply.float_data_2)
}

// optional float float_data_3 = 8;
void RpcReply::clear_float_data_3() {
  float_data_3_ = 0;
}
 float RpcReply::float_data_3() const {
  // @@protoc_insertion_point(field_get:analogic.RpcReply.float_data_3)
  return float_data_3_;
}
 void RpcReply::set_float_data_3(float value) {
  
  float_data_3_ = value;
  // @@protoc_insertion_point(field_set:analogic.RpcReply.float_data_3)
}

// optional .analogic.RpcReply.RPC_ERROR_CODE error_code = 9;
void RpcReply::clear_error_code() {
  error_code_ = 0;
}
 ::analogic::RpcReply_RPC_ERROR_CODE RpcReply::error_code() const {
  // @@protoc_insertion_point(field_get:analogic.RpcReply.error_code)
  return static_cast< ::analogic::RpcReply_RPC_ERROR_CODE >(error_code_);
}
 void RpcReply::set_error_code(::analogic::RpcReply_RPC_ERROR_CODE value) {
  
  error_code_ = value;
  // @@protoc_insertion_point(field_set:analogic.RpcReply.error_code)
}

// optional int32 belt_frequency = 10;
void RpcReply::clear_belt_frequency() {
  belt_frequency_ = 0;
}
 ::google::protobuf::int32 RpcReply::belt_frequency() const {
  // @@protoc_insertion_point(field_get:analogic.RpcReply.belt_frequency)
  return belt_frequency_;
}
 void RpcReply::set_belt_frequency(::google::protobuf::int32 value) {
  
  belt_frequency_ = value;
  // @@protoc_insertion_point(field_set:analogic.RpcReply.belt_frequency)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* XrayControlRpc_XRAY_STATE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return XrayControlRpc_XRAY_STATE_descriptor_;
}
bool XrayControlRpc_XRAY_STATE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const XrayControlRpc_XRAY_STATE XrayControlRpc::XRAY_OFF;
const XrayControlRpc_XRAY_STATE XrayControlRpc::XRAY_ON;
const XrayControlRpc_XRAY_STATE XrayControlRpc::XRAY_MINIMIZED;
const XrayControlRpc_XRAY_STATE XrayControlRpc::XRAY_STATE_MIN;
const XrayControlRpc_XRAY_STATE XrayControlRpc::XRAY_STATE_MAX;
const int XrayControlRpc::XRAY_STATE_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XrayControlRpc::XrayControlRpc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analogic.XrayControlRpc)
}

void XrayControlRpc::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

XrayControlRpc::XrayControlRpc(const XrayControlRpc& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analogic.XrayControlRpc)
}

void XrayControlRpc::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

XrayControlRpc::~XrayControlRpc() {
  // @@protoc_insertion_point(destructor:analogic.XrayControlRpc)
  SharedDtor();
}

void XrayControlRpc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void XrayControlRpc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XrayControlRpc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return XrayControlRpc_descriptor_;
}

const XrayControlRpc& XrayControlRpc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fCalService_2eproto();
  return *default_instance_;
}

XrayControlRpc* XrayControlRpc::default_instance_ = NULL;

XrayControlRpc* XrayControlRpc::New(::google::protobuf::Arena* arena) const {
  XrayControlRpc* n = new XrayControlRpc;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void XrayControlRpc::Clear() {
// @@protoc_insertion_point(message_clear_start:analogic.XrayControlRpc)
}

bool XrayControlRpc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analogic.XrayControlRpc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:analogic.XrayControlRpc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analogic.XrayControlRpc)
  return false;
#undef DO_
}

void XrayControlRpc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analogic.XrayControlRpc)
  // @@protoc_insertion_point(serialize_end:analogic.XrayControlRpc)
}

::google::protobuf::uint8* XrayControlRpc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analogic.XrayControlRpc)
  // @@protoc_insertion_point(serialize_to_array_end:analogic.XrayControlRpc)
  return target;
}

int XrayControlRpc::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:analogic.XrayControlRpc)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XrayControlRpc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analogic.XrayControlRpc)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const XrayControlRpc* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const XrayControlRpc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analogic.XrayControlRpc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analogic.XrayControlRpc)
    MergeFrom(*source);
  }
}

void XrayControlRpc::MergeFrom(const XrayControlRpc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analogic.XrayControlRpc)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void XrayControlRpc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analogic.XrayControlRpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XrayControlRpc::CopyFrom(const XrayControlRpc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analogic.XrayControlRpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XrayControlRpc::IsInitialized() const {

  return true;
}

void XrayControlRpc::Swap(XrayControlRpc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XrayControlRpc::InternalSwap(XrayControlRpc* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata XrayControlRpc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = XrayControlRpc_descriptor_;
  metadata.reflection = XrayControlRpc_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// XrayControlRpc

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RawDataCollectRpc::kXrayStateFieldNumber;
const int RawDataCollectRpc::kGantryOnFieldNumber;
const int RawDataCollectRpc::kConveyorOnFieldNumber;
const int RawDataCollectRpc::kNumRotationsFieldNumber;
const int RawDataCollectRpc::kFilePathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RawDataCollectRpc::RawDataCollectRpc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analogic.RawDataCollectRpc)
}

void RawDataCollectRpc::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RawDataCollectRpc::RawDataCollectRpc(const RawDataCollectRpc& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analogic.RawDataCollectRpc)
}

void RawDataCollectRpc::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  xray_state_ = 0;
  gantry_on_ = false;
  conveyor_on_ = false;
  num_rotations_ = 0;
  file_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RawDataCollectRpc::~RawDataCollectRpc() {
  // @@protoc_insertion_point(destructor:analogic.RawDataCollectRpc)
  SharedDtor();
}

void RawDataCollectRpc::SharedDtor() {
  file_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void RawDataCollectRpc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RawDataCollectRpc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RawDataCollectRpc_descriptor_;
}

const RawDataCollectRpc& RawDataCollectRpc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fCalService_2eproto();
  return *default_instance_;
}

RawDataCollectRpc* RawDataCollectRpc::default_instance_ = NULL;

RawDataCollectRpc* RawDataCollectRpc::New(::google::protobuf::Arena* arena) const {
  RawDataCollectRpc* n = new RawDataCollectRpc;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RawDataCollectRpc::Clear() {
// @@protoc_insertion_point(message_clear_start:analogic.RawDataCollectRpc)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RawDataCollectRpc, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RawDataCollectRpc*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(xray_state_, conveyor_on_);
  num_rotations_ = 0;
  file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool RawDataCollectRpc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analogic.RawDataCollectRpc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .analogic.XrayControlRpc.XRAY_STATE xray_state = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_xray_state(static_cast< ::analogic::XrayControlRpc_XRAY_STATE >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gantry_on;
        break;
      }

      // optional bool gantry_on = 2;
      case 2: {
        if (tag == 16) {
         parse_gantry_on:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gantry_on_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_conveyor_on;
        break;
      }

      // optional bool conveyor_on = 3;
      case 3: {
        if (tag == 24) {
         parse_conveyor_on:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &conveyor_on_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_num_rotations;
        break;
      }

      // optional int32 num_rotations = 4;
      case 4: {
        if (tag == 32) {
         parse_num_rotations:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_rotations_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_file_path;
        break;
      }

      // optional string file_path = 5;
      case 5: {
        if (tag == 42) {
         parse_file_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file_path().data(), this->file_path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.RawDataCollectRpc.file_path"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:analogic.RawDataCollectRpc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analogic.RawDataCollectRpc)
  return false;
#undef DO_
}

void RawDataCollectRpc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analogic.RawDataCollectRpc)
  // optional .analogic.XrayControlRpc.XRAY_STATE xray_state = 1;
  if (this->xray_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->xray_state(), output);
  }

  // optional bool gantry_on = 2;
  if (this->gantry_on() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->gantry_on(), output);
  }

  // optional bool conveyor_on = 3;
  if (this->conveyor_on() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->conveyor_on(), output);
  }

  // optional int32 num_rotations = 4;
  if (this->num_rotations() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num_rotations(), output);
  }

  // optional string file_path = 5;
  if (this->file_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_path().data(), this->file_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.RawDataCollectRpc.file_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->file_path(), output);
  }

  // @@protoc_insertion_point(serialize_end:analogic.RawDataCollectRpc)
}

::google::protobuf::uint8* RawDataCollectRpc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analogic.RawDataCollectRpc)
  // optional .analogic.XrayControlRpc.XRAY_STATE xray_state = 1;
  if (this->xray_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->xray_state(), target);
  }

  // optional bool gantry_on = 2;
  if (this->gantry_on() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->gantry_on(), target);
  }

  // optional bool conveyor_on = 3;
  if (this->conveyor_on() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->conveyor_on(), target);
  }

  // optional int32 num_rotations = 4;
  if (this->num_rotations() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->num_rotations(), target);
  }

  // optional string file_path = 5;
  if (this->file_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_path().data(), this->file_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.RawDataCollectRpc.file_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->file_path(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:analogic.RawDataCollectRpc)
  return target;
}

int RawDataCollectRpc::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:analogic.RawDataCollectRpc)
  int total_size = 0;

  // optional .analogic.XrayControlRpc.XRAY_STATE xray_state = 1;
  if (this->xray_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->xray_state());
  }

  // optional bool gantry_on = 2;
  if (this->gantry_on() != 0) {
    total_size += 1 + 1;
  }

  // optional bool conveyor_on = 3;
  if (this->conveyor_on() != 0) {
    total_size += 1 + 1;
  }

  // optional int32 num_rotations = 4;
  if (this->num_rotations() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_rotations());
  }

  // optional string file_path = 5;
  if (this->file_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_path());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RawDataCollectRpc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analogic.RawDataCollectRpc)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RawDataCollectRpc* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RawDataCollectRpc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analogic.RawDataCollectRpc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analogic.RawDataCollectRpc)
    MergeFrom(*source);
  }
}

void RawDataCollectRpc::MergeFrom(const RawDataCollectRpc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analogic.RawDataCollectRpc)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.xray_state() != 0) {
    set_xray_state(from.xray_state());
  }
  if (from.gantry_on() != 0) {
    set_gantry_on(from.gantry_on());
  }
  if (from.conveyor_on() != 0) {
    set_conveyor_on(from.conveyor_on());
  }
  if (from.num_rotations() != 0) {
    set_num_rotations(from.num_rotations());
  }
  if (from.file_path().size() > 0) {

    file_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_path_);
  }
}

void RawDataCollectRpc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analogic.RawDataCollectRpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawDataCollectRpc::CopyFrom(const RawDataCollectRpc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analogic.RawDataCollectRpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RawDataCollectRpc::IsInitialized() const {

  return true;
}

void RawDataCollectRpc::Swap(RawDataCollectRpc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RawDataCollectRpc::InternalSwap(RawDataCollectRpc* other) {
  std::swap(xray_state_, other->xray_state_);
  std::swap(gantry_on_, other->gantry_on_);
  std::swap(conveyor_on_, other->conveyor_on_);
  std::swap(num_rotations_, other->num_rotations_);
  file_path_.Swap(&other->file_path_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RawDataCollectRpc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RawDataCollectRpc_descriptor_;
  metadata.reflection = RawDataCollectRpc_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RawDataCollectRpc

// optional .analogic.XrayControlRpc.XRAY_STATE xray_state = 1;
void RawDataCollectRpc::clear_xray_state() {
  xray_state_ = 0;
}
 ::analogic::XrayControlRpc_XRAY_STATE RawDataCollectRpc::xray_state() const {
  // @@protoc_insertion_point(field_get:analogic.RawDataCollectRpc.xray_state)
  return static_cast< ::analogic::XrayControlRpc_XRAY_STATE >(xray_state_);
}
 void RawDataCollectRpc::set_xray_state(::analogic::XrayControlRpc_XRAY_STATE value) {
  
  xray_state_ = value;
  // @@protoc_insertion_point(field_set:analogic.RawDataCollectRpc.xray_state)
}

// optional bool gantry_on = 2;
void RawDataCollectRpc::clear_gantry_on() {
  gantry_on_ = false;
}
 bool RawDataCollectRpc::gantry_on() const {
  // @@protoc_insertion_point(field_get:analogic.RawDataCollectRpc.gantry_on)
  return gantry_on_;
}
 void RawDataCollectRpc::set_gantry_on(bool value) {
  
  gantry_on_ = value;
  // @@protoc_insertion_point(field_set:analogic.RawDataCollectRpc.gantry_on)
}

// optional bool conveyor_on = 3;
void RawDataCollectRpc::clear_conveyor_on() {
  conveyor_on_ = false;
}
 bool RawDataCollectRpc::conveyor_on() const {
  // @@protoc_insertion_point(field_get:analogic.RawDataCollectRpc.conveyor_on)
  return conveyor_on_;
}
 void RawDataCollectRpc::set_conveyor_on(bool value) {
  
  conveyor_on_ = value;
  // @@protoc_insertion_point(field_set:analogic.RawDataCollectRpc.conveyor_on)
}

// optional int32 num_rotations = 4;
void RawDataCollectRpc::clear_num_rotations() {
  num_rotations_ = 0;
}
 ::google::protobuf::int32 RawDataCollectRpc::num_rotations() const {
  // @@protoc_insertion_point(field_get:analogic.RawDataCollectRpc.num_rotations)
  return num_rotations_;
}
 void RawDataCollectRpc::set_num_rotations(::google::protobuf::int32 value) {
  
  num_rotations_ = value;
  // @@protoc_insertion_point(field_set:analogic.RawDataCollectRpc.num_rotations)
}

// optional string file_path = 5;
void RawDataCollectRpc::clear_file_path() {
  file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RawDataCollectRpc::file_path() const {
  // @@protoc_insertion_point(field_get:analogic.RawDataCollectRpc.file_path)
  return file_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RawDataCollectRpc::set_file_path(const ::std::string& value) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.RawDataCollectRpc.file_path)
}
 void RawDataCollectRpc::set_file_path(const char* value) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.RawDataCollectRpc.file_path)
}
 void RawDataCollectRpc::set_file_path(const char* value, size_t size) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.RawDataCollectRpc.file_path)
}
 ::std::string* RawDataCollectRpc::mutable_file_path() {
  
  // @@protoc_insertion_point(field_mutable:analogic.RawDataCollectRpc.file_path)
  return file_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RawDataCollectRpc::release_file_path() {
  // @@protoc_insertion_point(field_release:analogic.RawDataCollectRpc.file_path)
  
  return file_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RawDataCollectRpc::set_allocated_file_path(::std::string* file_path) {
  if (file_path != NULL) {
    
  } else {
    
  }
  file_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_path);
  // @@protoc_insertion_point(field_set_allocated:analogic.RawDataCollectRpc.file_path)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AirCalRpc::AirCalRpc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analogic.AirCalRpc)
}

void AirCalRpc::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

AirCalRpc::AirCalRpc(const AirCalRpc& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analogic.AirCalRpc)
}

void AirCalRpc::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

AirCalRpc::~AirCalRpc() {
  // @@protoc_insertion_point(destructor:analogic.AirCalRpc)
  SharedDtor();
}

void AirCalRpc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AirCalRpc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AirCalRpc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AirCalRpc_descriptor_;
}

const AirCalRpc& AirCalRpc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fCalService_2eproto();
  return *default_instance_;
}

AirCalRpc* AirCalRpc::default_instance_ = NULL;

AirCalRpc* AirCalRpc::New(::google::protobuf::Arena* arena) const {
  AirCalRpc* n = new AirCalRpc;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AirCalRpc::Clear() {
// @@protoc_insertion_point(message_clear_start:analogic.AirCalRpc)
}

bool AirCalRpc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analogic.AirCalRpc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:analogic.AirCalRpc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analogic.AirCalRpc)
  return false;
#undef DO_
}

void AirCalRpc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analogic.AirCalRpc)
  // @@protoc_insertion_point(serialize_end:analogic.AirCalRpc)
}

::google::protobuf::uint8* AirCalRpc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analogic.AirCalRpc)
  // @@protoc_insertion_point(serialize_to_array_end:analogic.AirCalRpc)
  return target;
}

int AirCalRpc::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:analogic.AirCalRpc)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AirCalRpc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analogic.AirCalRpc)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AirCalRpc* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AirCalRpc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analogic.AirCalRpc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analogic.AirCalRpc)
    MergeFrom(*source);
  }
}

void AirCalRpc::MergeFrom(const AirCalRpc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analogic.AirCalRpc)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void AirCalRpc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analogic.AirCalRpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AirCalRpc::CopyFrom(const AirCalRpc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analogic.AirCalRpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AirCalRpc::IsInitialized() const {

  return true;
}

void AirCalRpc::Swap(AirCalRpc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AirCalRpc::InternalSwap(AirCalRpc* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AirCalRpc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AirCalRpc_descriptor_;
  metadata.reflection = AirCalRpc_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AirCalRpc

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OffsetCalRpc::OffsetCalRpc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analogic.OffsetCalRpc)
}

void OffsetCalRpc::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

OffsetCalRpc::OffsetCalRpc(const OffsetCalRpc& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analogic.OffsetCalRpc)
}

void OffsetCalRpc::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

OffsetCalRpc::~OffsetCalRpc() {
  // @@protoc_insertion_point(destructor:analogic.OffsetCalRpc)
  SharedDtor();
}

void OffsetCalRpc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OffsetCalRpc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OffsetCalRpc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OffsetCalRpc_descriptor_;
}

const OffsetCalRpc& OffsetCalRpc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fCalService_2eproto();
  return *default_instance_;
}

OffsetCalRpc* OffsetCalRpc::default_instance_ = NULL;

OffsetCalRpc* OffsetCalRpc::New(::google::protobuf::Arena* arena) const {
  OffsetCalRpc* n = new OffsetCalRpc;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OffsetCalRpc::Clear() {
// @@protoc_insertion_point(message_clear_start:analogic.OffsetCalRpc)
}

bool OffsetCalRpc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analogic.OffsetCalRpc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:analogic.OffsetCalRpc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analogic.OffsetCalRpc)
  return false;
#undef DO_
}

void OffsetCalRpc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analogic.OffsetCalRpc)
  // @@protoc_insertion_point(serialize_end:analogic.OffsetCalRpc)
}

::google::protobuf::uint8* OffsetCalRpc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analogic.OffsetCalRpc)
  // @@protoc_insertion_point(serialize_to_array_end:analogic.OffsetCalRpc)
  return target;
}

int OffsetCalRpc::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:analogic.OffsetCalRpc)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OffsetCalRpc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analogic.OffsetCalRpc)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const OffsetCalRpc* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const OffsetCalRpc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analogic.OffsetCalRpc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analogic.OffsetCalRpc)
    MergeFrom(*source);
  }
}

void OffsetCalRpc::MergeFrom(const OffsetCalRpc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analogic.OffsetCalRpc)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void OffsetCalRpc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analogic.OffsetCalRpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OffsetCalRpc::CopyFrom(const OffsetCalRpc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analogic.OffsetCalRpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OffsetCalRpc::IsInitialized() const {

  return true;
}

void OffsetCalRpc::Swap(OffsetCalRpc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OffsetCalRpc::InternalSwap(OffsetCalRpc* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OffsetCalRpc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OffsetCalRpc_descriptor_;
  metadata.reflection = OffsetCalRpc_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OffsetCalRpc

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* ImageQualityTestRpc_IQ_TEST_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImageQualityTestRpc_IQ_TEST_TYPE_descriptor_;
}
bool ImageQualityTestRpc_IQ_TEST_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ImageQualityTestRpc_IQ_TEST_TYPE ImageQualityTestRpc::IQ_NONE;
const ImageQualityTestRpc_IQ_TEST_TYPE ImageQualityTestRpc::IQT_ANALOGIC;
const ImageQualityTestRpc_IQ_TEST_TYPE ImageQualityTestRpc::IQT_NIST_A;
const ImageQualityTestRpc_IQ_TEST_TYPE ImageQualityTestRpc::IQT_NIST_B;
const ImageQualityTestRpc_IQ_TEST_TYPE ImageQualityTestRpc::IQ_TEST_TYPE_MIN;
const ImageQualityTestRpc_IQ_TEST_TYPE ImageQualityTestRpc::IQ_TEST_TYPE_MAX;
const int ImageQualityTestRpc::IQ_TEST_TYPE_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageQualityTestRpc::kDestFolderFieldNumber;
const int ImageQualityTestRpc::kFloatData1FieldNumber;
const int ImageQualityTestRpc::kFloatData2FieldNumber;
const int ImageQualityTestRpc::kFloatData3FieldNumber;
const int ImageQualityTestRpc::kSourceUserFieldNumber;
const int ImageQualityTestRpc::kIqTestTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageQualityTestRpc::ImageQualityTestRpc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analogic.ImageQualityTestRpc)
}

void ImageQualityTestRpc::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ImageQualityTestRpc::ImageQualityTestRpc(const ImageQualityTestRpc& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analogic.ImageQualityTestRpc)
}

void ImageQualityTestRpc::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  dest_folder_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  float_data_1_ = 0;
  float_data_2_ = 0;
  float_data_3_ = 0;
  source_user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iq_test_type_ = 0;
}

ImageQualityTestRpc::~ImageQualityTestRpc() {
  // @@protoc_insertion_point(destructor:analogic.ImageQualityTestRpc)
  SharedDtor();
}

void ImageQualityTestRpc::SharedDtor() {
  dest_folder_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_user_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ImageQualityTestRpc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageQualityTestRpc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImageQualityTestRpc_descriptor_;
}

const ImageQualityTestRpc& ImageQualityTestRpc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fCalService_2eproto();
  return *default_instance_;
}

ImageQualityTestRpc* ImageQualityTestRpc::default_instance_ = NULL;

ImageQualityTestRpc* ImageQualityTestRpc::New(::google::protobuf::Arena* arena) const {
  ImageQualityTestRpc* n = new ImageQualityTestRpc;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImageQualityTestRpc::Clear() {
// @@protoc_insertion_point(message_clear_start:analogic.ImageQualityTestRpc)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ImageQualityTestRpc, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ImageQualityTestRpc*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(float_data_1_, float_data_2_);
  ZR_(float_data_3_, iq_test_type_);
  dest_folder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool ImageQualityTestRpc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analogic.ImageQualityTestRpc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string dest_folder = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dest_folder()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dest_folder().data(), this->dest_folder().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ImageQualityTestRpc.dest_folder"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_float_data_1;
        break;
      }

      // optional float float_data_1 = 2;
      case 2: {
        if (tag == 21) {
         parse_float_data_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &float_data_1_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_float_data_2;
        break;
      }

      // optional float float_data_2 = 3;
      case 3: {
        if (tag == 29) {
         parse_float_data_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &float_data_2_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_float_data_3;
        break;
      }

      // optional float float_data_3 = 4;
      case 4: {
        if (tag == 37) {
         parse_float_data_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &float_data_3_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_source_user;
        break;
      }

      // optional string source_user = 5;
      case 5: {
        if (tag == 42) {
         parse_source_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source_user()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->source_user().data(), this->source_user().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ImageQualityTestRpc.source_user"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_iq_test_type;
        break;
      }

      // optional .analogic.ImageQualityTestRpc.IQ_TEST_TYPE iq_test_type = 6;
      case 6: {
        if (tag == 48) {
         parse_iq_test_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_iq_test_type(static_cast< ::analogic::ImageQualityTestRpc_IQ_TEST_TYPE >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:analogic.ImageQualityTestRpc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analogic.ImageQualityTestRpc)
  return false;
#undef DO_
}

void ImageQualityTestRpc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analogic.ImageQualityTestRpc)
  // optional string dest_folder = 1;
  if (this->dest_folder().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dest_folder().data(), this->dest_folder().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ImageQualityTestRpc.dest_folder");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->dest_folder(), output);
  }

  // optional float float_data_1 = 2;
  if (this->float_data_1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->float_data_1(), output);
  }

  // optional float float_data_2 = 3;
  if (this->float_data_2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->float_data_2(), output);
  }

  // optional float float_data_3 = 4;
  if (this->float_data_3() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->float_data_3(), output);
  }

  // optional string source_user = 5;
  if (this->source_user().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_user().data(), this->source_user().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ImageQualityTestRpc.source_user");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->source_user(), output);
  }

  // optional .analogic.ImageQualityTestRpc.IQ_TEST_TYPE iq_test_type = 6;
  if (this->iq_test_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->iq_test_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:analogic.ImageQualityTestRpc)
}

::google::protobuf::uint8* ImageQualityTestRpc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analogic.ImageQualityTestRpc)
  // optional string dest_folder = 1;
  if (this->dest_folder().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dest_folder().data(), this->dest_folder().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ImageQualityTestRpc.dest_folder");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dest_folder(), target);
  }

  // optional float float_data_1 = 2;
  if (this->float_data_1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->float_data_1(), target);
  }

  // optional float float_data_2 = 3;
  if (this->float_data_2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->float_data_2(), target);
  }

  // optional float float_data_3 = 4;
  if (this->float_data_3() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->float_data_3(), target);
  }

  // optional string source_user = 5;
  if (this->source_user().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_user().data(), this->source_user().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ImageQualityTestRpc.source_user");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->source_user(), target);
  }

  // optional .analogic.ImageQualityTestRpc.IQ_TEST_TYPE iq_test_type = 6;
  if (this->iq_test_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->iq_test_type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:analogic.ImageQualityTestRpc)
  return target;
}

int ImageQualityTestRpc::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:analogic.ImageQualityTestRpc)
  int total_size = 0;

  // optional string dest_folder = 1;
  if (this->dest_folder().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dest_folder());
  }

  // optional float float_data_1 = 2;
  if (this->float_data_1() != 0) {
    total_size += 1 + 4;
  }

  // optional float float_data_2 = 3;
  if (this->float_data_2() != 0) {
    total_size += 1 + 4;
  }

  // optional float float_data_3 = 4;
  if (this->float_data_3() != 0) {
    total_size += 1 + 4;
  }

  // optional string source_user = 5;
  if (this->source_user().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source_user());
  }

  // optional .analogic.ImageQualityTestRpc.IQ_TEST_TYPE iq_test_type = 6;
  if (this->iq_test_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->iq_test_type());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageQualityTestRpc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analogic.ImageQualityTestRpc)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ImageQualityTestRpc* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ImageQualityTestRpc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analogic.ImageQualityTestRpc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analogic.ImageQualityTestRpc)
    MergeFrom(*source);
  }
}

void ImageQualityTestRpc::MergeFrom(const ImageQualityTestRpc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analogic.ImageQualityTestRpc)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.dest_folder().size() > 0) {

    dest_folder_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dest_folder_);
  }
  if (from.float_data_1() != 0) {
    set_float_data_1(from.float_data_1());
  }
  if (from.float_data_2() != 0) {
    set_float_data_2(from.float_data_2());
  }
  if (from.float_data_3() != 0) {
    set_float_data_3(from.float_data_3());
  }
  if (from.source_user().size() > 0) {

    source_user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_user_);
  }
  if (from.iq_test_type() != 0) {
    set_iq_test_type(from.iq_test_type());
  }
}

void ImageQualityTestRpc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analogic.ImageQualityTestRpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageQualityTestRpc::CopyFrom(const ImageQualityTestRpc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analogic.ImageQualityTestRpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageQualityTestRpc::IsInitialized() const {

  return true;
}

void ImageQualityTestRpc::Swap(ImageQualityTestRpc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageQualityTestRpc::InternalSwap(ImageQualityTestRpc* other) {
  dest_folder_.Swap(&other->dest_folder_);
  std::swap(float_data_1_, other->float_data_1_);
  std::swap(float_data_2_, other->float_data_2_);
  std::swap(float_data_3_, other->float_data_3_);
  source_user_.Swap(&other->source_user_);
  std::swap(iq_test_type_, other->iq_test_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImageQualityTestRpc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImageQualityTestRpc_descriptor_;
  metadata.reflection = ImageQualityTestRpc_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImageQualityTestRpc

// optional string dest_folder = 1;
void ImageQualityTestRpc::clear_dest_folder() {
  dest_folder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ImageQualityTestRpc::dest_folder() const {
  // @@protoc_insertion_point(field_get:analogic.ImageQualityTestRpc.dest_folder)
  return dest_folder_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ImageQualityTestRpc::set_dest_folder(const ::std::string& value) {
  
  dest_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ImageQualityTestRpc.dest_folder)
}
 void ImageQualityTestRpc::set_dest_folder(const char* value) {
  
  dest_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ImageQualityTestRpc.dest_folder)
}
 void ImageQualityTestRpc::set_dest_folder(const char* value, size_t size) {
  
  dest_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ImageQualityTestRpc.dest_folder)
}
 ::std::string* ImageQualityTestRpc::mutable_dest_folder() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ImageQualityTestRpc.dest_folder)
  return dest_folder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ImageQualityTestRpc::release_dest_folder() {
  // @@protoc_insertion_point(field_release:analogic.ImageQualityTestRpc.dest_folder)
  
  return dest_folder_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ImageQualityTestRpc::set_allocated_dest_folder(::std::string* dest_folder) {
  if (dest_folder != NULL) {
    
  } else {
    
  }
  dest_folder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dest_folder);
  // @@protoc_insertion_point(field_set_allocated:analogic.ImageQualityTestRpc.dest_folder)
}

// optional float float_data_1 = 2;
void ImageQualityTestRpc::clear_float_data_1() {
  float_data_1_ = 0;
}
 float ImageQualityTestRpc::float_data_1() const {
  // @@protoc_insertion_point(field_get:analogic.ImageQualityTestRpc.float_data_1)
  return float_data_1_;
}
 void ImageQualityTestRpc::set_float_data_1(float value) {
  
  float_data_1_ = value;
  // @@protoc_insertion_point(field_set:analogic.ImageQualityTestRpc.float_data_1)
}

// optional float float_data_2 = 3;
void ImageQualityTestRpc::clear_float_data_2() {
  float_data_2_ = 0;
}
 float ImageQualityTestRpc::float_data_2() const {
  // @@protoc_insertion_point(field_get:analogic.ImageQualityTestRpc.float_data_2)
  return float_data_2_;
}
 void ImageQualityTestRpc::set_float_data_2(float value) {
  
  float_data_2_ = value;
  // @@protoc_insertion_point(field_set:analogic.ImageQualityTestRpc.float_data_2)
}

// optional float float_data_3 = 4;
void ImageQualityTestRpc::clear_float_data_3() {
  float_data_3_ = 0;
}
 float ImageQualityTestRpc::float_data_3() const {
  // @@protoc_insertion_point(field_get:analogic.ImageQualityTestRpc.float_data_3)
  return float_data_3_;
}
 void ImageQualityTestRpc::set_float_data_3(float value) {
  
  float_data_3_ = value;
  // @@protoc_insertion_point(field_set:analogic.ImageQualityTestRpc.float_data_3)
}

// optional string source_user = 5;
void ImageQualityTestRpc::clear_source_user() {
  source_user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ImageQualityTestRpc::source_user() const {
  // @@protoc_insertion_point(field_get:analogic.ImageQualityTestRpc.source_user)
  return source_user_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ImageQualityTestRpc::set_source_user(const ::std::string& value) {
  
  source_user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ImageQualityTestRpc.source_user)
}
 void ImageQualityTestRpc::set_source_user(const char* value) {
  
  source_user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ImageQualityTestRpc.source_user)
}
 void ImageQualityTestRpc::set_source_user(const char* value, size_t size) {
  
  source_user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ImageQualityTestRpc.source_user)
}
 ::std::string* ImageQualityTestRpc::mutable_source_user() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ImageQualityTestRpc.source_user)
  return source_user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ImageQualityTestRpc::release_source_user() {
  // @@protoc_insertion_point(field_release:analogic.ImageQualityTestRpc.source_user)
  
  return source_user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ImageQualityTestRpc::set_allocated_source_user(::std::string* source_user) {
  if (source_user != NULL) {
    
  } else {
    
  }
  source_user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_user);
  // @@protoc_insertion_point(field_set_allocated:analogic.ImageQualityTestRpc.source_user)
}

// optional .analogic.ImageQualityTestRpc.IQ_TEST_TYPE iq_test_type = 6;
void ImageQualityTestRpc::clear_iq_test_type() {
  iq_test_type_ = 0;
}
 ::analogic::ImageQualityTestRpc_IQ_TEST_TYPE ImageQualityTestRpc::iq_test_type() const {
  // @@protoc_insertion_point(field_get:analogic.ImageQualityTestRpc.iq_test_type)
  return static_cast< ::analogic::ImageQualityTestRpc_IQ_TEST_TYPE >(iq_test_type_);
}
 void ImageQualityTestRpc::set_iq_test_type(::analogic::ImageQualityTestRpc_IQ_TEST_TYPE value) {
  
  iq_test_type_ = value;
  // @@protoc_insertion_point(field_set:analogic.ImageQualityTestRpc.iq_test_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetImageQualityMassValuesRpc::GetImageQualityMassValuesRpc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analogic.GetImageQualityMassValuesRpc)
}

void GetImageQualityMassValuesRpc::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GetImageQualityMassValuesRpc::GetImageQualityMassValuesRpc(const GetImageQualityMassValuesRpc& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analogic.GetImageQualityMassValuesRpc)
}

void GetImageQualityMassValuesRpc::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

GetImageQualityMassValuesRpc::~GetImageQualityMassValuesRpc() {
  // @@protoc_insertion_point(destructor:analogic.GetImageQualityMassValuesRpc)
  SharedDtor();
}

void GetImageQualityMassValuesRpc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetImageQualityMassValuesRpc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetImageQualityMassValuesRpc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetImageQualityMassValuesRpc_descriptor_;
}

const GetImageQualityMassValuesRpc& GetImageQualityMassValuesRpc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fCalService_2eproto();
  return *default_instance_;
}

GetImageQualityMassValuesRpc* GetImageQualityMassValuesRpc::default_instance_ = NULL;

GetImageQualityMassValuesRpc* GetImageQualityMassValuesRpc::New(::google::protobuf::Arena* arena) const {
  GetImageQualityMassValuesRpc* n = new GetImageQualityMassValuesRpc;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetImageQualityMassValuesRpc::Clear() {
// @@protoc_insertion_point(message_clear_start:analogic.GetImageQualityMassValuesRpc)
}

bool GetImageQualityMassValuesRpc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analogic.GetImageQualityMassValuesRpc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:analogic.GetImageQualityMassValuesRpc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analogic.GetImageQualityMassValuesRpc)
  return false;
#undef DO_
}

void GetImageQualityMassValuesRpc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analogic.GetImageQualityMassValuesRpc)
  // @@protoc_insertion_point(serialize_end:analogic.GetImageQualityMassValuesRpc)
}

::google::protobuf::uint8* GetImageQualityMassValuesRpc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analogic.GetImageQualityMassValuesRpc)
  // @@protoc_insertion_point(serialize_to_array_end:analogic.GetImageQualityMassValuesRpc)
  return target;
}

int GetImageQualityMassValuesRpc::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:analogic.GetImageQualityMassValuesRpc)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetImageQualityMassValuesRpc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analogic.GetImageQualityMassValuesRpc)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetImageQualityMassValuesRpc* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetImageQualityMassValuesRpc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analogic.GetImageQualityMassValuesRpc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analogic.GetImageQualityMassValuesRpc)
    MergeFrom(*source);
  }
}

void GetImageQualityMassValuesRpc::MergeFrom(const GetImageQualityMassValuesRpc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analogic.GetImageQualityMassValuesRpc)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void GetImageQualityMassValuesRpc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analogic.GetImageQualityMassValuesRpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetImageQualityMassValuesRpc::CopyFrom(const GetImageQualityMassValuesRpc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analogic.GetImageQualityMassValuesRpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetImageQualityMassValuesRpc::IsInitialized() const {

  return true;
}

void GetImageQualityMassValuesRpc::Swap(GetImageQualityMassValuesRpc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetImageQualityMassValuesRpc::InternalSwap(GetImageQualityMassValuesRpc* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetImageQualityMassValuesRpc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetImageQualityMassValuesRpc_descriptor_;
  metadata.reflection = GetImageQualityMassValuesRpc_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetImageQualityMassValuesRpc

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RadiationSurveyRpc::RadiationSurveyRpc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analogic.RadiationSurveyRpc)
}

void RadiationSurveyRpc::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RadiationSurveyRpc::RadiationSurveyRpc(const RadiationSurveyRpc& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analogic.RadiationSurveyRpc)
}

void RadiationSurveyRpc::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

RadiationSurveyRpc::~RadiationSurveyRpc() {
  // @@protoc_insertion_point(destructor:analogic.RadiationSurveyRpc)
  SharedDtor();
}

void RadiationSurveyRpc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RadiationSurveyRpc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RadiationSurveyRpc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RadiationSurveyRpc_descriptor_;
}

const RadiationSurveyRpc& RadiationSurveyRpc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fCalService_2eproto();
  return *default_instance_;
}

RadiationSurveyRpc* RadiationSurveyRpc::default_instance_ = NULL;

RadiationSurveyRpc* RadiationSurveyRpc::New(::google::protobuf::Arena* arena) const {
  RadiationSurveyRpc* n = new RadiationSurveyRpc;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RadiationSurveyRpc::Clear() {
// @@protoc_insertion_point(message_clear_start:analogic.RadiationSurveyRpc)
}

bool RadiationSurveyRpc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analogic.RadiationSurveyRpc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:analogic.RadiationSurveyRpc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analogic.RadiationSurveyRpc)
  return false;
#undef DO_
}

void RadiationSurveyRpc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analogic.RadiationSurveyRpc)
  // @@protoc_insertion_point(serialize_end:analogic.RadiationSurveyRpc)
}

::google::protobuf::uint8* RadiationSurveyRpc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analogic.RadiationSurveyRpc)
  // @@protoc_insertion_point(serialize_to_array_end:analogic.RadiationSurveyRpc)
  return target;
}

int RadiationSurveyRpc::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:analogic.RadiationSurveyRpc)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RadiationSurveyRpc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analogic.RadiationSurveyRpc)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RadiationSurveyRpc* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RadiationSurveyRpc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analogic.RadiationSurveyRpc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analogic.RadiationSurveyRpc)
    MergeFrom(*source);
  }
}

void RadiationSurveyRpc::MergeFrom(const RadiationSurveyRpc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analogic.RadiationSurveyRpc)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void RadiationSurveyRpc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analogic.RadiationSurveyRpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadiationSurveyRpc::CopyFrom(const RadiationSurveyRpc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analogic.RadiationSurveyRpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadiationSurveyRpc::IsInitialized() const {

  return true;
}

void RadiationSurveyRpc::Swap(RadiationSurveyRpc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RadiationSurveyRpc::InternalSwap(RadiationSurveyRpc* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RadiationSurveyRpc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RadiationSurveyRpc_descriptor_;
  metadata.reflection = RadiationSurveyRpc_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RadiationSurveyRpc

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RadSurveyRpcCancel::RadSurveyRpcCancel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analogic.RadSurveyRpcCancel)
}

void RadSurveyRpcCancel::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RadSurveyRpcCancel::RadSurveyRpcCancel(const RadSurveyRpcCancel& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analogic.RadSurveyRpcCancel)
}

void RadSurveyRpcCancel::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

RadSurveyRpcCancel::~RadSurveyRpcCancel() {
  // @@protoc_insertion_point(destructor:analogic.RadSurveyRpcCancel)
  SharedDtor();
}

void RadSurveyRpcCancel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RadSurveyRpcCancel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RadSurveyRpcCancel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RadSurveyRpcCancel_descriptor_;
}

const RadSurveyRpcCancel& RadSurveyRpcCancel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fCalService_2eproto();
  return *default_instance_;
}

RadSurveyRpcCancel* RadSurveyRpcCancel::default_instance_ = NULL;

RadSurveyRpcCancel* RadSurveyRpcCancel::New(::google::protobuf::Arena* arena) const {
  RadSurveyRpcCancel* n = new RadSurveyRpcCancel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RadSurveyRpcCancel::Clear() {
// @@protoc_insertion_point(message_clear_start:analogic.RadSurveyRpcCancel)
}

bool RadSurveyRpcCancel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analogic.RadSurveyRpcCancel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:analogic.RadSurveyRpcCancel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analogic.RadSurveyRpcCancel)
  return false;
#undef DO_
}

void RadSurveyRpcCancel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analogic.RadSurveyRpcCancel)
  // @@protoc_insertion_point(serialize_end:analogic.RadSurveyRpcCancel)
}

::google::protobuf::uint8* RadSurveyRpcCancel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analogic.RadSurveyRpcCancel)
  // @@protoc_insertion_point(serialize_to_array_end:analogic.RadSurveyRpcCancel)
  return target;
}

int RadSurveyRpcCancel::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:analogic.RadSurveyRpcCancel)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RadSurveyRpcCancel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analogic.RadSurveyRpcCancel)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RadSurveyRpcCancel* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RadSurveyRpcCancel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analogic.RadSurveyRpcCancel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analogic.RadSurveyRpcCancel)
    MergeFrom(*source);
  }
}

void RadSurveyRpcCancel::MergeFrom(const RadSurveyRpcCancel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analogic.RadSurveyRpcCancel)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void RadSurveyRpcCancel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analogic.RadSurveyRpcCancel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadSurveyRpcCancel::CopyFrom(const RadSurveyRpcCancel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analogic.RadSurveyRpcCancel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadSurveyRpcCancel::IsInitialized() const {

  return true;
}

void RadSurveyRpcCancel::Swap(RadSurveyRpcCancel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RadSurveyRpcCancel::InternalSwap(RadSurveyRpcCancel* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RadSurveyRpcCancel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RadSurveyRpcCancel_descriptor_;
  metadata.reflection = RadSurveyRpcCancel_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RadSurveyRpcCancel

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BeltTunnelCalRpc::BeltTunnelCalRpc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analogic.BeltTunnelCalRpc)
}

void BeltTunnelCalRpc::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BeltTunnelCalRpc::BeltTunnelCalRpc(const BeltTunnelCalRpc& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analogic.BeltTunnelCalRpc)
}

void BeltTunnelCalRpc::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

BeltTunnelCalRpc::~BeltTunnelCalRpc() {
  // @@protoc_insertion_point(destructor:analogic.BeltTunnelCalRpc)
  SharedDtor();
}

void BeltTunnelCalRpc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BeltTunnelCalRpc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BeltTunnelCalRpc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BeltTunnelCalRpc_descriptor_;
}

const BeltTunnelCalRpc& BeltTunnelCalRpc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fCalService_2eproto();
  return *default_instance_;
}

BeltTunnelCalRpc* BeltTunnelCalRpc::default_instance_ = NULL;

BeltTunnelCalRpc* BeltTunnelCalRpc::New(::google::protobuf::Arena* arena) const {
  BeltTunnelCalRpc* n = new BeltTunnelCalRpc;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BeltTunnelCalRpc::Clear() {
// @@protoc_insertion_point(message_clear_start:analogic.BeltTunnelCalRpc)
}

bool BeltTunnelCalRpc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analogic.BeltTunnelCalRpc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:analogic.BeltTunnelCalRpc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analogic.BeltTunnelCalRpc)
  return false;
#undef DO_
}

void BeltTunnelCalRpc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analogic.BeltTunnelCalRpc)
  // @@protoc_insertion_point(serialize_end:analogic.BeltTunnelCalRpc)
}

::google::protobuf::uint8* BeltTunnelCalRpc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analogic.BeltTunnelCalRpc)
  // @@protoc_insertion_point(serialize_to_array_end:analogic.BeltTunnelCalRpc)
  return target;
}

int BeltTunnelCalRpc::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:analogic.BeltTunnelCalRpc)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BeltTunnelCalRpc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analogic.BeltTunnelCalRpc)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BeltTunnelCalRpc* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BeltTunnelCalRpc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analogic.BeltTunnelCalRpc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analogic.BeltTunnelCalRpc)
    MergeFrom(*source);
  }
}

void BeltTunnelCalRpc::MergeFrom(const BeltTunnelCalRpc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analogic.BeltTunnelCalRpc)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void BeltTunnelCalRpc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analogic.BeltTunnelCalRpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BeltTunnelCalRpc::CopyFrom(const BeltTunnelCalRpc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analogic.BeltTunnelCalRpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeltTunnelCalRpc::IsInitialized() const {

  return true;
}

void BeltTunnelCalRpc::Swap(BeltTunnelCalRpc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BeltTunnelCalRpc::InternalSwap(BeltTunnelCalRpc* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BeltTunnelCalRpc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BeltTunnelCalRpc_descriptor_;
  metadata.reflection = BeltTunnelCalRpc_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BeltTunnelCalRpc

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetBadDetectorMapFilesRpc::kFilePathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetBadDetectorMapFilesRpc::GetBadDetectorMapFilesRpc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analogic.GetBadDetectorMapFilesRpc)
}

void GetBadDetectorMapFilesRpc::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GetBadDetectorMapFilesRpc::GetBadDetectorMapFilesRpc(const GetBadDetectorMapFilesRpc& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analogic.GetBadDetectorMapFilesRpc)
}

void GetBadDetectorMapFilesRpc::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  file_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GetBadDetectorMapFilesRpc::~GetBadDetectorMapFilesRpc() {
  // @@protoc_insertion_point(destructor:analogic.GetBadDetectorMapFilesRpc)
  SharedDtor();
}

void GetBadDetectorMapFilesRpc::SharedDtor() {
  file_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void GetBadDetectorMapFilesRpc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetBadDetectorMapFilesRpc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetBadDetectorMapFilesRpc_descriptor_;
}

const GetBadDetectorMapFilesRpc& GetBadDetectorMapFilesRpc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fCalService_2eproto();
  return *default_instance_;
}

GetBadDetectorMapFilesRpc* GetBadDetectorMapFilesRpc::default_instance_ = NULL;

GetBadDetectorMapFilesRpc* GetBadDetectorMapFilesRpc::New(::google::protobuf::Arena* arena) const {
  GetBadDetectorMapFilesRpc* n = new GetBadDetectorMapFilesRpc;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetBadDetectorMapFilesRpc::Clear() {
// @@protoc_insertion_point(message_clear_start:analogic.GetBadDetectorMapFilesRpc)
  file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GetBadDetectorMapFilesRpc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analogic.GetBadDetectorMapFilesRpc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string file_path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file_path().data(), this->file_path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.GetBadDetectorMapFilesRpc.file_path"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:analogic.GetBadDetectorMapFilesRpc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analogic.GetBadDetectorMapFilesRpc)
  return false;
#undef DO_
}

void GetBadDetectorMapFilesRpc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analogic.GetBadDetectorMapFilesRpc)
  // optional string file_path = 1;
  if (this->file_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_path().data(), this->file_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.GetBadDetectorMapFilesRpc.file_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->file_path(), output);
  }

  // @@protoc_insertion_point(serialize_end:analogic.GetBadDetectorMapFilesRpc)
}

::google::protobuf::uint8* GetBadDetectorMapFilesRpc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analogic.GetBadDetectorMapFilesRpc)
  // optional string file_path = 1;
  if (this->file_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_path().data(), this->file_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.GetBadDetectorMapFilesRpc.file_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_path(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:analogic.GetBadDetectorMapFilesRpc)
  return target;
}

int GetBadDetectorMapFilesRpc::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:analogic.GetBadDetectorMapFilesRpc)
  int total_size = 0;

  // optional string file_path = 1;
  if (this->file_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_path());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetBadDetectorMapFilesRpc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analogic.GetBadDetectorMapFilesRpc)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetBadDetectorMapFilesRpc* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetBadDetectorMapFilesRpc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analogic.GetBadDetectorMapFilesRpc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analogic.GetBadDetectorMapFilesRpc)
    MergeFrom(*source);
  }
}

void GetBadDetectorMapFilesRpc::MergeFrom(const GetBadDetectorMapFilesRpc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analogic.GetBadDetectorMapFilesRpc)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.file_path().size() > 0) {

    file_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_path_);
  }
}

void GetBadDetectorMapFilesRpc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analogic.GetBadDetectorMapFilesRpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBadDetectorMapFilesRpc::CopyFrom(const GetBadDetectorMapFilesRpc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analogic.GetBadDetectorMapFilesRpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBadDetectorMapFilesRpc::IsInitialized() const {

  return true;
}

void GetBadDetectorMapFilesRpc::Swap(GetBadDetectorMapFilesRpc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetBadDetectorMapFilesRpc::InternalSwap(GetBadDetectorMapFilesRpc* other) {
  file_path_.Swap(&other->file_path_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetBadDetectorMapFilesRpc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetBadDetectorMapFilesRpc_descriptor_;
  metadata.reflection = GetBadDetectorMapFilesRpc_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetBadDetectorMapFilesRpc

// optional string file_path = 1;
void GetBadDetectorMapFilesRpc::clear_file_path() {
  file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GetBadDetectorMapFilesRpc::file_path() const {
  // @@protoc_insertion_point(field_get:analogic.GetBadDetectorMapFilesRpc.file_path)
  return file_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetBadDetectorMapFilesRpc::set_file_path(const ::std::string& value) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.GetBadDetectorMapFilesRpc.file_path)
}
 void GetBadDetectorMapFilesRpc::set_file_path(const char* value) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.GetBadDetectorMapFilesRpc.file_path)
}
 void GetBadDetectorMapFilesRpc::set_file_path(const char* value, size_t size) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.GetBadDetectorMapFilesRpc.file_path)
}
 ::std::string* GetBadDetectorMapFilesRpc::mutable_file_path() {
  
  // @@protoc_insertion_point(field_mutable:analogic.GetBadDetectorMapFilesRpc.file_path)
  return file_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GetBadDetectorMapFilesRpc::release_file_path() {
  // @@protoc_insertion_point(field_release:analogic.GetBadDetectorMapFilesRpc.file_path)
  
  return file_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetBadDetectorMapFilesRpc::set_allocated_file_path(::std::string* file_path) {
  if (file_path != NULL) {
    
  } else {
    
  }
  file_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_path);
  // @@protoc_insertion_point(field_set_allocated:analogic.GetBadDetectorMapFilesRpc.file_path)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetBadDetectorManualFileRpc::kFilePathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetBadDetectorManualFileRpc::GetBadDetectorManualFileRpc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analogic.GetBadDetectorManualFileRpc)
}

void GetBadDetectorManualFileRpc::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GetBadDetectorManualFileRpc::GetBadDetectorManualFileRpc(const GetBadDetectorManualFileRpc& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analogic.GetBadDetectorManualFileRpc)
}

void GetBadDetectorManualFileRpc::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  file_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GetBadDetectorManualFileRpc::~GetBadDetectorManualFileRpc() {
  // @@protoc_insertion_point(destructor:analogic.GetBadDetectorManualFileRpc)
  SharedDtor();
}

void GetBadDetectorManualFileRpc::SharedDtor() {
  file_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void GetBadDetectorManualFileRpc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetBadDetectorManualFileRpc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetBadDetectorManualFileRpc_descriptor_;
}

const GetBadDetectorManualFileRpc& GetBadDetectorManualFileRpc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fCalService_2eproto();
  return *default_instance_;
}

GetBadDetectorManualFileRpc* GetBadDetectorManualFileRpc::default_instance_ = NULL;

GetBadDetectorManualFileRpc* GetBadDetectorManualFileRpc::New(::google::protobuf::Arena* arena) const {
  GetBadDetectorManualFileRpc* n = new GetBadDetectorManualFileRpc;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetBadDetectorManualFileRpc::Clear() {
// @@protoc_insertion_point(message_clear_start:analogic.GetBadDetectorManualFileRpc)
  file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GetBadDetectorManualFileRpc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analogic.GetBadDetectorManualFileRpc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string file_path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file_path().data(), this->file_path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.GetBadDetectorManualFileRpc.file_path"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:analogic.GetBadDetectorManualFileRpc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analogic.GetBadDetectorManualFileRpc)
  return false;
#undef DO_
}

void GetBadDetectorManualFileRpc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analogic.GetBadDetectorManualFileRpc)
  // optional string file_path = 1;
  if (this->file_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_path().data(), this->file_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.GetBadDetectorManualFileRpc.file_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->file_path(), output);
  }

  // @@protoc_insertion_point(serialize_end:analogic.GetBadDetectorManualFileRpc)
}

::google::protobuf::uint8* GetBadDetectorManualFileRpc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analogic.GetBadDetectorManualFileRpc)
  // optional string file_path = 1;
  if (this->file_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_path().data(), this->file_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.GetBadDetectorManualFileRpc.file_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_path(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:analogic.GetBadDetectorManualFileRpc)
  return target;
}

int GetBadDetectorManualFileRpc::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:analogic.GetBadDetectorManualFileRpc)
  int total_size = 0;

  // optional string file_path = 1;
  if (this->file_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_path());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetBadDetectorManualFileRpc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analogic.GetBadDetectorManualFileRpc)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetBadDetectorManualFileRpc* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetBadDetectorManualFileRpc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analogic.GetBadDetectorManualFileRpc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analogic.GetBadDetectorManualFileRpc)
    MergeFrom(*source);
  }
}

void GetBadDetectorManualFileRpc::MergeFrom(const GetBadDetectorManualFileRpc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analogic.GetBadDetectorManualFileRpc)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.file_path().size() > 0) {

    file_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_path_);
  }
}

void GetBadDetectorManualFileRpc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analogic.GetBadDetectorManualFileRpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBadDetectorManualFileRpc::CopyFrom(const GetBadDetectorManualFileRpc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analogic.GetBadDetectorManualFileRpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBadDetectorManualFileRpc::IsInitialized() const {

  return true;
}

void GetBadDetectorManualFileRpc::Swap(GetBadDetectorManualFileRpc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetBadDetectorManualFileRpc::InternalSwap(GetBadDetectorManualFileRpc* other) {
  file_path_.Swap(&other->file_path_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetBadDetectorManualFileRpc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetBadDetectorManualFileRpc_descriptor_;
  metadata.reflection = GetBadDetectorManualFileRpc_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetBadDetectorManualFileRpc

// optional string file_path = 1;
void GetBadDetectorManualFileRpc::clear_file_path() {
  file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GetBadDetectorManualFileRpc::file_path() const {
  // @@protoc_insertion_point(field_get:analogic.GetBadDetectorManualFileRpc.file_path)
  return file_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetBadDetectorManualFileRpc::set_file_path(const ::std::string& value) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.GetBadDetectorManualFileRpc.file_path)
}
 void GetBadDetectorManualFileRpc::set_file_path(const char* value) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.GetBadDetectorManualFileRpc.file_path)
}
 void GetBadDetectorManualFileRpc::set_file_path(const char* value, size_t size) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.GetBadDetectorManualFileRpc.file_path)
}
 ::std::string* GetBadDetectorManualFileRpc::mutable_file_path() {
  
  // @@protoc_insertion_point(field_mutable:analogic.GetBadDetectorManualFileRpc.file_path)
  return file_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GetBadDetectorManualFileRpc::release_file_path() {
  // @@protoc_insertion_point(field_release:analogic.GetBadDetectorManualFileRpc.file_path)
  
  return file_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetBadDetectorManualFileRpc::set_allocated_file_path(::std::string* file_path) {
  if (file_path != NULL) {
    
  } else {
    
  }
  file_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_path);
  // @@protoc_insertion_point(field_set_allocated:analogic.GetBadDetectorManualFileRpc.file_path)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateBadDetectorManualFileRpc::kContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateBadDetectorManualFileRpc::UpdateBadDetectorManualFileRpc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analogic.UpdateBadDetectorManualFileRpc)
}

void UpdateBadDetectorManualFileRpc::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

UpdateBadDetectorManualFileRpc::UpdateBadDetectorManualFileRpc(const UpdateBadDetectorManualFileRpc& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analogic.UpdateBadDetectorManualFileRpc)
}

void UpdateBadDetectorManualFileRpc::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

UpdateBadDetectorManualFileRpc::~UpdateBadDetectorManualFileRpc() {
  // @@protoc_insertion_point(destructor:analogic.UpdateBadDetectorManualFileRpc)
  SharedDtor();
}

void UpdateBadDetectorManualFileRpc::SharedDtor() {
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void UpdateBadDetectorManualFileRpc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateBadDetectorManualFileRpc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateBadDetectorManualFileRpc_descriptor_;
}

const UpdateBadDetectorManualFileRpc& UpdateBadDetectorManualFileRpc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fCalService_2eproto();
  return *default_instance_;
}

UpdateBadDetectorManualFileRpc* UpdateBadDetectorManualFileRpc::default_instance_ = NULL;

UpdateBadDetectorManualFileRpc* UpdateBadDetectorManualFileRpc::New(::google::protobuf::Arena* arena) const {
  UpdateBadDetectorManualFileRpc* n = new UpdateBadDetectorManualFileRpc;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpdateBadDetectorManualFileRpc::Clear() {
// @@protoc_insertion_point(message_clear_start:analogic.UpdateBadDetectorManualFileRpc)
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool UpdateBadDetectorManualFileRpc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analogic.UpdateBadDetectorManualFileRpc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string content = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.UpdateBadDetectorManualFileRpc.content"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:analogic.UpdateBadDetectorManualFileRpc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analogic.UpdateBadDetectorManualFileRpc)
  return false;
#undef DO_
}

void UpdateBadDetectorManualFileRpc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analogic.UpdateBadDetectorManualFileRpc)
  // optional string content = 1;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.UpdateBadDetectorManualFileRpc.content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->content(), output);
  }

  // @@protoc_insertion_point(serialize_end:analogic.UpdateBadDetectorManualFileRpc)
}

::google::protobuf::uint8* UpdateBadDetectorManualFileRpc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analogic.UpdateBadDetectorManualFileRpc)
  // optional string content = 1;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.UpdateBadDetectorManualFileRpc.content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->content(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:analogic.UpdateBadDetectorManualFileRpc)
  return target;
}

int UpdateBadDetectorManualFileRpc::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:analogic.UpdateBadDetectorManualFileRpc)
  int total_size = 0;

  // optional string content = 1;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->content());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateBadDetectorManualFileRpc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analogic.UpdateBadDetectorManualFileRpc)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UpdateBadDetectorManualFileRpc* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateBadDetectorManualFileRpc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analogic.UpdateBadDetectorManualFileRpc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analogic.UpdateBadDetectorManualFileRpc)
    MergeFrom(*source);
  }
}

void UpdateBadDetectorManualFileRpc::MergeFrom(const UpdateBadDetectorManualFileRpc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analogic.UpdateBadDetectorManualFileRpc)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
}

void UpdateBadDetectorManualFileRpc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analogic.UpdateBadDetectorManualFileRpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateBadDetectorManualFileRpc::CopyFrom(const UpdateBadDetectorManualFileRpc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analogic.UpdateBadDetectorManualFileRpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateBadDetectorManualFileRpc::IsInitialized() const {

  return true;
}

void UpdateBadDetectorManualFileRpc::Swap(UpdateBadDetectorManualFileRpc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateBadDetectorManualFileRpc::InternalSwap(UpdateBadDetectorManualFileRpc* other) {
  content_.Swap(&other->content_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateBadDetectorManualFileRpc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateBadDetectorManualFileRpc_descriptor_;
  metadata.reflection = UpdateBadDetectorManualFileRpc_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpdateBadDetectorManualFileRpc

// optional string content = 1;
void UpdateBadDetectorManualFileRpc::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& UpdateBadDetectorManualFileRpc::content() const {
  // @@protoc_insertion_point(field_get:analogic.UpdateBadDetectorManualFileRpc.content)
  return content_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UpdateBadDetectorManualFileRpc::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.UpdateBadDetectorManualFileRpc.content)
}
 void UpdateBadDetectorManualFileRpc::set_content(const char* value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.UpdateBadDetectorManualFileRpc.content)
}
 void UpdateBadDetectorManualFileRpc::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.UpdateBadDetectorManualFileRpc.content)
}
 ::std::string* UpdateBadDetectorManualFileRpc::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:analogic.UpdateBadDetectorManualFileRpc.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UpdateBadDetectorManualFileRpc::release_content() {
  // @@protoc_insertion_point(field_release:analogic.UpdateBadDetectorManualFileRpc.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UpdateBadDetectorManualFileRpc::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:analogic.UpdateBadDetectorManualFileRpc.content)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetErrorLogFileRpc::kFilePathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetErrorLogFileRpc::GetErrorLogFileRpc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analogic.GetErrorLogFileRpc)
}

void GetErrorLogFileRpc::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GetErrorLogFileRpc::GetErrorLogFileRpc(const GetErrorLogFileRpc& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analogic.GetErrorLogFileRpc)
}

void GetErrorLogFileRpc::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  file_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GetErrorLogFileRpc::~GetErrorLogFileRpc() {
  // @@protoc_insertion_point(destructor:analogic.GetErrorLogFileRpc)
  SharedDtor();
}

void GetErrorLogFileRpc::SharedDtor() {
  file_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void GetErrorLogFileRpc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetErrorLogFileRpc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetErrorLogFileRpc_descriptor_;
}

const GetErrorLogFileRpc& GetErrorLogFileRpc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fCalService_2eproto();
  return *default_instance_;
}

GetErrorLogFileRpc* GetErrorLogFileRpc::default_instance_ = NULL;

GetErrorLogFileRpc* GetErrorLogFileRpc::New(::google::protobuf::Arena* arena) const {
  GetErrorLogFileRpc* n = new GetErrorLogFileRpc;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetErrorLogFileRpc::Clear() {
// @@protoc_insertion_point(message_clear_start:analogic.GetErrorLogFileRpc)
  file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GetErrorLogFileRpc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analogic.GetErrorLogFileRpc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string file_path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file_path().data(), this->file_path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.GetErrorLogFileRpc.file_path"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:analogic.GetErrorLogFileRpc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analogic.GetErrorLogFileRpc)
  return false;
#undef DO_
}

void GetErrorLogFileRpc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analogic.GetErrorLogFileRpc)
  // optional string file_path = 1;
  if (this->file_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_path().data(), this->file_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.GetErrorLogFileRpc.file_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->file_path(), output);
  }

  // @@protoc_insertion_point(serialize_end:analogic.GetErrorLogFileRpc)
}

::google::protobuf::uint8* GetErrorLogFileRpc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analogic.GetErrorLogFileRpc)
  // optional string file_path = 1;
  if (this->file_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_path().data(), this->file_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.GetErrorLogFileRpc.file_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_path(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:analogic.GetErrorLogFileRpc)
  return target;
}

int GetErrorLogFileRpc::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:analogic.GetErrorLogFileRpc)
  int total_size = 0;

  // optional string file_path = 1;
  if (this->file_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_path());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetErrorLogFileRpc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analogic.GetErrorLogFileRpc)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetErrorLogFileRpc* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetErrorLogFileRpc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analogic.GetErrorLogFileRpc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analogic.GetErrorLogFileRpc)
    MergeFrom(*source);
  }
}

void GetErrorLogFileRpc::MergeFrom(const GetErrorLogFileRpc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analogic.GetErrorLogFileRpc)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.file_path().size() > 0) {

    file_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_path_);
  }
}

void GetErrorLogFileRpc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analogic.GetErrorLogFileRpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetErrorLogFileRpc::CopyFrom(const GetErrorLogFileRpc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analogic.GetErrorLogFileRpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetErrorLogFileRpc::IsInitialized() const {

  return true;
}

void GetErrorLogFileRpc::Swap(GetErrorLogFileRpc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetErrorLogFileRpc::InternalSwap(GetErrorLogFileRpc* other) {
  file_path_.Swap(&other->file_path_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetErrorLogFileRpc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetErrorLogFileRpc_descriptor_;
  metadata.reflection = GetErrorLogFileRpc_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetErrorLogFileRpc

// optional string file_path = 1;
void GetErrorLogFileRpc::clear_file_path() {
  file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GetErrorLogFileRpc::file_path() const {
  // @@protoc_insertion_point(field_get:analogic.GetErrorLogFileRpc.file_path)
  return file_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetErrorLogFileRpc::set_file_path(const ::std::string& value) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.GetErrorLogFileRpc.file_path)
}
 void GetErrorLogFileRpc::set_file_path(const char* value) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.GetErrorLogFileRpc.file_path)
}
 void GetErrorLogFileRpc::set_file_path(const char* value, size_t size) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.GetErrorLogFileRpc.file_path)
}
 ::std::string* GetErrorLogFileRpc::mutable_file_path() {
  
  // @@protoc_insertion_point(field_mutable:analogic.GetErrorLogFileRpc.file_path)
  return file_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GetErrorLogFileRpc::release_file_path() {
  // @@protoc_insertion_point(field_release:analogic.GetErrorLogFileRpc.file_path)
  
  return file_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetErrorLogFileRpc::set_allocated_file_path(::std::string* file_path) {
  if (file_path != NULL) {
    
  } else {
    
  }
  file_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_path);
  // @@protoc_insertion_point(field_set_allocated:analogic.GetErrorLogFileRpc.file_path)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetScannerConfigFileRpc::kFilePathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetScannerConfigFileRpc::GetScannerConfigFileRpc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analogic.GetScannerConfigFileRpc)
}

void GetScannerConfigFileRpc::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GetScannerConfigFileRpc::GetScannerConfigFileRpc(const GetScannerConfigFileRpc& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analogic.GetScannerConfigFileRpc)
}

void GetScannerConfigFileRpc::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  file_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GetScannerConfigFileRpc::~GetScannerConfigFileRpc() {
  // @@protoc_insertion_point(destructor:analogic.GetScannerConfigFileRpc)
  SharedDtor();
}

void GetScannerConfigFileRpc::SharedDtor() {
  file_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void GetScannerConfigFileRpc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetScannerConfigFileRpc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetScannerConfigFileRpc_descriptor_;
}

const GetScannerConfigFileRpc& GetScannerConfigFileRpc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fCalService_2eproto();
  return *default_instance_;
}

GetScannerConfigFileRpc* GetScannerConfigFileRpc::default_instance_ = NULL;

GetScannerConfigFileRpc* GetScannerConfigFileRpc::New(::google::protobuf::Arena* arena) const {
  GetScannerConfigFileRpc* n = new GetScannerConfigFileRpc;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetScannerConfigFileRpc::Clear() {
// @@protoc_insertion_point(message_clear_start:analogic.GetScannerConfigFileRpc)
  file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GetScannerConfigFileRpc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analogic.GetScannerConfigFileRpc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string file_path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file_path().data(), this->file_path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.GetScannerConfigFileRpc.file_path"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:analogic.GetScannerConfigFileRpc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analogic.GetScannerConfigFileRpc)
  return false;
#undef DO_
}

void GetScannerConfigFileRpc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analogic.GetScannerConfigFileRpc)
  // optional string file_path = 1;
  if (this->file_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_path().data(), this->file_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.GetScannerConfigFileRpc.file_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->file_path(), output);
  }

  // @@protoc_insertion_point(serialize_end:analogic.GetScannerConfigFileRpc)
}

::google::protobuf::uint8* GetScannerConfigFileRpc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analogic.GetScannerConfigFileRpc)
  // optional string file_path = 1;
  if (this->file_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_path().data(), this->file_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.GetScannerConfigFileRpc.file_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_path(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:analogic.GetScannerConfigFileRpc)
  return target;
}

int GetScannerConfigFileRpc::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:analogic.GetScannerConfigFileRpc)
  int total_size = 0;

  // optional string file_path = 1;
  if (this->file_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_path());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetScannerConfigFileRpc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analogic.GetScannerConfigFileRpc)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetScannerConfigFileRpc* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetScannerConfigFileRpc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analogic.GetScannerConfigFileRpc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analogic.GetScannerConfigFileRpc)
    MergeFrom(*source);
  }
}

void GetScannerConfigFileRpc::MergeFrom(const GetScannerConfigFileRpc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analogic.GetScannerConfigFileRpc)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.file_path().size() > 0) {

    file_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_path_);
  }
}

void GetScannerConfigFileRpc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analogic.GetScannerConfigFileRpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetScannerConfigFileRpc::CopyFrom(const GetScannerConfigFileRpc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analogic.GetScannerConfigFileRpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetScannerConfigFileRpc::IsInitialized() const {

  return true;
}

void GetScannerConfigFileRpc::Swap(GetScannerConfigFileRpc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetScannerConfigFileRpc::InternalSwap(GetScannerConfigFileRpc* other) {
  file_path_.Swap(&other->file_path_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetScannerConfigFileRpc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetScannerConfigFileRpc_descriptor_;
  metadata.reflection = GetScannerConfigFileRpc_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetScannerConfigFileRpc

// optional string file_path = 1;
void GetScannerConfigFileRpc::clear_file_path() {
  file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GetScannerConfigFileRpc::file_path() const {
  // @@protoc_insertion_point(field_get:analogic.GetScannerConfigFileRpc.file_path)
  return file_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetScannerConfigFileRpc::set_file_path(const ::std::string& value) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.GetScannerConfigFileRpc.file_path)
}
 void GetScannerConfigFileRpc::set_file_path(const char* value) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.GetScannerConfigFileRpc.file_path)
}
 void GetScannerConfigFileRpc::set_file_path(const char* value, size_t size) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.GetScannerConfigFileRpc.file_path)
}
 ::std::string* GetScannerConfigFileRpc::mutable_file_path() {
  
  // @@protoc_insertion_point(field_mutable:analogic.GetScannerConfigFileRpc.file_path)
  return file_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GetScannerConfigFileRpc::release_file_path() {
  // @@protoc_insertion_point(field_release:analogic.GetScannerConfigFileRpc.file_path)
  
  return file_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetScannerConfigFileRpc::set_allocated_file_path(::std::string* file_path) {
  if (file_path != NULL) {
    
  } else {
    
  }
  file_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_path);
  // @@protoc_insertion_point(field_set_allocated:analogic.GetScannerConfigFileRpc.file_path)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateScannerConfigFileRpc::kContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateScannerConfigFileRpc::UpdateScannerConfigFileRpc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analogic.UpdateScannerConfigFileRpc)
}

void UpdateScannerConfigFileRpc::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

UpdateScannerConfigFileRpc::UpdateScannerConfigFileRpc(const UpdateScannerConfigFileRpc& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analogic.UpdateScannerConfigFileRpc)
}

void UpdateScannerConfigFileRpc::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

UpdateScannerConfigFileRpc::~UpdateScannerConfigFileRpc() {
  // @@protoc_insertion_point(destructor:analogic.UpdateScannerConfigFileRpc)
  SharedDtor();
}

void UpdateScannerConfigFileRpc::SharedDtor() {
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void UpdateScannerConfigFileRpc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateScannerConfigFileRpc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateScannerConfigFileRpc_descriptor_;
}

const UpdateScannerConfigFileRpc& UpdateScannerConfigFileRpc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fCalService_2eproto();
  return *default_instance_;
}

UpdateScannerConfigFileRpc* UpdateScannerConfigFileRpc::default_instance_ = NULL;

UpdateScannerConfigFileRpc* UpdateScannerConfigFileRpc::New(::google::protobuf::Arena* arena) const {
  UpdateScannerConfigFileRpc* n = new UpdateScannerConfigFileRpc;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpdateScannerConfigFileRpc::Clear() {
// @@protoc_insertion_point(message_clear_start:analogic.UpdateScannerConfigFileRpc)
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool UpdateScannerConfigFileRpc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analogic.UpdateScannerConfigFileRpc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string content = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.UpdateScannerConfigFileRpc.content"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:analogic.UpdateScannerConfigFileRpc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analogic.UpdateScannerConfigFileRpc)
  return false;
#undef DO_
}

void UpdateScannerConfigFileRpc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analogic.UpdateScannerConfigFileRpc)
  // optional string content = 1;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.UpdateScannerConfigFileRpc.content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->content(), output);
  }

  // @@protoc_insertion_point(serialize_end:analogic.UpdateScannerConfigFileRpc)
}

::google::protobuf::uint8* UpdateScannerConfigFileRpc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analogic.UpdateScannerConfigFileRpc)
  // optional string content = 1;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.UpdateScannerConfigFileRpc.content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->content(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:analogic.UpdateScannerConfigFileRpc)
  return target;
}

int UpdateScannerConfigFileRpc::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:analogic.UpdateScannerConfigFileRpc)
  int total_size = 0;

  // optional string content = 1;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->content());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateScannerConfigFileRpc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analogic.UpdateScannerConfigFileRpc)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UpdateScannerConfigFileRpc* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateScannerConfigFileRpc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analogic.UpdateScannerConfigFileRpc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analogic.UpdateScannerConfigFileRpc)
    MergeFrom(*source);
  }
}

void UpdateScannerConfigFileRpc::MergeFrom(const UpdateScannerConfigFileRpc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analogic.UpdateScannerConfigFileRpc)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
}

void UpdateScannerConfigFileRpc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analogic.UpdateScannerConfigFileRpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateScannerConfigFileRpc::CopyFrom(const UpdateScannerConfigFileRpc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analogic.UpdateScannerConfigFileRpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateScannerConfigFileRpc::IsInitialized() const {

  return true;
}

void UpdateScannerConfigFileRpc::Swap(UpdateScannerConfigFileRpc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateScannerConfigFileRpc::InternalSwap(UpdateScannerConfigFileRpc* other) {
  content_.Swap(&other->content_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateScannerConfigFileRpc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateScannerConfigFileRpc_descriptor_;
  metadata.reflection = UpdateScannerConfigFileRpc_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpdateScannerConfigFileRpc

// optional string content = 1;
void UpdateScannerConfigFileRpc::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& UpdateScannerConfigFileRpc::content() const {
  // @@protoc_insertion_point(field_get:analogic.UpdateScannerConfigFileRpc.content)
  return content_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UpdateScannerConfigFileRpc::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.UpdateScannerConfigFileRpc.content)
}
 void UpdateScannerConfigFileRpc::set_content(const char* value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.UpdateScannerConfigFileRpc.content)
}
 void UpdateScannerConfigFileRpc::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.UpdateScannerConfigFileRpc.content)
}
 ::std::string* UpdateScannerConfigFileRpc::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:analogic.UpdateScannerConfigFileRpc.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UpdateScannerConfigFileRpc::release_content() {
  // @@protoc_insertion_point(field_release:analogic.UpdateScannerConfigFileRpc.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UpdateScannerConfigFileRpc::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:analogic.UpdateScannerConfigFileRpc.content)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* SdswStatus_AIR_CAL_STATE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdswStatus_AIR_CAL_STATE_descriptor_;
}
bool SdswStatus_AIR_CAL_STATE_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SdswStatus_AIR_CAL_STATE SdswStatus::AIR_CAL_IDLE;
const SdswStatus_AIR_CAL_STATE SdswStatus::AIR_CAL_STATE_MIN;
const SdswStatus_AIR_CAL_STATE SdswStatus::AIR_CAL_STATE_MAX;
const int SdswStatus::AIR_CAL_STATE_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SdswStatus_OFFSET_CAL_STATE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdswStatus_OFFSET_CAL_STATE_descriptor_;
}
bool SdswStatus_OFFSET_CAL_STATE_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SdswStatus_OFFSET_CAL_STATE SdswStatus::OFFSET_CAL_IDLE;
const SdswStatus_OFFSET_CAL_STATE SdswStatus::OFFSET_CAL_STATE_MIN;
const SdswStatus_OFFSET_CAL_STATE SdswStatus::OFFSET_CAL_STATE_MAX;
const int SdswStatus::OFFSET_CAL_STATE_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SdswStatus_PIN_CAL_STATE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdswStatus_PIN_CAL_STATE_descriptor_;
}
bool SdswStatus_PIN_CAL_STATE_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SdswStatus_PIN_CAL_STATE SdswStatus::PIN_CAL_IDLE;
const SdswStatus_PIN_CAL_STATE SdswStatus::PIN_CAL_STATE_MIN;
const SdswStatus_PIN_CAL_STATE SdswStatus::PIN_CAL_STATE_MAX;
const int SdswStatus::PIN_CAL_STATE_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SdswStatus_BELT_HEIGHT_CAL_STATE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdswStatus_BELT_HEIGHT_CAL_STATE_descriptor_;
}
bool SdswStatus_BELT_HEIGHT_CAL_STATE_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SdswStatus_BELT_HEIGHT_CAL_STATE SdswStatus::BELT_HEIGHT_IDLE;
const SdswStatus_BELT_HEIGHT_CAL_STATE SdswStatus::BELT_HEIGHT_CAL_STATE_MIN;
const SdswStatus_BELT_HEIGHT_CAL_STATE SdswStatus::BELT_HEIGHT_CAL_STATE_MAX;
const int SdswStatus::BELT_HEIGHT_CAL_STATE_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SdswStatus_SPECTRAL_CAL_STATE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdswStatus_SPECTRAL_CAL_STATE_descriptor_;
}
bool SdswStatus_SPECTRAL_CAL_STATE_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SdswStatus_SPECTRAL_CAL_STATE SdswStatus::SPECTRAL_CAL_IDLE;
const SdswStatus_SPECTRAL_CAL_STATE SdswStatus::SPECTRAL_CAL_STATE_MIN;
const SdswStatus_SPECTRAL_CAL_STATE SdswStatus::SPECTRAL_CAL_STATE_MAX;
const int SdswStatus::SPECTRAL_CAL_STATE_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SdswStatus_RADIATION_SURVEY_STATE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdswStatus_RADIATION_SURVEY_STATE_descriptor_;
}
bool SdswStatus_RADIATION_SURVEY_STATE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SdswStatus_RADIATION_SURVEY_STATE SdswStatus::RADIATION_SURVEY_IDLE;
const SdswStatus_RADIATION_SURVEY_STATE SdswStatus::RADIATION_SURVEY_GO_TO_SCAN;
const SdswStatus_RADIATION_SURVEY_STATE SdswStatus::RADIATION_SURVEY_WAITING_FOR_BAG_TO_BE_PLACED;
const SdswStatus_RADIATION_SURVEY_STATE SdswStatus::RADIATION_SURVEY_WAITING_FOR_BAG_IN_POSITION;
const SdswStatus_RADIATION_SURVEY_STATE SdswStatus::RADIATION_SURVEY_READY;
const SdswStatus_RADIATION_SURVEY_STATE SdswStatus::RADIATION_SURVEY_ERROR;
const SdswStatus_RADIATION_SURVEY_STATE SdswStatus::RADIATION_SURVEY_STATE_MIN;
const SdswStatus_RADIATION_SURVEY_STATE SdswStatus::RADIATION_SURVEY_STATE_MAX;
const int SdswStatus::RADIATION_SURVEY_STATE_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SdswStatus_RADIATION_SURVEY_CANCEL_STATE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdswStatus_RADIATION_SURVEY_CANCEL_STATE_descriptor_;
}
bool SdswStatus_RADIATION_SURVEY_CANCEL_STATE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SdswStatus_RADIATION_SURVEY_CANCEL_STATE SdswStatus::RADIATION_SURVEY_CANCEL_IDLE;
const SdswStatus_RADIATION_SURVEY_CANCEL_STATE SdswStatus::RADIATION_SURVEY_CANCEL_XRAY_OFF;
const SdswStatus_RADIATION_SURVEY_CANCEL_STATE SdswStatus::RADIATION_SURVEY_CANCEL_CONVEYOR_RUN;
const SdswStatus_RADIATION_SURVEY_CANCEL_STATE SdswStatus::RADIATION_SURVEY_CANCEL_COMPLETE;
const SdswStatus_RADIATION_SURVEY_CANCEL_STATE SdswStatus::RADIATION_SURVEY_CANCEL_ERROR;
const SdswStatus_RADIATION_SURVEY_CANCEL_STATE SdswStatus::RADIATION_SURVEY_CANCEL_STATE_MIN;
const SdswStatus_RADIATION_SURVEY_CANCEL_STATE SdswStatus::RADIATION_SURVEY_CANCEL_STATE_MAX;
const int SdswStatus::RADIATION_SURVEY_CANCEL_STATE_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SdswStatus_IMAGE_QUALITY_STATE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdswStatus_IMAGE_QUALITY_STATE_descriptor_;
}
bool SdswStatus_IMAGE_QUALITY_STATE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SdswStatus_IMAGE_QUALITY_STATE SdswStatus::IMAGE_QUALITY_IDLE;
const SdswStatus_IMAGE_QUALITY_STATE SdswStatus::IMAGE_QUALITY_GO_TO_SCAN;
const SdswStatus_IMAGE_QUALITY_STATE SdswStatus::IMAGE_QUALITY_PROCESSING;
const SdswStatus_IMAGE_QUALITY_STATE SdswStatus::IMAGE_QUALITY_PROCESSED;
const SdswStatus_IMAGE_QUALITY_STATE SdswStatus::IMAGE_QUALITY_CONVEYOR_FLUSH;
const SdswStatus_IMAGE_QUALITY_STATE SdswStatus::IMAGE_QUALITY_XRAYS_OFF;
const SdswStatus_IMAGE_QUALITY_STATE SdswStatus::IMAGE_QUALITY_COMPLETE;
const SdswStatus_IMAGE_QUALITY_STATE SdswStatus::IMAGE_QUALITY_ERROR;
const SdswStatus_IMAGE_QUALITY_STATE SdswStatus::IMAGE_QUALITY_STATE_MIN;
const SdswStatus_IMAGE_QUALITY_STATE SdswStatus::IMAGE_QUALITY_STATE_MAX;
const int SdswStatus::IMAGE_QUALITY_STATE_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SdswStatus_IMAGE_QUALITY_CANCEL_STATE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdswStatus_IMAGE_QUALITY_CANCEL_STATE_descriptor_;
}
bool SdswStatus_IMAGE_QUALITY_CANCEL_STATE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SdswStatus_IMAGE_QUALITY_CANCEL_STATE SdswStatus::IMAGE_QUALITY_CANCEL_XRAY_OFF;
const SdswStatus_IMAGE_QUALITY_CANCEL_STATE SdswStatus::IMAGE_QUALITY_CANCEL_CONVEYOR_STOP;
const SdswStatus_IMAGE_QUALITY_CANCEL_STATE SdswStatus::IMAGE_QUALITY_CANCEL_ERROR;
const SdswStatus_IMAGE_QUALITY_CANCEL_STATE SdswStatus::IMAGE_QUALITY_CANCEL_STATE_MIN;
const SdswStatus_IMAGE_QUALITY_CANCEL_STATE SdswStatus::IMAGE_QUALITY_CANCEL_STATE_MAX;
const int SdswStatus::IMAGE_QUALITY_CANCEL_STATE_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SdswStatus_BASE_SEQ_1_STATE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdswStatus_BASE_SEQ_1_STATE_descriptor_;
}
bool SdswStatus_BASE_SEQ_1_STATE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SdswStatus_BASE_SEQ_1_STATE SdswStatus::BASE_SEQ_1_IDLE;
const SdswStatus_BASE_SEQ_1_STATE SdswStatus::BASE_SEQ_1_GANTRY_STARTUP;
const SdswStatus_BASE_SEQ_1_STATE SdswStatus::BASE_SEQ_1_XRAY_STARTUP;
const SdswStatus_BASE_SEQ_1_STATE SdswStatus::BASE_SEQ_1_CONVEYOR_CONTROL;
const SdswStatus_BASE_SEQ_1_STATE SdswStatus::BASE_SEQ_1_PROCESSING;
const SdswStatus_BASE_SEQ_1_STATE SdswStatus::BASE_SEQ_1_PROCESSED;
const SdswStatus_BASE_SEQ_1_STATE SdswStatus::BASE_SEQ_1_ERROR;
const SdswStatus_BASE_SEQ_1_STATE SdswStatus::BASE_SEQ_1_STATE_MIN;
const SdswStatus_BASE_SEQ_1_STATE SdswStatus::BASE_SEQ_1_STATE_MAX;
const int SdswStatus::BASE_SEQ_1_STATE_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SdswStatus_ZEE_PIN_SPECTRAL_CAL_STATE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdswStatus_ZEE_PIN_SPECTRAL_CAL_STATE_descriptor_;
}
bool SdswStatus_ZEE_PIN_SPECTRAL_CAL_STATE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SdswStatus_ZEE_PIN_SPECTRAL_CAL_STATE SdswStatus::ZEE_PIN_SPECTRAL_CAL_CLEAR_ERROR;
const SdswStatus_ZEE_PIN_SPECTRAL_CAL_STATE SdswStatus::ZEE_PIN_SPECTRAL_CAL_GANTRY_ON;
const SdswStatus_ZEE_PIN_SPECTRAL_CAL_STATE SdswStatus::ZEE_PIN_SPECTRAL_CAL_CONVEYOR_STOP;
const SdswStatus_ZEE_PIN_SPECTRAL_CAL_STATE SdswStatus::ZEE_PIN_SPECTRAL_CAL_XRAY_OFF_1;
const SdswStatus_ZEE_PIN_SPECTRAL_CAL_STATE SdswStatus::ZEE_PIN_SPECTRAL_CAL_RAW_DATA_COLLECT_1;
const SdswStatus_ZEE_PIN_SPECTRAL_CAL_STATE SdswStatus::ZEE_PIN_SPECTRAL_CAL_XRAY_ON_1;
const SdswStatus_ZEE_PIN_SPECTRAL_CAL_STATE SdswStatus::ZEE_PIN_SPECTRAL_CAL_RAW_DATA_COLLECT_2;
const SdswStatus_ZEE_PIN_SPECTRAL_CAL_STATE SdswStatus::ZEE_PIN_SPECTRAL_CAL_XRAY_OFF_2;
const SdswStatus_ZEE_PIN_SPECTRAL_CAL_STATE SdswStatus::ZEE_PIN_SPECTRAL_CAL_WAIT_FOR_PLACEMENT;
const SdswStatus_ZEE_PIN_SPECTRAL_CAL_STATE SdswStatus::ZEE_PIN_SPECTRAL_CAL_XRAY_ON_2;
const SdswStatus_ZEE_PIN_SPECTRAL_CAL_STATE SdswStatus::ZEE_PIN_SPECTRAL_CAL_RAW_DATA_COLLECT_3;
const SdswStatus_ZEE_PIN_SPECTRAL_CAL_STATE SdswStatus::ZEE_PIN_SPECTRAL_CAL_ANALYZE;
const SdswStatus_ZEE_PIN_SPECTRAL_CAL_STATE SdswStatus::ZEE_PIN_SPECTRAL_CAL_COMPLETE;
const SdswStatus_ZEE_PIN_SPECTRAL_CAL_STATE SdswStatus::ZEE_PIN_SPECTRAL_CAL_ERROR;
const SdswStatus_ZEE_PIN_SPECTRAL_CAL_STATE SdswStatus::ZEE_PIN_SPECTRAL_CAL_STATE_MIN;
const SdswStatus_ZEE_PIN_SPECTRAL_CAL_STATE SdswStatus::ZEE_PIN_SPECTRAL_CAL_STATE_MAX;
const int SdswStatus::ZEE_PIN_SPECTRAL_CAL_STATE_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SdswStatus_CONV_STOP_XRAY_MIN_STATE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdswStatus_CONV_STOP_XRAY_MIN_STATE_descriptor_;
}
bool SdswStatus_CONV_STOP_XRAY_MIN_STATE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SdswStatus_CONV_STOP_XRAY_MIN_STATE SdswStatus::CONV_STOP_XRAY_MIN_CONVEYOR_STOP;
const SdswStatus_CONV_STOP_XRAY_MIN_STATE SdswStatus::CONV_STOP_XRAY_MIN_XRAY_MINIMIZE;
const SdswStatus_CONV_STOP_XRAY_MIN_STATE SdswStatus::CONV_STOP_XRAY_MIN_COMPLETE;
const SdswStatus_CONV_STOP_XRAY_MIN_STATE SdswStatus::CONV_STOP_XRAY_MIN_ERROR;
const SdswStatus_CONV_STOP_XRAY_MIN_STATE SdswStatus::CONV_STOP_XRAY_MIN_STATE_MIN;
const SdswStatus_CONV_STOP_XRAY_MIN_STATE SdswStatus::CONV_STOP_XRAY_MIN_STATE_MAX;
const int SdswStatus::CONV_STOP_XRAY_MIN_STATE_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SdswStatus_XMAX_CONVEYOR_RUN_STATE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdswStatus_XMAX_CONVEYOR_RUN_STATE_descriptor_;
}
bool SdswStatus_XMAX_CONVEYOR_RUN_STATE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SdswStatus_XMAX_CONVEYOR_RUN_STATE SdswStatus::XRAY_MAX_CONV_RUN_XRAY_MAXIMIZE;
const SdswStatus_XMAX_CONVEYOR_RUN_STATE SdswStatus::XRAY_MAX_CONV_RUN_CONVEYOR_RUN;
const SdswStatus_XMAX_CONVEYOR_RUN_STATE SdswStatus::XRAY_MAX_CONV_RUN_COMPLETE;
const SdswStatus_XMAX_CONVEYOR_RUN_STATE SdswStatus::XRAY_MAX_CONV_RUN_ERROR;
const SdswStatus_XMAX_CONVEYOR_RUN_STATE SdswStatus::XMAX_CONVEYOR_RUN_STATE_MIN;
const SdswStatus_XMAX_CONVEYOR_RUN_STATE SdswStatus::XMAX_CONVEYOR_RUN_STATE_MAX;
const int SdswStatus::XMAX_CONVEYOR_RUN_STATE_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SdswStatus_CONV_STOP_XRAY_MIN_STATE_CONV_RUN_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdswStatus_CONV_STOP_XRAY_MIN_STATE_CONV_RUN_descriptor_;
}
bool SdswStatus_CONV_STOP_XRAY_MIN_STATE_CONV_RUN_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SdswStatus_CONV_STOP_XRAY_MIN_STATE_CONV_RUN SdswStatus::XRAY_MIN_AND_CONV_STOP;
const SdswStatus_CONV_STOP_XRAY_MIN_STATE_CONV_RUN SdswStatus::CONV_RUN_POST_XRAY_MIN;
const SdswStatus_CONV_STOP_XRAY_MIN_STATE_CONV_RUN SdswStatus::CONV_STOP_XRAY_MIN_CONV_RUN_COMPLETE;
const SdswStatus_CONV_STOP_XRAY_MIN_STATE_CONV_RUN SdswStatus::CONV_STOP_XRAY_MIN_CONV_RUN_ERROR;
const SdswStatus_CONV_STOP_XRAY_MIN_STATE_CONV_RUN SdswStatus::CONV_STOP_XRAY_MIN_STATE_CONV_RUN_MIN;
const SdswStatus_CONV_STOP_XRAY_MIN_STATE_CONV_RUN SdswStatus::CONV_STOP_XRAY_MIN_STATE_CONV_RUN_MAX;
const int SdswStatus::CONV_STOP_XRAY_MIN_STATE_CONV_RUN_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SdswStatus_BELT_TUNNEL_CAL_STATE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdswStatus_BELT_TUNNEL_CAL_STATE_descriptor_;
}
bool SdswStatus_BELT_TUNNEL_CAL_STATE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SdswStatus_BELT_TUNNEL_CAL_STATE SdswStatus::BELT_TUNNEL_CAL_CLEAR_ERROR;
const SdswStatus_BELT_TUNNEL_CAL_STATE SdswStatus::BELT_TUNNEL_CAL_GANTRY_ON;
const SdswStatus_BELT_TUNNEL_CAL_STATE SdswStatus::BELT_TUNNEL_CAL_CONVEYOR_STOP;
const SdswStatus_BELT_TUNNEL_CAL_STATE SdswStatus::BELT_TUNNEL_CAL_XRAY_OFF_1;
const SdswStatus_BELT_TUNNEL_CAL_STATE SdswStatus::BELT_TUNNEL_CAL_RAW_DATA_COLLECT_OFFSET;
const SdswStatus_BELT_TUNNEL_CAL_STATE SdswStatus::BELT_TUNNEL_CAL_XRAY_ON;
const SdswStatus_BELT_TUNNEL_CAL_STATE SdswStatus::BELT_TUNNEL_CAL_RAW_DATA_COLLECT_AIR;
const SdswStatus_BELT_TUNNEL_CAL_STATE SdswStatus::BELT_TUNNEL_CAL_XRAY_OFF_2;
const SdswStatus_BELT_TUNNEL_CAL_STATE SdswStatus::BELT_TUNNEL_CAL_ANALYZE;
const SdswStatus_BELT_TUNNEL_CAL_STATE SdswStatus::BELT_TUNNEL_CAL_COMPLETE;
const SdswStatus_BELT_TUNNEL_CAL_STATE SdswStatus::BELT_TUNNEL_CAL_ERROR;
const SdswStatus_BELT_TUNNEL_CAL_STATE SdswStatus::BELT_TUNNEL_CAL_STATE_MIN;
const SdswStatus_BELT_TUNNEL_CAL_STATE SdswStatus::BELT_TUNNEL_CAL_STATE_MAX;
const int SdswStatus::BELT_TUNNEL_CAL_STATE_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SdswStatus::kIdFieldNumber;
const int SdswStatus::kCurrentStepFieldNumber;
const int SdswStatus::kNumberOfStepsFieldNumber;
const int SdswStatus::kTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SdswStatus::SdswStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analogic.SdswStatus)
}

void SdswStatus::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SdswStatus::SdswStatus(const SdswStatus& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analogic.SdswStatus)
}

void SdswStatus::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  current_step_ = 0u;
  number_of_steps_ = 0u;
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SdswStatus::~SdswStatus() {
  // @@protoc_insertion_point(destructor:analogic.SdswStatus)
  SharedDtor();
}

void SdswStatus::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SdswStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SdswStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SdswStatus_descriptor_;
}

const SdswStatus& SdswStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fCalService_2eproto();
  return *default_instance_;
}

SdswStatus* SdswStatus::default_instance_ = NULL;

SdswStatus* SdswStatus::New(::google::protobuf::Arena* arena) const {
  SdswStatus* n = new SdswStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SdswStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:analogic.SdswStatus)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SdswStatus, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SdswStatus*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, current_step_);
  number_of_steps_ = 0u;
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool SdswStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analogic.SdswStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .analogic.ancp00.ScannerControlRpcSeq.SCANNER_CONTROL_RPC_SEQ_ID id = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_id(static_cast< ::analogic::ancp00::ScannerControlRpcSeq_SCANNER_CONTROL_RPC_SEQ_ID >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_current_step;
        break;
      }

      // optional uint32 current_step = 2;
      case 2: {
        if (tag == 16) {
         parse_current_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &current_step_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_number_of_steps;
        break;
      }

      // optional uint32 number_of_steps = 3;
      case 3: {
        if (tag == 24) {
         parse_number_of_steps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_steps_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_text;
        break;
      }

      // optional string text = 4;
      case 4: {
        if (tag == 34) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.SdswStatus.text"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:analogic.SdswStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analogic.SdswStatus)
  return false;
#undef DO_
}

void SdswStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analogic.SdswStatus)
  // optional .analogic.ancp00.ScannerControlRpcSeq.SCANNER_CONTROL_RPC_SEQ_ID id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->id(), output);
  }

  // optional uint32 current_step = 2;
  if (this->current_step() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->current_step(), output);
  }

  // optional uint32 number_of_steps = 3;
  if (this->number_of_steps() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->number_of_steps(), output);
  }

  // optional string text = 4;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.SdswStatus.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->text(), output);
  }

  // @@protoc_insertion_point(serialize_end:analogic.SdswStatus)
}

::google::protobuf::uint8* SdswStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analogic.SdswStatus)
  // optional .analogic.ancp00.ScannerControlRpcSeq.SCANNER_CONTROL_RPC_SEQ_ID id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->id(), target);
  }

  // optional uint32 current_step = 2;
  if (this->current_step() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->current_step(), target);
  }

  // optional uint32 number_of_steps = 3;
  if (this->number_of_steps() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->number_of_steps(), target);
  }

  // optional string text = 4;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.SdswStatus.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->text(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:analogic.SdswStatus)
  return target;
}

int SdswStatus::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:analogic.SdswStatus)
  int total_size = 0;

  // optional .analogic.ancp00.ScannerControlRpcSeq.SCANNER_CONTROL_RPC_SEQ_ID id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->id());
  }

  // optional uint32 current_step = 2;
  if (this->current_step() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->current_step());
  }

  // optional uint32 number_of_steps = 3;
  if (this->number_of_steps() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->number_of_steps());
  }

  // optional string text = 4;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SdswStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analogic.SdswStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SdswStatus* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SdswStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analogic.SdswStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analogic.SdswStatus)
    MergeFrom(*source);
  }
}

void SdswStatus::MergeFrom(const SdswStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analogic.SdswStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.current_step() != 0) {
    set_current_step(from.current_step());
  }
  if (from.number_of_steps() != 0) {
    set_number_of_steps(from.number_of_steps());
  }
  if (from.text().size() > 0) {

    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
}

void SdswStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analogic.SdswStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdswStatus::CopyFrom(const SdswStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analogic.SdswStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdswStatus::IsInitialized() const {

  return true;
}

void SdswStatus::Swap(SdswStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SdswStatus::InternalSwap(SdswStatus* other) {
  std::swap(id_, other->id_);
  std::swap(current_step_, other->current_step_);
  std::swap(number_of_steps_, other->number_of_steps_);
  text_.Swap(&other->text_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SdswStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SdswStatus_descriptor_;
  metadata.reflection = SdswStatus_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SdswStatus

// optional .analogic.ancp00.ScannerControlRpcSeq.SCANNER_CONTROL_RPC_SEQ_ID id = 1;
void SdswStatus::clear_id() {
  id_ = 0;
}
 ::analogic::ancp00::ScannerControlRpcSeq_SCANNER_CONTROL_RPC_SEQ_ID SdswStatus::id() const {
  // @@protoc_insertion_point(field_get:analogic.SdswStatus.id)
  return static_cast< ::analogic::ancp00::ScannerControlRpcSeq_SCANNER_CONTROL_RPC_SEQ_ID >(id_);
}
 void SdswStatus::set_id(::analogic::ancp00::ScannerControlRpcSeq_SCANNER_CONTROL_RPC_SEQ_ID value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:analogic.SdswStatus.id)
}

// optional uint32 current_step = 2;
void SdswStatus::clear_current_step() {
  current_step_ = 0u;
}
 ::google::protobuf::uint32 SdswStatus::current_step() const {
  // @@protoc_insertion_point(field_get:analogic.SdswStatus.current_step)
  return current_step_;
}
 void SdswStatus::set_current_step(::google::protobuf::uint32 value) {
  
  current_step_ = value;
  // @@protoc_insertion_point(field_set:analogic.SdswStatus.current_step)
}

// optional uint32 number_of_steps = 3;
void SdswStatus::clear_number_of_steps() {
  number_of_steps_ = 0u;
}
 ::google::protobuf::uint32 SdswStatus::number_of_steps() const {
  // @@protoc_insertion_point(field_get:analogic.SdswStatus.number_of_steps)
  return number_of_steps_;
}
 void SdswStatus::set_number_of_steps(::google::protobuf::uint32 value) {
  
  number_of_steps_ = value;
  // @@protoc_insertion_point(field_set:analogic.SdswStatus.number_of_steps)
}

// optional string text = 4;
void SdswStatus::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SdswStatus::text() const {
  // @@protoc_insertion_point(field_get:analogic.SdswStatus.text)
  return text_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SdswStatus::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.SdswStatus.text)
}
 void SdswStatus::set_text(const char* value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.SdswStatus.text)
}
 void SdswStatus::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.SdswStatus.text)
}
 ::std::string* SdswStatus::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:analogic.SdswStatus.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SdswStatus::release_text() {
  // @@protoc_insertion_point(field_release:analogic.SdswStatus.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SdswStatus::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:analogic.SdswStatus.text)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetImageCalibrationFilesRpc::kFilePathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetImageCalibrationFilesRpc::GetImageCalibrationFilesRpc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analogic.GetImageCalibrationFilesRpc)
}

void GetImageCalibrationFilesRpc::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GetImageCalibrationFilesRpc::GetImageCalibrationFilesRpc(const GetImageCalibrationFilesRpc& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analogic.GetImageCalibrationFilesRpc)
}

void GetImageCalibrationFilesRpc::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  file_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GetImageCalibrationFilesRpc::~GetImageCalibrationFilesRpc() {
  // @@protoc_insertion_point(destructor:analogic.GetImageCalibrationFilesRpc)
  SharedDtor();
}

void GetImageCalibrationFilesRpc::SharedDtor() {
  file_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void GetImageCalibrationFilesRpc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetImageCalibrationFilesRpc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetImageCalibrationFilesRpc_descriptor_;
}

const GetImageCalibrationFilesRpc& GetImageCalibrationFilesRpc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fCalService_2eproto();
  return *default_instance_;
}

GetImageCalibrationFilesRpc* GetImageCalibrationFilesRpc::default_instance_ = NULL;

GetImageCalibrationFilesRpc* GetImageCalibrationFilesRpc::New(::google::protobuf::Arena* arena) const {
  GetImageCalibrationFilesRpc* n = new GetImageCalibrationFilesRpc;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetImageCalibrationFilesRpc::Clear() {
// @@protoc_insertion_point(message_clear_start:analogic.GetImageCalibrationFilesRpc)
  file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GetImageCalibrationFilesRpc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analogic.GetImageCalibrationFilesRpc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string file_path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file_path().data(), this->file_path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.GetImageCalibrationFilesRpc.file_path"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:analogic.GetImageCalibrationFilesRpc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analogic.GetImageCalibrationFilesRpc)
  return false;
#undef DO_
}

void GetImageCalibrationFilesRpc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analogic.GetImageCalibrationFilesRpc)
  // optional string file_path = 1;
  if (this->file_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_path().data(), this->file_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.GetImageCalibrationFilesRpc.file_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->file_path(), output);
  }

  // @@protoc_insertion_point(serialize_end:analogic.GetImageCalibrationFilesRpc)
}

::google::protobuf::uint8* GetImageCalibrationFilesRpc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analogic.GetImageCalibrationFilesRpc)
  // optional string file_path = 1;
  if (this->file_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_path().data(), this->file_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.GetImageCalibrationFilesRpc.file_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_path(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:analogic.GetImageCalibrationFilesRpc)
  return target;
}

int GetImageCalibrationFilesRpc::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:analogic.GetImageCalibrationFilesRpc)
  int total_size = 0;

  // optional string file_path = 1;
  if (this->file_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_path());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetImageCalibrationFilesRpc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analogic.GetImageCalibrationFilesRpc)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetImageCalibrationFilesRpc* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetImageCalibrationFilesRpc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analogic.GetImageCalibrationFilesRpc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analogic.GetImageCalibrationFilesRpc)
    MergeFrom(*source);
  }
}

void GetImageCalibrationFilesRpc::MergeFrom(const GetImageCalibrationFilesRpc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analogic.GetImageCalibrationFilesRpc)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.file_path().size() > 0) {

    file_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_path_);
  }
}

void GetImageCalibrationFilesRpc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analogic.GetImageCalibrationFilesRpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetImageCalibrationFilesRpc::CopyFrom(const GetImageCalibrationFilesRpc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analogic.GetImageCalibrationFilesRpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetImageCalibrationFilesRpc::IsInitialized() const {

  return true;
}

void GetImageCalibrationFilesRpc::Swap(GetImageCalibrationFilesRpc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetImageCalibrationFilesRpc::InternalSwap(GetImageCalibrationFilesRpc* other) {
  file_path_.Swap(&other->file_path_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetImageCalibrationFilesRpc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetImageCalibrationFilesRpc_descriptor_;
  metadata.reflection = GetImageCalibrationFilesRpc_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetImageCalibrationFilesRpc

// optional string file_path = 1;
void GetImageCalibrationFilesRpc::clear_file_path() {
  file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GetImageCalibrationFilesRpc::file_path() const {
  // @@protoc_insertion_point(field_get:analogic.GetImageCalibrationFilesRpc.file_path)
  return file_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetImageCalibrationFilesRpc::set_file_path(const ::std::string& value) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.GetImageCalibrationFilesRpc.file_path)
}
 void GetImageCalibrationFilesRpc::set_file_path(const char* value) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.GetImageCalibrationFilesRpc.file_path)
}
 void GetImageCalibrationFilesRpc::set_file_path(const char* value, size_t size) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.GetImageCalibrationFilesRpc.file_path)
}
 ::std::string* GetImageCalibrationFilesRpc::mutable_file_path() {
  
  // @@protoc_insertion_point(field_mutable:analogic.GetImageCalibrationFilesRpc.file_path)
  return file_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GetImageCalibrationFilesRpc::release_file_path() {
  // @@protoc_insertion_point(field_release:analogic.GetImageCalibrationFilesRpc.file_path)
  
  return file_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetImageCalibrationFilesRpc::set_allocated_file_path(::std::string* file_path) {
  if (file_path != NULL) {
    
  } else {
    
  }
  file_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_path);
  // @@protoc_insertion_point(field_set_allocated:analogic.GetImageCalibrationFilesRpc.file_path)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RunImageCalibrationRpc::kFilename1FieldNumber;
const int RunImageCalibrationRpc::kFilename2FieldNumber;
const int RunImageCalibrationRpc::kFilename3FieldNumber;
const int RunImageCalibrationRpc::kFilename4FieldNumber;
const int RunImageCalibrationRpc::kFilename5FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RunImageCalibrationRpc::RunImageCalibrationRpc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analogic.RunImageCalibrationRpc)
}

void RunImageCalibrationRpc::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RunImageCalibrationRpc::RunImageCalibrationRpc(const RunImageCalibrationRpc& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analogic.RunImageCalibrationRpc)
}

void RunImageCalibrationRpc::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  filename1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename3_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename4_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RunImageCalibrationRpc::~RunImageCalibrationRpc() {
  // @@protoc_insertion_point(destructor:analogic.RunImageCalibrationRpc)
  SharedDtor();
}

void RunImageCalibrationRpc::SharedDtor() {
  filename1_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename2_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename3_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename4_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename5_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void RunImageCalibrationRpc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RunImageCalibrationRpc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RunImageCalibrationRpc_descriptor_;
}

const RunImageCalibrationRpc& RunImageCalibrationRpc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fCalService_2eproto();
  return *default_instance_;
}

RunImageCalibrationRpc* RunImageCalibrationRpc::default_instance_ = NULL;

RunImageCalibrationRpc* RunImageCalibrationRpc::New(::google::protobuf::Arena* arena) const {
  RunImageCalibrationRpc* n = new RunImageCalibrationRpc;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RunImageCalibrationRpc::Clear() {
// @@protoc_insertion_point(message_clear_start:analogic.RunImageCalibrationRpc)
  filename1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename3_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename4_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RunImageCalibrationRpc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analogic.RunImageCalibrationRpc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string filename1 = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename1()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filename1().data(), this->filename1().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.RunImageCalibrationRpc.filename1"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_filename2;
        break;
      }

      // optional string filename2 = 2;
      case 2: {
        if (tag == 18) {
         parse_filename2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename2()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filename2().data(), this->filename2().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.RunImageCalibrationRpc.filename2"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_filename3;
        break;
      }

      // optional string filename3 = 3;
      case 3: {
        if (tag == 26) {
         parse_filename3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename3()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filename3().data(), this->filename3().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.RunImageCalibrationRpc.filename3"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_filename4;
        break;
      }

      // optional string filename4 = 4;
      case 4: {
        if (tag == 34) {
         parse_filename4:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename4()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filename4().data(), this->filename4().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.RunImageCalibrationRpc.filename4"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_filename5;
        break;
      }

      // optional string filename5 = 5;
      case 5: {
        if (tag == 42) {
         parse_filename5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename5()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filename5().data(), this->filename5().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.RunImageCalibrationRpc.filename5"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:analogic.RunImageCalibrationRpc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analogic.RunImageCalibrationRpc)
  return false;
#undef DO_
}

void RunImageCalibrationRpc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analogic.RunImageCalibrationRpc)
  // optional string filename1 = 1;
  if (this->filename1().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename1().data(), this->filename1().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.RunImageCalibrationRpc.filename1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->filename1(), output);
  }

  // optional string filename2 = 2;
  if (this->filename2().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename2().data(), this->filename2().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.RunImageCalibrationRpc.filename2");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->filename2(), output);
  }

  // optional string filename3 = 3;
  if (this->filename3().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename3().data(), this->filename3().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.RunImageCalibrationRpc.filename3");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->filename3(), output);
  }

  // optional string filename4 = 4;
  if (this->filename4().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename4().data(), this->filename4().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.RunImageCalibrationRpc.filename4");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->filename4(), output);
  }

  // optional string filename5 = 5;
  if (this->filename5().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename5().data(), this->filename5().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.RunImageCalibrationRpc.filename5");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->filename5(), output);
  }

  // @@protoc_insertion_point(serialize_end:analogic.RunImageCalibrationRpc)
}

::google::protobuf::uint8* RunImageCalibrationRpc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analogic.RunImageCalibrationRpc)
  // optional string filename1 = 1;
  if (this->filename1().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename1().data(), this->filename1().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.RunImageCalibrationRpc.filename1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filename1(), target);
  }

  // optional string filename2 = 2;
  if (this->filename2().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename2().data(), this->filename2().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.RunImageCalibrationRpc.filename2");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filename2(), target);
  }

  // optional string filename3 = 3;
  if (this->filename3().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename3().data(), this->filename3().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.RunImageCalibrationRpc.filename3");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->filename3(), target);
  }

  // optional string filename4 = 4;
  if (this->filename4().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename4().data(), this->filename4().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.RunImageCalibrationRpc.filename4");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->filename4(), target);
  }

  // optional string filename5 = 5;
  if (this->filename5().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename5().data(), this->filename5().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.RunImageCalibrationRpc.filename5");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->filename5(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:analogic.RunImageCalibrationRpc)
  return target;
}

int RunImageCalibrationRpc::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:analogic.RunImageCalibrationRpc)
  int total_size = 0;

  // optional string filename1 = 1;
  if (this->filename1().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename1());
  }

  // optional string filename2 = 2;
  if (this->filename2().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename2());
  }

  // optional string filename3 = 3;
  if (this->filename3().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename3());
  }

  // optional string filename4 = 4;
  if (this->filename4().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename4());
  }

  // optional string filename5 = 5;
  if (this->filename5().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename5());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RunImageCalibrationRpc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analogic.RunImageCalibrationRpc)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RunImageCalibrationRpc* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RunImageCalibrationRpc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analogic.RunImageCalibrationRpc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analogic.RunImageCalibrationRpc)
    MergeFrom(*source);
  }
}

void RunImageCalibrationRpc::MergeFrom(const RunImageCalibrationRpc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analogic.RunImageCalibrationRpc)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.filename1().size() > 0) {

    filename1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename1_);
  }
  if (from.filename2().size() > 0) {

    filename2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename2_);
  }
  if (from.filename3().size() > 0) {

    filename3_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename3_);
  }
  if (from.filename4().size() > 0) {

    filename4_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename4_);
  }
  if (from.filename5().size() > 0) {

    filename5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename5_);
  }
}

void RunImageCalibrationRpc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analogic.RunImageCalibrationRpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunImageCalibrationRpc::CopyFrom(const RunImageCalibrationRpc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analogic.RunImageCalibrationRpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunImageCalibrationRpc::IsInitialized() const {

  return true;
}

void RunImageCalibrationRpc::Swap(RunImageCalibrationRpc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RunImageCalibrationRpc::InternalSwap(RunImageCalibrationRpc* other) {
  filename1_.Swap(&other->filename1_);
  filename2_.Swap(&other->filename2_);
  filename3_.Swap(&other->filename3_);
  filename4_.Swap(&other->filename4_);
  filename5_.Swap(&other->filename5_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RunImageCalibrationRpc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RunImageCalibrationRpc_descriptor_;
  metadata.reflection = RunImageCalibrationRpc_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RunImageCalibrationRpc

// optional string filename1 = 1;
void RunImageCalibrationRpc::clear_filename1() {
  filename1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RunImageCalibrationRpc::filename1() const {
  // @@protoc_insertion_point(field_get:analogic.RunImageCalibrationRpc.filename1)
  return filename1_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RunImageCalibrationRpc::set_filename1(const ::std::string& value) {
  
  filename1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.RunImageCalibrationRpc.filename1)
}
 void RunImageCalibrationRpc::set_filename1(const char* value) {
  
  filename1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.RunImageCalibrationRpc.filename1)
}
 void RunImageCalibrationRpc::set_filename1(const char* value, size_t size) {
  
  filename1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.RunImageCalibrationRpc.filename1)
}
 ::std::string* RunImageCalibrationRpc::mutable_filename1() {
  
  // @@protoc_insertion_point(field_mutable:analogic.RunImageCalibrationRpc.filename1)
  return filename1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RunImageCalibrationRpc::release_filename1() {
  // @@protoc_insertion_point(field_release:analogic.RunImageCalibrationRpc.filename1)
  
  return filename1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RunImageCalibrationRpc::set_allocated_filename1(::std::string* filename1) {
  if (filename1 != NULL) {
    
  } else {
    
  }
  filename1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename1);
  // @@protoc_insertion_point(field_set_allocated:analogic.RunImageCalibrationRpc.filename1)
}

// optional string filename2 = 2;
void RunImageCalibrationRpc::clear_filename2() {
  filename2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RunImageCalibrationRpc::filename2() const {
  // @@protoc_insertion_point(field_get:analogic.RunImageCalibrationRpc.filename2)
  return filename2_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RunImageCalibrationRpc::set_filename2(const ::std::string& value) {
  
  filename2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.RunImageCalibrationRpc.filename2)
}
 void RunImageCalibrationRpc::set_filename2(const char* value) {
  
  filename2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.RunImageCalibrationRpc.filename2)
}
 void RunImageCalibrationRpc::set_filename2(const char* value, size_t size) {
  
  filename2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.RunImageCalibrationRpc.filename2)
}
 ::std::string* RunImageCalibrationRpc::mutable_filename2() {
  
  // @@protoc_insertion_point(field_mutable:analogic.RunImageCalibrationRpc.filename2)
  return filename2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RunImageCalibrationRpc::release_filename2() {
  // @@protoc_insertion_point(field_release:analogic.RunImageCalibrationRpc.filename2)
  
  return filename2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RunImageCalibrationRpc::set_allocated_filename2(::std::string* filename2) {
  if (filename2 != NULL) {
    
  } else {
    
  }
  filename2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename2);
  // @@protoc_insertion_point(field_set_allocated:analogic.RunImageCalibrationRpc.filename2)
}

// optional string filename3 = 3;
void RunImageCalibrationRpc::clear_filename3() {
  filename3_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RunImageCalibrationRpc::filename3() const {
  // @@protoc_insertion_point(field_get:analogic.RunImageCalibrationRpc.filename3)
  return filename3_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RunImageCalibrationRpc::set_filename3(const ::std::string& value) {
  
  filename3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.RunImageCalibrationRpc.filename3)
}
 void RunImageCalibrationRpc::set_filename3(const char* value) {
  
  filename3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.RunImageCalibrationRpc.filename3)
}
 void RunImageCalibrationRpc::set_filename3(const char* value, size_t size) {
  
  filename3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.RunImageCalibrationRpc.filename3)
}
 ::std::string* RunImageCalibrationRpc::mutable_filename3() {
  
  // @@protoc_insertion_point(field_mutable:analogic.RunImageCalibrationRpc.filename3)
  return filename3_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RunImageCalibrationRpc::release_filename3() {
  // @@protoc_insertion_point(field_release:analogic.RunImageCalibrationRpc.filename3)
  
  return filename3_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RunImageCalibrationRpc::set_allocated_filename3(::std::string* filename3) {
  if (filename3 != NULL) {
    
  } else {
    
  }
  filename3_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename3);
  // @@protoc_insertion_point(field_set_allocated:analogic.RunImageCalibrationRpc.filename3)
}

// optional string filename4 = 4;
void RunImageCalibrationRpc::clear_filename4() {
  filename4_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RunImageCalibrationRpc::filename4() const {
  // @@protoc_insertion_point(field_get:analogic.RunImageCalibrationRpc.filename4)
  return filename4_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RunImageCalibrationRpc::set_filename4(const ::std::string& value) {
  
  filename4_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.RunImageCalibrationRpc.filename4)
}
 void RunImageCalibrationRpc::set_filename4(const char* value) {
  
  filename4_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.RunImageCalibrationRpc.filename4)
}
 void RunImageCalibrationRpc::set_filename4(const char* value, size_t size) {
  
  filename4_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.RunImageCalibrationRpc.filename4)
}
 ::std::string* RunImageCalibrationRpc::mutable_filename4() {
  
  // @@protoc_insertion_point(field_mutable:analogic.RunImageCalibrationRpc.filename4)
  return filename4_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RunImageCalibrationRpc::release_filename4() {
  // @@protoc_insertion_point(field_release:analogic.RunImageCalibrationRpc.filename4)
  
  return filename4_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RunImageCalibrationRpc::set_allocated_filename4(::std::string* filename4) {
  if (filename4 != NULL) {
    
  } else {
    
  }
  filename4_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename4);
  // @@protoc_insertion_point(field_set_allocated:analogic.RunImageCalibrationRpc.filename4)
}

// optional string filename5 = 5;
void RunImageCalibrationRpc::clear_filename5() {
  filename5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RunImageCalibrationRpc::filename5() const {
  // @@protoc_insertion_point(field_get:analogic.RunImageCalibrationRpc.filename5)
  return filename5_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RunImageCalibrationRpc::set_filename5(const ::std::string& value) {
  
  filename5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.RunImageCalibrationRpc.filename5)
}
 void RunImageCalibrationRpc::set_filename5(const char* value) {
  
  filename5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.RunImageCalibrationRpc.filename5)
}
 void RunImageCalibrationRpc::set_filename5(const char* value, size_t size) {
  
  filename5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.RunImageCalibrationRpc.filename5)
}
 ::std::string* RunImageCalibrationRpc::mutable_filename5() {
  
  // @@protoc_insertion_point(field_mutable:analogic.RunImageCalibrationRpc.filename5)
  return filename5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RunImageCalibrationRpc::release_filename5() {
  // @@protoc_insertion_point(field_release:analogic.RunImageCalibrationRpc.filename5)
  
  return filename5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RunImageCalibrationRpc::set_allocated_filename5(::std::string* filename5) {
  if (filename5 != NULL) {
    
  } else {
    
  }
  filename5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename5);
  // @@protoc_insertion_point(field_set_allocated:analogic.RunImageCalibrationRpc.filename5)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateImageCalibrationBeltHeightRpc::kBeltHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateImageCalibrationBeltHeightRpc::UpdateImageCalibrationBeltHeightRpc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analogic.UpdateImageCalibrationBeltHeightRpc)
}

void UpdateImageCalibrationBeltHeightRpc::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

UpdateImageCalibrationBeltHeightRpc::UpdateImageCalibrationBeltHeightRpc(const UpdateImageCalibrationBeltHeightRpc& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analogic.UpdateImageCalibrationBeltHeightRpc)
}

void UpdateImageCalibrationBeltHeightRpc::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  belt_height_ = 0;
}

UpdateImageCalibrationBeltHeightRpc::~UpdateImageCalibrationBeltHeightRpc() {
  // @@protoc_insertion_point(destructor:analogic.UpdateImageCalibrationBeltHeightRpc)
  SharedDtor();
}

void UpdateImageCalibrationBeltHeightRpc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateImageCalibrationBeltHeightRpc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateImageCalibrationBeltHeightRpc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateImageCalibrationBeltHeightRpc_descriptor_;
}

const UpdateImageCalibrationBeltHeightRpc& UpdateImageCalibrationBeltHeightRpc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fCalService_2eproto();
  return *default_instance_;
}

UpdateImageCalibrationBeltHeightRpc* UpdateImageCalibrationBeltHeightRpc::default_instance_ = NULL;

UpdateImageCalibrationBeltHeightRpc* UpdateImageCalibrationBeltHeightRpc::New(::google::protobuf::Arena* arena) const {
  UpdateImageCalibrationBeltHeightRpc* n = new UpdateImageCalibrationBeltHeightRpc;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpdateImageCalibrationBeltHeightRpc::Clear() {
// @@protoc_insertion_point(message_clear_start:analogic.UpdateImageCalibrationBeltHeightRpc)
  belt_height_ = 0;
}

bool UpdateImageCalibrationBeltHeightRpc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analogic.UpdateImageCalibrationBeltHeightRpc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float belt_height = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &belt_height_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:analogic.UpdateImageCalibrationBeltHeightRpc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analogic.UpdateImageCalibrationBeltHeightRpc)
  return false;
#undef DO_
}

void UpdateImageCalibrationBeltHeightRpc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analogic.UpdateImageCalibrationBeltHeightRpc)
  // optional float belt_height = 1;
  if (this->belt_height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->belt_height(), output);
  }

  // @@protoc_insertion_point(serialize_end:analogic.UpdateImageCalibrationBeltHeightRpc)
}

::google::protobuf::uint8* UpdateImageCalibrationBeltHeightRpc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analogic.UpdateImageCalibrationBeltHeightRpc)
  // optional float belt_height = 1;
  if (this->belt_height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->belt_height(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:analogic.UpdateImageCalibrationBeltHeightRpc)
  return target;
}

int UpdateImageCalibrationBeltHeightRpc::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:analogic.UpdateImageCalibrationBeltHeightRpc)
  int total_size = 0;

  // optional float belt_height = 1;
  if (this->belt_height() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateImageCalibrationBeltHeightRpc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analogic.UpdateImageCalibrationBeltHeightRpc)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UpdateImageCalibrationBeltHeightRpc* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateImageCalibrationBeltHeightRpc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analogic.UpdateImageCalibrationBeltHeightRpc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analogic.UpdateImageCalibrationBeltHeightRpc)
    MergeFrom(*source);
  }
}

void UpdateImageCalibrationBeltHeightRpc::MergeFrom(const UpdateImageCalibrationBeltHeightRpc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analogic.UpdateImageCalibrationBeltHeightRpc)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.belt_height() != 0) {
    set_belt_height(from.belt_height());
  }
}

void UpdateImageCalibrationBeltHeightRpc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analogic.UpdateImageCalibrationBeltHeightRpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateImageCalibrationBeltHeightRpc::CopyFrom(const UpdateImageCalibrationBeltHeightRpc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analogic.UpdateImageCalibrationBeltHeightRpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateImageCalibrationBeltHeightRpc::IsInitialized() const {

  return true;
}

void UpdateImageCalibrationBeltHeightRpc::Swap(UpdateImageCalibrationBeltHeightRpc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateImageCalibrationBeltHeightRpc::InternalSwap(UpdateImageCalibrationBeltHeightRpc* other) {
  std::swap(belt_height_, other->belt_height_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateImageCalibrationBeltHeightRpc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateImageCalibrationBeltHeightRpc_descriptor_;
  metadata.reflection = UpdateImageCalibrationBeltHeightRpc_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpdateImageCalibrationBeltHeightRpc

// optional float belt_height = 1;
void UpdateImageCalibrationBeltHeightRpc::clear_belt_height() {
  belt_height_ = 0;
}
 float UpdateImageCalibrationBeltHeightRpc::belt_height() const {
  // @@protoc_insertion_point(field_get:analogic.UpdateImageCalibrationBeltHeightRpc.belt_height)
  return belt_height_;
}
 void UpdateImageCalibrationBeltHeightRpc::set_belt_height(float value) {
  
  belt_height_ = value;
  // @@protoc_insertion_point(field_set:analogic.UpdateImageCalibrationBeltHeightRpc.belt_height)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateImageCalibrationNylonScaleRpc::kNylonScaleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateImageCalibrationNylonScaleRpc::UpdateImageCalibrationNylonScaleRpc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analogic.UpdateImageCalibrationNylonScaleRpc)
}

void UpdateImageCalibrationNylonScaleRpc::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

UpdateImageCalibrationNylonScaleRpc::UpdateImageCalibrationNylonScaleRpc(const UpdateImageCalibrationNylonScaleRpc& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analogic.UpdateImageCalibrationNylonScaleRpc)
}

void UpdateImageCalibrationNylonScaleRpc::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  nylon_scale_ = 0;
}

UpdateImageCalibrationNylonScaleRpc::~UpdateImageCalibrationNylonScaleRpc() {
  // @@protoc_insertion_point(destructor:analogic.UpdateImageCalibrationNylonScaleRpc)
  SharedDtor();
}

void UpdateImageCalibrationNylonScaleRpc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateImageCalibrationNylonScaleRpc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateImageCalibrationNylonScaleRpc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateImageCalibrationNylonScaleRpc_descriptor_;
}

const UpdateImageCalibrationNylonScaleRpc& UpdateImageCalibrationNylonScaleRpc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fCalService_2eproto();
  return *default_instance_;
}

UpdateImageCalibrationNylonScaleRpc* UpdateImageCalibrationNylonScaleRpc::default_instance_ = NULL;

UpdateImageCalibrationNylonScaleRpc* UpdateImageCalibrationNylonScaleRpc::New(::google::protobuf::Arena* arena) const {
  UpdateImageCalibrationNylonScaleRpc* n = new UpdateImageCalibrationNylonScaleRpc;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpdateImageCalibrationNylonScaleRpc::Clear() {
// @@protoc_insertion_point(message_clear_start:analogic.UpdateImageCalibrationNylonScaleRpc)
  nylon_scale_ = 0;
}

bool UpdateImageCalibrationNylonScaleRpc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analogic.UpdateImageCalibrationNylonScaleRpc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float nylon_scale = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &nylon_scale_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:analogic.UpdateImageCalibrationNylonScaleRpc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analogic.UpdateImageCalibrationNylonScaleRpc)
  return false;
#undef DO_
}

void UpdateImageCalibrationNylonScaleRpc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analogic.UpdateImageCalibrationNylonScaleRpc)
  // optional float nylon_scale = 1;
  if (this->nylon_scale() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->nylon_scale(), output);
  }

  // @@protoc_insertion_point(serialize_end:analogic.UpdateImageCalibrationNylonScaleRpc)
}

::google::protobuf::uint8* UpdateImageCalibrationNylonScaleRpc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analogic.UpdateImageCalibrationNylonScaleRpc)
  // optional float nylon_scale = 1;
  if (this->nylon_scale() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->nylon_scale(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:analogic.UpdateImageCalibrationNylonScaleRpc)
  return target;
}

int UpdateImageCalibrationNylonScaleRpc::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:analogic.UpdateImageCalibrationNylonScaleRpc)
  int total_size = 0;

  // optional float nylon_scale = 1;
  if (this->nylon_scale() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateImageCalibrationNylonScaleRpc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analogic.UpdateImageCalibrationNylonScaleRpc)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UpdateImageCalibrationNylonScaleRpc* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateImageCalibrationNylonScaleRpc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analogic.UpdateImageCalibrationNylonScaleRpc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analogic.UpdateImageCalibrationNylonScaleRpc)
    MergeFrom(*source);
  }
}

void UpdateImageCalibrationNylonScaleRpc::MergeFrom(const UpdateImageCalibrationNylonScaleRpc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analogic.UpdateImageCalibrationNylonScaleRpc)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.nylon_scale() != 0) {
    set_nylon_scale(from.nylon_scale());
  }
}

void UpdateImageCalibrationNylonScaleRpc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analogic.UpdateImageCalibrationNylonScaleRpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateImageCalibrationNylonScaleRpc::CopyFrom(const UpdateImageCalibrationNylonScaleRpc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analogic.UpdateImageCalibrationNylonScaleRpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateImageCalibrationNylonScaleRpc::IsInitialized() const {

  return true;
}

void UpdateImageCalibrationNylonScaleRpc::Swap(UpdateImageCalibrationNylonScaleRpc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateImageCalibrationNylonScaleRpc::InternalSwap(UpdateImageCalibrationNylonScaleRpc* other) {
  std::swap(nylon_scale_, other->nylon_scale_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateImageCalibrationNylonScaleRpc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateImageCalibrationNylonScaleRpc_descriptor_;
  metadata.reflection = UpdateImageCalibrationNylonScaleRpc_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpdateImageCalibrationNylonScaleRpc

// optional float nylon_scale = 1;
void UpdateImageCalibrationNylonScaleRpc::clear_nylon_scale() {
  nylon_scale_ = 0;
}
 float UpdateImageCalibrationNylonScaleRpc::nylon_scale() const {
  // @@protoc_insertion_point(field_get:analogic.UpdateImageCalibrationNylonScaleRpc.nylon_scale)
  return nylon_scale_;
}
 void UpdateImageCalibrationNylonScaleRpc::set_nylon_scale(float value) {
  
  nylon_scale_ = value;
  // @@protoc_insertion_point(field_set:analogic.UpdateImageCalibrationNylonScaleRpc.nylon_scale)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateImageCalibrationBeltFreqRpc::kBeltFreqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateImageCalibrationBeltFreqRpc::UpdateImageCalibrationBeltFreqRpc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analogic.UpdateImageCalibrationBeltFreqRpc)
}

void UpdateImageCalibrationBeltFreqRpc::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

UpdateImageCalibrationBeltFreqRpc::UpdateImageCalibrationBeltFreqRpc(const UpdateImageCalibrationBeltFreqRpc& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analogic.UpdateImageCalibrationBeltFreqRpc)
}

void UpdateImageCalibrationBeltFreqRpc::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  belt_freq_ = 0;
}

UpdateImageCalibrationBeltFreqRpc::~UpdateImageCalibrationBeltFreqRpc() {
  // @@protoc_insertion_point(destructor:analogic.UpdateImageCalibrationBeltFreqRpc)
  SharedDtor();
}

void UpdateImageCalibrationBeltFreqRpc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateImageCalibrationBeltFreqRpc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateImageCalibrationBeltFreqRpc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateImageCalibrationBeltFreqRpc_descriptor_;
}

const UpdateImageCalibrationBeltFreqRpc& UpdateImageCalibrationBeltFreqRpc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fCalService_2eproto();
  return *default_instance_;
}

UpdateImageCalibrationBeltFreqRpc* UpdateImageCalibrationBeltFreqRpc::default_instance_ = NULL;

UpdateImageCalibrationBeltFreqRpc* UpdateImageCalibrationBeltFreqRpc::New(::google::protobuf::Arena* arena) const {
  UpdateImageCalibrationBeltFreqRpc* n = new UpdateImageCalibrationBeltFreqRpc;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpdateImageCalibrationBeltFreqRpc::Clear() {
// @@protoc_insertion_point(message_clear_start:analogic.UpdateImageCalibrationBeltFreqRpc)
  belt_freq_ = 0;
}

bool UpdateImageCalibrationBeltFreqRpc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analogic.UpdateImageCalibrationBeltFreqRpc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 belt_freq = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &belt_freq_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:analogic.UpdateImageCalibrationBeltFreqRpc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analogic.UpdateImageCalibrationBeltFreqRpc)
  return false;
#undef DO_
}

void UpdateImageCalibrationBeltFreqRpc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analogic.UpdateImageCalibrationBeltFreqRpc)
  // optional int32 belt_freq = 1;
  if (this->belt_freq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->belt_freq(), output);
  }

  // @@protoc_insertion_point(serialize_end:analogic.UpdateImageCalibrationBeltFreqRpc)
}

::google::protobuf::uint8* UpdateImageCalibrationBeltFreqRpc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analogic.UpdateImageCalibrationBeltFreqRpc)
  // optional int32 belt_freq = 1;
  if (this->belt_freq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->belt_freq(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:analogic.UpdateImageCalibrationBeltFreqRpc)
  return target;
}

int UpdateImageCalibrationBeltFreqRpc::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:analogic.UpdateImageCalibrationBeltFreqRpc)
  int total_size = 0;

  // optional int32 belt_freq = 1;
  if (this->belt_freq() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->belt_freq());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateImageCalibrationBeltFreqRpc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analogic.UpdateImageCalibrationBeltFreqRpc)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UpdateImageCalibrationBeltFreqRpc* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateImageCalibrationBeltFreqRpc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analogic.UpdateImageCalibrationBeltFreqRpc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analogic.UpdateImageCalibrationBeltFreqRpc)
    MergeFrom(*source);
  }
}

void UpdateImageCalibrationBeltFreqRpc::MergeFrom(const UpdateImageCalibrationBeltFreqRpc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analogic.UpdateImageCalibrationBeltFreqRpc)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.belt_freq() != 0) {
    set_belt_freq(from.belt_freq());
  }
}

void UpdateImageCalibrationBeltFreqRpc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analogic.UpdateImageCalibrationBeltFreqRpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateImageCalibrationBeltFreqRpc::CopyFrom(const UpdateImageCalibrationBeltFreqRpc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analogic.UpdateImageCalibrationBeltFreqRpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateImageCalibrationBeltFreqRpc::IsInitialized() const {

  return true;
}

void UpdateImageCalibrationBeltFreqRpc::Swap(UpdateImageCalibrationBeltFreqRpc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateImageCalibrationBeltFreqRpc::InternalSwap(UpdateImageCalibrationBeltFreqRpc* other) {
  std::swap(belt_freq_, other->belt_freq_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateImageCalibrationBeltFreqRpc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateImageCalibrationBeltFreqRpc_descriptor_;
  metadata.reflection = UpdateImageCalibrationBeltFreqRpc_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpdateImageCalibrationBeltFreqRpc

// optional int32 belt_freq = 1;
void UpdateImageCalibrationBeltFreqRpc::clear_belt_freq() {
  belt_freq_ = 0;
}
 ::google::protobuf::int32 UpdateImageCalibrationBeltFreqRpc::belt_freq() const {
  // @@protoc_insertion_point(field_get:analogic.UpdateImageCalibrationBeltFreqRpc.belt_freq)
  return belt_freq_;
}
 void UpdateImageCalibrationBeltFreqRpc::set_belt_freq(::google::protobuf::int32 value) {
  
  belt_freq_ = value;
  // @@protoc_insertion_point(field_set:analogic.UpdateImageCalibrationBeltFreqRpc.belt_freq)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* ExportFilesRpc_FILE_TYPES_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExportFilesRpc_FILE_TYPES_descriptor_;
}
bool ExportFilesRpc_FILE_TYPES_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ExportFilesRpc_FILE_TYPES ExportFilesRpc::NULL_FILE;
const ExportFilesRpc_FILE_TYPES ExportFilesRpc::ERROR_LOG;
const ExportFilesRpc_FILE_TYPES ExportFilesRpc::TEST_RESULTS;
const ExportFilesRpc_FILE_TYPES ExportFilesRpc::CALIBRATION;
const ExportFilesRpc_FILE_TYPES ExportFilesRpc::CONFIGURATION;
const ExportFilesRpc_FILE_TYPES ExportFilesRpc::OPERATING_SYSTEM;
const ExportFilesRpc_FILE_TYPES ExportFilesRpc::APPLICATION_LOGS;
const ExportFilesRpc_FILE_TYPES ExportFilesRpc::FILE_TYPES_MIN;
const ExportFilesRpc_FILE_TYPES ExportFilesRpc::FILE_TYPES_MAX;
const int ExportFilesRpc::FILE_TYPES_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExportFilesRpc::kFilePathFieldNumber;
const int ExportFilesRpc::kFileTypesFieldNumber;
const int ExportFilesRpc::kStartTimeStringFieldNumber;
const int ExportFilesRpc::kEndTimeStringFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExportFilesRpc::ExportFilesRpc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analogic.ExportFilesRpc)
}

void ExportFilesRpc::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ExportFilesRpc::ExportFilesRpc(const ExportFilesRpc& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analogic.ExportFilesRpc)
}

void ExportFilesRpc::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  file_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_types_ = 0u;
  start_time_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_time_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ExportFilesRpc::~ExportFilesRpc() {
  // @@protoc_insertion_point(destructor:analogic.ExportFilesRpc)
  SharedDtor();
}

void ExportFilesRpc::SharedDtor() {
  file_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_time_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_time_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ExportFilesRpc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExportFilesRpc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExportFilesRpc_descriptor_;
}

const ExportFilesRpc& ExportFilesRpc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fCalService_2eproto();
  return *default_instance_;
}

ExportFilesRpc* ExportFilesRpc::default_instance_ = NULL;

ExportFilesRpc* ExportFilesRpc::New(::google::protobuf::Arena* arena) const {
  ExportFilesRpc* n = new ExportFilesRpc;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExportFilesRpc::Clear() {
// @@protoc_insertion_point(message_clear_start:analogic.ExportFilesRpc)
  file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_types_ = 0u;
  start_time_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_time_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ExportFilesRpc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analogic.ExportFilesRpc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string file_path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file_path().data(), this->file_path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ExportFilesRpc.file_path"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_file_types;
        break;
      }

      // optional fixed32 file_types = 2;
      case 2: {
        if (tag == 21) {
         parse_file_types:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &file_types_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_start_time_string;
        break;
      }

      // optional string start_time_string = 3;
      case 3: {
        if (tag == 26) {
         parse_start_time_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_start_time_string()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->start_time_string().data(), this->start_time_string().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ExportFilesRpc.start_time_string"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_end_time_string;
        break;
      }

      // optional string end_time_string = 4;
      case 4: {
        if (tag == 34) {
         parse_end_time_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_end_time_string()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->end_time_string().data(), this->end_time_string().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ExportFilesRpc.end_time_string"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:analogic.ExportFilesRpc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analogic.ExportFilesRpc)
  return false;
#undef DO_
}

void ExportFilesRpc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analogic.ExportFilesRpc)
  // optional string file_path = 1;
  if (this->file_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_path().data(), this->file_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ExportFilesRpc.file_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->file_path(), output);
  }

  // optional fixed32 file_types = 2;
  if (this->file_types() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->file_types(), output);
  }

  // optional string start_time_string = 3;
  if (this->start_time_string().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->start_time_string().data(), this->start_time_string().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ExportFilesRpc.start_time_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->start_time_string(), output);
  }

  // optional string end_time_string = 4;
  if (this->end_time_string().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->end_time_string().data(), this->end_time_string().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ExportFilesRpc.end_time_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->end_time_string(), output);
  }

  // @@protoc_insertion_point(serialize_end:analogic.ExportFilesRpc)
}

::google::protobuf::uint8* ExportFilesRpc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analogic.ExportFilesRpc)
  // optional string file_path = 1;
  if (this->file_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_path().data(), this->file_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ExportFilesRpc.file_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_path(), target);
  }

  // optional fixed32 file_types = 2;
  if (this->file_types() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->file_types(), target);
  }

  // optional string start_time_string = 3;
  if (this->start_time_string().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->start_time_string().data(), this->start_time_string().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ExportFilesRpc.start_time_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->start_time_string(), target);
  }

  // optional string end_time_string = 4;
  if (this->end_time_string().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->end_time_string().data(), this->end_time_string().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ExportFilesRpc.end_time_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->end_time_string(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:analogic.ExportFilesRpc)
  return target;
}

int ExportFilesRpc::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:analogic.ExportFilesRpc)
  int total_size = 0;

  // optional string file_path = 1;
  if (this->file_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_path());
  }

  // optional fixed32 file_types = 2;
  if (this->file_types() != 0) {
    total_size += 1 + 4;
  }

  // optional string start_time_string = 3;
  if (this->start_time_string().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->start_time_string());
  }

  // optional string end_time_string = 4;
  if (this->end_time_string().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->end_time_string());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExportFilesRpc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analogic.ExportFilesRpc)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ExportFilesRpc* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ExportFilesRpc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analogic.ExportFilesRpc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analogic.ExportFilesRpc)
    MergeFrom(*source);
  }
}

void ExportFilesRpc::MergeFrom(const ExportFilesRpc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analogic.ExportFilesRpc)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.file_path().size() > 0) {

    file_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_path_);
  }
  if (from.file_types() != 0) {
    set_file_types(from.file_types());
  }
  if (from.start_time_string().size() > 0) {

    start_time_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_time_string_);
  }
  if (from.end_time_string().size() > 0) {

    end_time_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.end_time_string_);
  }
}

void ExportFilesRpc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analogic.ExportFilesRpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExportFilesRpc::CopyFrom(const ExportFilesRpc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analogic.ExportFilesRpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExportFilesRpc::IsInitialized() const {

  return true;
}

void ExportFilesRpc::Swap(ExportFilesRpc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExportFilesRpc::InternalSwap(ExportFilesRpc* other) {
  file_path_.Swap(&other->file_path_);
  std::swap(file_types_, other->file_types_);
  start_time_string_.Swap(&other->start_time_string_);
  end_time_string_.Swap(&other->end_time_string_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExportFilesRpc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExportFilesRpc_descriptor_;
  metadata.reflection = ExportFilesRpc_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExportFilesRpc

// optional string file_path = 1;
void ExportFilesRpc::clear_file_path() {
  file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ExportFilesRpc::file_path() const {
  // @@protoc_insertion_point(field_get:analogic.ExportFilesRpc.file_path)
  return file_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ExportFilesRpc::set_file_path(const ::std::string& value) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ExportFilesRpc.file_path)
}
 void ExportFilesRpc::set_file_path(const char* value) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ExportFilesRpc.file_path)
}
 void ExportFilesRpc::set_file_path(const char* value, size_t size) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ExportFilesRpc.file_path)
}
 ::std::string* ExportFilesRpc::mutable_file_path() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ExportFilesRpc.file_path)
  return file_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ExportFilesRpc::release_file_path() {
  // @@protoc_insertion_point(field_release:analogic.ExportFilesRpc.file_path)
  
  return file_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ExportFilesRpc::set_allocated_file_path(::std::string* file_path) {
  if (file_path != NULL) {
    
  } else {
    
  }
  file_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_path);
  // @@protoc_insertion_point(field_set_allocated:analogic.ExportFilesRpc.file_path)
}

// optional fixed32 file_types = 2;
void ExportFilesRpc::clear_file_types() {
  file_types_ = 0u;
}
 ::google::protobuf::uint32 ExportFilesRpc::file_types() const {
  // @@protoc_insertion_point(field_get:analogic.ExportFilesRpc.file_types)
  return file_types_;
}
 void ExportFilesRpc::set_file_types(::google::protobuf::uint32 value) {
  
  file_types_ = value;
  // @@protoc_insertion_point(field_set:analogic.ExportFilesRpc.file_types)
}

// optional string start_time_string = 3;
void ExportFilesRpc::clear_start_time_string() {
  start_time_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ExportFilesRpc::start_time_string() const {
  // @@protoc_insertion_point(field_get:analogic.ExportFilesRpc.start_time_string)
  return start_time_string_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ExportFilesRpc::set_start_time_string(const ::std::string& value) {
  
  start_time_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ExportFilesRpc.start_time_string)
}
 void ExportFilesRpc::set_start_time_string(const char* value) {
  
  start_time_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ExportFilesRpc.start_time_string)
}
 void ExportFilesRpc::set_start_time_string(const char* value, size_t size) {
  
  start_time_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ExportFilesRpc.start_time_string)
}
 ::std::string* ExportFilesRpc::mutable_start_time_string() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ExportFilesRpc.start_time_string)
  return start_time_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ExportFilesRpc::release_start_time_string() {
  // @@protoc_insertion_point(field_release:analogic.ExportFilesRpc.start_time_string)
  
  return start_time_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ExportFilesRpc::set_allocated_start_time_string(::std::string* start_time_string) {
  if (start_time_string != NULL) {
    
  } else {
    
  }
  start_time_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_time_string);
  // @@protoc_insertion_point(field_set_allocated:analogic.ExportFilesRpc.start_time_string)
}

// optional string end_time_string = 4;
void ExportFilesRpc::clear_end_time_string() {
  end_time_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ExportFilesRpc::end_time_string() const {
  // @@protoc_insertion_point(field_get:analogic.ExportFilesRpc.end_time_string)
  return end_time_string_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ExportFilesRpc::set_end_time_string(const ::std::string& value) {
  
  end_time_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ExportFilesRpc.end_time_string)
}
 void ExportFilesRpc::set_end_time_string(const char* value) {
  
  end_time_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ExportFilesRpc.end_time_string)
}
 void ExportFilesRpc::set_end_time_string(const char* value, size_t size) {
  
  end_time_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ExportFilesRpc.end_time_string)
}
 ::std::string* ExportFilesRpc::mutable_end_time_string() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ExportFilesRpc.end_time_string)
  return end_time_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ExportFilesRpc::release_end_time_string() {
  // @@protoc_insertion_point(field_release:analogic.ExportFilesRpc.end_time_string)
  
  return end_time_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ExportFilesRpc::set_allocated_end_time_string(::std::string* end_time_string) {
  if (end_time_string != NULL) {
    
  } else {
    
  }
  end_time_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end_time_string);
  // @@protoc_insertion_point(field_set_allocated:analogic.ExportFilesRpc.end_time_string)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AirCalibrationRpc::AirCalibrationRpc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analogic.AirCalibrationRpc)
}

void AirCalibrationRpc::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

AirCalibrationRpc::AirCalibrationRpc(const AirCalibrationRpc& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analogic.AirCalibrationRpc)
}

void AirCalibrationRpc::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

AirCalibrationRpc::~AirCalibrationRpc() {
  // @@protoc_insertion_point(destructor:analogic.AirCalibrationRpc)
  SharedDtor();
}

void AirCalibrationRpc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AirCalibrationRpc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AirCalibrationRpc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AirCalibrationRpc_descriptor_;
}

const AirCalibrationRpc& AirCalibrationRpc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fCalService_2eproto();
  return *default_instance_;
}

AirCalibrationRpc* AirCalibrationRpc::default_instance_ = NULL;

AirCalibrationRpc* AirCalibrationRpc::New(::google::protobuf::Arena* arena) const {
  AirCalibrationRpc* n = new AirCalibrationRpc;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AirCalibrationRpc::Clear() {
// @@protoc_insertion_point(message_clear_start:analogic.AirCalibrationRpc)
}

bool AirCalibrationRpc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analogic.AirCalibrationRpc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:analogic.AirCalibrationRpc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analogic.AirCalibrationRpc)
  return false;
#undef DO_
}

void AirCalibrationRpc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analogic.AirCalibrationRpc)
  // @@protoc_insertion_point(serialize_end:analogic.AirCalibrationRpc)
}

::google::protobuf::uint8* AirCalibrationRpc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analogic.AirCalibrationRpc)
  // @@protoc_insertion_point(serialize_to_array_end:analogic.AirCalibrationRpc)
  return target;
}

int AirCalibrationRpc::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:analogic.AirCalibrationRpc)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AirCalibrationRpc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analogic.AirCalibrationRpc)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AirCalibrationRpc* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AirCalibrationRpc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analogic.AirCalibrationRpc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analogic.AirCalibrationRpc)
    MergeFrom(*source);
  }
}

void AirCalibrationRpc::MergeFrom(const AirCalibrationRpc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analogic.AirCalibrationRpc)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void AirCalibrationRpc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analogic.AirCalibrationRpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AirCalibrationRpc::CopyFrom(const AirCalibrationRpc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analogic.AirCalibrationRpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AirCalibrationRpc::IsInitialized() const {

  return true;
}

void AirCalibrationRpc::Swap(AirCalibrationRpc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AirCalibrationRpc::InternalSwap(AirCalibrationRpc* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AirCalibrationRpc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AirCalibrationRpc_descriptor_;
  metadata.reflection = AirCalibrationRpc_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AirCalibrationRpc

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OffsetCalibrationRpc::OffsetCalibrationRpc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analogic.OffsetCalibrationRpc)
}

void OffsetCalibrationRpc::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

OffsetCalibrationRpc::OffsetCalibrationRpc(const OffsetCalibrationRpc& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analogic.OffsetCalibrationRpc)
}

void OffsetCalibrationRpc::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

OffsetCalibrationRpc::~OffsetCalibrationRpc() {
  // @@protoc_insertion_point(destructor:analogic.OffsetCalibrationRpc)
  SharedDtor();
}

void OffsetCalibrationRpc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OffsetCalibrationRpc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OffsetCalibrationRpc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OffsetCalibrationRpc_descriptor_;
}

const OffsetCalibrationRpc& OffsetCalibrationRpc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fCalService_2eproto();
  return *default_instance_;
}

OffsetCalibrationRpc* OffsetCalibrationRpc::default_instance_ = NULL;

OffsetCalibrationRpc* OffsetCalibrationRpc::New(::google::protobuf::Arena* arena) const {
  OffsetCalibrationRpc* n = new OffsetCalibrationRpc;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OffsetCalibrationRpc::Clear() {
// @@protoc_insertion_point(message_clear_start:analogic.OffsetCalibrationRpc)
}

bool OffsetCalibrationRpc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analogic.OffsetCalibrationRpc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:analogic.OffsetCalibrationRpc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analogic.OffsetCalibrationRpc)
  return false;
#undef DO_
}

void OffsetCalibrationRpc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analogic.OffsetCalibrationRpc)
  // @@protoc_insertion_point(serialize_end:analogic.OffsetCalibrationRpc)
}

::google::protobuf::uint8* OffsetCalibrationRpc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analogic.OffsetCalibrationRpc)
  // @@protoc_insertion_point(serialize_to_array_end:analogic.OffsetCalibrationRpc)
  return target;
}

int OffsetCalibrationRpc::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:analogic.OffsetCalibrationRpc)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OffsetCalibrationRpc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analogic.OffsetCalibrationRpc)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const OffsetCalibrationRpc* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const OffsetCalibrationRpc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analogic.OffsetCalibrationRpc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analogic.OffsetCalibrationRpc)
    MergeFrom(*source);
  }
}

void OffsetCalibrationRpc::MergeFrom(const OffsetCalibrationRpc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analogic.OffsetCalibrationRpc)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void OffsetCalibrationRpc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analogic.OffsetCalibrationRpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OffsetCalibrationRpc::CopyFrom(const OffsetCalibrationRpc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analogic.OffsetCalibrationRpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OffsetCalibrationRpc::IsInitialized() const {

  return true;
}

void OffsetCalibrationRpc::Swap(OffsetCalibrationRpc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OffsetCalibrationRpc::InternalSwap(OffsetCalibrationRpc* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OffsetCalibrationRpc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OffsetCalibrationRpc_descriptor_;
  metadata.reflection = OffsetCalibrationRpc_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OffsetCalibrationRpc

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* CalibrationRpc_CAL_COMMAND_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CalibrationRpc_CAL_COMMAND_descriptor_;
}
bool CalibrationRpc_CAL_COMMAND_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CalibrationRpc_CAL_COMMAND CalibrationRpc::START;
const CalibrationRpc_CAL_COMMAND CalibrationRpc::PROCEED;
const CalibrationRpc_CAL_COMMAND CalibrationRpc::CANCEL;
const CalibrationRpc_CAL_COMMAND CalibrationRpc::CAL_COMMAND_MIN;
const CalibrationRpc_CAL_COMMAND CalibrationRpc::CAL_COMMAND_MAX;
const int CalibrationRpc::CAL_COMMAND_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CalibrationRpc::kCmdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CalibrationRpc::CalibrationRpc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analogic.CalibrationRpc)
}

void CalibrationRpc::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CalibrationRpc::CalibrationRpc(const CalibrationRpc& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analogic.CalibrationRpc)
}

void CalibrationRpc::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  cmd_ = 0;
}

CalibrationRpc::~CalibrationRpc() {
  // @@protoc_insertion_point(destructor:analogic.CalibrationRpc)
  SharedDtor();
}

void CalibrationRpc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CalibrationRpc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CalibrationRpc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CalibrationRpc_descriptor_;
}

const CalibrationRpc& CalibrationRpc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fCalService_2eproto();
  return *default_instance_;
}

CalibrationRpc* CalibrationRpc::default_instance_ = NULL;

CalibrationRpc* CalibrationRpc::New(::google::protobuf::Arena* arena) const {
  CalibrationRpc* n = new CalibrationRpc;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CalibrationRpc::Clear() {
// @@protoc_insertion_point(message_clear_start:analogic.CalibrationRpc)
  cmd_ = 0;
}

bool CalibrationRpc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analogic.CalibrationRpc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .analogic.CalibrationRpc.CAL_COMMAND cmd = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_cmd(static_cast< ::analogic::CalibrationRpc_CAL_COMMAND >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:analogic.CalibrationRpc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analogic.CalibrationRpc)
  return false;
#undef DO_
}

void CalibrationRpc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analogic.CalibrationRpc)
  // optional .analogic.CalibrationRpc.CAL_COMMAND cmd = 1;
  if (this->cmd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // @@protoc_insertion_point(serialize_end:analogic.CalibrationRpc)
}

::google::protobuf::uint8* CalibrationRpc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analogic.CalibrationRpc)
  // optional .analogic.CalibrationRpc.CAL_COMMAND cmd = 1;
  if (this->cmd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:analogic.CalibrationRpc)
  return target;
}

int CalibrationRpc::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:analogic.CalibrationRpc)
  int total_size = 0;

  // optional .analogic.CalibrationRpc.CAL_COMMAND cmd = 1;
  if (this->cmd() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CalibrationRpc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analogic.CalibrationRpc)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CalibrationRpc* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CalibrationRpc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analogic.CalibrationRpc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analogic.CalibrationRpc)
    MergeFrom(*source);
  }
}

void CalibrationRpc::MergeFrom(const CalibrationRpc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analogic.CalibrationRpc)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.cmd() != 0) {
    set_cmd(from.cmd());
  }
}

void CalibrationRpc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analogic.CalibrationRpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalibrationRpc::CopyFrom(const CalibrationRpc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analogic.CalibrationRpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalibrationRpc::IsInitialized() const {

  return true;
}

void CalibrationRpc::Swap(CalibrationRpc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CalibrationRpc::InternalSwap(CalibrationRpc* other) {
  std::swap(cmd_, other->cmd_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CalibrationRpc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CalibrationRpc_descriptor_;
  metadata.reflection = CalibrationRpc_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CalibrationRpc

// optional .analogic.CalibrationRpc.CAL_COMMAND cmd = 1;
void CalibrationRpc::clear_cmd() {
  cmd_ = 0;
}
 ::analogic::CalibrationRpc_CAL_COMMAND CalibrationRpc::cmd() const {
  // @@protoc_insertion_point(field_get:analogic.CalibrationRpc.cmd)
  return static_cast< ::analogic::CalibrationRpc_CAL_COMMAND >(cmd_);
}
 void CalibrationRpc::set_cmd(::analogic::CalibrationRpc_CAL_COMMAND value) {
  
  cmd_ = value;
  // @@protoc_insertion_point(field_set:analogic.CalibrationRpc.cmd)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AlarmLibInfo::kNameFieldNumber;
const int AlarmLibInfo::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AlarmLibInfo::AlarmLibInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analogic.AlarmLibInfo)
}

void AlarmLibInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

AlarmLibInfo::AlarmLibInfo(const AlarmLibInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analogic.AlarmLibInfo)
}

void AlarmLibInfo::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

AlarmLibInfo::~AlarmLibInfo() {
  // @@protoc_insertion_point(destructor:analogic.AlarmLibInfo)
  SharedDtor();
}

void AlarmLibInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void AlarmLibInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AlarmLibInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AlarmLibInfo_descriptor_;
}

const AlarmLibInfo& AlarmLibInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fCalService_2eproto();
  return *default_instance_;
}

AlarmLibInfo* AlarmLibInfo::default_instance_ = NULL;

AlarmLibInfo* AlarmLibInfo::New(::google::protobuf::Arena* arena) const {
  AlarmLibInfo* n = new AlarmLibInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AlarmLibInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:analogic.AlarmLibInfo)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AlarmLibInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analogic.AlarmLibInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.AlarmLibInfo.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_version;
        break;
      }

      // optional string version = 2;
      case 2: {
        if (tag == 18) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.AlarmLibInfo.version"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:analogic.AlarmLibInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analogic.AlarmLibInfo)
  return false;
#undef DO_
}

void AlarmLibInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analogic.AlarmLibInfo)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.AlarmLibInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string version = 2;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.AlarmLibInfo.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->version(), output);
  }

  // @@protoc_insertion_point(serialize_end:analogic.AlarmLibInfo)
}

::google::protobuf::uint8* AlarmLibInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analogic.AlarmLibInfo)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.AlarmLibInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string version = 2;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.AlarmLibInfo.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->version(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:analogic.AlarmLibInfo)
  return target;
}

int AlarmLibInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:analogic.AlarmLibInfo)
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string version = 2;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AlarmLibInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analogic.AlarmLibInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AlarmLibInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AlarmLibInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analogic.AlarmLibInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analogic.AlarmLibInfo)
    MergeFrom(*source);
  }
}

void AlarmLibInfo::MergeFrom(const AlarmLibInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analogic.AlarmLibInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
}

void AlarmLibInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analogic.AlarmLibInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlarmLibInfo::CopyFrom(const AlarmLibInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analogic.AlarmLibInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlarmLibInfo::IsInitialized() const {

  return true;
}

void AlarmLibInfo::Swap(AlarmLibInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AlarmLibInfo::InternalSwap(AlarmLibInfo* other) {
  name_.Swap(&other->name_);
  version_.Swap(&other->version_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AlarmLibInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AlarmLibInfo_descriptor_;
  metadata.reflection = AlarmLibInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AlarmLibInfo

// optional string name = 1;
void AlarmLibInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& AlarmLibInfo::name() const {
  // @@protoc_insertion_point(field_get:analogic.AlarmLibInfo.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AlarmLibInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.AlarmLibInfo.name)
}
 void AlarmLibInfo::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.AlarmLibInfo.name)
}
 void AlarmLibInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.AlarmLibInfo.name)
}
 ::std::string* AlarmLibInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:analogic.AlarmLibInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AlarmLibInfo::release_name() {
  // @@protoc_insertion_point(field_release:analogic.AlarmLibInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AlarmLibInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:analogic.AlarmLibInfo.name)
}

// optional string version = 2;
void AlarmLibInfo::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& AlarmLibInfo::version() const {
  // @@protoc_insertion_point(field_get:analogic.AlarmLibInfo.version)
  return version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AlarmLibInfo::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.AlarmLibInfo.version)
}
 void AlarmLibInfo::set_version(const char* value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.AlarmLibInfo.version)
}
 void AlarmLibInfo::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.AlarmLibInfo.version)
}
 ::std::string* AlarmLibInfo::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:analogic.AlarmLibInfo.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AlarmLibInfo::release_version() {
  // @@protoc_insertion_point(field_release:analogic.AlarmLibInfo.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AlarmLibInfo::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:analogic.AlarmLibInfo.version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InstalledAlarmLibInfo::kNameFieldNumber;
const int InstalledAlarmLibInfo::kVersionFieldNumber;
const int InstalledAlarmLibInfo::kCorruptedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InstalledAlarmLibInfo::InstalledAlarmLibInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analogic.InstalledAlarmLibInfo)
}

void InstalledAlarmLibInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

InstalledAlarmLibInfo::InstalledAlarmLibInfo(const InstalledAlarmLibInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analogic.InstalledAlarmLibInfo)
}

void InstalledAlarmLibInfo::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  corrupted_ = false;
}

InstalledAlarmLibInfo::~InstalledAlarmLibInfo() {
  // @@protoc_insertion_point(destructor:analogic.InstalledAlarmLibInfo)
  SharedDtor();
}

void InstalledAlarmLibInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void InstalledAlarmLibInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstalledAlarmLibInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstalledAlarmLibInfo_descriptor_;
}

const InstalledAlarmLibInfo& InstalledAlarmLibInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fCalService_2eproto();
  return *default_instance_;
}

InstalledAlarmLibInfo* InstalledAlarmLibInfo::default_instance_ = NULL;

InstalledAlarmLibInfo* InstalledAlarmLibInfo::New(::google::protobuf::Arena* arena) const {
  InstalledAlarmLibInfo* n = new InstalledAlarmLibInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InstalledAlarmLibInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:analogic.InstalledAlarmLibInfo)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  corrupted_ = false;
}

bool InstalledAlarmLibInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analogic.InstalledAlarmLibInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.InstalledAlarmLibInfo.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_version;
        break;
      }

      // optional string version = 2;
      case 2: {
        if (tag == 18) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.InstalledAlarmLibInfo.version"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_corrupted;
        break;
      }

      // optional bool corrupted = 3;
      case 3: {
        if (tag == 24) {
         parse_corrupted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &corrupted_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:analogic.InstalledAlarmLibInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analogic.InstalledAlarmLibInfo)
  return false;
#undef DO_
}

void InstalledAlarmLibInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analogic.InstalledAlarmLibInfo)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.InstalledAlarmLibInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string version = 2;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.InstalledAlarmLibInfo.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->version(), output);
  }

  // optional bool corrupted = 3;
  if (this->corrupted() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->corrupted(), output);
  }

  // @@protoc_insertion_point(serialize_end:analogic.InstalledAlarmLibInfo)
}

::google::protobuf::uint8* InstalledAlarmLibInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analogic.InstalledAlarmLibInfo)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.InstalledAlarmLibInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string version = 2;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.InstalledAlarmLibInfo.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->version(), target);
  }

  // optional bool corrupted = 3;
  if (this->corrupted() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->corrupted(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:analogic.InstalledAlarmLibInfo)
  return target;
}

int InstalledAlarmLibInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:analogic.InstalledAlarmLibInfo)
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string version = 2;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // optional bool corrupted = 3;
  if (this->corrupted() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstalledAlarmLibInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analogic.InstalledAlarmLibInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const InstalledAlarmLibInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InstalledAlarmLibInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analogic.InstalledAlarmLibInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analogic.InstalledAlarmLibInfo)
    MergeFrom(*source);
  }
}

void InstalledAlarmLibInfo::MergeFrom(const InstalledAlarmLibInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analogic.InstalledAlarmLibInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.corrupted() != 0) {
    set_corrupted(from.corrupted());
  }
}

void InstalledAlarmLibInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analogic.InstalledAlarmLibInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstalledAlarmLibInfo::CopyFrom(const InstalledAlarmLibInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analogic.InstalledAlarmLibInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstalledAlarmLibInfo::IsInitialized() const {

  return true;
}

void InstalledAlarmLibInfo::Swap(InstalledAlarmLibInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InstalledAlarmLibInfo::InternalSwap(InstalledAlarmLibInfo* other) {
  name_.Swap(&other->name_);
  version_.Swap(&other->version_);
  std::swap(corrupted_, other->corrupted_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InstalledAlarmLibInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InstalledAlarmLibInfo_descriptor_;
  metadata.reflection = InstalledAlarmLibInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InstalledAlarmLibInfo

// optional string name = 1;
void InstalledAlarmLibInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& InstalledAlarmLibInfo::name() const {
  // @@protoc_insertion_point(field_get:analogic.InstalledAlarmLibInfo.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InstalledAlarmLibInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.InstalledAlarmLibInfo.name)
}
 void InstalledAlarmLibInfo::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.InstalledAlarmLibInfo.name)
}
 void InstalledAlarmLibInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.InstalledAlarmLibInfo.name)
}
 ::std::string* InstalledAlarmLibInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:analogic.InstalledAlarmLibInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* InstalledAlarmLibInfo::release_name() {
  // @@protoc_insertion_point(field_release:analogic.InstalledAlarmLibInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InstalledAlarmLibInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:analogic.InstalledAlarmLibInfo.name)
}

// optional string version = 2;
void InstalledAlarmLibInfo::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& InstalledAlarmLibInfo::version() const {
  // @@protoc_insertion_point(field_get:analogic.InstalledAlarmLibInfo.version)
  return version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InstalledAlarmLibInfo::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.InstalledAlarmLibInfo.version)
}
 void InstalledAlarmLibInfo::set_version(const char* value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.InstalledAlarmLibInfo.version)
}
 void InstalledAlarmLibInfo::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.InstalledAlarmLibInfo.version)
}
 ::std::string* InstalledAlarmLibInfo::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:analogic.InstalledAlarmLibInfo.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* InstalledAlarmLibInfo::release_version() {
  // @@protoc_insertion_point(field_release:analogic.InstalledAlarmLibInfo.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InstalledAlarmLibInfo::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:analogic.InstalledAlarmLibInfo.version)
}

// optional bool corrupted = 3;
void InstalledAlarmLibInfo::clear_corrupted() {
  corrupted_ = false;
}
 bool InstalledAlarmLibInfo::corrupted() const {
  // @@protoc_insertion_point(field_get:analogic.InstalledAlarmLibInfo.corrupted)
  return corrupted_;
}
 void InstalledAlarmLibInfo::set_corrupted(bool value) {
  
  corrupted_ = value;
  // @@protoc_insertion_point(field_set:analogic.InstalledAlarmLibInfo.corrupted)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetInstalledAlarmLibsRpc::GetInstalledAlarmLibsRpc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analogic.GetInstalledAlarmLibsRpc)
}

void GetInstalledAlarmLibsRpc::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GetInstalledAlarmLibsRpc::GetInstalledAlarmLibsRpc(const GetInstalledAlarmLibsRpc& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analogic.GetInstalledAlarmLibsRpc)
}

void GetInstalledAlarmLibsRpc::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

GetInstalledAlarmLibsRpc::~GetInstalledAlarmLibsRpc() {
  // @@protoc_insertion_point(destructor:analogic.GetInstalledAlarmLibsRpc)
  SharedDtor();
}

void GetInstalledAlarmLibsRpc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetInstalledAlarmLibsRpc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetInstalledAlarmLibsRpc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetInstalledAlarmLibsRpc_descriptor_;
}

const GetInstalledAlarmLibsRpc& GetInstalledAlarmLibsRpc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fCalService_2eproto();
  return *default_instance_;
}

GetInstalledAlarmLibsRpc* GetInstalledAlarmLibsRpc::default_instance_ = NULL;

GetInstalledAlarmLibsRpc* GetInstalledAlarmLibsRpc::New(::google::protobuf::Arena* arena) const {
  GetInstalledAlarmLibsRpc* n = new GetInstalledAlarmLibsRpc;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetInstalledAlarmLibsRpc::Clear() {
// @@protoc_insertion_point(message_clear_start:analogic.GetInstalledAlarmLibsRpc)
}

bool GetInstalledAlarmLibsRpc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analogic.GetInstalledAlarmLibsRpc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:analogic.GetInstalledAlarmLibsRpc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analogic.GetInstalledAlarmLibsRpc)
  return false;
#undef DO_
}

void GetInstalledAlarmLibsRpc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analogic.GetInstalledAlarmLibsRpc)
  // @@protoc_insertion_point(serialize_end:analogic.GetInstalledAlarmLibsRpc)
}

::google::protobuf::uint8* GetInstalledAlarmLibsRpc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analogic.GetInstalledAlarmLibsRpc)
  // @@protoc_insertion_point(serialize_to_array_end:analogic.GetInstalledAlarmLibsRpc)
  return target;
}

int GetInstalledAlarmLibsRpc::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:analogic.GetInstalledAlarmLibsRpc)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetInstalledAlarmLibsRpc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analogic.GetInstalledAlarmLibsRpc)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetInstalledAlarmLibsRpc* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetInstalledAlarmLibsRpc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analogic.GetInstalledAlarmLibsRpc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analogic.GetInstalledAlarmLibsRpc)
    MergeFrom(*source);
  }
}

void GetInstalledAlarmLibsRpc::MergeFrom(const GetInstalledAlarmLibsRpc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analogic.GetInstalledAlarmLibsRpc)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void GetInstalledAlarmLibsRpc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analogic.GetInstalledAlarmLibsRpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInstalledAlarmLibsRpc::CopyFrom(const GetInstalledAlarmLibsRpc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analogic.GetInstalledAlarmLibsRpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInstalledAlarmLibsRpc::IsInitialized() const {

  return true;
}

void GetInstalledAlarmLibsRpc::Swap(GetInstalledAlarmLibsRpc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetInstalledAlarmLibsRpc::InternalSwap(GetInstalledAlarmLibsRpc* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetInstalledAlarmLibsRpc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetInstalledAlarmLibsRpc_descriptor_;
  metadata.reflection = GetInstalledAlarmLibsRpc_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetInstalledAlarmLibsRpc

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetInstalledAlarmLibsReply::kInstalledAlarmlibsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetInstalledAlarmLibsReply::GetInstalledAlarmLibsReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analogic.GetInstalledAlarmLibsReply)
}

void GetInstalledAlarmLibsReply::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GetInstalledAlarmLibsReply::GetInstalledAlarmLibsReply(const GetInstalledAlarmLibsReply& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analogic.GetInstalledAlarmLibsReply)
}

void GetInstalledAlarmLibsReply::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

GetInstalledAlarmLibsReply::~GetInstalledAlarmLibsReply() {
  // @@protoc_insertion_point(destructor:analogic.GetInstalledAlarmLibsReply)
  SharedDtor();
}

void GetInstalledAlarmLibsReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetInstalledAlarmLibsReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetInstalledAlarmLibsReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetInstalledAlarmLibsReply_descriptor_;
}

const GetInstalledAlarmLibsReply& GetInstalledAlarmLibsReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fCalService_2eproto();
  return *default_instance_;
}

GetInstalledAlarmLibsReply* GetInstalledAlarmLibsReply::default_instance_ = NULL;

GetInstalledAlarmLibsReply* GetInstalledAlarmLibsReply::New(::google::protobuf::Arena* arena) const {
  GetInstalledAlarmLibsReply* n = new GetInstalledAlarmLibsReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetInstalledAlarmLibsReply::Clear() {
// @@protoc_insertion_point(message_clear_start:analogic.GetInstalledAlarmLibsReply)
  installed_alarmlibs_.Clear();
}

bool GetInstalledAlarmLibsReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analogic.GetInstalledAlarmLibsReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .analogic.InstalledAlarmLibInfo installed_alarmlibs = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_installed_alarmlibs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_installed_alarmlibs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_installed_alarmlibs;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:analogic.GetInstalledAlarmLibsReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analogic.GetInstalledAlarmLibsReply)
  return false;
#undef DO_
}

void GetInstalledAlarmLibsReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analogic.GetInstalledAlarmLibsReply)
  // repeated .analogic.InstalledAlarmLibInfo installed_alarmlibs = 1;
  for (unsigned int i = 0, n = this->installed_alarmlibs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->installed_alarmlibs(i), output);
  }

  // @@protoc_insertion_point(serialize_end:analogic.GetInstalledAlarmLibsReply)
}

::google::protobuf::uint8* GetInstalledAlarmLibsReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analogic.GetInstalledAlarmLibsReply)
  // repeated .analogic.InstalledAlarmLibInfo installed_alarmlibs = 1;
  for (unsigned int i = 0, n = this->installed_alarmlibs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->installed_alarmlibs(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:analogic.GetInstalledAlarmLibsReply)
  return target;
}

int GetInstalledAlarmLibsReply::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:analogic.GetInstalledAlarmLibsReply)
  int total_size = 0;

  // repeated .analogic.InstalledAlarmLibInfo installed_alarmlibs = 1;
  total_size += 1 * this->installed_alarmlibs_size();
  for (int i = 0; i < this->installed_alarmlibs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->installed_alarmlibs(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetInstalledAlarmLibsReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analogic.GetInstalledAlarmLibsReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetInstalledAlarmLibsReply* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetInstalledAlarmLibsReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analogic.GetInstalledAlarmLibsReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analogic.GetInstalledAlarmLibsReply)
    MergeFrom(*source);
  }
}

void GetInstalledAlarmLibsReply::MergeFrom(const GetInstalledAlarmLibsReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analogic.GetInstalledAlarmLibsReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  installed_alarmlibs_.MergeFrom(from.installed_alarmlibs_);
}

void GetInstalledAlarmLibsReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analogic.GetInstalledAlarmLibsReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInstalledAlarmLibsReply::CopyFrom(const GetInstalledAlarmLibsReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analogic.GetInstalledAlarmLibsReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInstalledAlarmLibsReply::IsInitialized() const {

  return true;
}

void GetInstalledAlarmLibsReply::Swap(GetInstalledAlarmLibsReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetInstalledAlarmLibsReply::InternalSwap(GetInstalledAlarmLibsReply* other) {
  installed_alarmlibs_.UnsafeArenaSwap(&other->installed_alarmlibs_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetInstalledAlarmLibsReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetInstalledAlarmLibsReply_descriptor_;
  metadata.reflection = GetInstalledAlarmLibsReply_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetInstalledAlarmLibsReply

// repeated .analogic.InstalledAlarmLibInfo installed_alarmlibs = 1;
int GetInstalledAlarmLibsReply::installed_alarmlibs_size() const {
  return installed_alarmlibs_.size();
}
void GetInstalledAlarmLibsReply::clear_installed_alarmlibs() {
  installed_alarmlibs_.Clear();
}
const ::analogic::InstalledAlarmLibInfo& GetInstalledAlarmLibsReply::installed_alarmlibs(int index) const {
  // @@protoc_insertion_point(field_get:analogic.GetInstalledAlarmLibsReply.installed_alarmlibs)
  return installed_alarmlibs_.Get(index);
}
::analogic::InstalledAlarmLibInfo* GetInstalledAlarmLibsReply::mutable_installed_alarmlibs(int index) {
  // @@protoc_insertion_point(field_mutable:analogic.GetInstalledAlarmLibsReply.installed_alarmlibs)
  return installed_alarmlibs_.Mutable(index);
}
::analogic::InstalledAlarmLibInfo* GetInstalledAlarmLibsReply::add_installed_alarmlibs() {
  // @@protoc_insertion_point(field_add:analogic.GetInstalledAlarmLibsReply.installed_alarmlibs)
  return installed_alarmlibs_.Add();
}
::google::protobuf::RepeatedPtrField< ::analogic::InstalledAlarmLibInfo >*
GetInstalledAlarmLibsReply::mutable_installed_alarmlibs() {
  // @@protoc_insertion_point(field_mutable_list:analogic.GetInstalledAlarmLibsReply.installed_alarmlibs)
  return &installed_alarmlibs_;
}
const ::google::protobuf::RepeatedPtrField< ::analogic::InstalledAlarmLibInfo >&
GetInstalledAlarmLibsReply::installed_alarmlibs() const {
  // @@protoc_insertion_point(field_list:analogic.GetInstalledAlarmLibsReply.installed_alarmlibs)
  return installed_alarmlibs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetInstallableAlarmLibsRpc::GetInstallableAlarmLibsRpc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analogic.GetInstallableAlarmLibsRpc)
}

void GetInstallableAlarmLibsRpc::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GetInstallableAlarmLibsRpc::GetInstallableAlarmLibsRpc(const GetInstallableAlarmLibsRpc& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analogic.GetInstallableAlarmLibsRpc)
}

void GetInstallableAlarmLibsRpc::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

GetInstallableAlarmLibsRpc::~GetInstallableAlarmLibsRpc() {
  // @@protoc_insertion_point(destructor:analogic.GetInstallableAlarmLibsRpc)
  SharedDtor();
}

void GetInstallableAlarmLibsRpc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetInstallableAlarmLibsRpc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetInstallableAlarmLibsRpc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetInstallableAlarmLibsRpc_descriptor_;
}

const GetInstallableAlarmLibsRpc& GetInstallableAlarmLibsRpc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fCalService_2eproto();
  return *default_instance_;
}

GetInstallableAlarmLibsRpc* GetInstallableAlarmLibsRpc::default_instance_ = NULL;

GetInstallableAlarmLibsRpc* GetInstallableAlarmLibsRpc::New(::google::protobuf::Arena* arena) const {
  GetInstallableAlarmLibsRpc* n = new GetInstallableAlarmLibsRpc;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetInstallableAlarmLibsRpc::Clear() {
// @@protoc_insertion_point(message_clear_start:analogic.GetInstallableAlarmLibsRpc)
}

bool GetInstallableAlarmLibsRpc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analogic.GetInstallableAlarmLibsRpc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:analogic.GetInstallableAlarmLibsRpc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analogic.GetInstallableAlarmLibsRpc)
  return false;
#undef DO_
}

void GetInstallableAlarmLibsRpc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analogic.GetInstallableAlarmLibsRpc)
  // @@protoc_insertion_point(serialize_end:analogic.GetInstallableAlarmLibsRpc)
}

::google::protobuf::uint8* GetInstallableAlarmLibsRpc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analogic.GetInstallableAlarmLibsRpc)
  // @@protoc_insertion_point(serialize_to_array_end:analogic.GetInstallableAlarmLibsRpc)
  return target;
}

int GetInstallableAlarmLibsRpc::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:analogic.GetInstallableAlarmLibsRpc)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetInstallableAlarmLibsRpc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analogic.GetInstallableAlarmLibsRpc)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetInstallableAlarmLibsRpc* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetInstallableAlarmLibsRpc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analogic.GetInstallableAlarmLibsRpc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analogic.GetInstallableAlarmLibsRpc)
    MergeFrom(*source);
  }
}

void GetInstallableAlarmLibsRpc::MergeFrom(const GetInstallableAlarmLibsRpc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analogic.GetInstallableAlarmLibsRpc)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void GetInstallableAlarmLibsRpc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analogic.GetInstallableAlarmLibsRpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInstallableAlarmLibsRpc::CopyFrom(const GetInstallableAlarmLibsRpc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analogic.GetInstallableAlarmLibsRpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInstallableAlarmLibsRpc::IsInitialized() const {

  return true;
}

void GetInstallableAlarmLibsRpc::Swap(GetInstallableAlarmLibsRpc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetInstallableAlarmLibsRpc::InternalSwap(GetInstallableAlarmLibsRpc* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetInstallableAlarmLibsRpc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetInstallableAlarmLibsRpc_descriptor_;
  metadata.reflection = GetInstallableAlarmLibsRpc_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetInstallableAlarmLibsRpc

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetInstallableAlarmLibsReply::kInstallableAlarmlibsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetInstallableAlarmLibsReply::GetInstallableAlarmLibsReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analogic.GetInstallableAlarmLibsReply)
}

void GetInstallableAlarmLibsReply::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GetInstallableAlarmLibsReply::GetInstallableAlarmLibsReply(const GetInstallableAlarmLibsReply& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analogic.GetInstallableAlarmLibsReply)
}

void GetInstallableAlarmLibsReply::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

GetInstallableAlarmLibsReply::~GetInstallableAlarmLibsReply() {
  // @@protoc_insertion_point(destructor:analogic.GetInstallableAlarmLibsReply)
  SharedDtor();
}

void GetInstallableAlarmLibsReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetInstallableAlarmLibsReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetInstallableAlarmLibsReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetInstallableAlarmLibsReply_descriptor_;
}

const GetInstallableAlarmLibsReply& GetInstallableAlarmLibsReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fCalService_2eproto();
  return *default_instance_;
}

GetInstallableAlarmLibsReply* GetInstallableAlarmLibsReply::default_instance_ = NULL;

GetInstallableAlarmLibsReply* GetInstallableAlarmLibsReply::New(::google::protobuf::Arena* arena) const {
  GetInstallableAlarmLibsReply* n = new GetInstallableAlarmLibsReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetInstallableAlarmLibsReply::Clear() {
// @@protoc_insertion_point(message_clear_start:analogic.GetInstallableAlarmLibsReply)
  installable_alarmlibs_.Clear();
}

bool GetInstallableAlarmLibsReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analogic.GetInstallableAlarmLibsReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .analogic.AlarmLibInfo installable_alarmlibs = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_installable_alarmlibs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_installable_alarmlibs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_installable_alarmlibs;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:analogic.GetInstallableAlarmLibsReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analogic.GetInstallableAlarmLibsReply)
  return false;
#undef DO_
}

void GetInstallableAlarmLibsReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analogic.GetInstallableAlarmLibsReply)
  // repeated .analogic.AlarmLibInfo installable_alarmlibs = 1;
  for (unsigned int i = 0, n = this->installable_alarmlibs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->installable_alarmlibs(i), output);
  }

  // @@protoc_insertion_point(serialize_end:analogic.GetInstallableAlarmLibsReply)
}

::google::protobuf::uint8* GetInstallableAlarmLibsReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analogic.GetInstallableAlarmLibsReply)
  // repeated .analogic.AlarmLibInfo installable_alarmlibs = 1;
  for (unsigned int i = 0, n = this->installable_alarmlibs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->installable_alarmlibs(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:analogic.GetInstallableAlarmLibsReply)
  return target;
}

int GetInstallableAlarmLibsReply::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:analogic.GetInstallableAlarmLibsReply)
  int total_size = 0;

  // repeated .analogic.AlarmLibInfo installable_alarmlibs = 1;
  total_size += 1 * this->installable_alarmlibs_size();
  for (int i = 0; i < this->installable_alarmlibs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->installable_alarmlibs(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetInstallableAlarmLibsReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analogic.GetInstallableAlarmLibsReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetInstallableAlarmLibsReply* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetInstallableAlarmLibsReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analogic.GetInstallableAlarmLibsReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analogic.GetInstallableAlarmLibsReply)
    MergeFrom(*source);
  }
}

void GetInstallableAlarmLibsReply::MergeFrom(const GetInstallableAlarmLibsReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analogic.GetInstallableAlarmLibsReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  installable_alarmlibs_.MergeFrom(from.installable_alarmlibs_);
}

void GetInstallableAlarmLibsReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analogic.GetInstallableAlarmLibsReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInstallableAlarmLibsReply::CopyFrom(const GetInstallableAlarmLibsReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analogic.GetInstallableAlarmLibsReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInstallableAlarmLibsReply::IsInitialized() const {

  return true;
}

void GetInstallableAlarmLibsReply::Swap(GetInstallableAlarmLibsReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetInstallableAlarmLibsReply::InternalSwap(GetInstallableAlarmLibsReply* other) {
  installable_alarmlibs_.UnsafeArenaSwap(&other->installable_alarmlibs_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetInstallableAlarmLibsReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetInstallableAlarmLibsReply_descriptor_;
  metadata.reflection = GetInstallableAlarmLibsReply_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetInstallableAlarmLibsReply

// repeated .analogic.AlarmLibInfo installable_alarmlibs = 1;
int GetInstallableAlarmLibsReply::installable_alarmlibs_size() const {
  return installable_alarmlibs_.size();
}
void GetInstallableAlarmLibsReply::clear_installable_alarmlibs() {
  installable_alarmlibs_.Clear();
}
const ::analogic::AlarmLibInfo& GetInstallableAlarmLibsReply::installable_alarmlibs(int index) const {
  // @@protoc_insertion_point(field_get:analogic.GetInstallableAlarmLibsReply.installable_alarmlibs)
  return installable_alarmlibs_.Get(index);
}
::analogic::AlarmLibInfo* GetInstallableAlarmLibsReply::mutable_installable_alarmlibs(int index) {
  // @@protoc_insertion_point(field_mutable:analogic.GetInstallableAlarmLibsReply.installable_alarmlibs)
  return installable_alarmlibs_.Mutable(index);
}
::analogic::AlarmLibInfo* GetInstallableAlarmLibsReply::add_installable_alarmlibs() {
  // @@protoc_insertion_point(field_add:analogic.GetInstallableAlarmLibsReply.installable_alarmlibs)
  return installable_alarmlibs_.Add();
}
::google::protobuf::RepeatedPtrField< ::analogic::AlarmLibInfo >*
GetInstallableAlarmLibsReply::mutable_installable_alarmlibs() {
  // @@protoc_insertion_point(field_mutable_list:analogic.GetInstallableAlarmLibsReply.installable_alarmlibs)
  return &installable_alarmlibs_;
}
const ::google::protobuf::RepeatedPtrField< ::analogic::AlarmLibInfo >&
GetInstallableAlarmLibsReply::installable_alarmlibs() const {
  // @@protoc_insertion_point(field_list:analogic.GetInstallableAlarmLibsReply.installable_alarmlibs)
  return installable_alarmlibs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InstallAlarmLibRpc::kAlarmlibInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InstallAlarmLibRpc::InstallAlarmLibRpc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analogic.InstallAlarmLibRpc)
}

void InstallAlarmLibRpc::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  alarmlib_info_ = const_cast< ::analogic::AlarmLibInfo*>(&::analogic::AlarmLibInfo::default_instance());
}

InstallAlarmLibRpc::InstallAlarmLibRpc(const InstallAlarmLibRpc& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analogic.InstallAlarmLibRpc)
}

void InstallAlarmLibRpc::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  alarmlib_info_ = NULL;
}

InstallAlarmLibRpc::~InstallAlarmLibRpc() {
  // @@protoc_insertion_point(destructor:analogic.InstallAlarmLibRpc)
  SharedDtor();
}

void InstallAlarmLibRpc::SharedDtor() {
  if (this != default_instance_) {
    delete alarmlib_info_;
  }
}

void InstallAlarmLibRpc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstallAlarmLibRpc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstallAlarmLibRpc_descriptor_;
}

const InstallAlarmLibRpc& InstallAlarmLibRpc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fCalService_2eproto();
  return *default_instance_;
}

InstallAlarmLibRpc* InstallAlarmLibRpc::default_instance_ = NULL;

InstallAlarmLibRpc* InstallAlarmLibRpc::New(::google::protobuf::Arena* arena) const {
  InstallAlarmLibRpc* n = new InstallAlarmLibRpc;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InstallAlarmLibRpc::Clear() {
// @@protoc_insertion_point(message_clear_start:analogic.InstallAlarmLibRpc)
  if (GetArenaNoVirtual() == NULL && alarmlib_info_ != NULL) delete alarmlib_info_;
  alarmlib_info_ = NULL;
}

bool InstallAlarmLibRpc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analogic.InstallAlarmLibRpc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .analogic.AlarmLibInfo alarmlib_info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alarmlib_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:analogic.InstallAlarmLibRpc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analogic.InstallAlarmLibRpc)
  return false;
#undef DO_
}

void InstallAlarmLibRpc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analogic.InstallAlarmLibRpc)
  // optional .analogic.AlarmLibInfo alarmlib_info = 1;
  if (this->has_alarmlib_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->alarmlib_info_, output);
  }

  // @@protoc_insertion_point(serialize_end:analogic.InstallAlarmLibRpc)
}

::google::protobuf::uint8* InstallAlarmLibRpc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analogic.InstallAlarmLibRpc)
  // optional .analogic.AlarmLibInfo alarmlib_info = 1;
  if (this->has_alarmlib_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->alarmlib_info_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:analogic.InstallAlarmLibRpc)
  return target;
}

int InstallAlarmLibRpc::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:analogic.InstallAlarmLibRpc)
  int total_size = 0;

  // optional .analogic.AlarmLibInfo alarmlib_info = 1;
  if (this->has_alarmlib_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->alarmlib_info_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstallAlarmLibRpc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analogic.InstallAlarmLibRpc)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const InstallAlarmLibRpc* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InstallAlarmLibRpc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analogic.InstallAlarmLibRpc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analogic.InstallAlarmLibRpc)
    MergeFrom(*source);
  }
}

void InstallAlarmLibRpc::MergeFrom(const InstallAlarmLibRpc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analogic.InstallAlarmLibRpc)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_alarmlib_info()) {
    mutable_alarmlib_info()->::analogic::AlarmLibInfo::MergeFrom(from.alarmlib_info());
  }
}

void InstallAlarmLibRpc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analogic.InstallAlarmLibRpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstallAlarmLibRpc::CopyFrom(const InstallAlarmLibRpc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analogic.InstallAlarmLibRpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstallAlarmLibRpc::IsInitialized() const {

  return true;
}

void InstallAlarmLibRpc::Swap(InstallAlarmLibRpc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InstallAlarmLibRpc::InternalSwap(InstallAlarmLibRpc* other) {
  std::swap(alarmlib_info_, other->alarmlib_info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InstallAlarmLibRpc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InstallAlarmLibRpc_descriptor_;
  metadata.reflection = InstallAlarmLibRpc_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InstallAlarmLibRpc

// optional .analogic.AlarmLibInfo alarmlib_info = 1;
bool InstallAlarmLibRpc::has_alarmlib_info() const {
  return !_is_default_instance_ && alarmlib_info_ != NULL;
}
void InstallAlarmLibRpc::clear_alarmlib_info() {
  if (GetArenaNoVirtual() == NULL && alarmlib_info_ != NULL) delete alarmlib_info_;
  alarmlib_info_ = NULL;
}
const ::analogic::AlarmLibInfo& InstallAlarmLibRpc::alarmlib_info() const {
  // @@protoc_insertion_point(field_get:analogic.InstallAlarmLibRpc.alarmlib_info)
  return alarmlib_info_ != NULL ? *alarmlib_info_ : *default_instance_->alarmlib_info_;
}
::analogic::AlarmLibInfo* InstallAlarmLibRpc::mutable_alarmlib_info() {
  
  if (alarmlib_info_ == NULL) {
    alarmlib_info_ = new ::analogic::AlarmLibInfo;
  }
  // @@protoc_insertion_point(field_mutable:analogic.InstallAlarmLibRpc.alarmlib_info)
  return alarmlib_info_;
}
::analogic::AlarmLibInfo* InstallAlarmLibRpc::release_alarmlib_info() {
  // @@protoc_insertion_point(field_release:analogic.InstallAlarmLibRpc.alarmlib_info)
  
  ::analogic::AlarmLibInfo* temp = alarmlib_info_;
  alarmlib_info_ = NULL;
  return temp;
}
void InstallAlarmLibRpc::set_allocated_alarmlib_info(::analogic::AlarmLibInfo* alarmlib_info) {
  delete alarmlib_info_;
  alarmlib_info_ = alarmlib_info;
  if (alarmlib_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:analogic.InstallAlarmLibRpc.alarmlib_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExportCalParamDataRpc::kFilePathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExportCalParamDataRpc::ExportCalParamDataRpc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analogic.ExportCalParamDataRpc)
}

void ExportCalParamDataRpc::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ExportCalParamDataRpc::ExportCalParamDataRpc(const ExportCalParamDataRpc& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analogic.ExportCalParamDataRpc)
}

void ExportCalParamDataRpc::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  file_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ExportCalParamDataRpc::~ExportCalParamDataRpc() {
  // @@protoc_insertion_point(destructor:analogic.ExportCalParamDataRpc)
  SharedDtor();
}

void ExportCalParamDataRpc::SharedDtor() {
  file_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ExportCalParamDataRpc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExportCalParamDataRpc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExportCalParamDataRpc_descriptor_;
}

const ExportCalParamDataRpc& ExportCalParamDataRpc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fCalService_2eproto();
  return *default_instance_;
}

ExportCalParamDataRpc* ExportCalParamDataRpc::default_instance_ = NULL;

ExportCalParamDataRpc* ExportCalParamDataRpc::New(::google::protobuf::Arena* arena) const {
  ExportCalParamDataRpc* n = new ExportCalParamDataRpc;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExportCalParamDataRpc::Clear() {
// @@protoc_insertion_point(message_clear_start:analogic.ExportCalParamDataRpc)
  file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ExportCalParamDataRpc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analogic.ExportCalParamDataRpc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string file_path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file_path().data(), this->file_path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ExportCalParamDataRpc.file_path"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:analogic.ExportCalParamDataRpc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analogic.ExportCalParamDataRpc)
  return false;
#undef DO_
}

void ExportCalParamDataRpc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analogic.ExportCalParamDataRpc)
  // optional string file_path = 1;
  if (this->file_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_path().data(), this->file_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ExportCalParamDataRpc.file_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->file_path(), output);
  }

  // @@protoc_insertion_point(serialize_end:analogic.ExportCalParamDataRpc)
}

::google::protobuf::uint8* ExportCalParamDataRpc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analogic.ExportCalParamDataRpc)
  // optional string file_path = 1;
  if (this->file_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_path().data(), this->file_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ExportCalParamDataRpc.file_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_path(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:analogic.ExportCalParamDataRpc)
  return target;
}

int ExportCalParamDataRpc::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:analogic.ExportCalParamDataRpc)
  int total_size = 0;

  // optional string file_path = 1;
  if (this->file_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_path());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExportCalParamDataRpc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analogic.ExportCalParamDataRpc)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ExportCalParamDataRpc* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ExportCalParamDataRpc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analogic.ExportCalParamDataRpc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analogic.ExportCalParamDataRpc)
    MergeFrom(*source);
  }
}

void ExportCalParamDataRpc::MergeFrom(const ExportCalParamDataRpc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analogic.ExportCalParamDataRpc)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.file_path().size() > 0) {

    file_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_path_);
  }
}

void ExportCalParamDataRpc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analogic.ExportCalParamDataRpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExportCalParamDataRpc::CopyFrom(const ExportCalParamDataRpc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analogic.ExportCalParamDataRpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExportCalParamDataRpc::IsInitialized() const {

  return true;
}

void ExportCalParamDataRpc::Swap(ExportCalParamDataRpc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExportCalParamDataRpc::InternalSwap(ExportCalParamDataRpc* other) {
  file_path_.Swap(&other->file_path_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExportCalParamDataRpc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExportCalParamDataRpc_descriptor_;
  metadata.reflection = ExportCalParamDataRpc_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExportCalParamDataRpc

// optional string file_path = 1;
void ExportCalParamDataRpc::clear_file_path() {
  file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ExportCalParamDataRpc::file_path() const {
  // @@protoc_insertion_point(field_get:analogic.ExportCalParamDataRpc.file_path)
  return file_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ExportCalParamDataRpc::set_file_path(const ::std::string& value) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ExportCalParamDataRpc.file_path)
}
 void ExportCalParamDataRpc::set_file_path(const char* value) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ExportCalParamDataRpc.file_path)
}
 void ExportCalParamDataRpc::set_file_path(const char* value, size_t size) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ExportCalParamDataRpc.file_path)
}
 ::std::string* ExportCalParamDataRpc::mutable_file_path() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ExportCalParamDataRpc.file_path)
  return file_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ExportCalParamDataRpc::release_file_path() {
  // @@protoc_insertion_point(field_release:analogic.ExportCalParamDataRpc.file_path)
  
  return file_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ExportCalParamDataRpc::set_allocated_file_path(::std::string* file_path) {
  if (file_path != NULL) {
    
  } else {
    
  }
  file_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_path);
  // @@protoc_insertion_point(field_set_allocated:analogic.ExportCalParamDataRpc.file_path)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImportCalParamDataRpc::kFilePathFieldNumber;
const int ImportCalParamDataRpc::kFileNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImportCalParamDataRpc::ImportCalParamDataRpc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analogic.ImportCalParamDataRpc)
}

void ImportCalParamDataRpc::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ImportCalParamDataRpc::ImportCalParamDataRpc(const ImportCalParamDataRpc& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analogic.ImportCalParamDataRpc)
}

void ImportCalParamDataRpc::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  file_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ImportCalParamDataRpc::~ImportCalParamDataRpc() {
  // @@protoc_insertion_point(destructor:analogic.ImportCalParamDataRpc)
  SharedDtor();
}

void ImportCalParamDataRpc::SharedDtor() {
  file_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ImportCalParamDataRpc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImportCalParamDataRpc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImportCalParamDataRpc_descriptor_;
}

const ImportCalParamDataRpc& ImportCalParamDataRpc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fCalService_2eproto();
  return *default_instance_;
}

ImportCalParamDataRpc* ImportCalParamDataRpc::default_instance_ = NULL;

ImportCalParamDataRpc* ImportCalParamDataRpc::New(::google::protobuf::Arena* arena) const {
  ImportCalParamDataRpc* n = new ImportCalParamDataRpc;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImportCalParamDataRpc::Clear() {
// @@protoc_insertion_point(message_clear_start:analogic.ImportCalParamDataRpc)
  file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ImportCalParamDataRpc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analogic.ImportCalParamDataRpc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string file_path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file_path().data(), this->file_path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ImportCalParamDataRpc.file_path"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_file_name;
        break;
      }

      // optional string file_name = 2;
      case 2: {
        if (tag == 18) {
         parse_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file_name().data(), this->file_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ImportCalParamDataRpc.file_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:analogic.ImportCalParamDataRpc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analogic.ImportCalParamDataRpc)
  return false;
#undef DO_
}

void ImportCalParamDataRpc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analogic.ImportCalParamDataRpc)
  // optional string file_path = 1;
  if (this->file_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_path().data(), this->file_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ImportCalParamDataRpc.file_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->file_path(), output);
  }

  // optional string file_name = 2;
  if (this->file_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ImportCalParamDataRpc.file_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->file_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:analogic.ImportCalParamDataRpc)
}

::google::protobuf::uint8* ImportCalParamDataRpc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analogic.ImportCalParamDataRpc)
  // optional string file_path = 1;
  if (this->file_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_path().data(), this->file_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ImportCalParamDataRpc.file_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_path(), target);
  }

  // optional string file_name = 2;
  if (this->file_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ImportCalParamDataRpc.file_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->file_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:analogic.ImportCalParamDataRpc)
  return target;
}

int ImportCalParamDataRpc::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:analogic.ImportCalParamDataRpc)
  int total_size = 0;

  // optional string file_path = 1;
  if (this->file_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_path());
  }

  // optional string file_name = 2;
  if (this->file_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_name());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImportCalParamDataRpc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analogic.ImportCalParamDataRpc)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ImportCalParamDataRpc* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ImportCalParamDataRpc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analogic.ImportCalParamDataRpc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analogic.ImportCalParamDataRpc)
    MergeFrom(*source);
  }
}

void ImportCalParamDataRpc::MergeFrom(const ImportCalParamDataRpc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analogic.ImportCalParamDataRpc)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.file_path().size() > 0) {

    file_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_path_);
  }
  if (from.file_name().size() > 0) {

    file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
}

void ImportCalParamDataRpc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analogic.ImportCalParamDataRpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImportCalParamDataRpc::CopyFrom(const ImportCalParamDataRpc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analogic.ImportCalParamDataRpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImportCalParamDataRpc::IsInitialized() const {

  return true;
}

void ImportCalParamDataRpc::Swap(ImportCalParamDataRpc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImportCalParamDataRpc::InternalSwap(ImportCalParamDataRpc* other) {
  file_path_.Swap(&other->file_path_);
  file_name_.Swap(&other->file_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImportCalParamDataRpc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImportCalParamDataRpc_descriptor_;
  metadata.reflection = ImportCalParamDataRpc_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImportCalParamDataRpc

// optional string file_path = 1;
void ImportCalParamDataRpc::clear_file_path() {
  file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ImportCalParamDataRpc::file_path() const {
  // @@protoc_insertion_point(field_get:analogic.ImportCalParamDataRpc.file_path)
  return file_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ImportCalParamDataRpc::set_file_path(const ::std::string& value) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ImportCalParamDataRpc.file_path)
}
 void ImportCalParamDataRpc::set_file_path(const char* value) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ImportCalParamDataRpc.file_path)
}
 void ImportCalParamDataRpc::set_file_path(const char* value, size_t size) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ImportCalParamDataRpc.file_path)
}
 ::std::string* ImportCalParamDataRpc::mutable_file_path() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ImportCalParamDataRpc.file_path)
  return file_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ImportCalParamDataRpc::release_file_path() {
  // @@protoc_insertion_point(field_release:analogic.ImportCalParamDataRpc.file_path)
  
  return file_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ImportCalParamDataRpc::set_allocated_file_path(::std::string* file_path) {
  if (file_path != NULL) {
    
  } else {
    
  }
  file_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_path);
  // @@protoc_insertion_point(field_set_allocated:analogic.ImportCalParamDataRpc.file_path)
}

// optional string file_name = 2;
void ImportCalParamDataRpc::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ImportCalParamDataRpc::file_name() const {
  // @@protoc_insertion_point(field_get:analogic.ImportCalParamDataRpc.file_name)
  return file_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ImportCalParamDataRpc::set_file_name(const ::std::string& value) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ImportCalParamDataRpc.file_name)
}
 void ImportCalParamDataRpc::set_file_name(const char* value) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ImportCalParamDataRpc.file_name)
}
 void ImportCalParamDataRpc::set_file_name(const char* value, size_t size) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ImportCalParamDataRpc.file_name)
}
 ::std::string* ImportCalParamDataRpc::mutable_file_name() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ImportCalParamDataRpc.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ImportCalParamDataRpc::release_file_name() {
  // @@protoc_insertion_point(field_release:analogic.ImportCalParamDataRpc.file_name)
  
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ImportCalParamDataRpc::set_allocated_file_name(::std::string* file_name) {
  if (file_name != NULL) {
    
  } else {
    
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:analogic.ImportCalParamDataRpc.file_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace analogic

// @@protoc_insertion_point(global_scope)
