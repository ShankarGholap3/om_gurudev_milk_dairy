// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/TempHumidityData.proto

#ifndef PROTOBUF_proto_2fTempHumidityData_2eproto__INCLUDED
#define PROTOBUF_proto_2fTempHumidityData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace analogic {
namespace ancp00 {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_proto_2fTempHumidityData_2eproto();
void protobuf_AssignDesc_proto_2fTempHumidityData_2eproto();
void protobuf_ShutdownFile_proto_2fTempHumidityData_2eproto();

class TempHumidityData;

// ===================================================================

class TempHumidityData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:analogic.ancp00.TempHumidityData) */ {
 public:
  TempHumidityData();
  virtual ~TempHumidityData();

  TempHumidityData(const TempHumidityData& from);

  inline TempHumidityData& operator=(const TempHumidityData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TempHumidityData& default_instance();

  void Swap(TempHumidityData* other);

  // implements Message ----------------------------------------------

  inline TempHumidityData* New() const { return New(NULL); }

  TempHumidityData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TempHumidityData& from);
  void MergeFrom(const TempHumidityData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TempHumidityData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float temp = 1;
  void clear_temp();
  static const int kTempFieldNumber = 1;
  float temp() const;
  void set_temp(float value);

  // optional float humidity = 2;
  void clear_humidity();
  static const int kHumidityFieldNumber = 2;
  float humidity() const;
  void set_humidity(float value);

  // @@protoc_insertion_point(class_scope:analogic.ancp00.TempHumidityData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  float temp_;
  float humidity_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_proto_2fTempHumidityData_2eproto();
  friend void protobuf_AssignDesc_proto_2fTempHumidityData_2eproto();
  friend void protobuf_ShutdownFile_proto_2fTempHumidityData_2eproto();

  void InitAsDefaultInstance();
  static TempHumidityData* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// TempHumidityData

// optional float temp = 1;
inline void TempHumidityData::clear_temp() {
  temp_ = 0;
}
inline float TempHumidityData::temp() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.TempHumidityData.temp)
  return temp_;
}
inline void TempHumidityData::set_temp(float value) {
  
  temp_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.TempHumidityData.temp)
}

// optional float humidity = 2;
inline void TempHumidityData::clear_humidity() {
  humidity_ = 0;
}
inline float TempHumidityData::humidity() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.TempHumidityData.humidity)
  return humidity_;
}
inline void TempHumidityData::set_humidity(float value) {
  
  humidity_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.TempHumidityData.humidity)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ancp00
}  // namespace analogic

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_2fTempHumidityData_2eproto__INCLUDED
