// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/Comm.proto

#ifndef PROTOBUF_proto_2fComm_2eproto__INCLUDED
#define PROTOBUF_proto_2fComm_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "proto/SubsystemIds.pb.h"
// @@protoc_insertion_point(includes)

namespace analogic {
namespace ancp00 {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_proto_2fComm_2eproto();
void protobuf_AssignDesc_proto_2fComm_2eproto();
void protobuf_ShutdownFile_proto_2fComm_2eproto();

class CommMonitorStatus;
class CommStatusMsg;

enum CommStatusMsg_CommState {
  CommStatusMsg_CommState_NOT_CONFIGURED = 0,
  CommStatusMsg_CommState_OFFLINE = 1,
  CommStatusMsg_CommState_ONLINE = 2,
  CommStatusMsg_CommState_CommStatusMsg_CommState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CommStatusMsg_CommState_CommStatusMsg_CommState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CommStatusMsg_CommState_IsValid(int value);
const CommStatusMsg_CommState CommStatusMsg_CommState_CommState_MIN = CommStatusMsg_CommState_NOT_CONFIGURED;
const CommStatusMsg_CommState CommStatusMsg_CommState_CommState_MAX = CommStatusMsg_CommState_ONLINE;
const int CommStatusMsg_CommState_CommState_ARRAYSIZE = CommStatusMsg_CommState_CommState_MAX + 1;

const ::google::protobuf::EnumDescriptor* CommStatusMsg_CommState_descriptor();
inline const ::std::string& CommStatusMsg_CommState_Name(CommStatusMsg_CommState value) {
  return ::google::protobuf::internal::NameOfEnum(
    CommStatusMsg_CommState_descriptor(), value);
}
inline bool CommStatusMsg_CommState_Parse(
    const ::std::string& name, CommStatusMsg_CommState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CommStatusMsg_CommState>(
    CommStatusMsg_CommState_descriptor(), name, value);
}
// ===================================================================

class CommStatusMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:analogic.ancp00.CommStatusMsg) */ {
 public:
  CommStatusMsg();
  virtual ~CommStatusMsg();

  CommStatusMsg(const CommStatusMsg& from);

  inline CommStatusMsg& operator=(const CommStatusMsg& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommStatusMsg& default_instance();

  void Swap(CommStatusMsg* other);

  // implements Message ----------------------------------------------

  inline CommStatusMsg* New() const { return New(NULL); }

  CommStatusMsg* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommStatusMsg& from);
  void MergeFrom(const CommStatusMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CommStatusMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CommStatusMsg_CommState CommState;
  static const CommState NOT_CONFIGURED =
    CommStatusMsg_CommState_NOT_CONFIGURED;
  static const CommState OFFLINE =
    CommStatusMsg_CommState_OFFLINE;
  static const CommState ONLINE =
    CommStatusMsg_CommState_ONLINE;
  static inline bool CommState_IsValid(int value) {
    return CommStatusMsg_CommState_IsValid(value);
  }
  static const CommState CommState_MIN =
    CommStatusMsg_CommState_CommState_MIN;
  static const CommState CommState_MAX =
    CommStatusMsg_CommState_CommState_MAX;
  static const int CommState_ARRAYSIZE =
    CommStatusMsg_CommState_CommState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CommState_descriptor() {
    return CommStatusMsg_CommState_descriptor();
  }
  static inline const ::std::string& CommState_Name(CommState value) {
    return CommStatusMsg_CommState_Name(value);
  }
  static inline bool CommState_Parse(const ::std::string& name,
      CommState* value) {
    return CommStatusMsg_CommState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .analogic.ancp00.SUBSYSTEM_ID subsys_id = 1;
  void clear_subsys_id();
  static const int kSubsysIdFieldNumber = 1;
  ::analogic::ancp00::SUBSYSTEM_ID subsys_id() const;
  void set_subsys_id(::analogic::ancp00::SUBSYSTEM_ID value);

  // optional .analogic.ancp00.CommStatusMsg.CommState comm_state = 2;
  void clear_comm_state();
  static const int kCommStateFieldNumber = 2;
  ::analogic::ancp00::CommStatusMsg_CommState comm_state() const;
  void set_comm_state(::analogic::ancp00::CommStatusMsg_CommState value);

  // optional fixed32 data = 3;
  void clear_data();
  static const int kDataFieldNumber = 3;
  ::google::protobuf::uint32 data() const;
  void set_data(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:analogic.ancp00.CommStatusMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  int subsys_id_;
  int comm_state_;
  ::google::protobuf::uint32 data_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_proto_2fComm_2eproto();
  friend void protobuf_AssignDesc_proto_2fComm_2eproto();
  friend void protobuf_ShutdownFile_proto_2fComm_2eproto();

  void InitAsDefaultInstance();
  static CommStatusMsg* default_instance_;
};
// -------------------------------------------------------------------

class CommMonitorStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:analogic.ancp00.CommMonitorStatus) */ {
 public:
  CommMonitorStatus();
  virtual ~CommMonitorStatus();

  CommMonitorStatus(const CommMonitorStatus& from);

  inline CommMonitorStatus& operator=(const CommMonitorStatus& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommMonitorStatus& default_instance();

  void Swap(CommMonitorStatus* other);

  // implements Message ----------------------------------------------

  inline CommMonitorStatus* New() const { return New(NULL); }

  CommMonitorStatus* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommMonitorStatus& from);
  void MergeFrom(const CommMonitorStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CommMonitorStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .analogic.ancp00.CommStatusMsg.CommState network_status = 1;
  void clear_network_status();
  static const int kNetworkStatusFieldNumber = 1;
  ::analogic::ancp00::CommStatusMsg_CommState network_status() const;
  void set_network_status(::analogic::ancp00::CommStatusMsg_CommState value);

  // optional .analogic.ancp00.CommStatusMsg.CommState bhs_integrated_lane_status = 2;
  void clear_bhs_integrated_lane_status();
  static const int kBhsIntegratedLaneStatusFieldNumber = 2;
  ::analogic::ancp00::CommStatusMsg_CommState bhs_integrated_lane_status() const;
  void set_bhs_integrated_lane_status(::analogic::ancp00::CommStatusMsg_CommState value);

  // optional .analogic.ancp00.CommStatusMsg.CommState scanner_control_computer = 3;
  void clear_scanner_control_computer();
  static const int kScannerControlComputerFieldNumber = 3;
  ::analogic::ancp00::CommStatusMsg_CommState scanner_control_computer() const;
  void set_scanner_control_computer(::analogic::ancp00::CommStatusMsg_CommState value);

  // optional .analogic.ancp00.CommStatusMsg.CommState ups_status = 4;
  void clear_ups_status();
  static const int kUpsStatusFieldNumber = 4;
  ::analogic::ancp00::CommStatusMsg_CommState ups_status() const;
  void set_ups_status(::analogic::ancp00::CommStatusMsg_CommState value);

  // optional .analogic.ancp00.CommStatusMsg.CommState drb_status = 5;
  void clear_drb_status();
  static const int kDrbStatusFieldNumber = 5;
  ::analogic::ancp00::CommStatusMsg_CommState drb_status() const;
  void set_drb_status(::analogic::ancp00::CommStatusMsg_CommState value);

  // optional .analogic.ancp00.CommStatusMsg.CommState safetyio_status = 6;
  void clear_safetyio_status();
  static const int kSafetyioStatusFieldNumber = 6;
  ::analogic::ancp00::CommStatusMsg_CommState safetyio_status() const;
  void set_safetyio_status(::analogic::ancp00::CommStatusMsg_CommState value);

  // optional .analogic.ancp00.CommStatusMsg.CommState rotor_control_board_status = 7;
  void clear_rotor_control_board_status();
  static const int kRotorControlBoardStatusFieldNumber = 7;
  ::analogic::ancp00::CommStatusMsg_CommState rotor_control_board_status() const;
  void set_rotor_control_board_status(::analogic::ancp00::CommStatusMsg_CommState value);

  // optional .analogic.ancp00.CommStatusMsg.CommState xray_status = 8;
  void clear_xray_status();
  static const int kXrayStatusFieldNumber = 8;
  ::analogic::ancp00::CommStatusMsg_CommState xray_status() const;
  void set_xray_status(::analogic::ancp00::CommStatusMsg_CommState value);

  // optional .analogic.ancp00.CommStatusMsg.CommState serial_server_1_status = 9;
  void clear_serial_server_1_status();
  static const int kSerialServer1StatusFieldNumber = 9;
  ::analogic::ancp00::CommStatusMsg_CommState serial_server_1_status() const;
  void set_serial_server_1_status(::analogic::ancp00::CommStatusMsg_CommState value);

  // optional .analogic.ancp00.CommStatusMsg.CommState serial_server_2_status = 10;
  void clear_serial_server_2_status();
  static const int kSerialServer2StatusFieldNumber = 10;
  ::analogic::ancp00::CommStatusMsg_CommState serial_server_2_status() const;
  void set_serial_server_2_status(::analogic::ancp00::CommStatusMsg_CommState value);

  // optional .analogic.ancp00.CommStatusMsg.CommState gantry_drive_status = 11;
  void clear_gantry_drive_status();
  static const int kGantryDriveStatusFieldNumber = 11;
  ::analogic::ancp00::CommStatusMsg_CommState gantry_drive_status() const;
  void set_gantry_drive_status(::analogic::ancp00::CommStatusMsg_CommState value);

  // optional .analogic.ancp00.CommStatusMsg.CommState conveyor_drive_status = 12;
  void clear_conveyor_drive_status();
  static const int kConveyorDriveStatusFieldNumber = 12;
  ::analogic::ancp00::CommStatusMsg_CommState conveyor_drive_status() const;
  void set_conveyor_drive_status(::analogic::ancp00::CommStatusMsg_CommState value);

  // optional .analogic.ancp00.CommStatusMsg.CommState temphumidity_status = 13;
  void clear_temphumidity_status();
  static const int kTemphumidityStatusFieldNumber = 13;
  ::analogic::ancp00::CommStatusMsg_CommState temphumidity_status() const;
  void set_temphumidity_status(::analogic::ancp00::CommStatusMsg_CommState value);

  // optional .analogic.ancp00.CommStatusMsg.CommState powerlink_status = 14;
  void clear_powerlink_status();
  static const int kPowerlinkStatusFieldNumber = 14;
  ::analogic::ancp00::CommStatusMsg_CommState powerlink_status() const;
  void set_powerlink_status(::analogic::ancp00::CommStatusMsg_CommState value);

  // optional .analogic.ancp00.CommStatusMsg.CommState dcb_1_status = 15;
  void clear_dcb_1_status();
  static const int kDcb1StatusFieldNumber = 15;
  ::analogic::ancp00::CommStatusMsg_CommState dcb_1_status() const;
  void set_dcb_1_status(::analogic::ancp00::CommStatusMsg_CommState value);

  // optional .analogic.ancp00.CommStatusMsg.CommState dcb_2_status = 16;
  void clear_dcb_2_status();
  static const int kDcb2StatusFieldNumber = 16;
  ::analogic::ancp00::CommStatusMsg_CommState dcb_2_status() const;
  void set_dcb_2_status(::analogic::ancp00::CommStatusMsg_CommState value);

  // optional .analogic.ancp00.CommStatusMsg.CommState dcb_3_status = 17;
  void clear_dcb_3_status();
  static const int kDcb3StatusFieldNumber = 17;
  ::analogic::ancp00::CommStatusMsg_CommState dcb_3_status() const;
  void set_dcb_3_status(::analogic::ancp00::CommStatusMsg_CommState value);

  // optional .analogic.ancp00.CommStatusMsg.CommState dcb_4_status = 18;
  void clear_dcb_4_status();
  static const int kDcb4StatusFieldNumber = 18;
  ::analogic::ancp00::CommStatusMsg_CommState dcb_4_status() const;
  void set_dcb_4_status(::analogic::ancp00::CommStatusMsg_CommState value);

  // optional .analogic.ancp00.CommStatusMsg.CommState dcb_5_status = 19;
  void clear_dcb_5_status();
  static const int kDcb5StatusFieldNumber = 19;
  ::analogic::ancp00::CommStatusMsg_CommState dcb_5_status() const;
  void set_dcb_5_status(::analogic::ancp00::CommStatusMsg_CommState value);

  // optional .analogic.ancp00.CommStatusMsg.CommState power_meter_status = 20;
  void clear_power_meter_status();
  static const int kPowerMeterStatusFieldNumber = 20;
  ::analogic::ancp00::CommStatusMsg_CommState power_meter_status() const;
  void set_power_meter_status(::analogic::ancp00::CommStatusMsg_CommState value);

  // optional fixed32 uplink_cmd_status = 30;
  void clear_uplink_cmd_status();
  static const int kUplinkCmdStatusFieldNumber = 30;
  ::google::protobuf::uint32 uplink_cmd_status() const;
  void set_uplink_cmd_status(::google::protobuf::uint32 value);

  // optional fixed32 uplink_readback_status = 31;
  void clear_uplink_readback_status();
  static const int kUplinkReadbackStatusFieldNumber = 31;
  ::google::protobuf::uint32 uplink_readback_status() const;
  void set_uplink_readback_status(::google::protobuf::uint32 value);

  // optional string network_ip_address = 40;
  void clear_network_ip_address();
  static const int kNetworkIpAddressFieldNumber = 40;
  const ::std::string& network_ip_address() const;
  void set_network_ip_address(const ::std::string& value);
  void set_network_ip_address(const char* value);
  void set_network_ip_address(const char* value, size_t size);
  ::std::string* mutable_network_ip_address();
  ::std::string* release_network_ip_address();
  void set_allocated_network_ip_address(::std::string* network_ip_address);

  // optional string bhs_smartlane_ip_address = 41;
  void clear_bhs_smartlane_ip_address();
  static const int kBhsSmartlaneIpAddressFieldNumber = 41;
  const ::std::string& bhs_smartlane_ip_address() const;
  void set_bhs_smartlane_ip_address(const ::std::string& value);
  void set_bhs_smartlane_ip_address(const char* value);
  void set_bhs_smartlane_ip_address(const char* value, size_t size);
  ::std::string* mutable_bhs_smartlane_ip_address();
  ::std::string* release_bhs_smartlane_ip_address();
  void set_allocated_bhs_smartlane_ip_address(::std::string* bhs_smartlane_ip_address);

  // optional bool system_comm_online = 50;
  void clear_system_comm_online();
  static const int kSystemCommOnlineFieldNumber = 50;
  bool system_comm_online() const;
  void set_system_comm_online(bool value);

  // @@protoc_insertion_point(class_scope:analogic.ancp00.CommMonitorStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  int network_status_;
  int bhs_integrated_lane_status_;
  int scanner_control_computer_;
  int ups_status_;
  int drb_status_;
  int safetyio_status_;
  int rotor_control_board_status_;
  int xray_status_;
  int serial_server_1_status_;
  int serial_server_2_status_;
  int gantry_drive_status_;
  int conveyor_drive_status_;
  int temphumidity_status_;
  int powerlink_status_;
  int dcb_1_status_;
  int dcb_2_status_;
  int dcb_3_status_;
  int dcb_4_status_;
  int dcb_5_status_;
  int power_meter_status_;
  ::google::protobuf::uint32 uplink_cmd_status_;
  ::google::protobuf::uint32 uplink_readback_status_;
  ::google::protobuf::internal::ArenaStringPtr network_ip_address_;
  ::google::protobuf::internal::ArenaStringPtr bhs_smartlane_ip_address_;
  bool system_comm_online_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_proto_2fComm_2eproto();
  friend void protobuf_AssignDesc_proto_2fComm_2eproto();
  friend void protobuf_ShutdownFile_proto_2fComm_2eproto();

  void InitAsDefaultInstance();
  static CommMonitorStatus* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CommStatusMsg

// optional .analogic.ancp00.SUBSYSTEM_ID subsys_id = 1;
inline void CommStatusMsg::clear_subsys_id() {
  subsys_id_ = 0;
}
inline ::analogic::ancp00::SUBSYSTEM_ID CommStatusMsg::subsys_id() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.CommStatusMsg.subsys_id)
  return static_cast< ::analogic::ancp00::SUBSYSTEM_ID >(subsys_id_);
}
inline void CommStatusMsg::set_subsys_id(::analogic::ancp00::SUBSYSTEM_ID value) {
  
  subsys_id_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.CommStatusMsg.subsys_id)
}

// optional .analogic.ancp00.CommStatusMsg.CommState comm_state = 2;
inline void CommStatusMsg::clear_comm_state() {
  comm_state_ = 0;
}
inline ::analogic::ancp00::CommStatusMsg_CommState CommStatusMsg::comm_state() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.CommStatusMsg.comm_state)
  return static_cast< ::analogic::ancp00::CommStatusMsg_CommState >(comm_state_);
}
inline void CommStatusMsg::set_comm_state(::analogic::ancp00::CommStatusMsg_CommState value) {
  
  comm_state_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.CommStatusMsg.comm_state)
}

// optional fixed32 data = 3;
inline void CommStatusMsg::clear_data() {
  data_ = 0u;
}
inline ::google::protobuf::uint32 CommStatusMsg::data() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.CommStatusMsg.data)
  return data_;
}
inline void CommStatusMsg::set_data(::google::protobuf::uint32 value) {
  
  data_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.CommStatusMsg.data)
}

// -------------------------------------------------------------------

// CommMonitorStatus

// optional .analogic.ancp00.CommStatusMsg.CommState network_status = 1;
inline void CommMonitorStatus::clear_network_status() {
  network_status_ = 0;
}
inline ::analogic::ancp00::CommStatusMsg_CommState CommMonitorStatus::network_status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.CommMonitorStatus.network_status)
  return static_cast< ::analogic::ancp00::CommStatusMsg_CommState >(network_status_);
}
inline void CommMonitorStatus::set_network_status(::analogic::ancp00::CommStatusMsg_CommState value) {
  
  network_status_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.CommMonitorStatus.network_status)
}

// optional .analogic.ancp00.CommStatusMsg.CommState bhs_integrated_lane_status = 2;
inline void CommMonitorStatus::clear_bhs_integrated_lane_status() {
  bhs_integrated_lane_status_ = 0;
}
inline ::analogic::ancp00::CommStatusMsg_CommState CommMonitorStatus::bhs_integrated_lane_status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.CommMonitorStatus.bhs_integrated_lane_status)
  return static_cast< ::analogic::ancp00::CommStatusMsg_CommState >(bhs_integrated_lane_status_);
}
inline void CommMonitorStatus::set_bhs_integrated_lane_status(::analogic::ancp00::CommStatusMsg_CommState value) {
  
  bhs_integrated_lane_status_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.CommMonitorStatus.bhs_integrated_lane_status)
}

// optional .analogic.ancp00.CommStatusMsg.CommState scanner_control_computer = 3;
inline void CommMonitorStatus::clear_scanner_control_computer() {
  scanner_control_computer_ = 0;
}
inline ::analogic::ancp00::CommStatusMsg_CommState CommMonitorStatus::scanner_control_computer() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.CommMonitorStatus.scanner_control_computer)
  return static_cast< ::analogic::ancp00::CommStatusMsg_CommState >(scanner_control_computer_);
}
inline void CommMonitorStatus::set_scanner_control_computer(::analogic::ancp00::CommStatusMsg_CommState value) {
  
  scanner_control_computer_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.CommMonitorStatus.scanner_control_computer)
}

// optional .analogic.ancp00.CommStatusMsg.CommState ups_status = 4;
inline void CommMonitorStatus::clear_ups_status() {
  ups_status_ = 0;
}
inline ::analogic::ancp00::CommStatusMsg_CommState CommMonitorStatus::ups_status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.CommMonitorStatus.ups_status)
  return static_cast< ::analogic::ancp00::CommStatusMsg_CommState >(ups_status_);
}
inline void CommMonitorStatus::set_ups_status(::analogic::ancp00::CommStatusMsg_CommState value) {
  
  ups_status_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.CommMonitorStatus.ups_status)
}

// optional .analogic.ancp00.CommStatusMsg.CommState drb_status = 5;
inline void CommMonitorStatus::clear_drb_status() {
  drb_status_ = 0;
}
inline ::analogic::ancp00::CommStatusMsg_CommState CommMonitorStatus::drb_status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.CommMonitorStatus.drb_status)
  return static_cast< ::analogic::ancp00::CommStatusMsg_CommState >(drb_status_);
}
inline void CommMonitorStatus::set_drb_status(::analogic::ancp00::CommStatusMsg_CommState value) {
  
  drb_status_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.CommMonitorStatus.drb_status)
}

// optional .analogic.ancp00.CommStatusMsg.CommState safetyio_status = 6;
inline void CommMonitorStatus::clear_safetyio_status() {
  safetyio_status_ = 0;
}
inline ::analogic::ancp00::CommStatusMsg_CommState CommMonitorStatus::safetyio_status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.CommMonitorStatus.safetyio_status)
  return static_cast< ::analogic::ancp00::CommStatusMsg_CommState >(safetyio_status_);
}
inline void CommMonitorStatus::set_safetyio_status(::analogic::ancp00::CommStatusMsg_CommState value) {
  
  safetyio_status_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.CommMonitorStatus.safetyio_status)
}

// optional .analogic.ancp00.CommStatusMsg.CommState rotor_control_board_status = 7;
inline void CommMonitorStatus::clear_rotor_control_board_status() {
  rotor_control_board_status_ = 0;
}
inline ::analogic::ancp00::CommStatusMsg_CommState CommMonitorStatus::rotor_control_board_status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.CommMonitorStatus.rotor_control_board_status)
  return static_cast< ::analogic::ancp00::CommStatusMsg_CommState >(rotor_control_board_status_);
}
inline void CommMonitorStatus::set_rotor_control_board_status(::analogic::ancp00::CommStatusMsg_CommState value) {
  
  rotor_control_board_status_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.CommMonitorStatus.rotor_control_board_status)
}

// optional .analogic.ancp00.CommStatusMsg.CommState xray_status = 8;
inline void CommMonitorStatus::clear_xray_status() {
  xray_status_ = 0;
}
inline ::analogic::ancp00::CommStatusMsg_CommState CommMonitorStatus::xray_status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.CommMonitorStatus.xray_status)
  return static_cast< ::analogic::ancp00::CommStatusMsg_CommState >(xray_status_);
}
inline void CommMonitorStatus::set_xray_status(::analogic::ancp00::CommStatusMsg_CommState value) {
  
  xray_status_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.CommMonitorStatus.xray_status)
}

// optional .analogic.ancp00.CommStatusMsg.CommState serial_server_1_status = 9;
inline void CommMonitorStatus::clear_serial_server_1_status() {
  serial_server_1_status_ = 0;
}
inline ::analogic::ancp00::CommStatusMsg_CommState CommMonitorStatus::serial_server_1_status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.CommMonitorStatus.serial_server_1_status)
  return static_cast< ::analogic::ancp00::CommStatusMsg_CommState >(serial_server_1_status_);
}
inline void CommMonitorStatus::set_serial_server_1_status(::analogic::ancp00::CommStatusMsg_CommState value) {
  
  serial_server_1_status_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.CommMonitorStatus.serial_server_1_status)
}

// optional .analogic.ancp00.CommStatusMsg.CommState serial_server_2_status = 10;
inline void CommMonitorStatus::clear_serial_server_2_status() {
  serial_server_2_status_ = 0;
}
inline ::analogic::ancp00::CommStatusMsg_CommState CommMonitorStatus::serial_server_2_status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.CommMonitorStatus.serial_server_2_status)
  return static_cast< ::analogic::ancp00::CommStatusMsg_CommState >(serial_server_2_status_);
}
inline void CommMonitorStatus::set_serial_server_2_status(::analogic::ancp00::CommStatusMsg_CommState value) {
  
  serial_server_2_status_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.CommMonitorStatus.serial_server_2_status)
}

// optional .analogic.ancp00.CommStatusMsg.CommState gantry_drive_status = 11;
inline void CommMonitorStatus::clear_gantry_drive_status() {
  gantry_drive_status_ = 0;
}
inline ::analogic::ancp00::CommStatusMsg_CommState CommMonitorStatus::gantry_drive_status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.CommMonitorStatus.gantry_drive_status)
  return static_cast< ::analogic::ancp00::CommStatusMsg_CommState >(gantry_drive_status_);
}
inline void CommMonitorStatus::set_gantry_drive_status(::analogic::ancp00::CommStatusMsg_CommState value) {
  
  gantry_drive_status_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.CommMonitorStatus.gantry_drive_status)
}

// optional .analogic.ancp00.CommStatusMsg.CommState conveyor_drive_status = 12;
inline void CommMonitorStatus::clear_conveyor_drive_status() {
  conveyor_drive_status_ = 0;
}
inline ::analogic::ancp00::CommStatusMsg_CommState CommMonitorStatus::conveyor_drive_status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.CommMonitorStatus.conveyor_drive_status)
  return static_cast< ::analogic::ancp00::CommStatusMsg_CommState >(conveyor_drive_status_);
}
inline void CommMonitorStatus::set_conveyor_drive_status(::analogic::ancp00::CommStatusMsg_CommState value) {
  
  conveyor_drive_status_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.CommMonitorStatus.conveyor_drive_status)
}

// optional .analogic.ancp00.CommStatusMsg.CommState temphumidity_status = 13;
inline void CommMonitorStatus::clear_temphumidity_status() {
  temphumidity_status_ = 0;
}
inline ::analogic::ancp00::CommStatusMsg_CommState CommMonitorStatus::temphumidity_status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.CommMonitorStatus.temphumidity_status)
  return static_cast< ::analogic::ancp00::CommStatusMsg_CommState >(temphumidity_status_);
}
inline void CommMonitorStatus::set_temphumidity_status(::analogic::ancp00::CommStatusMsg_CommState value) {
  
  temphumidity_status_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.CommMonitorStatus.temphumidity_status)
}

// optional .analogic.ancp00.CommStatusMsg.CommState powerlink_status = 14;
inline void CommMonitorStatus::clear_powerlink_status() {
  powerlink_status_ = 0;
}
inline ::analogic::ancp00::CommStatusMsg_CommState CommMonitorStatus::powerlink_status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.CommMonitorStatus.powerlink_status)
  return static_cast< ::analogic::ancp00::CommStatusMsg_CommState >(powerlink_status_);
}
inline void CommMonitorStatus::set_powerlink_status(::analogic::ancp00::CommStatusMsg_CommState value) {
  
  powerlink_status_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.CommMonitorStatus.powerlink_status)
}

// optional .analogic.ancp00.CommStatusMsg.CommState dcb_1_status = 15;
inline void CommMonitorStatus::clear_dcb_1_status() {
  dcb_1_status_ = 0;
}
inline ::analogic::ancp00::CommStatusMsg_CommState CommMonitorStatus::dcb_1_status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.CommMonitorStatus.dcb_1_status)
  return static_cast< ::analogic::ancp00::CommStatusMsg_CommState >(dcb_1_status_);
}
inline void CommMonitorStatus::set_dcb_1_status(::analogic::ancp00::CommStatusMsg_CommState value) {
  
  dcb_1_status_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.CommMonitorStatus.dcb_1_status)
}

// optional .analogic.ancp00.CommStatusMsg.CommState dcb_2_status = 16;
inline void CommMonitorStatus::clear_dcb_2_status() {
  dcb_2_status_ = 0;
}
inline ::analogic::ancp00::CommStatusMsg_CommState CommMonitorStatus::dcb_2_status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.CommMonitorStatus.dcb_2_status)
  return static_cast< ::analogic::ancp00::CommStatusMsg_CommState >(dcb_2_status_);
}
inline void CommMonitorStatus::set_dcb_2_status(::analogic::ancp00::CommStatusMsg_CommState value) {
  
  dcb_2_status_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.CommMonitorStatus.dcb_2_status)
}

// optional .analogic.ancp00.CommStatusMsg.CommState dcb_3_status = 17;
inline void CommMonitorStatus::clear_dcb_3_status() {
  dcb_3_status_ = 0;
}
inline ::analogic::ancp00::CommStatusMsg_CommState CommMonitorStatus::dcb_3_status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.CommMonitorStatus.dcb_3_status)
  return static_cast< ::analogic::ancp00::CommStatusMsg_CommState >(dcb_3_status_);
}
inline void CommMonitorStatus::set_dcb_3_status(::analogic::ancp00::CommStatusMsg_CommState value) {
  
  dcb_3_status_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.CommMonitorStatus.dcb_3_status)
}

// optional .analogic.ancp00.CommStatusMsg.CommState dcb_4_status = 18;
inline void CommMonitorStatus::clear_dcb_4_status() {
  dcb_4_status_ = 0;
}
inline ::analogic::ancp00::CommStatusMsg_CommState CommMonitorStatus::dcb_4_status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.CommMonitorStatus.dcb_4_status)
  return static_cast< ::analogic::ancp00::CommStatusMsg_CommState >(dcb_4_status_);
}
inline void CommMonitorStatus::set_dcb_4_status(::analogic::ancp00::CommStatusMsg_CommState value) {
  
  dcb_4_status_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.CommMonitorStatus.dcb_4_status)
}

// optional .analogic.ancp00.CommStatusMsg.CommState dcb_5_status = 19;
inline void CommMonitorStatus::clear_dcb_5_status() {
  dcb_5_status_ = 0;
}
inline ::analogic::ancp00::CommStatusMsg_CommState CommMonitorStatus::dcb_5_status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.CommMonitorStatus.dcb_5_status)
  return static_cast< ::analogic::ancp00::CommStatusMsg_CommState >(dcb_5_status_);
}
inline void CommMonitorStatus::set_dcb_5_status(::analogic::ancp00::CommStatusMsg_CommState value) {
  
  dcb_5_status_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.CommMonitorStatus.dcb_5_status)
}

// optional .analogic.ancp00.CommStatusMsg.CommState power_meter_status = 20;
inline void CommMonitorStatus::clear_power_meter_status() {
  power_meter_status_ = 0;
}
inline ::analogic::ancp00::CommStatusMsg_CommState CommMonitorStatus::power_meter_status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.CommMonitorStatus.power_meter_status)
  return static_cast< ::analogic::ancp00::CommStatusMsg_CommState >(power_meter_status_);
}
inline void CommMonitorStatus::set_power_meter_status(::analogic::ancp00::CommStatusMsg_CommState value) {
  
  power_meter_status_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.CommMonitorStatus.power_meter_status)
}

// optional fixed32 uplink_cmd_status = 30;
inline void CommMonitorStatus::clear_uplink_cmd_status() {
  uplink_cmd_status_ = 0u;
}
inline ::google::protobuf::uint32 CommMonitorStatus::uplink_cmd_status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.CommMonitorStatus.uplink_cmd_status)
  return uplink_cmd_status_;
}
inline void CommMonitorStatus::set_uplink_cmd_status(::google::protobuf::uint32 value) {
  
  uplink_cmd_status_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.CommMonitorStatus.uplink_cmd_status)
}

// optional fixed32 uplink_readback_status = 31;
inline void CommMonitorStatus::clear_uplink_readback_status() {
  uplink_readback_status_ = 0u;
}
inline ::google::protobuf::uint32 CommMonitorStatus::uplink_readback_status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.CommMonitorStatus.uplink_readback_status)
  return uplink_readback_status_;
}
inline void CommMonitorStatus::set_uplink_readback_status(::google::protobuf::uint32 value) {
  
  uplink_readback_status_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.CommMonitorStatus.uplink_readback_status)
}

// optional string network_ip_address = 40;
inline void CommMonitorStatus::clear_network_ip_address() {
  network_ip_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CommMonitorStatus::network_ip_address() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.CommMonitorStatus.network_ip_address)
  return network_ip_address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommMonitorStatus::set_network_ip_address(const ::std::string& value) {
  
  network_ip_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.CommMonitorStatus.network_ip_address)
}
inline void CommMonitorStatus::set_network_ip_address(const char* value) {
  
  network_ip_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.CommMonitorStatus.network_ip_address)
}
inline void CommMonitorStatus::set_network_ip_address(const char* value, size_t size) {
  
  network_ip_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.CommMonitorStatus.network_ip_address)
}
inline ::std::string* CommMonitorStatus::mutable_network_ip_address() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.CommMonitorStatus.network_ip_address)
  return network_ip_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommMonitorStatus::release_network_ip_address() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.CommMonitorStatus.network_ip_address)
  
  return network_ip_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommMonitorStatus::set_allocated_network_ip_address(::std::string* network_ip_address) {
  if (network_ip_address != NULL) {
    
  } else {
    
  }
  network_ip_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), network_ip_address);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.CommMonitorStatus.network_ip_address)
}

// optional string bhs_smartlane_ip_address = 41;
inline void CommMonitorStatus::clear_bhs_smartlane_ip_address() {
  bhs_smartlane_ip_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CommMonitorStatus::bhs_smartlane_ip_address() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.CommMonitorStatus.bhs_smartlane_ip_address)
  return bhs_smartlane_ip_address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommMonitorStatus::set_bhs_smartlane_ip_address(const ::std::string& value) {
  
  bhs_smartlane_ip_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.CommMonitorStatus.bhs_smartlane_ip_address)
}
inline void CommMonitorStatus::set_bhs_smartlane_ip_address(const char* value) {
  
  bhs_smartlane_ip_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.CommMonitorStatus.bhs_smartlane_ip_address)
}
inline void CommMonitorStatus::set_bhs_smartlane_ip_address(const char* value, size_t size) {
  
  bhs_smartlane_ip_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.CommMonitorStatus.bhs_smartlane_ip_address)
}
inline ::std::string* CommMonitorStatus::mutable_bhs_smartlane_ip_address() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.CommMonitorStatus.bhs_smartlane_ip_address)
  return bhs_smartlane_ip_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommMonitorStatus::release_bhs_smartlane_ip_address() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.CommMonitorStatus.bhs_smartlane_ip_address)
  
  return bhs_smartlane_ip_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommMonitorStatus::set_allocated_bhs_smartlane_ip_address(::std::string* bhs_smartlane_ip_address) {
  if (bhs_smartlane_ip_address != NULL) {
    
  } else {
    
  }
  bhs_smartlane_ip_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bhs_smartlane_ip_address);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.CommMonitorStatus.bhs_smartlane_ip_address)
}

// optional bool system_comm_online = 50;
inline void CommMonitorStatus::clear_system_comm_online() {
  system_comm_online_ = false;
}
inline bool CommMonitorStatus::system_comm_online() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.CommMonitorStatus.system_comm_online)
  return system_comm_online_;
}
inline void CommMonitorStatus::set_system_comm_online(bool value) {
  
  system_comm_online_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.CommMonitorStatus.system_comm_online)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ancp00
}  // namespace analogic

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::analogic::ancp00::CommStatusMsg_CommState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::analogic::ancp00::CommStatusMsg_CommState>() {
  return ::analogic::ancp00::CommStatusMsg_CommState_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_2fComm_2eproto__INCLUDED
