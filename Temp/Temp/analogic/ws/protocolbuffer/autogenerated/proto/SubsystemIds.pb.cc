// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/SubsystemIds.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/SubsystemIds.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace analogic {
namespace ancp00 {

namespace {

const ::google::protobuf::EnumDescriptor* SUBSYSTEM_ID_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_2fSubsystemIds_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_proto_2fSubsystemIds_2eproto() {
  protobuf_AddDesc_proto_2fSubsystemIds_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto/SubsystemIds.proto");
  GOOGLE_CHECK(file != NULL);
  SUBSYSTEM_ID_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_2fSubsystemIds_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

}  // namespace

void protobuf_ShutdownFile_proto_2fSubsystemIds_2eproto() {
}

void protobuf_AddDesc_proto_2fSubsystemIds_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_proto_2fSubsystemIds_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030proto/SubsystemIds.proto\022\017analogic.anc"
    "p00*\340\010\n\014SUBSYSTEM_ID\022\013\n\007SCANNER\020\000\022\n\n\006GAN"
    "TRY\020\001\022\014\n\010CONVEYOR\020\002\022\010\n\004XRAY\020\003\022\r\n\tDETECTI"
    "ON\020\004\022\t\n\005RECON\020\005\022\n\n\006BAGSEP\020\006\022\020\n\014BAGLIFECY"
    "CLE\020\007\022\013\n\007CALTEST\020\010\022\n\n\006DYNCAL\020\t\022\r\n\tFRAMEW"
    "ORK\020\n\022\020\n\014NETINTERFACE\020\013\022\020\n\014BHSINTERFACE\020"
    "\014\022\017\n\013COMMMONITOR\020\r\022\022\n\016COMPUTERSTATUS\020\016\022\022"
    "\n\016FAULT_LISTENER\020\017\022\032\n\026AIR_OFFSET_CALIBRA"
    "TION\020\020\022\022\n\016BHS_DIAGNOSTIC\020\021\022\020\n\014BHS_TEST_C"
    "MD\020\022\022\020\n\014SAFETYIOCOMM\0202\022\021\n\rPOWERLINKCOMM\020"
    "3\022\013\n\007PDUCOMM\0204\022\016\n\nGANTRYCOMM\0205\022\020\n\014CONVEY"
    "ORCOMM\0206\022\024\n\020TEMPHUMIDITYCOMM\0207\022\023\n\017UPLINK"
    "CMDSTATUS\0208\022\013\n\007DRBCOMM\0209\022\013\n\007RCBCOMM\020d\022\014\n"
    "\010XRAYCOMM\020e\022\014\n\010DCB1COMM\020f\022\014\n\010DCB2COMM\020g\022"
    "\014\n\010DCB3COMM\020h\022\014\n\010DCB4COMM\020i\022\014\n\010DCB5COMM\020"
    "j\022\030\n\024UPLINKREADBACKSTATUS\020l\022\022\n\rSERIALSER"
    "VER1\020\226\001\022\022\n\rSERIALSERVER2\020\227\001\022\014\n\007UPSCOMM\020\230"
    "\001\022\017\n\nCAMERACOMM\020\231\001\022\020\n\013NETWORKCOMM\020\232\001\022\020\n\013"
    "SCARABEE_SL\020\310\001\022\021\n\014RAPISCAN_TRS\020\311\001\022\r\n\010MAC"
    "H_TRS\020\312\001\022\n\n\005TEST1\020\304\023\022\n\n\005TEST2\020\305\023\022\n\n\005TEST"
    "3\020\306\023\022\n\n\005TEST4\020\307\023\022\n\n\005TEST5\020\310\023\022\n\n\005TEST6\020\311\023"
    "\022\n\n\005TEST7\020\312\023\022\n\n\005TEST8\020\313\023\022\n\n\005TEST9\020\314\023\022\013\n\006"
    "TEST10\020\315\023\022\013\n\006TEST11\020\316\023\022\013\n\006TEST12\020\317\023\022\013\n\006T"
    "EST13\020\320\023\022\013\n\006TEST14\020\321\023\022\013\n\006TEST15\020\322\023\022\013\n\006TE"
    "ST16\020\323\023\022\013\n\006TEST17\020\324\023\022\013\n\006TEST18\020\325\023\022\013\n\006TES"
    "T19\020\326\023\022\013\n\006TEST20\020\327\023\022\013\n\006TEST21\020\330\023\022\013\n\006TEST"
    "22\020\331\023\022\013\n\006TEST23\020\332\023\022\013\n\006TEST24\020\333\023\022\013\n\006TEST2"
    "5\020\334\023\022\013\n\006TEST26\020\335\023\022\013\n\006TEST27\020\336\023\022\013\n\006TEST28"
    "\020\337\023\022\013\n\006TEST29\020\340\023\022\013\n\006TEST30\020\341\023\022\017\n\nUNKNOWN"
    "_ID\020\220Nb\006proto3", 1174);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/SubsystemIds.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2fSubsystemIds_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2fSubsystemIds_2eproto {
  StaticDescriptorInitializer_proto_2fSubsystemIds_2eproto() {
    protobuf_AddDesc_proto_2fSubsystemIds_2eproto();
  }
} static_descriptor_initializer_proto_2fSubsystemIds_2eproto_;
const ::google::protobuf::EnumDescriptor* SUBSYSTEM_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SUBSYSTEM_ID_descriptor_;
}
bool SUBSYSTEM_ID_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 108:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 200:
    case 201:
    case 202:
    case 2500:
    case 2501:
    case 2502:
    case 2503:
    case 2504:
    case 2505:
    case 2506:
    case 2507:
    case 2508:
    case 2509:
    case 2510:
    case 2511:
    case 2512:
    case 2513:
    case 2514:
    case 2515:
    case 2516:
    case 2517:
    case 2518:
    case 2519:
    case 2520:
    case 2521:
    case 2522:
    case 2523:
    case 2524:
    case 2525:
    case 2526:
    case 2527:
    case 2528:
    case 2529:
    case 10000:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ancp00
}  // namespace analogic

// @@protoc_insertion_point(global_scope)
