// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/SafetyIoComm.proto

#ifndef PROTOBUF_proto_2fSafetyIoComm_2eproto__INCLUDED
#define PROTOBUF_proto_2fSafetyIoComm_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace analogic {
namespace ancp00 {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_proto_2fSafetyIoComm_2eproto();
void protobuf_AssignDesc_proto_2fSafetyIoComm_2eproto();
void protobuf_ShutdownFile_proto_2fSafetyIoComm_2eproto();

class SafetyIoCommData;
class SafetyIoCommMsg;

enum SafetyIoCommMsg_CmdId {
  SafetyIoCommMsg_CmdId_POWERLINK_ENABLE = 0,
  SafetyIoCommMsg_CmdId_POWERLINK_DISABLE = 1,
  SafetyIoCommMsg_CmdId_CONVEYOR_RESTART_LIGHT_ON = 2,
  SafetyIoCommMsg_CmdId_CONVEYOR_RESTART_LIGHT_OFF = 3,
  SafetyIoCommMsg_CmdId_XRAY_OFF = 4,
  SafetyIoCommMsg_CmdId_XRAY_FAULT_RESET = 5,
  SafetyIoCommMsg_CmdId_XRAY_MINIMIZE = 6,
  SafetyIoCommMsg_CmdId_XRAY_RESERVED = 7,
  SafetyIoCommMsg_CmdId_XRAY_SEASON_SHORT_SEQ = 8,
  SafetyIoCommMsg_CmdId_XRAY_SEASON_MEDIUM_SEQ = 9,
  SafetyIoCommMsg_CmdId_XRAY_SEASON_LONG_SEQ = 10,
  SafetyIoCommMsg_CmdId_XRAY_ON = 11,
  SafetyIoCommMsg_CmdId_XRAY_LAMP_ON = 12,
  SafetyIoCommMsg_CmdId_XRAY_LAMP_OFF = 13,
  SafetyIoCommMsg_CmdId_SafetyIoCommMsg_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SafetyIoCommMsg_CmdId_SafetyIoCommMsg_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SafetyIoCommMsg_CmdId_IsValid(int value);
const SafetyIoCommMsg_CmdId SafetyIoCommMsg_CmdId_CmdId_MIN = SafetyIoCommMsg_CmdId_POWERLINK_ENABLE;
const SafetyIoCommMsg_CmdId SafetyIoCommMsg_CmdId_CmdId_MAX = SafetyIoCommMsg_CmdId_XRAY_LAMP_OFF;
const int SafetyIoCommMsg_CmdId_CmdId_ARRAYSIZE = SafetyIoCommMsg_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* SafetyIoCommMsg_CmdId_descriptor();
inline const ::std::string& SafetyIoCommMsg_CmdId_Name(SafetyIoCommMsg_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    SafetyIoCommMsg_CmdId_descriptor(), value);
}
inline bool SafetyIoCommMsg_CmdId_Parse(
    const ::std::string& name, SafetyIoCommMsg_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SafetyIoCommMsg_CmdId>(
    SafetyIoCommMsg_CmdId_descriptor(), name, value);
}
enum SafetyIoCommMsg_XrayCmdBits {
  SafetyIoCommMsg_XrayCmdBits_XRAY_CMD_OFF_BITS = 0,
  SafetyIoCommMsg_XrayCmdBits_XRAY_CMD_FAULT_RESET_BITS = 256,
  SafetyIoCommMsg_XrayCmdBits_XRAY_CMD_MINIMIZE_BITS = 512,
  SafetyIoCommMsg_XrayCmdBits_XRAY_CMD_SEASON_SHORT_SEQ_BITS = 768,
  SafetyIoCommMsg_XrayCmdBits_XRAY_CMD_RESERVED_BITS = 1024,
  SafetyIoCommMsg_XrayCmdBits_XRAY_CMD_SEASON_MEDIUM_SEQ_BITS = 1280,
  SafetyIoCommMsg_XrayCmdBits_XRAY_CMD_SEASON_LONG_SEQ_BITS = 1536,
  SafetyIoCommMsg_XrayCmdBits_XRAY_CMD_ON_BITS = 1792,
  SafetyIoCommMsg_XrayCmdBits_XRAY_CMD_BIT_MASK = 65280,
  SafetyIoCommMsg_XrayCmdBits_SafetyIoCommMsg_XrayCmdBits_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SafetyIoCommMsg_XrayCmdBits_SafetyIoCommMsg_XrayCmdBits_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SafetyIoCommMsg_XrayCmdBits_IsValid(int value);
const SafetyIoCommMsg_XrayCmdBits SafetyIoCommMsg_XrayCmdBits_XrayCmdBits_MIN = SafetyIoCommMsg_XrayCmdBits_XRAY_CMD_OFF_BITS;
const SafetyIoCommMsg_XrayCmdBits SafetyIoCommMsg_XrayCmdBits_XrayCmdBits_MAX = SafetyIoCommMsg_XrayCmdBits_XRAY_CMD_BIT_MASK;
const int SafetyIoCommMsg_XrayCmdBits_XrayCmdBits_ARRAYSIZE = SafetyIoCommMsg_XrayCmdBits_XrayCmdBits_MAX + 1;

const ::google::protobuf::EnumDescriptor* SafetyIoCommMsg_XrayCmdBits_descriptor();
inline const ::std::string& SafetyIoCommMsg_XrayCmdBits_Name(SafetyIoCommMsg_XrayCmdBits value) {
  return ::google::protobuf::internal::NameOfEnum(
    SafetyIoCommMsg_XrayCmdBits_descriptor(), value);
}
inline bool SafetyIoCommMsg_XrayCmdBits_Parse(
    const ::std::string& name, SafetyIoCommMsg_XrayCmdBits* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SafetyIoCommMsg_XrayCmdBits>(
    SafetyIoCommMsg_XrayCmdBits_descriptor(), name, value);
}
enum SafetyIoCommData_REG_ADDRESS_0_BITS {
  SafetyIoCommData_REG_ADDRESS_0_BITS_NOT_USED_0 = 0,
  SafetyIoCommData_REG_ADDRESS_0_BITS_ESTOP_ENTRANCE_PORT_CH1 = 1,
  SafetyIoCommData_REG_ADDRESS_0_BITS_ESTOP_ENTRANCE_PORT_CH2 = 2,
  SafetyIoCommData_REG_ADDRESS_0_BITS_ESTOP_EXIT_PORT_CH1 = 4,
  SafetyIoCommData_REG_ADDRESS_0_BITS_ESTOP_EXIT_PORT_CH2 = 8,
  SafetyIoCommData_REG_ADDRESS_0_BITS_ESTOP_CONSOLE_CH1 = 16,
  SafetyIoCommData_REG_ADDRESS_0_BITS_ESTOP_CONSOLE_CH2 = 32,
  SafetyIoCommData_REG_ADDRESS_0_BITS_STOP_BHS_CH1 = 64,
  SafetyIoCommData_REG_ADDRESS_0_BITS_STOP_BHS_CH2 = 128,
  SafetyIoCommData_REG_ADDRESS_0_BITS_ACCESS_PANEL_LEFT_INTERLOCKS_CH1 = 256,
  SafetyIoCommData_REG_ADDRESS_0_BITS_ACCESS_PANEL_LEFT_INTERLOCKS_CH2 = 512,
  SafetyIoCommData_REG_ADDRESS_0_BITS_ACCESS_PANEL_RIGHT_INTERLOCKS_CH1 = 1024,
  SafetyIoCommData_REG_ADDRESS_0_BITS_ACCESS_PANEL_RIGHT_INTERLOCKS_CH2 = 2048,
  SafetyIoCommData_REG_ADDRESS_0_BITS_ACCESS_PANEL_LEFT_SOLENOID_STATUS = 4096,
  SafetyIoCommData_REG_ADDRESS_0_BITS_ACCESS_PANEL_LEFT_SOLENOID_LOCKED_STATUS = 8192,
  SafetyIoCommData_REG_ADDRESS_0_BITS_ACCESS_PANEL_RIGHT_SOLENOID_STATUS = 16384,
  SafetyIoCommData_REG_ADDRESS_0_BITS_ACCESS_PANEL_RIGHT_SOLENOID_LOCKED_STATUS = 32768,
  SafetyIoCommData_REG_ADDRESS_0_BITS_SafetyIoCommData_REG_ADDRESS_0_BITS_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SafetyIoCommData_REG_ADDRESS_0_BITS_SafetyIoCommData_REG_ADDRESS_0_BITS_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SafetyIoCommData_REG_ADDRESS_0_BITS_IsValid(int value);
const SafetyIoCommData_REG_ADDRESS_0_BITS SafetyIoCommData_REG_ADDRESS_0_BITS_REG_ADDRESS_0_BITS_MIN = SafetyIoCommData_REG_ADDRESS_0_BITS_NOT_USED_0;
const SafetyIoCommData_REG_ADDRESS_0_BITS SafetyIoCommData_REG_ADDRESS_0_BITS_REG_ADDRESS_0_BITS_MAX = SafetyIoCommData_REG_ADDRESS_0_BITS_ACCESS_PANEL_RIGHT_SOLENOID_LOCKED_STATUS;
const int SafetyIoCommData_REG_ADDRESS_0_BITS_REG_ADDRESS_0_BITS_ARRAYSIZE = SafetyIoCommData_REG_ADDRESS_0_BITS_REG_ADDRESS_0_BITS_MAX + 1;

const ::google::protobuf::EnumDescriptor* SafetyIoCommData_REG_ADDRESS_0_BITS_descriptor();
inline const ::std::string& SafetyIoCommData_REG_ADDRESS_0_BITS_Name(SafetyIoCommData_REG_ADDRESS_0_BITS value) {
  return ::google::protobuf::internal::NameOfEnum(
    SafetyIoCommData_REG_ADDRESS_0_BITS_descriptor(), value);
}
inline bool SafetyIoCommData_REG_ADDRESS_0_BITS_Parse(
    const ::std::string& name, SafetyIoCommData_REG_ADDRESS_0_BITS* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SafetyIoCommData_REG_ADDRESS_0_BITS>(
    SafetyIoCommData_REG_ADDRESS_0_BITS_descriptor(), name, value);
}
enum SafetyIoCommData_REG_ADDRESS_1_BITS {
  SafetyIoCommData_REG_ADDRESS_1_BITS_NOT_USED_1 = 0,
  SafetyIoCommData_REG_ADDRESS_1_BITS_XRAY_MOTION_ENABLE_KEYSWITCH_CH1 = 1,
  SafetyIoCommData_REG_ADDRESS_1_BITS_XRAY_MOTION_ENABLE_KEYSWITCH_CH2 = 2,
  SafetyIoCommData_REG_ADDRESS_1_BITS_MOTION_CONTACTORS_STATUS = 4,
  SafetyIoCommData_REG_ADDRESS_1_BITS_POWERLINK_CONTACTORS_STATUS = 8,
  SafetyIoCommData_REG_ADDRESS_1_BITS_XRAY_ON_STATUS_1 = 16,
  SafetyIoCommData_REG_ADDRESS_1_BITS_XRAY_ON_STATUS_2 = 32,
  SafetyIoCommData_REG_ADDRESS_1_BITS_POWERLINK_STATUS_BIT_1 = 64,
  SafetyIoCommData_REG_ADDRESS_1_BITS_POWERLINK_STATUS_BIT_2 = 128,
  SafetyIoCommData_REG_ADDRESS_1_BITS_XRAY_LAMP_TEST_PUSHBUTTON = 256,
  SafetyIoCommData_REG_ADDRESS_1_BITS_ENTRANCE_BAG_SENSOR_SIGNAL = 512,
  SafetyIoCommData_REG_ADDRESS_1_BITS_EXIT_BAG_SENSOR_SIGNAL = 1024,
  SafetyIoCommData_REG_ADDRESS_1_BITS_SAFETY_RESET_PUSHBUTTON = 2048,
  SafetyIoCommData_REG_ADDRESS_1_BITS_CONVEYOR_RESTART_PUSHBUTTON = 4096,
  SafetyIoCommData_REG_ADDRESS_1_BITS_GANTRY_INTERFERENCE_BEAM_BREAK = 8192,
  SafetyIoCommData_REG_ADDRESS_1_BITS_LIVE_MAN_SWITCH_CH1 = 16384,
  SafetyIoCommData_REG_ADDRESS_1_BITS_LIVE_MAN_SWITCH_CH2 = 32768,
  SafetyIoCommData_REG_ADDRESS_1_BITS_SafetyIoCommData_REG_ADDRESS_1_BITS_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SafetyIoCommData_REG_ADDRESS_1_BITS_SafetyIoCommData_REG_ADDRESS_1_BITS_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SafetyIoCommData_REG_ADDRESS_1_BITS_IsValid(int value);
const SafetyIoCommData_REG_ADDRESS_1_BITS SafetyIoCommData_REG_ADDRESS_1_BITS_REG_ADDRESS_1_BITS_MIN = SafetyIoCommData_REG_ADDRESS_1_BITS_NOT_USED_1;
const SafetyIoCommData_REG_ADDRESS_1_BITS SafetyIoCommData_REG_ADDRESS_1_BITS_REG_ADDRESS_1_BITS_MAX = SafetyIoCommData_REG_ADDRESS_1_BITS_LIVE_MAN_SWITCH_CH2;
const int SafetyIoCommData_REG_ADDRESS_1_BITS_REG_ADDRESS_1_BITS_ARRAYSIZE = SafetyIoCommData_REG_ADDRESS_1_BITS_REG_ADDRESS_1_BITS_MAX + 1;

const ::google::protobuf::EnumDescriptor* SafetyIoCommData_REG_ADDRESS_1_BITS_descriptor();
inline const ::std::string& SafetyIoCommData_REG_ADDRESS_1_BITS_Name(SafetyIoCommData_REG_ADDRESS_1_BITS value) {
  return ::google::protobuf::internal::NameOfEnum(
    SafetyIoCommData_REG_ADDRESS_1_BITS_descriptor(), value);
}
inline bool SafetyIoCommData_REG_ADDRESS_1_BITS_Parse(
    const ::std::string& name, SafetyIoCommData_REG_ADDRESS_1_BITS* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SafetyIoCommData_REG_ADDRESS_1_BITS>(
    SafetyIoCommData_REG_ADDRESS_1_BITS_descriptor(), name, value);
}
enum SafetyIoCommData_REG_ADDRESS_2_BITS {
  SafetyIoCommData_REG_ADDRESS_2_BITS_NOT_USED_2 = 0,
  SafetyIoCommData_REG_ADDRESS_2_BITS_SPARE_INPUT_1 = 1,
  SafetyIoCommData_REG_ADDRESS_2_BITS_SPARE_INPUT_2 = 2,
  SafetyIoCommData_REG_ADDRESS_2_BITS_OPERATOR_PRESENT_MAT_CH1 = 4,
  SafetyIoCommData_REG_ADDRESS_2_BITS_OPERATOR_PRESENT_MAT_CH2 = 8,
  SafetyIoCommData_REG_ADDRESS_2_BITS_MOTION_CONTACTOR_1_ENABLE = 256,
  SafetyIoCommData_REG_ADDRESS_2_BITS_MOTION_CONTACTOR_2_ENABLE = 512,
  SafetyIoCommData_REG_ADDRESS_2_BITS_POWERLINK_CONTACTOR_1_ENABLE = 1024,
  SafetyIoCommData_REG_ADDRESS_2_BITS_POWERLINK_CONTACTOR_2_ENABLE = 2048,
  SafetyIoCommData_REG_ADDRESS_2_BITS_ACCESS_PANELS_SOLENOID_UNLOCKED = 4096,
  SafetyIoCommData_REG_ADDRESS_2_BITS_AUXILLARY_POWER_DISABLE = 8192,
  SafetyIoCommData_REG_ADDRESS_2_BITS_XRAY_LAMP_ON_PLI = 16384,
  SafetyIoCommData_REG_ADDRESS_2_BITS_SAFETY_RESET_REQUIRED_LIGHT = 32768,
  SafetyIoCommData_REG_ADDRESS_2_BITS_SafetyIoCommData_REG_ADDRESS_2_BITS_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SafetyIoCommData_REG_ADDRESS_2_BITS_SafetyIoCommData_REG_ADDRESS_2_BITS_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SafetyIoCommData_REG_ADDRESS_2_BITS_IsValid(int value);
const SafetyIoCommData_REG_ADDRESS_2_BITS SafetyIoCommData_REG_ADDRESS_2_BITS_REG_ADDRESS_2_BITS_MIN = SafetyIoCommData_REG_ADDRESS_2_BITS_NOT_USED_2;
const SafetyIoCommData_REG_ADDRESS_2_BITS SafetyIoCommData_REG_ADDRESS_2_BITS_REG_ADDRESS_2_BITS_MAX = SafetyIoCommData_REG_ADDRESS_2_BITS_SAFETY_RESET_REQUIRED_LIGHT;
const int SafetyIoCommData_REG_ADDRESS_2_BITS_REG_ADDRESS_2_BITS_ARRAYSIZE = SafetyIoCommData_REG_ADDRESS_2_BITS_REG_ADDRESS_2_BITS_MAX + 1;

const ::google::protobuf::EnumDescriptor* SafetyIoCommData_REG_ADDRESS_2_BITS_descriptor();
inline const ::std::string& SafetyIoCommData_REG_ADDRESS_2_BITS_Name(SafetyIoCommData_REG_ADDRESS_2_BITS value) {
  return ::google::protobuf::internal::NameOfEnum(
    SafetyIoCommData_REG_ADDRESS_2_BITS_descriptor(), value);
}
inline bool SafetyIoCommData_REG_ADDRESS_2_BITS_Parse(
    const ::std::string& name, SafetyIoCommData_REG_ADDRESS_2_BITS* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SafetyIoCommData_REG_ADDRESS_2_BITS>(
    SafetyIoCommData_REG_ADDRESS_2_BITS_descriptor(), name, value);
}
enum SafetyIoCommData_REG_ADDRESS_3_BITS {
  SafetyIoCommData_REG_ADDRESS_3_BITS_NOT_USED_3 = 0,
  SafetyIoCommData_REG_ADDRESS_3_BITS_XRAY_LAMP_ON_SW = 1,
  SafetyIoCommData_REG_ADDRESS_3_BITS_CONVEYOR_RESTART_LIGHT = 2,
  SafetyIoCommData_REG_ADDRESS_3_BITS_POWERLINK_ENABLE = 4,
  SafetyIoCommData_REG_ADDRESS_3_BITS_POWERLINK_CABLE_PRESENT = 8,
  SafetyIoCommData_REG_ADDRESS_3_BITS_ACCESS_PANELS_UNLOCKED_LIGHT = 16,
  SafetyIoCommData_REG_ADDRESS_3_BITS_XRAY_CONTROL_BIT0 = 32,
  SafetyIoCommData_REG_ADDRESS_3_BITS_XRAY_CONTROL_BIT1 = 64,
  SafetyIoCommData_REG_ADDRESS_3_BITS_XRAY_CONTROL_BIT2 = 128,
  SafetyIoCommData_REG_ADDRESS_3_BITS_SafetyIoCommData_REG_ADDRESS_3_BITS_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SafetyIoCommData_REG_ADDRESS_3_BITS_SafetyIoCommData_REG_ADDRESS_3_BITS_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SafetyIoCommData_REG_ADDRESS_3_BITS_IsValid(int value);
const SafetyIoCommData_REG_ADDRESS_3_BITS SafetyIoCommData_REG_ADDRESS_3_BITS_REG_ADDRESS_3_BITS_MIN = SafetyIoCommData_REG_ADDRESS_3_BITS_NOT_USED_3;
const SafetyIoCommData_REG_ADDRESS_3_BITS SafetyIoCommData_REG_ADDRESS_3_BITS_REG_ADDRESS_3_BITS_MAX = SafetyIoCommData_REG_ADDRESS_3_BITS_XRAY_CONTROL_BIT2;
const int SafetyIoCommData_REG_ADDRESS_3_BITS_REG_ADDRESS_3_BITS_ARRAYSIZE = SafetyIoCommData_REG_ADDRESS_3_BITS_REG_ADDRESS_3_BITS_MAX + 1;

const ::google::protobuf::EnumDescriptor* SafetyIoCommData_REG_ADDRESS_3_BITS_descriptor();
inline const ::std::string& SafetyIoCommData_REG_ADDRESS_3_BITS_Name(SafetyIoCommData_REG_ADDRESS_3_BITS value) {
  return ::google::protobuf::internal::NameOfEnum(
    SafetyIoCommData_REG_ADDRESS_3_BITS_descriptor(), value);
}
inline bool SafetyIoCommData_REG_ADDRESS_3_BITS_Parse(
    const ::std::string& name, SafetyIoCommData_REG_ADDRESS_3_BITS* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SafetyIoCommData_REG_ADDRESS_3_BITS>(
    SafetyIoCommData_REG_ADDRESS_3_BITS_descriptor(), name, value);
}
enum SafetyIoCommData_REG_ADDRESS_4_BITS {
  SafetyIoCommData_REG_ADDRESS_4_BITS_NOT_USED_4 = 0,
  SafetyIoCommData_REG_ADDRESS_4_BITS_ENTRANCE_ESTOP_RESET_REQUIRED = 1,
  SafetyIoCommData_REG_ADDRESS_4_BITS_EXIT_ESTOP_RESET_REQUIRED = 2,
  SafetyIoCommData_REG_ADDRESS_4_BITS_CONSOLE_ESTOP_RESET_REQUIRED = 4,
  SafetyIoCommData_REG_ADDRESS_4_BITS_BHS_ESTOP_RESET_REQUIRED = 8,
  SafetyIoCommData_REG_ADDRESS_4_BITS_ACCESS_PANEL_LEFT_INTERLOCK_RESET_REQUIRED = 16,
  SafetyIoCommData_REG_ADDRESS_4_BITS_ACCESS_PANEL_RIGHT_INTERLOCK_RESET_REQUIRED = 32,
  SafetyIoCommData_REG_ADDRESS_4_BITS_ACCESS_PANEL_LEFT_SOLENOID_RESET_REQUIRED = 64,
  SafetyIoCommData_REG_ADDRESS_4_BITS_ACCESS_PANEL_RIGHT_SOLENOID_RESET_REQUIRED = 128,
  SafetyIoCommData_REG_ADDRESS_4_BITS_SPEED_MONITOR_RESET_REQUIRED = 512,
  SafetyIoCommData_REG_ADDRESS_4_BITS_ENCODER_FAULT = 32768,
  SafetyIoCommData_REG_ADDRESS_4_BITS_SafetyIoCommData_REG_ADDRESS_4_BITS_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SafetyIoCommData_REG_ADDRESS_4_BITS_SafetyIoCommData_REG_ADDRESS_4_BITS_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SafetyIoCommData_REG_ADDRESS_4_BITS_IsValid(int value);
const SafetyIoCommData_REG_ADDRESS_4_BITS SafetyIoCommData_REG_ADDRESS_4_BITS_REG_ADDRESS_4_BITS_MIN = SafetyIoCommData_REG_ADDRESS_4_BITS_NOT_USED_4;
const SafetyIoCommData_REG_ADDRESS_4_BITS SafetyIoCommData_REG_ADDRESS_4_BITS_REG_ADDRESS_4_BITS_MAX = SafetyIoCommData_REG_ADDRESS_4_BITS_ENCODER_FAULT;
const int SafetyIoCommData_REG_ADDRESS_4_BITS_REG_ADDRESS_4_BITS_ARRAYSIZE = SafetyIoCommData_REG_ADDRESS_4_BITS_REG_ADDRESS_4_BITS_MAX + 1;

const ::google::protobuf::EnumDescriptor* SafetyIoCommData_REG_ADDRESS_4_BITS_descriptor();
inline const ::std::string& SafetyIoCommData_REG_ADDRESS_4_BITS_Name(SafetyIoCommData_REG_ADDRESS_4_BITS value) {
  return ::google::protobuf::internal::NameOfEnum(
    SafetyIoCommData_REG_ADDRESS_4_BITS_descriptor(), value);
}
inline bool SafetyIoCommData_REG_ADDRESS_4_BITS_Parse(
    const ::std::string& name, SafetyIoCommData_REG_ADDRESS_4_BITS* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SafetyIoCommData_REG_ADDRESS_4_BITS>(
    SafetyIoCommData_REG_ADDRESS_4_BITS_descriptor(), name, value);
}
enum SafetyIoCommData_REG_ADDRESS_5_BITS {
  SafetyIoCommData_REG_ADDRESS_5_BITS_NOT_USED_5 = 0,
  SafetyIoCommData_REG_ADDRESS_5_BITS_STANDSTILL = 1,
  SafetyIoCommData_REG_ADDRESS_5_BITS_STANDSTILL_MONITOR_ENABLED = 2,
  SafetyIoCommData_REG_ADDRESS_5_BITS_OVERSPEED_FAULT = 4,
  SafetyIoCommData_REG_ADDRESS_5_BITS_ACCESS_PANELS_LOCKING_FAULT = 8,
  SafetyIoCommData_REG_ADDRESS_5_BITS_SafetyIoCommData_REG_ADDRESS_5_BITS_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SafetyIoCommData_REG_ADDRESS_5_BITS_SafetyIoCommData_REG_ADDRESS_5_BITS_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SafetyIoCommData_REG_ADDRESS_5_BITS_IsValid(int value);
const SafetyIoCommData_REG_ADDRESS_5_BITS SafetyIoCommData_REG_ADDRESS_5_BITS_REG_ADDRESS_5_BITS_MIN = SafetyIoCommData_REG_ADDRESS_5_BITS_NOT_USED_5;
const SafetyIoCommData_REG_ADDRESS_5_BITS SafetyIoCommData_REG_ADDRESS_5_BITS_REG_ADDRESS_5_BITS_MAX = SafetyIoCommData_REG_ADDRESS_5_BITS_ACCESS_PANELS_LOCKING_FAULT;
const int SafetyIoCommData_REG_ADDRESS_5_BITS_REG_ADDRESS_5_BITS_ARRAYSIZE = SafetyIoCommData_REG_ADDRESS_5_BITS_REG_ADDRESS_5_BITS_MAX + 1;

const ::google::protobuf::EnumDescriptor* SafetyIoCommData_REG_ADDRESS_5_BITS_descriptor();
inline const ::std::string& SafetyIoCommData_REG_ADDRESS_5_BITS_Name(SafetyIoCommData_REG_ADDRESS_5_BITS value) {
  return ::google::protobuf::internal::NameOfEnum(
    SafetyIoCommData_REG_ADDRESS_5_BITS_descriptor(), value);
}
inline bool SafetyIoCommData_REG_ADDRESS_5_BITS_Parse(
    const ::std::string& name, SafetyIoCommData_REG_ADDRESS_5_BITS* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SafetyIoCommData_REG_ADDRESS_5_BITS>(
    SafetyIoCommData_REG_ADDRESS_5_BITS_descriptor(), name, value);
}
enum SafetyIoCommData_REG_ADDRESS_6_BITS {
  SafetyIoCommData_REG_ADDRESS_6_BITS_NOT_USED_6 = 0,
  SafetyIoCommData_REG_ADDRESS_6_BITS_ENTRANCE_ESTOP_FAULT = 1,
  SafetyIoCommData_REG_ADDRESS_6_BITS_EXIT_ESTOP_FAULT = 2,
  SafetyIoCommData_REG_ADDRESS_6_BITS_CONSOLE_ESTOP_FAULT = 4,
  SafetyIoCommData_REG_ADDRESS_6_BITS_BHS_ESTOP_FAULT = 8,
  SafetyIoCommData_REG_ADDRESS_6_BITS_ACCESS_PANEL_LEFT_MAGNETIC_INTERLOCK_FAULT = 16,
  SafetyIoCommData_REG_ADDRESS_6_BITS_ACCESS_PANEL_RIGHT_MAGNETIC_INTERLOCK_FAULT = 32,
  SafetyIoCommData_REG_ADDRESS_6_BITS_MOTION_CONTACTORS_STATUS_FAULT = 64,
  SafetyIoCommData_REG_ADDRESS_6_BITS_POWERLINK_CONTACTORS_STATUS_FAULT = 128,
  SafetyIoCommData_REG_ADDRESS_6_BITS_ROTATIONAL_ENVELOPE_VIOLATION_SENSOR_FAULT = 256,
  SafetyIoCommData_REG_ADDRESS_6_BITS_STANDSTILL_MONITOR_FAULT = 512,
  SafetyIoCommData_REG_ADDRESS_6_BITS_XRAY_MOTION_KEYSWITCH_FAULT = 1024,
  SafetyIoCommData_REG_ADDRESS_6_BITS_SafetyIoCommData_REG_ADDRESS_6_BITS_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SafetyIoCommData_REG_ADDRESS_6_BITS_SafetyIoCommData_REG_ADDRESS_6_BITS_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SafetyIoCommData_REG_ADDRESS_6_BITS_IsValid(int value);
const SafetyIoCommData_REG_ADDRESS_6_BITS SafetyIoCommData_REG_ADDRESS_6_BITS_REG_ADDRESS_6_BITS_MIN = SafetyIoCommData_REG_ADDRESS_6_BITS_NOT_USED_6;
const SafetyIoCommData_REG_ADDRESS_6_BITS SafetyIoCommData_REG_ADDRESS_6_BITS_REG_ADDRESS_6_BITS_MAX = SafetyIoCommData_REG_ADDRESS_6_BITS_XRAY_MOTION_KEYSWITCH_FAULT;
const int SafetyIoCommData_REG_ADDRESS_6_BITS_REG_ADDRESS_6_BITS_ARRAYSIZE = SafetyIoCommData_REG_ADDRESS_6_BITS_REG_ADDRESS_6_BITS_MAX + 1;

const ::google::protobuf::EnumDescriptor* SafetyIoCommData_REG_ADDRESS_6_BITS_descriptor();
inline const ::std::string& SafetyIoCommData_REG_ADDRESS_6_BITS_Name(SafetyIoCommData_REG_ADDRESS_6_BITS value) {
  return ::google::protobuf::internal::NameOfEnum(
    SafetyIoCommData_REG_ADDRESS_6_BITS_descriptor(), value);
}
inline bool SafetyIoCommData_REG_ADDRESS_6_BITS_Parse(
    const ::std::string& name, SafetyIoCommData_REG_ADDRESS_6_BITS* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SafetyIoCommData_REG_ADDRESS_6_BITS>(
    SafetyIoCommData_REG_ADDRESS_6_BITS_descriptor(), name, value);
}
enum SafetyIoCommData_REG_ADDRESS_7_BITS {
  SafetyIoCommData_REG_ADDRESS_7_BITS_NOT_USED_7 = 0,
  SafetyIoCommData_REG_ADDRESS_7_BITS_MANUAL_RESET_NEEDED = 32768,
  SafetyIoCommData_REG_ADDRESS_7_BITS_SafetyIoCommData_REG_ADDRESS_7_BITS_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SafetyIoCommData_REG_ADDRESS_7_BITS_SafetyIoCommData_REG_ADDRESS_7_BITS_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SafetyIoCommData_REG_ADDRESS_7_BITS_IsValid(int value);
const SafetyIoCommData_REG_ADDRESS_7_BITS SafetyIoCommData_REG_ADDRESS_7_BITS_REG_ADDRESS_7_BITS_MIN = SafetyIoCommData_REG_ADDRESS_7_BITS_NOT_USED_7;
const SafetyIoCommData_REG_ADDRESS_7_BITS SafetyIoCommData_REG_ADDRESS_7_BITS_REG_ADDRESS_7_BITS_MAX = SafetyIoCommData_REG_ADDRESS_7_BITS_MANUAL_RESET_NEEDED;
const int SafetyIoCommData_REG_ADDRESS_7_BITS_REG_ADDRESS_7_BITS_ARRAYSIZE = SafetyIoCommData_REG_ADDRESS_7_BITS_REG_ADDRESS_7_BITS_MAX + 1;

const ::google::protobuf::EnumDescriptor* SafetyIoCommData_REG_ADDRESS_7_BITS_descriptor();
inline const ::std::string& SafetyIoCommData_REG_ADDRESS_7_BITS_Name(SafetyIoCommData_REG_ADDRESS_7_BITS value) {
  return ::google::protobuf::internal::NameOfEnum(
    SafetyIoCommData_REG_ADDRESS_7_BITS_descriptor(), value);
}
inline bool SafetyIoCommData_REG_ADDRESS_7_BITS_Parse(
    const ::std::string& name, SafetyIoCommData_REG_ADDRESS_7_BITS* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SafetyIoCommData_REG_ADDRESS_7_BITS>(
    SafetyIoCommData_REG_ADDRESS_7_BITS_descriptor(), name, value);
}
enum SafetyIoCommData_REG_ADDRESS_255_BITS {
  SafetyIoCommData_REG_ADDRESS_255_BITS_NOT_USED_255 = 0,
  SafetyIoCommData_REG_ADDRESS_255_BITS_WATCHDOG_CONTROL_BIT_0 = 256,
  SafetyIoCommData_REG_ADDRESS_255_BITS_WATCHDOG_CONTROL_BIT_1 = 512,
  SafetyIoCommData_REG_ADDRESS_255_BITS_WATCHDOG_CONTROL_BIT_2 = 1024,
  SafetyIoCommData_REG_ADDRESS_255_BITS_WATCHDOG_CONTROL_ERROR = 16384,
  SafetyIoCommData_REG_ADDRESS_255_BITS_WATCHDOG_CONTROL_RESET_TIMER = 32768,
  SafetyIoCommData_REG_ADDRESS_255_BITS_SafetyIoCommData_REG_ADDRESS_255_BITS_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SafetyIoCommData_REG_ADDRESS_255_BITS_SafetyIoCommData_REG_ADDRESS_255_BITS_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SafetyIoCommData_REG_ADDRESS_255_BITS_IsValid(int value);
const SafetyIoCommData_REG_ADDRESS_255_BITS SafetyIoCommData_REG_ADDRESS_255_BITS_REG_ADDRESS_255_BITS_MIN = SafetyIoCommData_REG_ADDRESS_255_BITS_NOT_USED_255;
const SafetyIoCommData_REG_ADDRESS_255_BITS SafetyIoCommData_REG_ADDRESS_255_BITS_REG_ADDRESS_255_BITS_MAX = SafetyIoCommData_REG_ADDRESS_255_BITS_WATCHDOG_CONTROL_RESET_TIMER;
const int SafetyIoCommData_REG_ADDRESS_255_BITS_REG_ADDRESS_255_BITS_ARRAYSIZE = SafetyIoCommData_REG_ADDRESS_255_BITS_REG_ADDRESS_255_BITS_MAX + 1;

const ::google::protobuf::EnumDescriptor* SafetyIoCommData_REG_ADDRESS_255_BITS_descriptor();
inline const ::std::string& SafetyIoCommData_REG_ADDRESS_255_BITS_Name(SafetyIoCommData_REG_ADDRESS_255_BITS value) {
  return ::google::protobuf::internal::NameOfEnum(
    SafetyIoCommData_REG_ADDRESS_255_BITS_descriptor(), value);
}
inline bool SafetyIoCommData_REG_ADDRESS_255_BITS_Parse(
    const ::std::string& name, SafetyIoCommData_REG_ADDRESS_255_BITS* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SafetyIoCommData_REG_ADDRESS_255_BITS>(
    SafetyIoCommData_REG_ADDRESS_255_BITS_descriptor(), name, value);
}
enum SafetyIoCommData_REG_ADDRESS_512_BITS {
  SafetyIoCommData_REG_ADDRESS_512_BITS_NOT_USED_512 = 0,
  SafetyIoCommData_REG_ADDRESS_512_BITS_POWERLINK_ENABLE_CTRL = 1,
  SafetyIoCommData_REG_ADDRESS_512_BITS_CONVEYOR_RESTART_LIGHT_CTRL = 2,
  SafetyIoCommData_REG_ADDRESS_512_BITS_XRAY_LAMP_ON_SW_CTRL = 4,
  SafetyIoCommData_REG_ADDRESS_512_BITS_GANTRY_RUNNING = 128,
  SafetyIoCommData_REG_ADDRESS_512_BITS_XRAY_CTRL_BIT0 = 256,
  SafetyIoCommData_REG_ADDRESS_512_BITS_XRAY_CTRL_BIT1 = 512,
  SafetyIoCommData_REG_ADDRESS_512_BITS_XRAY_CTRL_BIT2 = 1024,
  SafetyIoCommData_REG_ADDRESS_512_BITS_XRAY_CTRL_BIT_RESERVED_3 = 2048,
  SafetyIoCommData_REG_ADDRESS_512_BITS_XRAY_CTRL_BIT_RESERVED_4 = 4096,
  SafetyIoCommData_REG_ADDRESS_512_BITS_XRAY_CTRL_BIT_RESERVED_5 = 8192,
  SafetyIoCommData_REG_ADDRESS_512_BITS_XRAY_CTRL_BIT_RESERVED_6 = 16384,
  SafetyIoCommData_REG_ADDRESS_512_BITS_XRAY_CTRL_BIT_RESERVED_7 = 32768,
  SafetyIoCommData_REG_ADDRESS_512_BITS_SafetyIoCommData_REG_ADDRESS_512_BITS_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SafetyIoCommData_REG_ADDRESS_512_BITS_SafetyIoCommData_REG_ADDRESS_512_BITS_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SafetyIoCommData_REG_ADDRESS_512_BITS_IsValid(int value);
const SafetyIoCommData_REG_ADDRESS_512_BITS SafetyIoCommData_REG_ADDRESS_512_BITS_REG_ADDRESS_512_BITS_MIN = SafetyIoCommData_REG_ADDRESS_512_BITS_NOT_USED_512;
const SafetyIoCommData_REG_ADDRESS_512_BITS SafetyIoCommData_REG_ADDRESS_512_BITS_REG_ADDRESS_512_BITS_MAX = SafetyIoCommData_REG_ADDRESS_512_BITS_XRAY_CTRL_BIT_RESERVED_7;
const int SafetyIoCommData_REG_ADDRESS_512_BITS_REG_ADDRESS_512_BITS_ARRAYSIZE = SafetyIoCommData_REG_ADDRESS_512_BITS_REG_ADDRESS_512_BITS_MAX + 1;

const ::google::protobuf::EnumDescriptor* SafetyIoCommData_REG_ADDRESS_512_BITS_descriptor();
inline const ::std::string& SafetyIoCommData_REG_ADDRESS_512_BITS_Name(SafetyIoCommData_REG_ADDRESS_512_BITS value) {
  return ::google::protobuf::internal::NameOfEnum(
    SafetyIoCommData_REG_ADDRESS_512_BITS_descriptor(), value);
}
inline bool SafetyIoCommData_REG_ADDRESS_512_BITS_Parse(
    const ::std::string& name, SafetyIoCommData_REG_ADDRESS_512_BITS* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SafetyIoCommData_REG_ADDRESS_512_BITS>(
    SafetyIoCommData_REG_ADDRESS_512_BITS_descriptor(), name, value);
}
enum SafetyIoCommData_REG_ADDRESS_513_BITS {
  SafetyIoCommData_REG_ADDRESS_513_BITS_NOT_USED_513 = 0,
  SafetyIoCommData_REG_ADDRESS_513_BITS_STANDSTILL_MONITOR_FAULT_RESET = 1,
  SafetyIoCommData_REG_ADDRESS_513_BITS_SafetyIoCommData_REG_ADDRESS_513_BITS_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SafetyIoCommData_REG_ADDRESS_513_BITS_SafetyIoCommData_REG_ADDRESS_513_BITS_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SafetyIoCommData_REG_ADDRESS_513_BITS_IsValid(int value);
const SafetyIoCommData_REG_ADDRESS_513_BITS SafetyIoCommData_REG_ADDRESS_513_BITS_REG_ADDRESS_513_BITS_MIN = SafetyIoCommData_REG_ADDRESS_513_BITS_NOT_USED_513;
const SafetyIoCommData_REG_ADDRESS_513_BITS SafetyIoCommData_REG_ADDRESS_513_BITS_REG_ADDRESS_513_BITS_MAX = SafetyIoCommData_REG_ADDRESS_513_BITS_STANDSTILL_MONITOR_FAULT_RESET;
const int SafetyIoCommData_REG_ADDRESS_513_BITS_REG_ADDRESS_513_BITS_ARRAYSIZE = SafetyIoCommData_REG_ADDRESS_513_BITS_REG_ADDRESS_513_BITS_MAX + 1;

const ::google::protobuf::EnumDescriptor* SafetyIoCommData_REG_ADDRESS_513_BITS_descriptor();
inline const ::std::string& SafetyIoCommData_REG_ADDRESS_513_BITS_Name(SafetyIoCommData_REG_ADDRESS_513_BITS value) {
  return ::google::protobuf::internal::NameOfEnum(
    SafetyIoCommData_REG_ADDRESS_513_BITS_descriptor(), value);
}
inline bool SafetyIoCommData_REG_ADDRESS_513_BITS_Parse(
    const ::std::string& name, SafetyIoCommData_REG_ADDRESS_513_BITS* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SafetyIoCommData_REG_ADDRESS_513_BITS>(
    SafetyIoCommData_REG_ADDRESS_513_BITS_descriptor(), name, value);
}
// ===================================================================

class SafetyIoCommMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:analogic.ancp00.SafetyIoCommMsg) */ {
 public:
  SafetyIoCommMsg();
  virtual ~SafetyIoCommMsg();

  SafetyIoCommMsg(const SafetyIoCommMsg& from);

  inline SafetyIoCommMsg& operator=(const SafetyIoCommMsg& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SafetyIoCommMsg& default_instance();

  void Swap(SafetyIoCommMsg* other);

  // implements Message ----------------------------------------------

  inline SafetyIoCommMsg* New() const { return New(NULL); }

  SafetyIoCommMsg* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SafetyIoCommMsg& from);
  void MergeFrom(const SafetyIoCommMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SafetyIoCommMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SafetyIoCommMsg_CmdId CmdId;
  static const CmdId POWERLINK_ENABLE =
    SafetyIoCommMsg_CmdId_POWERLINK_ENABLE;
  static const CmdId POWERLINK_DISABLE =
    SafetyIoCommMsg_CmdId_POWERLINK_DISABLE;
  static const CmdId CONVEYOR_RESTART_LIGHT_ON =
    SafetyIoCommMsg_CmdId_CONVEYOR_RESTART_LIGHT_ON;
  static const CmdId CONVEYOR_RESTART_LIGHT_OFF =
    SafetyIoCommMsg_CmdId_CONVEYOR_RESTART_LIGHT_OFF;
  static const CmdId XRAY_OFF =
    SafetyIoCommMsg_CmdId_XRAY_OFF;
  static const CmdId XRAY_FAULT_RESET =
    SafetyIoCommMsg_CmdId_XRAY_FAULT_RESET;
  static const CmdId XRAY_MINIMIZE =
    SafetyIoCommMsg_CmdId_XRAY_MINIMIZE;
  static const CmdId XRAY_RESERVED =
    SafetyIoCommMsg_CmdId_XRAY_RESERVED;
  static const CmdId XRAY_SEASON_SHORT_SEQ =
    SafetyIoCommMsg_CmdId_XRAY_SEASON_SHORT_SEQ;
  static const CmdId XRAY_SEASON_MEDIUM_SEQ =
    SafetyIoCommMsg_CmdId_XRAY_SEASON_MEDIUM_SEQ;
  static const CmdId XRAY_SEASON_LONG_SEQ =
    SafetyIoCommMsg_CmdId_XRAY_SEASON_LONG_SEQ;
  static const CmdId XRAY_ON =
    SafetyIoCommMsg_CmdId_XRAY_ON;
  static const CmdId XRAY_LAMP_ON =
    SafetyIoCommMsg_CmdId_XRAY_LAMP_ON;
  static const CmdId XRAY_LAMP_OFF =
    SafetyIoCommMsg_CmdId_XRAY_LAMP_OFF;
  static inline bool CmdId_IsValid(int value) {
    return SafetyIoCommMsg_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    SafetyIoCommMsg_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    SafetyIoCommMsg_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    SafetyIoCommMsg_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return SafetyIoCommMsg_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return SafetyIoCommMsg_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return SafetyIoCommMsg_CmdId_Parse(name, value);
  }

  typedef SafetyIoCommMsg_XrayCmdBits XrayCmdBits;
  static const XrayCmdBits XRAY_CMD_OFF_BITS =
    SafetyIoCommMsg_XrayCmdBits_XRAY_CMD_OFF_BITS;
  static const XrayCmdBits XRAY_CMD_FAULT_RESET_BITS =
    SafetyIoCommMsg_XrayCmdBits_XRAY_CMD_FAULT_RESET_BITS;
  static const XrayCmdBits XRAY_CMD_MINIMIZE_BITS =
    SafetyIoCommMsg_XrayCmdBits_XRAY_CMD_MINIMIZE_BITS;
  static const XrayCmdBits XRAY_CMD_SEASON_SHORT_SEQ_BITS =
    SafetyIoCommMsg_XrayCmdBits_XRAY_CMD_SEASON_SHORT_SEQ_BITS;
  static const XrayCmdBits XRAY_CMD_RESERVED_BITS =
    SafetyIoCommMsg_XrayCmdBits_XRAY_CMD_RESERVED_BITS;
  static const XrayCmdBits XRAY_CMD_SEASON_MEDIUM_SEQ_BITS =
    SafetyIoCommMsg_XrayCmdBits_XRAY_CMD_SEASON_MEDIUM_SEQ_BITS;
  static const XrayCmdBits XRAY_CMD_SEASON_LONG_SEQ_BITS =
    SafetyIoCommMsg_XrayCmdBits_XRAY_CMD_SEASON_LONG_SEQ_BITS;
  static const XrayCmdBits XRAY_CMD_ON_BITS =
    SafetyIoCommMsg_XrayCmdBits_XRAY_CMD_ON_BITS;
  static const XrayCmdBits XRAY_CMD_BIT_MASK =
    SafetyIoCommMsg_XrayCmdBits_XRAY_CMD_BIT_MASK;
  static inline bool XrayCmdBits_IsValid(int value) {
    return SafetyIoCommMsg_XrayCmdBits_IsValid(value);
  }
  static const XrayCmdBits XrayCmdBits_MIN =
    SafetyIoCommMsg_XrayCmdBits_XrayCmdBits_MIN;
  static const XrayCmdBits XrayCmdBits_MAX =
    SafetyIoCommMsg_XrayCmdBits_XrayCmdBits_MAX;
  static const int XrayCmdBits_ARRAYSIZE =
    SafetyIoCommMsg_XrayCmdBits_XrayCmdBits_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  XrayCmdBits_descriptor() {
    return SafetyIoCommMsg_XrayCmdBits_descriptor();
  }
  static inline const ::std::string& XrayCmdBits_Name(XrayCmdBits value) {
    return SafetyIoCommMsg_XrayCmdBits_Name(value);
  }
  static inline bool XrayCmdBits_Parse(const ::std::string& name,
      XrayCmdBits* value) {
    return SafetyIoCommMsg_XrayCmdBits_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .analogic.ancp00.SafetyIoCommMsg.CmdId id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::analogic::ancp00::SafetyIoCommMsg_CmdId id() const;
  void set_id(::analogic::ancp00::SafetyIoCommMsg_CmdId value);

  // @@protoc_insertion_point(class_scope:analogic.ancp00.SafetyIoCommMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  int id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_proto_2fSafetyIoComm_2eproto();
  friend void protobuf_AssignDesc_proto_2fSafetyIoComm_2eproto();
  friend void protobuf_ShutdownFile_proto_2fSafetyIoComm_2eproto();

  void InitAsDefaultInstance();
  static SafetyIoCommMsg* default_instance_;
};
// -------------------------------------------------------------------

class SafetyIoCommData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:analogic.ancp00.SafetyIoCommData) */ {
 public:
  SafetyIoCommData();
  virtual ~SafetyIoCommData();

  SafetyIoCommData(const SafetyIoCommData& from);

  inline SafetyIoCommData& operator=(const SafetyIoCommData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SafetyIoCommData& default_instance();

  void Swap(SafetyIoCommData* other);

  // implements Message ----------------------------------------------

  inline SafetyIoCommData* New() const { return New(NULL); }

  SafetyIoCommData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SafetyIoCommData& from);
  void MergeFrom(const SafetyIoCommData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SafetyIoCommData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SafetyIoCommData_REG_ADDRESS_0_BITS REG_ADDRESS_0_BITS;
  static const REG_ADDRESS_0_BITS NOT_USED_0 =
    SafetyIoCommData_REG_ADDRESS_0_BITS_NOT_USED_0;
  static const REG_ADDRESS_0_BITS ESTOP_ENTRANCE_PORT_CH1 =
    SafetyIoCommData_REG_ADDRESS_0_BITS_ESTOP_ENTRANCE_PORT_CH1;
  static const REG_ADDRESS_0_BITS ESTOP_ENTRANCE_PORT_CH2 =
    SafetyIoCommData_REG_ADDRESS_0_BITS_ESTOP_ENTRANCE_PORT_CH2;
  static const REG_ADDRESS_0_BITS ESTOP_EXIT_PORT_CH1 =
    SafetyIoCommData_REG_ADDRESS_0_BITS_ESTOP_EXIT_PORT_CH1;
  static const REG_ADDRESS_0_BITS ESTOP_EXIT_PORT_CH2 =
    SafetyIoCommData_REG_ADDRESS_0_BITS_ESTOP_EXIT_PORT_CH2;
  static const REG_ADDRESS_0_BITS ESTOP_CONSOLE_CH1 =
    SafetyIoCommData_REG_ADDRESS_0_BITS_ESTOP_CONSOLE_CH1;
  static const REG_ADDRESS_0_BITS ESTOP_CONSOLE_CH2 =
    SafetyIoCommData_REG_ADDRESS_0_BITS_ESTOP_CONSOLE_CH2;
  static const REG_ADDRESS_0_BITS STOP_BHS_CH1 =
    SafetyIoCommData_REG_ADDRESS_0_BITS_STOP_BHS_CH1;
  static const REG_ADDRESS_0_BITS STOP_BHS_CH2 =
    SafetyIoCommData_REG_ADDRESS_0_BITS_STOP_BHS_CH2;
  static const REG_ADDRESS_0_BITS ACCESS_PANEL_LEFT_INTERLOCKS_CH1 =
    SafetyIoCommData_REG_ADDRESS_0_BITS_ACCESS_PANEL_LEFT_INTERLOCKS_CH1;
  static const REG_ADDRESS_0_BITS ACCESS_PANEL_LEFT_INTERLOCKS_CH2 =
    SafetyIoCommData_REG_ADDRESS_0_BITS_ACCESS_PANEL_LEFT_INTERLOCKS_CH2;
  static const REG_ADDRESS_0_BITS ACCESS_PANEL_RIGHT_INTERLOCKS_CH1 =
    SafetyIoCommData_REG_ADDRESS_0_BITS_ACCESS_PANEL_RIGHT_INTERLOCKS_CH1;
  static const REG_ADDRESS_0_BITS ACCESS_PANEL_RIGHT_INTERLOCKS_CH2 =
    SafetyIoCommData_REG_ADDRESS_0_BITS_ACCESS_PANEL_RIGHT_INTERLOCKS_CH2;
  static const REG_ADDRESS_0_BITS ACCESS_PANEL_LEFT_SOLENOID_STATUS =
    SafetyIoCommData_REG_ADDRESS_0_BITS_ACCESS_PANEL_LEFT_SOLENOID_STATUS;
  static const REG_ADDRESS_0_BITS ACCESS_PANEL_LEFT_SOLENOID_LOCKED_STATUS =
    SafetyIoCommData_REG_ADDRESS_0_BITS_ACCESS_PANEL_LEFT_SOLENOID_LOCKED_STATUS;
  static const REG_ADDRESS_0_BITS ACCESS_PANEL_RIGHT_SOLENOID_STATUS =
    SafetyIoCommData_REG_ADDRESS_0_BITS_ACCESS_PANEL_RIGHT_SOLENOID_STATUS;
  static const REG_ADDRESS_0_BITS ACCESS_PANEL_RIGHT_SOLENOID_LOCKED_STATUS =
    SafetyIoCommData_REG_ADDRESS_0_BITS_ACCESS_PANEL_RIGHT_SOLENOID_LOCKED_STATUS;
  static inline bool REG_ADDRESS_0_BITS_IsValid(int value) {
    return SafetyIoCommData_REG_ADDRESS_0_BITS_IsValid(value);
  }
  static const REG_ADDRESS_0_BITS REG_ADDRESS_0_BITS_MIN =
    SafetyIoCommData_REG_ADDRESS_0_BITS_REG_ADDRESS_0_BITS_MIN;
  static const REG_ADDRESS_0_BITS REG_ADDRESS_0_BITS_MAX =
    SafetyIoCommData_REG_ADDRESS_0_BITS_REG_ADDRESS_0_BITS_MAX;
  static const int REG_ADDRESS_0_BITS_ARRAYSIZE =
    SafetyIoCommData_REG_ADDRESS_0_BITS_REG_ADDRESS_0_BITS_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  REG_ADDRESS_0_BITS_descriptor() {
    return SafetyIoCommData_REG_ADDRESS_0_BITS_descriptor();
  }
  static inline const ::std::string& REG_ADDRESS_0_BITS_Name(REG_ADDRESS_0_BITS value) {
    return SafetyIoCommData_REG_ADDRESS_0_BITS_Name(value);
  }
  static inline bool REG_ADDRESS_0_BITS_Parse(const ::std::string& name,
      REG_ADDRESS_0_BITS* value) {
    return SafetyIoCommData_REG_ADDRESS_0_BITS_Parse(name, value);
  }

  typedef SafetyIoCommData_REG_ADDRESS_1_BITS REG_ADDRESS_1_BITS;
  static const REG_ADDRESS_1_BITS NOT_USED_1 =
    SafetyIoCommData_REG_ADDRESS_1_BITS_NOT_USED_1;
  static const REG_ADDRESS_1_BITS XRAY_MOTION_ENABLE_KEYSWITCH_CH1 =
    SafetyIoCommData_REG_ADDRESS_1_BITS_XRAY_MOTION_ENABLE_KEYSWITCH_CH1;
  static const REG_ADDRESS_1_BITS XRAY_MOTION_ENABLE_KEYSWITCH_CH2 =
    SafetyIoCommData_REG_ADDRESS_1_BITS_XRAY_MOTION_ENABLE_KEYSWITCH_CH2;
  static const REG_ADDRESS_1_BITS MOTION_CONTACTORS_STATUS =
    SafetyIoCommData_REG_ADDRESS_1_BITS_MOTION_CONTACTORS_STATUS;
  static const REG_ADDRESS_1_BITS POWERLINK_CONTACTORS_STATUS =
    SafetyIoCommData_REG_ADDRESS_1_BITS_POWERLINK_CONTACTORS_STATUS;
  static const REG_ADDRESS_1_BITS XRAY_ON_STATUS_1 =
    SafetyIoCommData_REG_ADDRESS_1_BITS_XRAY_ON_STATUS_1;
  static const REG_ADDRESS_1_BITS XRAY_ON_STATUS_2 =
    SafetyIoCommData_REG_ADDRESS_1_BITS_XRAY_ON_STATUS_2;
  static const REG_ADDRESS_1_BITS POWERLINK_STATUS_BIT_1 =
    SafetyIoCommData_REG_ADDRESS_1_BITS_POWERLINK_STATUS_BIT_1;
  static const REG_ADDRESS_1_BITS POWERLINK_STATUS_BIT_2 =
    SafetyIoCommData_REG_ADDRESS_1_BITS_POWERLINK_STATUS_BIT_2;
  static const REG_ADDRESS_1_BITS XRAY_LAMP_TEST_PUSHBUTTON =
    SafetyIoCommData_REG_ADDRESS_1_BITS_XRAY_LAMP_TEST_PUSHBUTTON;
  static const REG_ADDRESS_1_BITS ENTRANCE_BAG_SENSOR_SIGNAL =
    SafetyIoCommData_REG_ADDRESS_1_BITS_ENTRANCE_BAG_SENSOR_SIGNAL;
  static const REG_ADDRESS_1_BITS EXIT_BAG_SENSOR_SIGNAL =
    SafetyIoCommData_REG_ADDRESS_1_BITS_EXIT_BAG_SENSOR_SIGNAL;
  static const REG_ADDRESS_1_BITS SAFETY_RESET_PUSHBUTTON =
    SafetyIoCommData_REG_ADDRESS_1_BITS_SAFETY_RESET_PUSHBUTTON;
  static const REG_ADDRESS_1_BITS CONVEYOR_RESTART_PUSHBUTTON =
    SafetyIoCommData_REG_ADDRESS_1_BITS_CONVEYOR_RESTART_PUSHBUTTON;
  static const REG_ADDRESS_1_BITS GANTRY_INTERFERENCE_BEAM_BREAK =
    SafetyIoCommData_REG_ADDRESS_1_BITS_GANTRY_INTERFERENCE_BEAM_BREAK;
  static const REG_ADDRESS_1_BITS LIVE_MAN_SWITCH_CH1 =
    SafetyIoCommData_REG_ADDRESS_1_BITS_LIVE_MAN_SWITCH_CH1;
  static const REG_ADDRESS_1_BITS LIVE_MAN_SWITCH_CH2 =
    SafetyIoCommData_REG_ADDRESS_1_BITS_LIVE_MAN_SWITCH_CH2;
  static inline bool REG_ADDRESS_1_BITS_IsValid(int value) {
    return SafetyIoCommData_REG_ADDRESS_1_BITS_IsValid(value);
  }
  static const REG_ADDRESS_1_BITS REG_ADDRESS_1_BITS_MIN =
    SafetyIoCommData_REG_ADDRESS_1_BITS_REG_ADDRESS_1_BITS_MIN;
  static const REG_ADDRESS_1_BITS REG_ADDRESS_1_BITS_MAX =
    SafetyIoCommData_REG_ADDRESS_1_BITS_REG_ADDRESS_1_BITS_MAX;
  static const int REG_ADDRESS_1_BITS_ARRAYSIZE =
    SafetyIoCommData_REG_ADDRESS_1_BITS_REG_ADDRESS_1_BITS_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  REG_ADDRESS_1_BITS_descriptor() {
    return SafetyIoCommData_REG_ADDRESS_1_BITS_descriptor();
  }
  static inline const ::std::string& REG_ADDRESS_1_BITS_Name(REG_ADDRESS_1_BITS value) {
    return SafetyIoCommData_REG_ADDRESS_1_BITS_Name(value);
  }
  static inline bool REG_ADDRESS_1_BITS_Parse(const ::std::string& name,
      REG_ADDRESS_1_BITS* value) {
    return SafetyIoCommData_REG_ADDRESS_1_BITS_Parse(name, value);
  }

  typedef SafetyIoCommData_REG_ADDRESS_2_BITS REG_ADDRESS_2_BITS;
  static const REG_ADDRESS_2_BITS NOT_USED_2 =
    SafetyIoCommData_REG_ADDRESS_2_BITS_NOT_USED_2;
  static const REG_ADDRESS_2_BITS SPARE_INPUT_1 =
    SafetyIoCommData_REG_ADDRESS_2_BITS_SPARE_INPUT_1;
  static const REG_ADDRESS_2_BITS SPARE_INPUT_2 =
    SafetyIoCommData_REG_ADDRESS_2_BITS_SPARE_INPUT_2;
  static const REG_ADDRESS_2_BITS OPERATOR_PRESENT_MAT_CH1 =
    SafetyIoCommData_REG_ADDRESS_2_BITS_OPERATOR_PRESENT_MAT_CH1;
  static const REG_ADDRESS_2_BITS OPERATOR_PRESENT_MAT_CH2 =
    SafetyIoCommData_REG_ADDRESS_2_BITS_OPERATOR_PRESENT_MAT_CH2;
  static const REG_ADDRESS_2_BITS MOTION_CONTACTOR_1_ENABLE =
    SafetyIoCommData_REG_ADDRESS_2_BITS_MOTION_CONTACTOR_1_ENABLE;
  static const REG_ADDRESS_2_BITS MOTION_CONTACTOR_2_ENABLE =
    SafetyIoCommData_REG_ADDRESS_2_BITS_MOTION_CONTACTOR_2_ENABLE;
  static const REG_ADDRESS_2_BITS POWERLINK_CONTACTOR_1_ENABLE =
    SafetyIoCommData_REG_ADDRESS_2_BITS_POWERLINK_CONTACTOR_1_ENABLE;
  static const REG_ADDRESS_2_BITS POWERLINK_CONTACTOR_2_ENABLE =
    SafetyIoCommData_REG_ADDRESS_2_BITS_POWERLINK_CONTACTOR_2_ENABLE;
  static const REG_ADDRESS_2_BITS ACCESS_PANELS_SOLENOID_UNLOCKED =
    SafetyIoCommData_REG_ADDRESS_2_BITS_ACCESS_PANELS_SOLENOID_UNLOCKED;
  static const REG_ADDRESS_2_BITS AUXILLARY_POWER_DISABLE =
    SafetyIoCommData_REG_ADDRESS_2_BITS_AUXILLARY_POWER_DISABLE;
  static const REG_ADDRESS_2_BITS XRAY_LAMP_ON_PLI =
    SafetyIoCommData_REG_ADDRESS_2_BITS_XRAY_LAMP_ON_PLI;
  static const REG_ADDRESS_2_BITS SAFETY_RESET_REQUIRED_LIGHT =
    SafetyIoCommData_REG_ADDRESS_2_BITS_SAFETY_RESET_REQUIRED_LIGHT;
  static inline bool REG_ADDRESS_2_BITS_IsValid(int value) {
    return SafetyIoCommData_REG_ADDRESS_2_BITS_IsValid(value);
  }
  static const REG_ADDRESS_2_BITS REG_ADDRESS_2_BITS_MIN =
    SafetyIoCommData_REG_ADDRESS_2_BITS_REG_ADDRESS_2_BITS_MIN;
  static const REG_ADDRESS_2_BITS REG_ADDRESS_2_BITS_MAX =
    SafetyIoCommData_REG_ADDRESS_2_BITS_REG_ADDRESS_2_BITS_MAX;
  static const int REG_ADDRESS_2_BITS_ARRAYSIZE =
    SafetyIoCommData_REG_ADDRESS_2_BITS_REG_ADDRESS_2_BITS_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  REG_ADDRESS_2_BITS_descriptor() {
    return SafetyIoCommData_REG_ADDRESS_2_BITS_descriptor();
  }
  static inline const ::std::string& REG_ADDRESS_2_BITS_Name(REG_ADDRESS_2_BITS value) {
    return SafetyIoCommData_REG_ADDRESS_2_BITS_Name(value);
  }
  static inline bool REG_ADDRESS_2_BITS_Parse(const ::std::string& name,
      REG_ADDRESS_2_BITS* value) {
    return SafetyIoCommData_REG_ADDRESS_2_BITS_Parse(name, value);
  }

  typedef SafetyIoCommData_REG_ADDRESS_3_BITS REG_ADDRESS_3_BITS;
  static const REG_ADDRESS_3_BITS NOT_USED_3 =
    SafetyIoCommData_REG_ADDRESS_3_BITS_NOT_USED_3;
  static const REG_ADDRESS_3_BITS XRAY_LAMP_ON_SW =
    SafetyIoCommData_REG_ADDRESS_3_BITS_XRAY_LAMP_ON_SW;
  static const REG_ADDRESS_3_BITS CONVEYOR_RESTART_LIGHT =
    SafetyIoCommData_REG_ADDRESS_3_BITS_CONVEYOR_RESTART_LIGHT;
  static const REG_ADDRESS_3_BITS POWERLINK_ENABLE =
    SafetyIoCommData_REG_ADDRESS_3_BITS_POWERLINK_ENABLE;
  static const REG_ADDRESS_3_BITS POWERLINK_CABLE_PRESENT =
    SafetyIoCommData_REG_ADDRESS_3_BITS_POWERLINK_CABLE_PRESENT;
  static const REG_ADDRESS_3_BITS ACCESS_PANELS_UNLOCKED_LIGHT =
    SafetyIoCommData_REG_ADDRESS_3_BITS_ACCESS_PANELS_UNLOCKED_LIGHT;
  static const REG_ADDRESS_3_BITS XRAY_CONTROL_BIT0 =
    SafetyIoCommData_REG_ADDRESS_3_BITS_XRAY_CONTROL_BIT0;
  static const REG_ADDRESS_3_BITS XRAY_CONTROL_BIT1 =
    SafetyIoCommData_REG_ADDRESS_3_BITS_XRAY_CONTROL_BIT1;
  static const REG_ADDRESS_3_BITS XRAY_CONTROL_BIT2 =
    SafetyIoCommData_REG_ADDRESS_3_BITS_XRAY_CONTROL_BIT2;
  static inline bool REG_ADDRESS_3_BITS_IsValid(int value) {
    return SafetyIoCommData_REG_ADDRESS_3_BITS_IsValid(value);
  }
  static const REG_ADDRESS_3_BITS REG_ADDRESS_3_BITS_MIN =
    SafetyIoCommData_REG_ADDRESS_3_BITS_REG_ADDRESS_3_BITS_MIN;
  static const REG_ADDRESS_3_BITS REG_ADDRESS_3_BITS_MAX =
    SafetyIoCommData_REG_ADDRESS_3_BITS_REG_ADDRESS_3_BITS_MAX;
  static const int REG_ADDRESS_3_BITS_ARRAYSIZE =
    SafetyIoCommData_REG_ADDRESS_3_BITS_REG_ADDRESS_3_BITS_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  REG_ADDRESS_3_BITS_descriptor() {
    return SafetyIoCommData_REG_ADDRESS_3_BITS_descriptor();
  }
  static inline const ::std::string& REG_ADDRESS_3_BITS_Name(REG_ADDRESS_3_BITS value) {
    return SafetyIoCommData_REG_ADDRESS_3_BITS_Name(value);
  }
  static inline bool REG_ADDRESS_3_BITS_Parse(const ::std::string& name,
      REG_ADDRESS_3_BITS* value) {
    return SafetyIoCommData_REG_ADDRESS_3_BITS_Parse(name, value);
  }

  typedef SafetyIoCommData_REG_ADDRESS_4_BITS REG_ADDRESS_4_BITS;
  static const REG_ADDRESS_4_BITS NOT_USED_4 =
    SafetyIoCommData_REG_ADDRESS_4_BITS_NOT_USED_4;
  static const REG_ADDRESS_4_BITS ENTRANCE_ESTOP_RESET_REQUIRED =
    SafetyIoCommData_REG_ADDRESS_4_BITS_ENTRANCE_ESTOP_RESET_REQUIRED;
  static const REG_ADDRESS_4_BITS EXIT_ESTOP_RESET_REQUIRED =
    SafetyIoCommData_REG_ADDRESS_4_BITS_EXIT_ESTOP_RESET_REQUIRED;
  static const REG_ADDRESS_4_BITS CONSOLE_ESTOP_RESET_REQUIRED =
    SafetyIoCommData_REG_ADDRESS_4_BITS_CONSOLE_ESTOP_RESET_REQUIRED;
  static const REG_ADDRESS_4_BITS BHS_ESTOP_RESET_REQUIRED =
    SafetyIoCommData_REG_ADDRESS_4_BITS_BHS_ESTOP_RESET_REQUIRED;
  static const REG_ADDRESS_4_BITS ACCESS_PANEL_LEFT_INTERLOCK_RESET_REQUIRED =
    SafetyIoCommData_REG_ADDRESS_4_BITS_ACCESS_PANEL_LEFT_INTERLOCK_RESET_REQUIRED;
  static const REG_ADDRESS_4_BITS ACCESS_PANEL_RIGHT_INTERLOCK_RESET_REQUIRED =
    SafetyIoCommData_REG_ADDRESS_4_BITS_ACCESS_PANEL_RIGHT_INTERLOCK_RESET_REQUIRED;
  static const REG_ADDRESS_4_BITS ACCESS_PANEL_LEFT_SOLENOID_RESET_REQUIRED =
    SafetyIoCommData_REG_ADDRESS_4_BITS_ACCESS_PANEL_LEFT_SOLENOID_RESET_REQUIRED;
  static const REG_ADDRESS_4_BITS ACCESS_PANEL_RIGHT_SOLENOID_RESET_REQUIRED =
    SafetyIoCommData_REG_ADDRESS_4_BITS_ACCESS_PANEL_RIGHT_SOLENOID_RESET_REQUIRED;
  static const REG_ADDRESS_4_BITS SPEED_MONITOR_RESET_REQUIRED =
    SafetyIoCommData_REG_ADDRESS_4_BITS_SPEED_MONITOR_RESET_REQUIRED;
  static const REG_ADDRESS_4_BITS ENCODER_FAULT =
    SafetyIoCommData_REG_ADDRESS_4_BITS_ENCODER_FAULT;
  static inline bool REG_ADDRESS_4_BITS_IsValid(int value) {
    return SafetyIoCommData_REG_ADDRESS_4_BITS_IsValid(value);
  }
  static const REG_ADDRESS_4_BITS REG_ADDRESS_4_BITS_MIN =
    SafetyIoCommData_REG_ADDRESS_4_BITS_REG_ADDRESS_4_BITS_MIN;
  static const REG_ADDRESS_4_BITS REG_ADDRESS_4_BITS_MAX =
    SafetyIoCommData_REG_ADDRESS_4_BITS_REG_ADDRESS_4_BITS_MAX;
  static const int REG_ADDRESS_4_BITS_ARRAYSIZE =
    SafetyIoCommData_REG_ADDRESS_4_BITS_REG_ADDRESS_4_BITS_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  REG_ADDRESS_4_BITS_descriptor() {
    return SafetyIoCommData_REG_ADDRESS_4_BITS_descriptor();
  }
  static inline const ::std::string& REG_ADDRESS_4_BITS_Name(REG_ADDRESS_4_BITS value) {
    return SafetyIoCommData_REG_ADDRESS_4_BITS_Name(value);
  }
  static inline bool REG_ADDRESS_4_BITS_Parse(const ::std::string& name,
      REG_ADDRESS_4_BITS* value) {
    return SafetyIoCommData_REG_ADDRESS_4_BITS_Parse(name, value);
  }

  typedef SafetyIoCommData_REG_ADDRESS_5_BITS REG_ADDRESS_5_BITS;
  static const REG_ADDRESS_5_BITS NOT_USED_5 =
    SafetyIoCommData_REG_ADDRESS_5_BITS_NOT_USED_5;
  static const REG_ADDRESS_5_BITS STANDSTILL =
    SafetyIoCommData_REG_ADDRESS_5_BITS_STANDSTILL;
  static const REG_ADDRESS_5_BITS STANDSTILL_MONITOR_ENABLED =
    SafetyIoCommData_REG_ADDRESS_5_BITS_STANDSTILL_MONITOR_ENABLED;
  static const REG_ADDRESS_5_BITS OVERSPEED_FAULT =
    SafetyIoCommData_REG_ADDRESS_5_BITS_OVERSPEED_FAULT;
  static const REG_ADDRESS_5_BITS ACCESS_PANELS_LOCKING_FAULT =
    SafetyIoCommData_REG_ADDRESS_5_BITS_ACCESS_PANELS_LOCKING_FAULT;
  static inline bool REG_ADDRESS_5_BITS_IsValid(int value) {
    return SafetyIoCommData_REG_ADDRESS_5_BITS_IsValid(value);
  }
  static const REG_ADDRESS_5_BITS REG_ADDRESS_5_BITS_MIN =
    SafetyIoCommData_REG_ADDRESS_5_BITS_REG_ADDRESS_5_BITS_MIN;
  static const REG_ADDRESS_5_BITS REG_ADDRESS_5_BITS_MAX =
    SafetyIoCommData_REG_ADDRESS_5_BITS_REG_ADDRESS_5_BITS_MAX;
  static const int REG_ADDRESS_5_BITS_ARRAYSIZE =
    SafetyIoCommData_REG_ADDRESS_5_BITS_REG_ADDRESS_5_BITS_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  REG_ADDRESS_5_BITS_descriptor() {
    return SafetyIoCommData_REG_ADDRESS_5_BITS_descriptor();
  }
  static inline const ::std::string& REG_ADDRESS_5_BITS_Name(REG_ADDRESS_5_BITS value) {
    return SafetyIoCommData_REG_ADDRESS_5_BITS_Name(value);
  }
  static inline bool REG_ADDRESS_5_BITS_Parse(const ::std::string& name,
      REG_ADDRESS_5_BITS* value) {
    return SafetyIoCommData_REG_ADDRESS_5_BITS_Parse(name, value);
  }

  typedef SafetyIoCommData_REG_ADDRESS_6_BITS REG_ADDRESS_6_BITS;
  static const REG_ADDRESS_6_BITS NOT_USED_6 =
    SafetyIoCommData_REG_ADDRESS_6_BITS_NOT_USED_6;
  static const REG_ADDRESS_6_BITS ENTRANCE_ESTOP_FAULT =
    SafetyIoCommData_REG_ADDRESS_6_BITS_ENTRANCE_ESTOP_FAULT;
  static const REG_ADDRESS_6_BITS EXIT_ESTOP_FAULT =
    SafetyIoCommData_REG_ADDRESS_6_BITS_EXIT_ESTOP_FAULT;
  static const REG_ADDRESS_6_BITS CONSOLE_ESTOP_FAULT =
    SafetyIoCommData_REG_ADDRESS_6_BITS_CONSOLE_ESTOP_FAULT;
  static const REG_ADDRESS_6_BITS BHS_ESTOP_FAULT =
    SafetyIoCommData_REG_ADDRESS_6_BITS_BHS_ESTOP_FAULT;
  static const REG_ADDRESS_6_BITS ACCESS_PANEL_LEFT_MAGNETIC_INTERLOCK_FAULT =
    SafetyIoCommData_REG_ADDRESS_6_BITS_ACCESS_PANEL_LEFT_MAGNETIC_INTERLOCK_FAULT;
  static const REG_ADDRESS_6_BITS ACCESS_PANEL_RIGHT_MAGNETIC_INTERLOCK_FAULT =
    SafetyIoCommData_REG_ADDRESS_6_BITS_ACCESS_PANEL_RIGHT_MAGNETIC_INTERLOCK_FAULT;
  static const REG_ADDRESS_6_BITS MOTION_CONTACTORS_STATUS_FAULT =
    SafetyIoCommData_REG_ADDRESS_6_BITS_MOTION_CONTACTORS_STATUS_FAULT;
  static const REG_ADDRESS_6_BITS POWERLINK_CONTACTORS_STATUS_FAULT =
    SafetyIoCommData_REG_ADDRESS_6_BITS_POWERLINK_CONTACTORS_STATUS_FAULT;
  static const REG_ADDRESS_6_BITS ROTATIONAL_ENVELOPE_VIOLATION_SENSOR_FAULT =
    SafetyIoCommData_REG_ADDRESS_6_BITS_ROTATIONAL_ENVELOPE_VIOLATION_SENSOR_FAULT;
  static const REG_ADDRESS_6_BITS STANDSTILL_MONITOR_FAULT =
    SafetyIoCommData_REG_ADDRESS_6_BITS_STANDSTILL_MONITOR_FAULT;
  static const REG_ADDRESS_6_BITS XRAY_MOTION_KEYSWITCH_FAULT =
    SafetyIoCommData_REG_ADDRESS_6_BITS_XRAY_MOTION_KEYSWITCH_FAULT;
  static inline bool REG_ADDRESS_6_BITS_IsValid(int value) {
    return SafetyIoCommData_REG_ADDRESS_6_BITS_IsValid(value);
  }
  static const REG_ADDRESS_6_BITS REG_ADDRESS_6_BITS_MIN =
    SafetyIoCommData_REG_ADDRESS_6_BITS_REG_ADDRESS_6_BITS_MIN;
  static const REG_ADDRESS_6_BITS REG_ADDRESS_6_BITS_MAX =
    SafetyIoCommData_REG_ADDRESS_6_BITS_REG_ADDRESS_6_BITS_MAX;
  static const int REG_ADDRESS_6_BITS_ARRAYSIZE =
    SafetyIoCommData_REG_ADDRESS_6_BITS_REG_ADDRESS_6_BITS_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  REG_ADDRESS_6_BITS_descriptor() {
    return SafetyIoCommData_REG_ADDRESS_6_BITS_descriptor();
  }
  static inline const ::std::string& REG_ADDRESS_6_BITS_Name(REG_ADDRESS_6_BITS value) {
    return SafetyIoCommData_REG_ADDRESS_6_BITS_Name(value);
  }
  static inline bool REG_ADDRESS_6_BITS_Parse(const ::std::string& name,
      REG_ADDRESS_6_BITS* value) {
    return SafetyIoCommData_REG_ADDRESS_6_BITS_Parse(name, value);
  }

  typedef SafetyIoCommData_REG_ADDRESS_7_BITS REG_ADDRESS_7_BITS;
  static const REG_ADDRESS_7_BITS NOT_USED_7 =
    SafetyIoCommData_REG_ADDRESS_7_BITS_NOT_USED_7;
  static const REG_ADDRESS_7_BITS MANUAL_RESET_NEEDED =
    SafetyIoCommData_REG_ADDRESS_7_BITS_MANUAL_RESET_NEEDED;
  static inline bool REG_ADDRESS_7_BITS_IsValid(int value) {
    return SafetyIoCommData_REG_ADDRESS_7_BITS_IsValid(value);
  }
  static const REG_ADDRESS_7_BITS REG_ADDRESS_7_BITS_MIN =
    SafetyIoCommData_REG_ADDRESS_7_BITS_REG_ADDRESS_7_BITS_MIN;
  static const REG_ADDRESS_7_BITS REG_ADDRESS_7_BITS_MAX =
    SafetyIoCommData_REG_ADDRESS_7_BITS_REG_ADDRESS_7_BITS_MAX;
  static const int REG_ADDRESS_7_BITS_ARRAYSIZE =
    SafetyIoCommData_REG_ADDRESS_7_BITS_REG_ADDRESS_7_BITS_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  REG_ADDRESS_7_BITS_descriptor() {
    return SafetyIoCommData_REG_ADDRESS_7_BITS_descriptor();
  }
  static inline const ::std::string& REG_ADDRESS_7_BITS_Name(REG_ADDRESS_7_BITS value) {
    return SafetyIoCommData_REG_ADDRESS_7_BITS_Name(value);
  }
  static inline bool REG_ADDRESS_7_BITS_Parse(const ::std::string& name,
      REG_ADDRESS_7_BITS* value) {
    return SafetyIoCommData_REG_ADDRESS_7_BITS_Parse(name, value);
  }

  typedef SafetyIoCommData_REG_ADDRESS_255_BITS REG_ADDRESS_255_BITS;
  static const REG_ADDRESS_255_BITS NOT_USED_255 =
    SafetyIoCommData_REG_ADDRESS_255_BITS_NOT_USED_255;
  static const REG_ADDRESS_255_BITS WATCHDOG_CONTROL_BIT_0 =
    SafetyIoCommData_REG_ADDRESS_255_BITS_WATCHDOG_CONTROL_BIT_0;
  static const REG_ADDRESS_255_BITS WATCHDOG_CONTROL_BIT_1 =
    SafetyIoCommData_REG_ADDRESS_255_BITS_WATCHDOG_CONTROL_BIT_1;
  static const REG_ADDRESS_255_BITS WATCHDOG_CONTROL_BIT_2 =
    SafetyIoCommData_REG_ADDRESS_255_BITS_WATCHDOG_CONTROL_BIT_2;
  static const REG_ADDRESS_255_BITS WATCHDOG_CONTROL_ERROR =
    SafetyIoCommData_REG_ADDRESS_255_BITS_WATCHDOG_CONTROL_ERROR;
  static const REG_ADDRESS_255_BITS WATCHDOG_CONTROL_RESET_TIMER =
    SafetyIoCommData_REG_ADDRESS_255_BITS_WATCHDOG_CONTROL_RESET_TIMER;
  static inline bool REG_ADDRESS_255_BITS_IsValid(int value) {
    return SafetyIoCommData_REG_ADDRESS_255_BITS_IsValid(value);
  }
  static const REG_ADDRESS_255_BITS REG_ADDRESS_255_BITS_MIN =
    SafetyIoCommData_REG_ADDRESS_255_BITS_REG_ADDRESS_255_BITS_MIN;
  static const REG_ADDRESS_255_BITS REG_ADDRESS_255_BITS_MAX =
    SafetyIoCommData_REG_ADDRESS_255_BITS_REG_ADDRESS_255_BITS_MAX;
  static const int REG_ADDRESS_255_BITS_ARRAYSIZE =
    SafetyIoCommData_REG_ADDRESS_255_BITS_REG_ADDRESS_255_BITS_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  REG_ADDRESS_255_BITS_descriptor() {
    return SafetyIoCommData_REG_ADDRESS_255_BITS_descriptor();
  }
  static inline const ::std::string& REG_ADDRESS_255_BITS_Name(REG_ADDRESS_255_BITS value) {
    return SafetyIoCommData_REG_ADDRESS_255_BITS_Name(value);
  }
  static inline bool REG_ADDRESS_255_BITS_Parse(const ::std::string& name,
      REG_ADDRESS_255_BITS* value) {
    return SafetyIoCommData_REG_ADDRESS_255_BITS_Parse(name, value);
  }

  typedef SafetyIoCommData_REG_ADDRESS_512_BITS REG_ADDRESS_512_BITS;
  static const REG_ADDRESS_512_BITS NOT_USED_512 =
    SafetyIoCommData_REG_ADDRESS_512_BITS_NOT_USED_512;
  static const REG_ADDRESS_512_BITS POWERLINK_ENABLE_CTRL =
    SafetyIoCommData_REG_ADDRESS_512_BITS_POWERLINK_ENABLE_CTRL;
  static const REG_ADDRESS_512_BITS CONVEYOR_RESTART_LIGHT_CTRL =
    SafetyIoCommData_REG_ADDRESS_512_BITS_CONVEYOR_RESTART_LIGHT_CTRL;
  static const REG_ADDRESS_512_BITS XRAY_LAMP_ON_SW_CTRL =
    SafetyIoCommData_REG_ADDRESS_512_BITS_XRAY_LAMP_ON_SW_CTRL;
  static const REG_ADDRESS_512_BITS GANTRY_RUNNING =
    SafetyIoCommData_REG_ADDRESS_512_BITS_GANTRY_RUNNING;
  static const REG_ADDRESS_512_BITS XRAY_CTRL_BIT0 =
    SafetyIoCommData_REG_ADDRESS_512_BITS_XRAY_CTRL_BIT0;
  static const REG_ADDRESS_512_BITS XRAY_CTRL_BIT1 =
    SafetyIoCommData_REG_ADDRESS_512_BITS_XRAY_CTRL_BIT1;
  static const REG_ADDRESS_512_BITS XRAY_CTRL_BIT2 =
    SafetyIoCommData_REG_ADDRESS_512_BITS_XRAY_CTRL_BIT2;
  static const REG_ADDRESS_512_BITS XRAY_CTRL_BIT_RESERVED_3 =
    SafetyIoCommData_REG_ADDRESS_512_BITS_XRAY_CTRL_BIT_RESERVED_3;
  static const REG_ADDRESS_512_BITS XRAY_CTRL_BIT_RESERVED_4 =
    SafetyIoCommData_REG_ADDRESS_512_BITS_XRAY_CTRL_BIT_RESERVED_4;
  static const REG_ADDRESS_512_BITS XRAY_CTRL_BIT_RESERVED_5 =
    SafetyIoCommData_REG_ADDRESS_512_BITS_XRAY_CTRL_BIT_RESERVED_5;
  static const REG_ADDRESS_512_BITS XRAY_CTRL_BIT_RESERVED_6 =
    SafetyIoCommData_REG_ADDRESS_512_BITS_XRAY_CTRL_BIT_RESERVED_6;
  static const REG_ADDRESS_512_BITS XRAY_CTRL_BIT_RESERVED_7 =
    SafetyIoCommData_REG_ADDRESS_512_BITS_XRAY_CTRL_BIT_RESERVED_7;
  static inline bool REG_ADDRESS_512_BITS_IsValid(int value) {
    return SafetyIoCommData_REG_ADDRESS_512_BITS_IsValid(value);
  }
  static const REG_ADDRESS_512_BITS REG_ADDRESS_512_BITS_MIN =
    SafetyIoCommData_REG_ADDRESS_512_BITS_REG_ADDRESS_512_BITS_MIN;
  static const REG_ADDRESS_512_BITS REG_ADDRESS_512_BITS_MAX =
    SafetyIoCommData_REG_ADDRESS_512_BITS_REG_ADDRESS_512_BITS_MAX;
  static const int REG_ADDRESS_512_BITS_ARRAYSIZE =
    SafetyIoCommData_REG_ADDRESS_512_BITS_REG_ADDRESS_512_BITS_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  REG_ADDRESS_512_BITS_descriptor() {
    return SafetyIoCommData_REG_ADDRESS_512_BITS_descriptor();
  }
  static inline const ::std::string& REG_ADDRESS_512_BITS_Name(REG_ADDRESS_512_BITS value) {
    return SafetyIoCommData_REG_ADDRESS_512_BITS_Name(value);
  }
  static inline bool REG_ADDRESS_512_BITS_Parse(const ::std::string& name,
      REG_ADDRESS_512_BITS* value) {
    return SafetyIoCommData_REG_ADDRESS_512_BITS_Parse(name, value);
  }

  typedef SafetyIoCommData_REG_ADDRESS_513_BITS REG_ADDRESS_513_BITS;
  static const REG_ADDRESS_513_BITS NOT_USED_513 =
    SafetyIoCommData_REG_ADDRESS_513_BITS_NOT_USED_513;
  static const REG_ADDRESS_513_BITS STANDSTILL_MONITOR_FAULT_RESET =
    SafetyIoCommData_REG_ADDRESS_513_BITS_STANDSTILL_MONITOR_FAULT_RESET;
  static inline bool REG_ADDRESS_513_BITS_IsValid(int value) {
    return SafetyIoCommData_REG_ADDRESS_513_BITS_IsValid(value);
  }
  static const REG_ADDRESS_513_BITS REG_ADDRESS_513_BITS_MIN =
    SafetyIoCommData_REG_ADDRESS_513_BITS_REG_ADDRESS_513_BITS_MIN;
  static const REG_ADDRESS_513_BITS REG_ADDRESS_513_BITS_MAX =
    SafetyIoCommData_REG_ADDRESS_513_BITS_REG_ADDRESS_513_BITS_MAX;
  static const int REG_ADDRESS_513_BITS_ARRAYSIZE =
    SafetyIoCommData_REG_ADDRESS_513_BITS_REG_ADDRESS_513_BITS_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  REG_ADDRESS_513_BITS_descriptor() {
    return SafetyIoCommData_REG_ADDRESS_513_BITS_descriptor();
  }
  static inline const ::std::string& REG_ADDRESS_513_BITS_Name(REG_ADDRESS_513_BITS value) {
    return SafetyIoCommData_REG_ADDRESS_513_BITS_Name(value);
  }
  static inline bool REG_ADDRESS_513_BITS_Parse(const ::std::string& name,
      REG_ADDRESS_513_BITS* value) {
    return SafetyIoCommData_REG_ADDRESS_513_BITS_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional fixed32 read_reg_0 = 1;
  void clear_read_reg_0();
  static const int kReadReg0FieldNumber = 1;
  ::google::protobuf::uint32 read_reg_0() const;
  void set_read_reg_0(::google::protobuf::uint32 value);

  // optional fixed32 read_reg_1 = 2;
  void clear_read_reg_1();
  static const int kReadReg1FieldNumber = 2;
  ::google::protobuf::uint32 read_reg_1() const;
  void set_read_reg_1(::google::protobuf::uint32 value);

  // optional fixed32 read_reg_2 = 3;
  void clear_read_reg_2();
  static const int kReadReg2FieldNumber = 3;
  ::google::protobuf::uint32 read_reg_2() const;
  void set_read_reg_2(::google::protobuf::uint32 value);

  // optional fixed32 read_reg_3 = 4;
  void clear_read_reg_3();
  static const int kReadReg3FieldNumber = 4;
  ::google::protobuf::uint32 read_reg_3() const;
  void set_read_reg_3(::google::protobuf::uint32 value);

  // optional fixed32 read_reg_4 = 5;
  void clear_read_reg_4();
  static const int kReadReg4FieldNumber = 5;
  ::google::protobuf::uint32 read_reg_4() const;
  void set_read_reg_4(::google::protobuf::uint32 value);

  // optional fixed32 read_reg_5 = 6;
  void clear_read_reg_5();
  static const int kReadReg5FieldNumber = 6;
  ::google::protobuf::uint32 read_reg_5() const;
  void set_read_reg_5(::google::protobuf::uint32 value);

  // optional fixed32 read_reg_6 = 7;
  void clear_read_reg_6();
  static const int kReadReg6FieldNumber = 7;
  ::google::protobuf::uint32 read_reg_6() const;
  void set_read_reg_6(::google::protobuf::uint32 value);

  // optional fixed32 read_reg_7 = 8;
  void clear_read_reg_7();
  static const int kReadReg7FieldNumber = 8;
  ::google::protobuf::uint32 read_reg_7() const;
  void set_read_reg_7(::google::protobuf::uint32 value);

  // optional fixed32 write_reg_0 = 9;
  void clear_write_reg_0();
  static const int kWriteReg0FieldNumber = 9;
  ::google::protobuf::uint32 write_reg_0() const;
  void set_write_reg_0(::google::protobuf::uint32 value);

  // optional fixed32 write_reg_1 = 10;
  void clear_write_reg_1();
  static const int kWriteReg1FieldNumber = 10;
  ::google::protobuf::uint32 write_reg_1() const;
  void set_write_reg_1(::google::protobuf::uint32 value);

  // optional fixed32 watchdog_reg = 11;
  void clear_watchdog_reg();
  static const int kWatchdogRegFieldNumber = 11;
  ::google::protobuf::uint32 watchdog_reg() const;
  void set_watchdog_reg(::google::protobuf::uint32 value);

  // optional bool left_access_panel_ch1 = 20;
  void clear_left_access_panel_ch1();
  static const int kLeftAccessPanelCh1FieldNumber = 20;
  bool left_access_panel_ch1() const;
  void set_left_access_panel_ch1(bool value);

  // optional bool left_access_panel_ch2 = 21;
  void clear_left_access_panel_ch2();
  static const int kLeftAccessPanelCh2FieldNumber = 21;
  bool left_access_panel_ch2() const;
  void set_left_access_panel_ch2(bool value);

  // optional bool left_access_solenoid = 22;
  void clear_left_access_solenoid();
  static const int kLeftAccessSolenoidFieldNumber = 22;
  bool left_access_solenoid() const;
  void set_left_access_solenoid(bool value);

  // optional bool left_access_solenoid_locked = 23;
  void clear_left_access_solenoid_locked();
  static const int kLeftAccessSolenoidLockedFieldNumber = 23;
  bool left_access_solenoid_locked() const;
  void set_left_access_solenoid_locked(bool value);

  // optional bool right_access_panel_ch1 = 24;
  void clear_right_access_panel_ch1();
  static const int kRightAccessPanelCh1FieldNumber = 24;
  bool right_access_panel_ch1() const;
  void set_right_access_panel_ch1(bool value);

  // optional bool right_access_panel_ch2 = 25;
  void clear_right_access_panel_ch2();
  static const int kRightAccessPanelCh2FieldNumber = 25;
  bool right_access_panel_ch2() const;
  void set_right_access_panel_ch2(bool value);

  // optional bool right_access_solenoid = 26;
  void clear_right_access_solenoid();
  static const int kRightAccessSolenoidFieldNumber = 26;
  bool right_access_solenoid() const;
  void set_right_access_solenoid(bool value);

  // optional bool right_access_solenoid_locked = 27;
  void clear_right_access_solenoid_locked();
  static const int kRightAccessSolenoidLockedFieldNumber = 27;
  bool right_access_solenoid_locked() const;
  void set_right_access_solenoid_locked(bool value);

  // optional bool access_solenoid_override = 29;
  void clear_access_solenoid_override();
  static const int kAccessSolenoidOverrideFieldNumber = 29;
  bool access_solenoid_override() const;
  void set_access_solenoid_override(bool value);

  // optional bool entrance_port_estop_ch1 = 40;
  void clear_entrance_port_estop_ch1();
  static const int kEntrancePortEstopCh1FieldNumber = 40;
  bool entrance_port_estop_ch1() const;
  void set_entrance_port_estop_ch1(bool value);

  // optional bool entrance_port_estop_ch2 = 41;
  void clear_entrance_port_estop_ch2();
  static const int kEntrancePortEstopCh2FieldNumber = 41;
  bool entrance_port_estop_ch2() const;
  void set_entrance_port_estop_ch2(bool value);

  // optional bool exit_port_estop_ch1 = 42;
  void clear_exit_port_estop_ch1();
  static const int kExitPortEstopCh1FieldNumber = 42;
  bool exit_port_estop_ch1() const;
  void set_exit_port_estop_ch1(bool value);

  // optional bool exit_port_estop_ch2 = 43;
  void clear_exit_port_estop_ch2();
  static const int kExitPortEstopCh2FieldNumber = 43;
  bool exit_port_estop_ch2() const;
  void set_exit_port_estop_ch2(bool value);

  // optional bool console_port_estop_ch1 = 44;
  void clear_console_port_estop_ch1();
  static const int kConsolePortEstopCh1FieldNumber = 44;
  bool console_port_estop_ch1() const;
  void set_console_port_estop_ch1(bool value);

  // optional bool consol_port_estop_ch2 = 45;
  void clear_consol_port_estop_ch2();
  static const int kConsolPortEstopCh2FieldNumber = 45;
  bool consol_port_estop_ch2() const;
  void set_consol_port_estop_ch2(bool value);

  // optional bool bhs_estop_ch1 = 46;
  void clear_bhs_estop_ch1();
  static const int kBhsEstopCh1FieldNumber = 46;
  bool bhs_estop_ch1() const;
  void set_bhs_estop_ch1(bool value);

  // optional bool bhs_estop_ch2 = 47;
  void clear_bhs_estop_ch2();
  static const int kBhsEstopCh2FieldNumber = 47;
  bool bhs_estop_ch2() const;
  void set_bhs_estop_ch2(bool value);

  // optional bool inverter_contactors_status = 60;
  void clear_inverter_contactors_status();
  static const int kInverterContactorsStatusFieldNumber = 60;
  bool inverter_contactors_status() const;
  void set_inverter_contactors_status(bool value);

  // optional bool inverter_enable = 61;
  void clear_inverter_enable();
  static const int kInverterEnableFieldNumber = 61;
  bool inverter_enable() const;
  void set_inverter_enable(bool value);

  // optional bool inverter_xray_on_sense_ch1 = 62;
  void clear_inverter_xray_on_sense_ch1();
  static const int kInverterXrayOnSenseCh1FieldNumber = 62;
  bool inverter_xray_on_sense_ch1() const;
  void set_inverter_xray_on_sense_ch1(bool value);

  // optional bool inverter_xray_on_sense_ch2 = 63;
  void clear_inverter_xray_on_sense_ch2();
  static const int kInverterXrayOnSenseCh2FieldNumber = 63;
  bool inverter_xray_on_sense_ch2() const;
  void set_inverter_xray_on_sense_ch2(bool value);

  // optional bool inverter_line_in_fault = 64;
  void clear_inverter_line_in_fault();
  static const int kInverterLineInFaultFieldNumber = 64;
  bool inverter_line_in_fault() const;
  void set_inverter_line_in_fault(bool value);

  // optional bool inverter_internal_fault = 65;
  void clear_inverter_internal_fault();
  static const int kInverterInternalFaultFieldNumber = 65;
  bool inverter_internal_fault() const;
  void set_inverter_internal_fault(bool value);

  // optional bool inverter_load_fault = 66;
  void clear_inverter_load_fault();
  static const int kInverterLoadFaultFieldNumber = 66;
  bool inverter_load_fault() const;
  void set_inverter_load_fault(bool value);

  // optional bool inverter_powerlink_ok = 67;
  void clear_inverter_powerlink_ok();
  static const int kInverterPowerlinkOkFieldNumber = 67;
  bool inverter_powerlink_ok() const;
  void set_inverter_powerlink_ok(bool value);

  // optional bool motion_contactors = 80;
  void clear_motion_contactors();
  static const int kMotionContactorsFieldNumber = 80;
  bool motion_contactors() const;
  void set_motion_contactors(bool value);

  // optional bool gantry_interference = 81;
  void clear_gantry_interference();
  static const int kGantryInterferenceFieldNumber = 81;
  bool gantry_interference() const;
  void set_gantry_interference(bool value);

  // optional bool bag_sensor_entrance = 82;
  void clear_bag_sensor_entrance();
  static const int kBagSensorEntranceFieldNumber = 82;
  bool bag_sensor_entrance() const;
  void set_bag_sensor_entrance(bool value);

  // optional bool bag_sensor_exit = 83;
  void clear_bag_sensor_exit();
  static const int kBagSensorExitFieldNumber = 83;
  bool bag_sensor_exit() const;
  void set_bag_sensor_exit(bool value);

  // optional bool conveyor_restart_lamp = 85;
  void clear_conveyor_restart_lamp();
  static const int kConveyorRestartLampFieldNumber = 85;
  bool conveyor_restart_lamp() const;
  void set_conveyor_restart_lamp(bool value);

  // optional bool conveyor_restart_button = 86;
  void clear_conveyor_restart_button();
  static const int kConveyorRestartButtonFieldNumber = 86;
  bool conveyor_restart_button() const;
  void set_conveyor_restart_button(bool value);

  // optional bool operator_present = 87;
  void clear_operator_present();
  static const int kOperatorPresentFieldNumber = 87;
  bool operator_present() const;
  void set_operator_present(bool value);

  // optional bool xray_lamp1_pli = 100;
  void clear_xray_lamp1_pli();
  static const int kXrayLamp1PliFieldNumber = 100;
  bool xray_lamp1_pli() const;
  void set_xray_lamp1_pli(bool value);

  // optional bool xray_lamp2_sw = 101;
  void clear_xray_lamp2_sw();
  static const int kXrayLamp2SwFieldNumber = 101;
  bool xray_lamp2_sw() const;
  void set_xray_lamp2_sw(bool value);

  // optional bool xray_lamp_test = 102;
  void clear_xray_lamp_test();
  static const int kXrayLampTestFieldNumber = 102;
  bool xray_lamp_test() const;
  void set_xray_lamp_test(bool value);

  // optional bool xray_cmd_off = 103;
  void clear_xray_cmd_off();
  static const int kXrayCmdOffFieldNumber = 103;
  bool xray_cmd_off() const;
  void set_xray_cmd_off(bool value);

  // optional bool xray_cmd_fault_reset = 104;
  void clear_xray_cmd_fault_reset();
  static const int kXrayCmdFaultResetFieldNumber = 104;
  bool xray_cmd_fault_reset() const;
  void set_xray_cmd_fault_reset(bool value);

  // optional bool xray_cmd_minimization = 105;
  void clear_xray_cmd_minimization();
  static const int kXrayCmdMinimizationFieldNumber = 105;
  bool xray_cmd_minimization() const;
  void set_xray_cmd_minimization(bool value);

  // optional bool xray_cmd_reserved = 106;
  void clear_xray_cmd_reserved();
  static const int kXrayCmdReservedFieldNumber = 106;
  bool xray_cmd_reserved() const;
  void set_xray_cmd_reserved(bool value);

  // optional bool xray_cmd_seasoning_short = 107;
  void clear_xray_cmd_seasoning_short();
  static const int kXrayCmdSeasoningShortFieldNumber = 107;
  bool xray_cmd_seasoning_short() const;
  void set_xray_cmd_seasoning_short(bool value);

  // optional bool xray_cmd_seasoning_medium = 108;
  void clear_xray_cmd_seasoning_medium();
  static const int kXrayCmdSeasoningMediumFieldNumber = 108;
  bool xray_cmd_seasoning_medium() const;
  void set_xray_cmd_seasoning_medium(bool value);

  // optional bool xray_cmd_seasoning_long = 109;
  void clear_xray_cmd_seasoning_long();
  static const int kXrayCmdSeasoningLongFieldNumber = 109;
  bool xray_cmd_seasoning_long() const;
  void set_xray_cmd_seasoning_long(bool value);

  // optional bool xray_cmd_on = 110;
  void clear_xray_cmd_on();
  static const int kXrayCmdOnFieldNumber = 110;
  bool xray_cmd_on() const;
  void set_xray_cmd_on(bool value);

  // optional bool xray_motion_enable_ch1 = 120;
  void clear_xray_motion_enable_ch1();
  static const int kXrayMotionEnableCh1FieldNumber = 120;
  bool xray_motion_enable_ch1() const;
  void set_xray_motion_enable_ch1(bool value);

  // optional bool xray_motion_enable_ch2 = 121;
  void clear_xray_motion_enable_ch2();
  static const int kXrayMotionEnableCh2FieldNumber = 121;
  bool xray_motion_enable_ch2() const;
  void set_xray_motion_enable_ch2(bool value);

  // optional bool safety_reset_required = 122;
  void clear_safety_reset_required();
  static const int kSafetyResetRequiredFieldNumber = 122;
  bool safety_reset_required() const;
  void set_safety_reset_required(bool value);

  // optional bool safety_reset_button = 123;
  void clear_safety_reset_button();
  static const int kSafetyResetButtonFieldNumber = 123;
  bool safety_reset_button() const;
  void set_safety_reset_button(bool value);

  // optional bool panels_unlocked = 124;
  void clear_panels_unlocked();
  static const int kPanelsUnlockedFieldNumber = 124;
  bool panels_unlocked() const;
  void set_panels_unlocked(bool value);

  // optional bool entrance_estop_fault = 140;
  void clear_entrance_estop_fault();
  static const int kEntranceEstopFaultFieldNumber = 140;
  bool entrance_estop_fault() const;
  void set_entrance_estop_fault(bool value);

  // optional bool exit_estop_fault = 141;
  void clear_exit_estop_fault();
  static const int kExitEstopFaultFieldNumber = 141;
  bool exit_estop_fault() const;
  void set_exit_estop_fault(bool value);

  // optional bool console_estop_fault = 142;
  void clear_console_estop_fault();
  static const int kConsoleEstopFaultFieldNumber = 142;
  bool console_estop_fault() const;
  void set_console_estop_fault(bool value);

  // optional bool bhs_estop_fault = 143;
  void clear_bhs_estop_fault();
  static const int kBhsEstopFaultFieldNumber = 143;
  bool bhs_estop_fault() const;
  void set_bhs_estop_fault(bool value);

  // optional bool access_panel_left_magnetic_interlock_fault = 144;
  void clear_access_panel_left_magnetic_interlock_fault();
  static const int kAccessPanelLeftMagneticInterlockFaultFieldNumber = 144;
  bool access_panel_left_magnetic_interlock_fault() const;
  void set_access_panel_left_magnetic_interlock_fault(bool value);

  // optional bool access_panel_right_magnetic_interlock_fault = 145;
  void clear_access_panel_right_magnetic_interlock_fault();
  static const int kAccessPanelRightMagneticInterlockFaultFieldNumber = 145;
  bool access_panel_right_magnetic_interlock_fault() const;
  void set_access_panel_right_magnetic_interlock_fault(bool value);

  // optional bool motion_contactors_status_fault = 146;
  void clear_motion_contactors_status_fault();
  static const int kMotionContactorsStatusFaultFieldNumber = 146;
  bool motion_contactors_status_fault() const;
  void set_motion_contactors_status_fault(bool value);

  // optional bool powerlink_contactors_status_fault = 147;
  void clear_powerlink_contactors_status_fault();
  static const int kPowerlinkContactorsStatusFaultFieldNumber = 147;
  bool powerlink_contactors_status_fault() const;
  void set_powerlink_contactors_status_fault(bool value);

  // optional bool rotational_envelope_violation_sensor_fault = 148;
  void clear_rotational_envelope_violation_sensor_fault();
  static const int kRotationalEnvelopeViolationSensorFaultFieldNumber = 148;
  bool rotational_envelope_violation_sensor_fault() const;
  void set_rotational_envelope_violation_sensor_fault(bool value);

  // optional bool standstill_monitor_fault = 149;
  void clear_standstill_monitor_fault();
  static const int kStandstillMonitorFaultFieldNumber = 149;
  bool standstill_monitor_fault() const;
  void set_standstill_monitor_fault(bool value);

  // optional bool overspeed_fault = 150;
  void clear_overspeed_fault();
  static const int kOverspeedFaultFieldNumber = 150;
  bool overspeed_fault() const;
  void set_overspeed_fault(bool value);

  // optional bool access_panels_locking_fault = 151;
  void clear_access_panels_locking_fault();
  static const int kAccessPanelsLockingFaultFieldNumber = 151;
  bool access_panels_locking_fault() const;
  void set_access_panels_locking_fault(bool value);

  // optional bool xray_motion_keyswitch_fault = 152;
  void clear_xray_motion_keyswitch_fault();
  static const int kXrayMotionKeyswitchFaultFieldNumber = 152;
  bool xray_motion_keyswitch_fault() const;
  void set_xray_motion_keyswitch_fault(bool value);

  // optional bool encoder_fault = 153;
  void clear_encoder_fault();
  static const int kEncoderFaultFieldNumber = 153;
  bool encoder_fault() const;
  void set_encoder_fault(bool value);

  // optional bool speed_monitor_reset_required = 160;
  void clear_speed_monitor_reset_required();
  static const int kSpeedMonitorResetRequiredFieldNumber = 160;
  bool speed_monitor_reset_required() const;
  void set_speed_monitor_reset_required(bool value);

  // optional bool standstill = 161;
  void clear_standstill();
  static const int kStandstillFieldNumber = 161;
  bool standstill() const;
  void set_standstill(bool value);

  // optional bool standstill_monitor_enabled = 162;
  void clear_standstill_monitor_enabled();
  static const int kStandstillMonitorEnabledFieldNumber = 162;
  bool standstill_monitor_enabled() const;
  void set_standstill_monitor_enabled(bool value);

  // @@protoc_insertion_point(class_scope:analogic.ancp00.SafetyIoCommData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint32 read_reg_0_;
  ::google::protobuf::uint32 read_reg_1_;
  ::google::protobuf::uint32 read_reg_2_;
  ::google::protobuf::uint32 read_reg_3_;
  ::google::protobuf::uint32 read_reg_4_;
  ::google::protobuf::uint32 read_reg_5_;
  ::google::protobuf::uint32 read_reg_6_;
  ::google::protobuf::uint32 read_reg_7_;
  ::google::protobuf::uint32 write_reg_0_;
  ::google::protobuf::uint32 write_reg_1_;
  ::google::protobuf::uint32 watchdog_reg_;
  bool left_access_panel_ch1_;
  bool left_access_panel_ch2_;
  bool left_access_solenoid_;
  bool left_access_solenoid_locked_;
  bool right_access_panel_ch1_;
  bool right_access_panel_ch2_;
  bool right_access_solenoid_;
  bool right_access_solenoid_locked_;
  bool access_solenoid_override_;
  bool entrance_port_estop_ch1_;
  bool entrance_port_estop_ch2_;
  bool exit_port_estop_ch1_;
  bool exit_port_estop_ch2_;
  bool console_port_estop_ch1_;
  bool consol_port_estop_ch2_;
  bool bhs_estop_ch1_;
  bool bhs_estop_ch2_;
  bool inverter_contactors_status_;
  bool inverter_enable_;
  bool inverter_xray_on_sense_ch1_;
  bool inverter_xray_on_sense_ch2_;
  bool inverter_line_in_fault_;
  bool inverter_internal_fault_;
  bool inverter_load_fault_;
  bool inverter_powerlink_ok_;
  bool motion_contactors_;
  bool gantry_interference_;
  bool bag_sensor_entrance_;
  bool bag_sensor_exit_;
  bool conveyor_restart_lamp_;
  bool conveyor_restart_button_;
  bool operator_present_;
  bool xray_lamp1_pli_;
  bool xray_lamp2_sw_;
  bool xray_lamp_test_;
  bool xray_cmd_off_;
  bool xray_cmd_fault_reset_;
  bool xray_cmd_minimization_;
  bool xray_cmd_reserved_;
  bool xray_cmd_seasoning_short_;
  bool xray_cmd_seasoning_medium_;
  bool xray_cmd_seasoning_long_;
  bool xray_cmd_on_;
  bool xray_motion_enable_ch1_;
  bool xray_motion_enable_ch2_;
  bool safety_reset_required_;
  bool safety_reset_button_;
  bool panels_unlocked_;
  bool entrance_estop_fault_;
  bool exit_estop_fault_;
  bool console_estop_fault_;
  bool bhs_estop_fault_;
  bool access_panel_left_magnetic_interlock_fault_;
  bool access_panel_right_magnetic_interlock_fault_;
  bool motion_contactors_status_fault_;
  bool powerlink_contactors_status_fault_;
  bool rotational_envelope_violation_sensor_fault_;
  bool standstill_monitor_fault_;
  bool overspeed_fault_;
  bool access_panels_locking_fault_;
  bool xray_motion_keyswitch_fault_;
  bool encoder_fault_;
  bool speed_monitor_reset_required_;
  bool standstill_;
  bool standstill_monitor_enabled_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_proto_2fSafetyIoComm_2eproto();
  friend void protobuf_AssignDesc_proto_2fSafetyIoComm_2eproto();
  friend void protobuf_ShutdownFile_proto_2fSafetyIoComm_2eproto();

  void InitAsDefaultInstance();
  static SafetyIoCommData* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// SafetyIoCommMsg

// optional .analogic.ancp00.SafetyIoCommMsg.CmdId id = 1;
inline void SafetyIoCommMsg::clear_id() {
  id_ = 0;
}
inline ::analogic::ancp00::SafetyIoCommMsg_CmdId SafetyIoCommMsg::id() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommMsg.id)
  return static_cast< ::analogic::ancp00::SafetyIoCommMsg_CmdId >(id_);
}
inline void SafetyIoCommMsg::set_id(::analogic::ancp00::SafetyIoCommMsg_CmdId value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommMsg.id)
}

// -------------------------------------------------------------------

// SafetyIoCommData

// optional fixed32 read_reg_0 = 1;
inline void SafetyIoCommData::clear_read_reg_0() {
  read_reg_0_ = 0u;
}
inline ::google::protobuf::uint32 SafetyIoCommData::read_reg_0() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.read_reg_0)
  return read_reg_0_;
}
inline void SafetyIoCommData::set_read_reg_0(::google::protobuf::uint32 value) {
  
  read_reg_0_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.read_reg_0)
}

// optional fixed32 read_reg_1 = 2;
inline void SafetyIoCommData::clear_read_reg_1() {
  read_reg_1_ = 0u;
}
inline ::google::protobuf::uint32 SafetyIoCommData::read_reg_1() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.read_reg_1)
  return read_reg_1_;
}
inline void SafetyIoCommData::set_read_reg_1(::google::protobuf::uint32 value) {
  
  read_reg_1_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.read_reg_1)
}

// optional fixed32 read_reg_2 = 3;
inline void SafetyIoCommData::clear_read_reg_2() {
  read_reg_2_ = 0u;
}
inline ::google::protobuf::uint32 SafetyIoCommData::read_reg_2() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.read_reg_2)
  return read_reg_2_;
}
inline void SafetyIoCommData::set_read_reg_2(::google::protobuf::uint32 value) {
  
  read_reg_2_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.read_reg_2)
}

// optional fixed32 read_reg_3 = 4;
inline void SafetyIoCommData::clear_read_reg_3() {
  read_reg_3_ = 0u;
}
inline ::google::protobuf::uint32 SafetyIoCommData::read_reg_3() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.read_reg_3)
  return read_reg_3_;
}
inline void SafetyIoCommData::set_read_reg_3(::google::protobuf::uint32 value) {
  
  read_reg_3_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.read_reg_3)
}

// optional fixed32 read_reg_4 = 5;
inline void SafetyIoCommData::clear_read_reg_4() {
  read_reg_4_ = 0u;
}
inline ::google::protobuf::uint32 SafetyIoCommData::read_reg_4() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.read_reg_4)
  return read_reg_4_;
}
inline void SafetyIoCommData::set_read_reg_4(::google::protobuf::uint32 value) {
  
  read_reg_4_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.read_reg_4)
}

// optional fixed32 read_reg_5 = 6;
inline void SafetyIoCommData::clear_read_reg_5() {
  read_reg_5_ = 0u;
}
inline ::google::protobuf::uint32 SafetyIoCommData::read_reg_5() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.read_reg_5)
  return read_reg_5_;
}
inline void SafetyIoCommData::set_read_reg_5(::google::protobuf::uint32 value) {
  
  read_reg_5_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.read_reg_5)
}

// optional fixed32 read_reg_6 = 7;
inline void SafetyIoCommData::clear_read_reg_6() {
  read_reg_6_ = 0u;
}
inline ::google::protobuf::uint32 SafetyIoCommData::read_reg_6() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.read_reg_6)
  return read_reg_6_;
}
inline void SafetyIoCommData::set_read_reg_6(::google::protobuf::uint32 value) {
  
  read_reg_6_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.read_reg_6)
}

// optional fixed32 read_reg_7 = 8;
inline void SafetyIoCommData::clear_read_reg_7() {
  read_reg_7_ = 0u;
}
inline ::google::protobuf::uint32 SafetyIoCommData::read_reg_7() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.read_reg_7)
  return read_reg_7_;
}
inline void SafetyIoCommData::set_read_reg_7(::google::protobuf::uint32 value) {
  
  read_reg_7_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.read_reg_7)
}

// optional fixed32 write_reg_0 = 9;
inline void SafetyIoCommData::clear_write_reg_0() {
  write_reg_0_ = 0u;
}
inline ::google::protobuf::uint32 SafetyIoCommData::write_reg_0() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.write_reg_0)
  return write_reg_0_;
}
inline void SafetyIoCommData::set_write_reg_0(::google::protobuf::uint32 value) {
  
  write_reg_0_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.write_reg_0)
}

// optional fixed32 write_reg_1 = 10;
inline void SafetyIoCommData::clear_write_reg_1() {
  write_reg_1_ = 0u;
}
inline ::google::protobuf::uint32 SafetyIoCommData::write_reg_1() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.write_reg_1)
  return write_reg_1_;
}
inline void SafetyIoCommData::set_write_reg_1(::google::protobuf::uint32 value) {
  
  write_reg_1_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.write_reg_1)
}

// optional fixed32 watchdog_reg = 11;
inline void SafetyIoCommData::clear_watchdog_reg() {
  watchdog_reg_ = 0u;
}
inline ::google::protobuf::uint32 SafetyIoCommData::watchdog_reg() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.watchdog_reg)
  return watchdog_reg_;
}
inline void SafetyIoCommData::set_watchdog_reg(::google::protobuf::uint32 value) {
  
  watchdog_reg_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.watchdog_reg)
}

// optional bool left_access_panel_ch1 = 20;
inline void SafetyIoCommData::clear_left_access_panel_ch1() {
  left_access_panel_ch1_ = false;
}
inline bool SafetyIoCommData::left_access_panel_ch1() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.left_access_panel_ch1)
  return left_access_panel_ch1_;
}
inline void SafetyIoCommData::set_left_access_panel_ch1(bool value) {
  
  left_access_panel_ch1_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.left_access_panel_ch1)
}

// optional bool left_access_panel_ch2 = 21;
inline void SafetyIoCommData::clear_left_access_panel_ch2() {
  left_access_panel_ch2_ = false;
}
inline bool SafetyIoCommData::left_access_panel_ch2() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.left_access_panel_ch2)
  return left_access_panel_ch2_;
}
inline void SafetyIoCommData::set_left_access_panel_ch2(bool value) {
  
  left_access_panel_ch2_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.left_access_panel_ch2)
}

// optional bool left_access_solenoid = 22;
inline void SafetyIoCommData::clear_left_access_solenoid() {
  left_access_solenoid_ = false;
}
inline bool SafetyIoCommData::left_access_solenoid() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.left_access_solenoid)
  return left_access_solenoid_;
}
inline void SafetyIoCommData::set_left_access_solenoid(bool value) {
  
  left_access_solenoid_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.left_access_solenoid)
}

// optional bool left_access_solenoid_locked = 23;
inline void SafetyIoCommData::clear_left_access_solenoid_locked() {
  left_access_solenoid_locked_ = false;
}
inline bool SafetyIoCommData::left_access_solenoid_locked() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.left_access_solenoid_locked)
  return left_access_solenoid_locked_;
}
inline void SafetyIoCommData::set_left_access_solenoid_locked(bool value) {
  
  left_access_solenoid_locked_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.left_access_solenoid_locked)
}

// optional bool right_access_panel_ch1 = 24;
inline void SafetyIoCommData::clear_right_access_panel_ch1() {
  right_access_panel_ch1_ = false;
}
inline bool SafetyIoCommData::right_access_panel_ch1() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.right_access_panel_ch1)
  return right_access_panel_ch1_;
}
inline void SafetyIoCommData::set_right_access_panel_ch1(bool value) {
  
  right_access_panel_ch1_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.right_access_panel_ch1)
}

// optional bool right_access_panel_ch2 = 25;
inline void SafetyIoCommData::clear_right_access_panel_ch2() {
  right_access_panel_ch2_ = false;
}
inline bool SafetyIoCommData::right_access_panel_ch2() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.right_access_panel_ch2)
  return right_access_panel_ch2_;
}
inline void SafetyIoCommData::set_right_access_panel_ch2(bool value) {
  
  right_access_panel_ch2_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.right_access_panel_ch2)
}

// optional bool right_access_solenoid = 26;
inline void SafetyIoCommData::clear_right_access_solenoid() {
  right_access_solenoid_ = false;
}
inline bool SafetyIoCommData::right_access_solenoid() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.right_access_solenoid)
  return right_access_solenoid_;
}
inline void SafetyIoCommData::set_right_access_solenoid(bool value) {
  
  right_access_solenoid_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.right_access_solenoid)
}

// optional bool right_access_solenoid_locked = 27;
inline void SafetyIoCommData::clear_right_access_solenoid_locked() {
  right_access_solenoid_locked_ = false;
}
inline bool SafetyIoCommData::right_access_solenoid_locked() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.right_access_solenoid_locked)
  return right_access_solenoid_locked_;
}
inline void SafetyIoCommData::set_right_access_solenoid_locked(bool value) {
  
  right_access_solenoid_locked_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.right_access_solenoid_locked)
}

// optional bool access_solenoid_override = 29;
inline void SafetyIoCommData::clear_access_solenoid_override() {
  access_solenoid_override_ = false;
}
inline bool SafetyIoCommData::access_solenoid_override() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.access_solenoid_override)
  return access_solenoid_override_;
}
inline void SafetyIoCommData::set_access_solenoid_override(bool value) {
  
  access_solenoid_override_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.access_solenoid_override)
}

// optional bool entrance_port_estop_ch1 = 40;
inline void SafetyIoCommData::clear_entrance_port_estop_ch1() {
  entrance_port_estop_ch1_ = false;
}
inline bool SafetyIoCommData::entrance_port_estop_ch1() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.entrance_port_estop_ch1)
  return entrance_port_estop_ch1_;
}
inline void SafetyIoCommData::set_entrance_port_estop_ch1(bool value) {
  
  entrance_port_estop_ch1_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.entrance_port_estop_ch1)
}

// optional bool entrance_port_estop_ch2 = 41;
inline void SafetyIoCommData::clear_entrance_port_estop_ch2() {
  entrance_port_estop_ch2_ = false;
}
inline bool SafetyIoCommData::entrance_port_estop_ch2() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.entrance_port_estop_ch2)
  return entrance_port_estop_ch2_;
}
inline void SafetyIoCommData::set_entrance_port_estop_ch2(bool value) {
  
  entrance_port_estop_ch2_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.entrance_port_estop_ch2)
}

// optional bool exit_port_estop_ch1 = 42;
inline void SafetyIoCommData::clear_exit_port_estop_ch1() {
  exit_port_estop_ch1_ = false;
}
inline bool SafetyIoCommData::exit_port_estop_ch1() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.exit_port_estop_ch1)
  return exit_port_estop_ch1_;
}
inline void SafetyIoCommData::set_exit_port_estop_ch1(bool value) {
  
  exit_port_estop_ch1_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.exit_port_estop_ch1)
}

// optional bool exit_port_estop_ch2 = 43;
inline void SafetyIoCommData::clear_exit_port_estop_ch2() {
  exit_port_estop_ch2_ = false;
}
inline bool SafetyIoCommData::exit_port_estop_ch2() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.exit_port_estop_ch2)
  return exit_port_estop_ch2_;
}
inline void SafetyIoCommData::set_exit_port_estop_ch2(bool value) {
  
  exit_port_estop_ch2_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.exit_port_estop_ch2)
}

// optional bool console_port_estop_ch1 = 44;
inline void SafetyIoCommData::clear_console_port_estop_ch1() {
  console_port_estop_ch1_ = false;
}
inline bool SafetyIoCommData::console_port_estop_ch1() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.console_port_estop_ch1)
  return console_port_estop_ch1_;
}
inline void SafetyIoCommData::set_console_port_estop_ch1(bool value) {
  
  console_port_estop_ch1_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.console_port_estop_ch1)
}

// optional bool consol_port_estop_ch2 = 45;
inline void SafetyIoCommData::clear_consol_port_estop_ch2() {
  consol_port_estop_ch2_ = false;
}
inline bool SafetyIoCommData::consol_port_estop_ch2() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.consol_port_estop_ch2)
  return consol_port_estop_ch2_;
}
inline void SafetyIoCommData::set_consol_port_estop_ch2(bool value) {
  
  consol_port_estop_ch2_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.consol_port_estop_ch2)
}

// optional bool bhs_estop_ch1 = 46;
inline void SafetyIoCommData::clear_bhs_estop_ch1() {
  bhs_estop_ch1_ = false;
}
inline bool SafetyIoCommData::bhs_estop_ch1() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.bhs_estop_ch1)
  return bhs_estop_ch1_;
}
inline void SafetyIoCommData::set_bhs_estop_ch1(bool value) {
  
  bhs_estop_ch1_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.bhs_estop_ch1)
}

// optional bool bhs_estop_ch2 = 47;
inline void SafetyIoCommData::clear_bhs_estop_ch2() {
  bhs_estop_ch2_ = false;
}
inline bool SafetyIoCommData::bhs_estop_ch2() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.bhs_estop_ch2)
  return bhs_estop_ch2_;
}
inline void SafetyIoCommData::set_bhs_estop_ch2(bool value) {
  
  bhs_estop_ch2_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.bhs_estop_ch2)
}

// optional bool inverter_contactors_status = 60;
inline void SafetyIoCommData::clear_inverter_contactors_status() {
  inverter_contactors_status_ = false;
}
inline bool SafetyIoCommData::inverter_contactors_status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.inverter_contactors_status)
  return inverter_contactors_status_;
}
inline void SafetyIoCommData::set_inverter_contactors_status(bool value) {
  
  inverter_contactors_status_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.inverter_contactors_status)
}

// optional bool inverter_enable = 61;
inline void SafetyIoCommData::clear_inverter_enable() {
  inverter_enable_ = false;
}
inline bool SafetyIoCommData::inverter_enable() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.inverter_enable)
  return inverter_enable_;
}
inline void SafetyIoCommData::set_inverter_enable(bool value) {
  
  inverter_enable_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.inverter_enable)
}

// optional bool inverter_xray_on_sense_ch1 = 62;
inline void SafetyIoCommData::clear_inverter_xray_on_sense_ch1() {
  inverter_xray_on_sense_ch1_ = false;
}
inline bool SafetyIoCommData::inverter_xray_on_sense_ch1() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.inverter_xray_on_sense_ch1)
  return inverter_xray_on_sense_ch1_;
}
inline void SafetyIoCommData::set_inverter_xray_on_sense_ch1(bool value) {
  
  inverter_xray_on_sense_ch1_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.inverter_xray_on_sense_ch1)
}

// optional bool inverter_xray_on_sense_ch2 = 63;
inline void SafetyIoCommData::clear_inverter_xray_on_sense_ch2() {
  inverter_xray_on_sense_ch2_ = false;
}
inline bool SafetyIoCommData::inverter_xray_on_sense_ch2() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.inverter_xray_on_sense_ch2)
  return inverter_xray_on_sense_ch2_;
}
inline void SafetyIoCommData::set_inverter_xray_on_sense_ch2(bool value) {
  
  inverter_xray_on_sense_ch2_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.inverter_xray_on_sense_ch2)
}

// optional bool inverter_line_in_fault = 64;
inline void SafetyIoCommData::clear_inverter_line_in_fault() {
  inverter_line_in_fault_ = false;
}
inline bool SafetyIoCommData::inverter_line_in_fault() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.inverter_line_in_fault)
  return inverter_line_in_fault_;
}
inline void SafetyIoCommData::set_inverter_line_in_fault(bool value) {
  
  inverter_line_in_fault_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.inverter_line_in_fault)
}

// optional bool inverter_internal_fault = 65;
inline void SafetyIoCommData::clear_inverter_internal_fault() {
  inverter_internal_fault_ = false;
}
inline bool SafetyIoCommData::inverter_internal_fault() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.inverter_internal_fault)
  return inverter_internal_fault_;
}
inline void SafetyIoCommData::set_inverter_internal_fault(bool value) {
  
  inverter_internal_fault_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.inverter_internal_fault)
}

// optional bool inverter_load_fault = 66;
inline void SafetyIoCommData::clear_inverter_load_fault() {
  inverter_load_fault_ = false;
}
inline bool SafetyIoCommData::inverter_load_fault() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.inverter_load_fault)
  return inverter_load_fault_;
}
inline void SafetyIoCommData::set_inverter_load_fault(bool value) {
  
  inverter_load_fault_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.inverter_load_fault)
}

// optional bool inverter_powerlink_ok = 67;
inline void SafetyIoCommData::clear_inverter_powerlink_ok() {
  inverter_powerlink_ok_ = false;
}
inline bool SafetyIoCommData::inverter_powerlink_ok() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.inverter_powerlink_ok)
  return inverter_powerlink_ok_;
}
inline void SafetyIoCommData::set_inverter_powerlink_ok(bool value) {
  
  inverter_powerlink_ok_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.inverter_powerlink_ok)
}

// optional bool motion_contactors = 80;
inline void SafetyIoCommData::clear_motion_contactors() {
  motion_contactors_ = false;
}
inline bool SafetyIoCommData::motion_contactors() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.motion_contactors)
  return motion_contactors_;
}
inline void SafetyIoCommData::set_motion_contactors(bool value) {
  
  motion_contactors_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.motion_contactors)
}

// optional bool gantry_interference = 81;
inline void SafetyIoCommData::clear_gantry_interference() {
  gantry_interference_ = false;
}
inline bool SafetyIoCommData::gantry_interference() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.gantry_interference)
  return gantry_interference_;
}
inline void SafetyIoCommData::set_gantry_interference(bool value) {
  
  gantry_interference_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.gantry_interference)
}

// optional bool bag_sensor_entrance = 82;
inline void SafetyIoCommData::clear_bag_sensor_entrance() {
  bag_sensor_entrance_ = false;
}
inline bool SafetyIoCommData::bag_sensor_entrance() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.bag_sensor_entrance)
  return bag_sensor_entrance_;
}
inline void SafetyIoCommData::set_bag_sensor_entrance(bool value) {
  
  bag_sensor_entrance_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.bag_sensor_entrance)
}

// optional bool bag_sensor_exit = 83;
inline void SafetyIoCommData::clear_bag_sensor_exit() {
  bag_sensor_exit_ = false;
}
inline bool SafetyIoCommData::bag_sensor_exit() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.bag_sensor_exit)
  return bag_sensor_exit_;
}
inline void SafetyIoCommData::set_bag_sensor_exit(bool value) {
  
  bag_sensor_exit_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.bag_sensor_exit)
}

// optional bool conveyor_restart_lamp = 85;
inline void SafetyIoCommData::clear_conveyor_restart_lamp() {
  conveyor_restart_lamp_ = false;
}
inline bool SafetyIoCommData::conveyor_restart_lamp() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.conveyor_restart_lamp)
  return conveyor_restart_lamp_;
}
inline void SafetyIoCommData::set_conveyor_restart_lamp(bool value) {
  
  conveyor_restart_lamp_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.conveyor_restart_lamp)
}

// optional bool conveyor_restart_button = 86;
inline void SafetyIoCommData::clear_conveyor_restart_button() {
  conveyor_restart_button_ = false;
}
inline bool SafetyIoCommData::conveyor_restart_button() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.conveyor_restart_button)
  return conveyor_restart_button_;
}
inline void SafetyIoCommData::set_conveyor_restart_button(bool value) {
  
  conveyor_restart_button_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.conveyor_restart_button)
}

// optional bool operator_present = 87;
inline void SafetyIoCommData::clear_operator_present() {
  operator_present_ = false;
}
inline bool SafetyIoCommData::operator_present() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.operator_present)
  return operator_present_;
}
inline void SafetyIoCommData::set_operator_present(bool value) {
  
  operator_present_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.operator_present)
}

// optional bool xray_lamp1_pli = 100;
inline void SafetyIoCommData::clear_xray_lamp1_pli() {
  xray_lamp1_pli_ = false;
}
inline bool SafetyIoCommData::xray_lamp1_pli() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.xray_lamp1_pli)
  return xray_lamp1_pli_;
}
inline void SafetyIoCommData::set_xray_lamp1_pli(bool value) {
  
  xray_lamp1_pli_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.xray_lamp1_pli)
}

// optional bool xray_lamp2_sw = 101;
inline void SafetyIoCommData::clear_xray_lamp2_sw() {
  xray_lamp2_sw_ = false;
}
inline bool SafetyIoCommData::xray_lamp2_sw() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.xray_lamp2_sw)
  return xray_lamp2_sw_;
}
inline void SafetyIoCommData::set_xray_lamp2_sw(bool value) {
  
  xray_lamp2_sw_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.xray_lamp2_sw)
}

// optional bool xray_lamp_test = 102;
inline void SafetyIoCommData::clear_xray_lamp_test() {
  xray_lamp_test_ = false;
}
inline bool SafetyIoCommData::xray_lamp_test() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.xray_lamp_test)
  return xray_lamp_test_;
}
inline void SafetyIoCommData::set_xray_lamp_test(bool value) {
  
  xray_lamp_test_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.xray_lamp_test)
}

// optional bool xray_cmd_off = 103;
inline void SafetyIoCommData::clear_xray_cmd_off() {
  xray_cmd_off_ = false;
}
inline bool SafetyIoCommData::xray_cmd_off() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.xray_cmd_off)
  return xray_cmd_off_;
}
inline void SafetyIoCommData::set_xray_cmd_off(bool value) {
  
  xray_cmd_off_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.xray_cmd_off)
}

// optional bool xray_cmd_fault_reset = 104;
inline void SafetyIoCommData::clear_xray_cmd_fault_reset() {
  xray_cmd_fault_reset_ = false;
}
inline bool SafetyIoCommData::xray_cmd_fault_reset() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.xray_cmd_fault_reset)
  return xray_cmd_fault_reset_;
}
inline void SafetyIoCommData::set_xray_cmd_fault_reset(bool value) {
  
  xray_cmd_fault_reset_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.xray_cmd_fault_reset)
}

// optional bool xray_cmd_minimization = 105;
inline void SafetyIoCommData::clear_xray_cmd_minimization() {
  xray_cmd_minimization_ = false;
}
inline bool SafetyIoCommData::xray_cmd_minimization() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.xray_cmd_minimization)
  return xray_cmd_minimization_;
}
inline void SafetyIoCommData::set_xray_cmd_minimization(bool value) {
  
  xray_cmd_minimization_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.xray_cmd_minimization)
}

// optional bool xray_cmd_reserved = 106;
inline void SafetyIoCommData::clear_xray_cmd_reserved() {
  xray_cmd_reserved_ = false;
}
inline bool SafetyIoCommData::xray_cmd_reserved() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.xray_cmd_reserved)
  return xray_cmd_reserved_;
}
inline void SafetyIoCommData::set_xray_cmd_reserved(bool value) {
  
  xray_cmd_reserved_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.xray_cmd_reserved)
}

// optional bool xray_cmd_seasoning_short = 107;
inline void SafetyIoCommData::clear_xray_cmd_seasoning_short() {
  xray_cmd_seasoning_short_ = false;
}
inline bool SafetyIoCommData::xray_cmd_seasoning_short() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.xray_cmd_seasoning_short)
  return xray_cmd_seasoning_short_;
}
inline void SafetyIoCommData::set_xray_cmd_seasoning_short(bool value) {
  
  xray_cmd_seasoning_short_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.xray_cmd_seasoning_short)
}

// optional bool xray_cmd_seasoning_medium = 108;
inline void SafetyIoCommData::clear_xray_cmd_seasoning_medium() {
  xray_cmd_seasoning_medium_ = false;
}
inline bool SafetyIoCommData::xray_cmd_seasoning_medium() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.xray_cmd_seasoning_medium)
  return xray_cmd_seasoning_medium_;
}
inline void SafetyIoCommData::set_xray_cmd_seasoning_medium(bool value) {
  
  xray_cmd_seasoning_medium_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.xray_cmd_seasoning_medium)
}

// optional bool xray_cmd_seasoning_long = 109;
inline void SafetyIoCommData::clear_xray_cmd_seasoning_long() {
  xray_cmd_seasoning_long_ = false;
}
inline bool SafetyIoCommData::xray_cmd_seasoning_long() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.xray_cmd_seasoning_long)
  return xray_cmd_seasoning_long_;
}
inline void SafetyIoCommData::set_xray_cmd_seasoning_long(bool value) {
  
  xray_cmd_seasoning_long_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.xray_cmd_seasoning_long)
}

// optional bool xray_cmd_on = 110;
inline void SafetyIoCommData::clear_xray_cmd_on() {
  xray_cmd_on_ = false;
}
inline bool SafetyIoCommData::xray_cmd_on() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.xray_cmd_on)
  return xray_cmd_on_;
}
inline void SafetyIoCommData::set_xray_cmd_on(bool value) {
  
  xray_cmd_on_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.xray_cmd_on)
}

// optional bool xray_motion_enable_ch1 = 120;
inline void SafetyIoCommData::clear_xray_motion_enable_ch1() {
  xray_motion_enable_ch1_ = false;
}
inline bool SafetyIoCommData::xray_motion_enable_ch1() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.xray_motion_enable_ch1)
  return xray_motion_enable_ch1_;
}
inline void SafetyIoCommData::set_xray_motion_enable_ch1(bool value) {
  
  xray_motion_enable_ch1_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.xray_motion_enable_ch1)
}

// optional bool xray_motion_enable_ch2 = 121;
inline void SafetyIoCommData::clear_xray_motion_enable_ch2() {
  xray_motion_enable_ch2_ = false;
}
inline bool SafetyIoCommData::xray_motion_enable_ch2() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.xray_motion_enable_ch2)
  return xray_motion_enable_ch2_;
}
inline void SafetyIoCommData::set_xray_motion_enable_ch2(bool value) {
  
  xray_motion_enable_ch2_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.xray_motion_enable_ch2)
}

// optional bool safety_reset_required = 122;
inline void SafetyIoCommData::clear_safety_reset_required() {
  safety_reset_required_ = false;
}
inline bool SafetyIoCommData::safety_reset_required() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.safety_reset_required)
  return safety_reset_required_;
}
inline void SafetyIoCommData::set_safety_reset_required(bool value) {
  
  safety_reset_required_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.safety_reset_required)
}

// optional bool safety_reset_button = 123;
inline void SafetyIoCommData::clear_safety_reset_button() {
  safety_reset_button_ = false;
}
inline bool SafetyIoCommData::safety_reset_button() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.safety_reset_button)
  return safety_reset_button_;
}
inline void SafetyIoCommData::set_safety_reset_button(bool value) {
  
  safety_reset_button_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.safety_reset_button)
}

// optional bool panels_unlocked = 124;
inline void SafetyIoCommData::clear_panels_unlocked() {
  panels_unlocked_ = false;
}
inline bool SafetyIoCommData::panels_unlocked() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.panels_unlocked)
  return panels_unlocked_;
}
inline void SafetyIoCommData::set_panels_unlocked(bool value) {
  
  panels_unlocked_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.panels_unlocked)
}

// optional bool entrance_estop_fault = 140;
inline void SafetyIoCommData::clear_entrance_estop_fault() {
  entrance_estop_fault_ = false;
}
inline bool SafetyIoCommData::entrance_estop_fault() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.entrance_estop_fault)
  return entrance_estop_fault_;
}
inline void SafetyIoCommData::set_entrance_estop_fault(bool value) {
  
  entrance_estop_fault_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.entrance_estop_fault)
}

// optional bool exit_estop_fault = 141;
inline void SafetyIoCommData::clear_exit_estop_fault() {
  exit_estop_fault_ = false;
}
inline bool SafetyIoCommData::exit_estop_fault() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.exit_estop_fault)
  return exit_estop_fault_;
}
inline void SafetyIoCommData::set_exit_estop_fault(bool value) {
  
  exit_estop_fault_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.exit_estop_fault)
}

// optional bool console_estop_fault = 142;
inline void SafetyIoCommData::clear_console_estop_fault() {
  console_estop_fault_ = false;
}
inline bool SafetyIoCommData::console_estop_fault() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.console_estop_fault)
  return console_estop_fault_;
}
inline void SafetyIoCommData::set_console_estop_fault(bool value) {
  
  console_estop_fault_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.console_estop_fault)
}

// optional bool bhs_estop_fault = 143;
inline void SafetyIoCommData::clear_bhs_estop_fault() {
  bhs_estop_fault_ = false;
}
inline bool SafetyIoCommData::bhs_estop_fault() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.bhs_estop_fault)
  return bhs_estop_fault_;
}
inline void SafetyIoCommData::set_bhs_estop_fault(bool value) {
  
  bhs_estop_fault_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.bhs_estop_fault)
}

// optional bool access_panel_left_magnetic_interlock_fault = 144;
inline void SafetyIoCommData::clear_access_panel_left_magnetic_interlock_fault() {
  access_panel_left_magnetic_interlock_fault_ = false;
}
inline bool SafetyIoCommData::access_panel_left_magnetic_interlock_fault() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.access_panel_left_magnetic_interlock_fault)
  return access_panel_left_magnetic_interlock_fault_;
}
inline void SafetyIoCommData::set_access_panel_left_magnetic_interlock_fault(bool value) {
  
  access_panel_left_magnetic_interlock_fault_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.access_panel_left_magnetic_interlock_fault)
}

// optional bool access_panel_right_magnetic_interlock_fault = 145;
inline void SafetyIoCommData::clear_access_panel_right_magnetic_interlock_fault() {
  access_panel_right_magnetic_interlock_fault_ = false;
}
inline bool SafetyIoCommData::access_panel_right_magnetic_interlock_fault() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.access_panel_right_magnetic_interlock_fault)
  return access_panel_right_magnetic_interlock_fault_;
}
inline void SafetyIoCommData::set_access_panel_right_magnetic_interlock_fault(bool value) {
  
  access_panel_right_magnetic_interlock_fault_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.access_panel_right_magnetic_interlock_fault)
}

// optional bool motion_contactors_status_fault = 146;
inline void SafetyIoCommData::clear_motion_contactors_status_fault() {
  motion_contactors_status_fault_ = false;
}
inline bool SafetyIoCommData::motion_contactors_status_fault() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.motion_contactors_status_fault)
  return motion_contactors_status_fault_;
}
inline void SafetyIoCommData::set_motion_contactors_status_fault(bool value) {
  
  motion_contactors_status_fault_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.motion_contactors_status_fault)
}

// optional bool powerlink_contactors_status_fault = 147;
inline void SafetyIoCommData::clear_powerlink_contactors_status_fault() {
  powerlink_contactors_status_fault_ = false;
}
inline bool SafetyIoCommData::powerlink_contactors_status_fault() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.powerlink_contactors_status_fault)
  return powerlink_contactors_status_fault_;
}
inline void SafetyIoCommData::set_powerlink_contactors_status_fault(bool value) {
  
  powerlink_contactors_status_fault_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.powerlink_contactors_status_fault)
}

// optional bool rotational_envelope_violation_sensor_fault = 148;
inline void SafetyIoCommData::clear_rotational_envelope_violation_sensor_fault() {
  rotational_envelope_violation_sensor_fault_ = false;
}
inline bool SafetyIoCommData::rotational_envelope_violation_sensor_fault() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.rotational_envelope_violation_sensor_fault)
  return rotational_envelope_violation_sensor_fault_;
}
inline void SafetyIoCommData::set_rotational_envelope_violation_sensor_fault(bool value) {
  
  rotational_envelope_violation_sensor_fault_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.rotational_envelope_violation_sensor_fault)
}

// optional bool standstill_monitor_fault = 149;
inline void SafetyIoCommData::clear_standstill_monitor_fault() {
  standstill_monitor_fault_ = false;
}
inline bool SafetyIoCommData::standstill_monitor_fault() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.standstill_monitor_fault)
  return standstill_monitor_fault_;
}
inline void SafetyIoCommData::set_standstill_monitor_fault(bool value) {
  
  standstill_monitor_fault_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.standstill_monitor_fault)
}

// optional bool overspeed_fault = 150;
inline void SafetyIoCommData::clear_overspeed_fault() {
  overspeed_fault_ = false;
}
inline bool SafetyIoCommData::overspeed_fault() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.overspeed_fault)
  return overspeed_fault_;
}
inline void SafetyIoCommData::set_overspeed_fault(bool value) {
  
  overspeed_fault_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.overspeed_fault)
}

// optional bool access_panels_locking_fault = 151;
inline void SafetyIoCommData::clear_access_panels_locking_fault() {
  access_panels_locking_fault_ = false;
}
inline bool SafetyIoCommData::access_panels_locking_fault() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.access_panels_locking_fault)
  return access_panels_locking_fault_;
}
inline void SafetyIoCommData::set_access_panels_locking_fault(bool value) {
  
  access_panels_locking_fault_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.access_panels_locking_fault)
}

// optional bool xray_motion_keyswitch_fault = 152;
inline void SafetyIoCommData::clear_xray_motion_keyswitch_fault() {
  xray_motion_keyswitch_fault_ = false;
}
inline bool SafetyIoCommData::xray_motion_keyswitch_fault() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.xray_motion_keyswitch_fault)
  return xray_motion_keyswitch_fault_;
}
inline void SafetyIoCommData::set_xray_motion_keyswitch_fault(bool value) {
  
  xray_motion_keyswitch_fault_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.xray_motion_keyswitch_fault)
}

// optional bool encoder_fault = 153;
inline void SafetyIoCommData::clear_encoder_fault() {
  encoder_fault_ = false;
}
inline bool SafetyIoCommData::encoder_fault() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.encoder_fault)
  return encoder_fault_;
}
inline void SafetyIoCommData::set_encoder_fault(bool value) {
  
  encoder_fault_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.encoder_fault)
}

// optional bool speed_monitor_reset_required = 160;
inline void SafetyIoCommData::clear_speed_monitor_reset_required() {
  speed_monitor_reset_required_ = false;
}
inline bool SafetyIoCommData::speed_monitor_reset_required() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.speed_monitor_reset_required)
  return speed_monitor_reset_required_;
}
inline void SafetyIoCommData::set_speed_monitor_reset_required(bool value) {
  
  speed_monitor_reset_required_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.speed_monitor_reset_required)
}

// optional bool standstill = 161;
inline void SafetyIoCommData::clear_standstill() {
  standstill_ = false;
}
inline bool SafetyIoCommData::standstill() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.standstill)
  return standstill_;
}
inline void SafetyIoCommData::set_standstill(bool value) {
  
  standstill_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.standstill)
}

// optional bool standstill_monitor_enabled = 162;
inline void SafetyIoCommData::clear_standstill_monitor_enabled() {
  standstill_monitor_enabled_ = false;
}
inline bool SafetyIoCommData::standstill_monitor_enabled() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.standstill_monitor_enabled)
  return standstill_monitor_enabled_;
}
inline void SafetyIoCommData::set_standstill_monitor_enabled(bool value) {
  
  standstill_monitor_enabled_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.standstill_monitor_enabled)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ancp00
}  // namespace analogic

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::analogic::ancp00::SafetyIoCommMsg_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::analogic::ancp00::SafetyIoCommMsg_CmdId>() {
  return ::analogic::ancp00::SafetyIoCommMsg_CmdId_descriptor();
}
template <> struct is_proto_enum< ::analogic::ancp00::SafetyIoCommMsg_XrayCmdBits> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::analogic::ancp00::SafetyIoCommMsg_XrayCmdBits>() {
  return ::analogic::ancp00::SafetyIoCommMsg_XrayCmdBits_descriptor();
}
template <> struct is_proto_enum< ::analogic::ancp00::SafetyIoCommData_REG_ADDRESS_0_BITS> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::analogic::ancp00::SafetyIoCommData_REG_ADDRESS_0_BITS>() {
  return ::analogic::ancp00::SafetyIoCommData_REG_ADDRESS_0_BITS_descriptor();
}
template <> struct is_proto_enum< ::analogic::ancp00::SafetyIoCommData_REG_ADDRESS_1_BITS> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::analogic::ancp00::SafetyIoCommData_REG_ADDRESS_1_BITS>() {
  return ::analogic::ancp00::SafetyIoCommData_REG_ADDRESS_1_BITS_descriptor();
}
template <> struct is_proto_enum< ::analogic::ancp00::SafetyIoCommData_REG_ADDRESS_2_BITS> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::analogic::ancp00::SafetyIoCommData_REG_ADDRESS_2_BITS>() {
  return ::analogic::ancp00::SafetyIoCommData_REG_ADDRESS_2_BITS_descriptor();
}
template <> struct is_proto_enum< ::analogic::ancp00::SafetyIoCommData_REG_ADDRESS_3_BITS> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::analogic::ancp00::SafetyIoCommData_REG_ADDRESS_3_BITS>() {
  return ::analogic::ancp00::SafetyIoCommData_REG_ADDRESS_3_BITS_descriptor();
}
template <> struct is_proto_enum< ::analogic::ancp00::SafetyIoCommData_REG_ADDRESS_4_BITS> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::analogic::ancp00::SafetyIoCommData_REG_ADDRESS_4_BITS>() {
  return ::analogic::ancp00::SafetyIoCommData_REG_ADDRESS_4_BITS_descriptor();
}
template <> struct is_proto_enum< ::analogic::ancp00::SafetyIoCommData_REG_ADDRESS_5_BITS> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::analogic::ancp00::SafetyIoCommData_REG_ADDRESS_5_BITS>() {
  return ::analogic::ancp00::SafetyIoCommData_REG_ADDRESS_5_BITS_descriptor();
}
template <> struct is_proto_enum< ::analogic::ancp00::SafetyIoCommData_REG_ADDRESS_6_BITS> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::analogic::ancp00::SafetyIoCommData_REG_ADDRESS_6_BITS>() {
  return ::analogic::ancp00::SafetyIoCommData_REG_ADDRESS_6_BITS_descriptor();
}
template <> struct is_proto_enum< ::analogic::ancp00::SafetyIoCommData_REG_ADDRESS_7_BITS> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::analogic::ancp00::SafetyIoCommData_REG_ADDRESS_7_BITS>() {
  return ::analogic::ancp00::SafetyIoCommData_REG_ADDRESS_7_BITS_descriptor();
}
template <> struct is_proto_enum< ::analogic::ancp00::SafetyIoCommData_REG_ADDRESS_255_BITS> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::analogic::ancp00::SafetyIoCommData_REG_ADDRESS_255_BITS>() {
  return ::analogic::ancp00::SafetyIoCommData_REG_ADDRESS_255_BITS_descriptor();
}
template <> struct is_proto_enum< ::analogic::ancp00::SafetyIoCommData_REG_ADDRESS_512_BITS> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::analogic::ancp00::SafetyIoCommData_REG_ADDRESS_512_BITS>() {
  return ::analogic::ancp00::SafetyIoCommData_REG_ADDRESS_512_BITS_descriptor();
}
template <> struct is_proto_enum< ::analogic::ancp00::SafetyIoCommData_REG_ADDRESS_513_BITS> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::analogic::ancp00::SafetyIoCommData_REG_ADDRESS_513_BITS>() {
  return ::analogic::ancp00::SafetyIoCommData_REG_ADDRESS_513_BITS_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_2fSafetyIoComm_2eproto__INCLUDED
