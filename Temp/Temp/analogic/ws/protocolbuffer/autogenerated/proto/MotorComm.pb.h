// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/MotorComm.proto

#ifndef PROTOBUF_proto_2fMotorComm_2eproto__INCLUDED
#define PROTOBUF_proto_2fMotorComm_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace analogic {
namespace ancp00 {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_proto_2fMotorComm_2eproto();
void protobuf_AssignDesc_proto_2fMotorComm_2eproto();
void protobuf_ShutdownFile_proto_2fMotorComm_2eproto();

class MotorCommMsg;

enum MotorCommMsg_MotorCommMsgId {
  MotorCommMsg_MotorCommMsgId_RESET = 0,
  MotorCommMsg_MotorCommMsgId_STOP = 1,
  MotorCommMsg_MotorCommMsgId_FORWARD = 2,
  MotorCommMsg_MotorCommMsgId_REVERSE = 3,
  MotorCommMsg_MotorCommMsgId_SETFREQ = 4,
  MotorCommMsg_MotorCommMsgId_ADJSPEED = 5,
  MotorCommMsg_MotorCommMsgId_FORWARD_2X = 6,
  MotorCommMsg_MotorCommMsgId_FORWARD_3X = 7,
  MotorCommMsg_MotorCommMsgId_MotorCommMsg_MotorCommMsgId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MotorCommMsg_MotorCommMsgId_MotorCommMsg_MotorCommMsgId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MotorCommMsg_MotorCommMsgId_IsValid(int value);
const MotorCommMsg_MotorCommMsgId MotorCommMsg_MotorCommMsgId_MotorCommMsgId_MIN = MotorCommMsg_MotorCommMsgId_RESET;
const MotorCommMsg_MotorCommMsgId MotorCommMsg_MotorCommMsgId_MotorCommMsgId_MAX = MotorCommMsg_MotorCommMsgId_FORWARD_3X;
const int MotorCommMsg_MotorCommMsgId_MotorCommMsgId_ARRAYSIZE = MotorCommMsg_MotorCommMsgId_MotorCommMsgId_MAX + 1;

const ::google::protobuf::EnumDescriptor* MotorCommMsg_MotorCommMsgId_descriptor();
inline const ::std::string& MotorCommMsg_MotorCommMsgId_Name(MotorCommMsg_MotorCommMsgId value) {
  return ::google::protobuf::internal::NameOfEnum(
    MotorCommMsg_MotorCommMsgId_descriptor(), value);
}
inline bool MotorCommMsg_MotorCommMsgId_Parse(
    const ::std::string& name, MotorCommMsg_MotorCommMsgId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MotorCommMsg_MotorCommMsgId>(
    MotorCommMsg_MotorCommMsgId_descriptor(), name, value);
}
// ===================================================================

class MotorCommMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:analogic.ancp00.MotorCommMsg) */ {
 public:
  MotorCommMsg();
  virtual ~MotorCommMsg();

  MotorCommMsg(const MotorCommMsg& from);

  inline MotorCommMsg& operator=(const MotorCommMsg& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MotorCommMsg& default_instance();

  void Swap(MotorCommMsg* other);

  // implements Message ----------------------------------------------

  inline MotorCommMsg* New() const { return New(NULL); }

  MotorCommMsg* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MotorCommMsg& from);
  void MergeFrom(const MotorCommMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MotorCommMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MotorCommMsg_MotorCommMsgId MotorCommMsgId;
  static const MotorCommMsgId RESET =
    MotorCommMsg_MotorCommMsgId_RESET;
  static const MotorCommMsgId STOP =
    MotorCommMsg_MotorCommMsgId_STOP;
  static const MotorCommMsgId FORWARD =
    MotorCommMsg_MotorCommMsgId_FORWARD;
  static const MotorCommMsgId REVERSE =
    MotorCommMsg_MotorCommMsgId_REVERSE;
  static const MotorCommMsgId SETFREQ =
    MotorCommMsg_MotorCommMsgId_SETFREQ;
  static const MotorCommMsgId ADJSPEED =
    MotorCommMsg_MotorCommMsgId_ADJSPEED;
  static const MotorCommMsgId FORWARD_2X =
    MotorCommMsg_MotorCommMsgId_FORWARD_2X;
  static const MotorCommMsgId FORWARD_3X =
    MotorCommMsg_MotorCommMsgId_FORWARD_3X;
  static inline bool MotorCommMsgId_IsValid(int value) {
    return MotorCommMsg_MotorCommMsgId_IsValid(value);
  }
  static const MotorCommMsgId MotorCommMsgId_MIN =
    MotorCommMsg_MotorCommMsgId_MotorCommMsgId_MIN;
  static const MotorCommMsgId MotorCommMsgId_MAX =
    MotorCommMsg_MotorCommMsgId_MotorCommMsgId_MAX;
  static const int MotorCommMsgId_ARRAYSIZE =
    MotorCommMsg_MotorCommMsgId_MotorCommMsgId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MotorCommMsgId_descriptor() {
    return MotorCommMsg_MotorCommMsgId_descriptor();
  }
  static inline const ::std::string& MotorCommMsgId_Name(MotorCommMsgId value) {
    return MotorCommMsg_MotorCommMsgId_Name(value);
  }
  static inline bool MotorCommMsgId_Parse(const ::std::string& name,
      MotorCommMsgId* value) {
    return MotorCommMsg_MotorCommMsgId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .analogic.ancp00.MotorCommMsg.MotorCommMsgId msg_id = 1;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 1;
  ::analogic::ancp00::MotorCommMsg_MotorCommMsgId msg_id() const;
  void set_msg_id(::analogic::ancp00::MotorCommMsg_MotorCommMsgId value);

  // optional int32 freq = 2;
  void clear_freq();
  static const int kFreqFieldNumber = 2;
  ::google::protobuf::int32 freq() const;
  void set_freq(::google::protobuf::int32 value);

  // optional float adjustment = 3;
  void clear_adjustment();
  static const int kAdjustmentFieldNumber = 3;
  float adjustment() const;
  void set_adjustment(float value);

  // @@protoc_insertion_point(class_scope:analogic.ancp00.MotorCommMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  int msg_id_;
  ::google::protobuf::int32 freq_;
  float adjustment_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_proto_2fMotorComm_2eproto();
  friend void protobuf_AssignDesc_proto_2fMotorComm_2eproto();
  friend void protobuf_ShutdownFile_proto_2fMotorComm_2eproto();

  void InitAsDefaultInstance();
  static MotorCommMsg* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// MotorCommMsg

// optional .analogic.ancp00.MotorCommMsg.MotorCommMsgId msg_id = 1;
inline void MotorCommMsg::clear_msg_id() {
  msg_id_ = 0;
}
inline ::analogic::ancp00::MotorCommMsg_MotorCommMsgId MotorCommMsg::msg_id() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.MotorCommMsg.msg_id)
  return static_cast< ::analogic::ancp00::MotorCommMsg_MotorCommMsgId >(msg_id_);
}
inline void MotorCommMsg::set_msg_id(::analogic::ancp00::MotorCommMsg_MotorCommMsgId value) {
  
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.MotorCommMsg.msg_id)
}

// optional int32 freq = 2;
inline void MotorCommMsg::clear_freq() {
  freq_ = 0;
}
inline ::google::protobuf::int32 MotorCommMsg::freq() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.MotorCommMsg.freq)
  return freq_;
}
inline void MotorCommMsg::set_freq(::google::protobuf::int32 value) {
  
  freq_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.MotorCommMsg.freq)
}

// optional float adjustment = 3;
inline void MotorCommMsg::clear_adjustment() {
  adjustment_ = 0;
}
inline float MotorCommMsg::adjustment() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.MotorCommMsg.adjustment)
  return adjustment_;
}
inline void MotorCommMsg::set_adjustment(float value) {
  
  adjustment_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.MotorCommMsg.adjustment)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ancp00
}  // namespace analogic

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::analogic::ancp00::MotorCommMsg_MotorCommMsgId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::analogic::ancp00::MotorCommMsg_MotorCommMsgId>() {
  return ::analogic::ancp00::MotorCommMsg_MotorCommMsgId_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_2fMotorComm_2eproto__INCLUDED
