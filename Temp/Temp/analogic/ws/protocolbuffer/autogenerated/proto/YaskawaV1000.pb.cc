// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/YaskawaV1000.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/YaskawaV1000.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace analogic {
namespace ancp00 {

namespace {

const ::google::protobuf::Descriptor* YaskawaV1000MonitorData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  YaskawaV1000MonitorData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* YaskawaV1000MonitorData_DRIVE_STATUS_1_BITS_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* YaskawaV1000MonitorData_DATA_LINK_STATUS_BITS_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* YaskawaV1000MonitorData_FAULT_CONTENTS_2_BITS_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* YaskawaV1000MonitorData_ALARM_CONTENTS_1_BITS_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* YaskawaV1000MonitorData_INPUT_TERMINAL_STATUS_BITS_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* YaskawaV1000MonitorData_OUTPUT_TERMINAL_STATUS_BITS_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* YaskawaV1000MonitorData_COMM_ERROR_LOG_BITS_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* YaskawaV1000MonitorData_DRIVE_STATUS_BITS_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* YaskawaV1000MonitorData_FAULT_CONTENTS_5_BITS_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* YaskawaV1000MonitorData_FAULT_CONTENTS_6_BITS_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* YaskawaV1000MonitorData_FAULT_CONTENTS_7_BITS_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* YaskawaV1000MonitorData_ALARM_CONTENTS_4_BITS_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* YaskawaV1000MonitorData_ALARM_CONTENTS_5_BITS_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_2fYaskawaV1000_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_proto_2fYaskawaV1000_2eproto() {
  protobuf_AddDesc_proto_2fYaskawaV1000_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto/YaskawaV1000.proto");
  GOOGLE_CHECK(file != NULL);
  YaskawaV1000MonitorData_descriptor_ = file->message_type(0);
  static const int YaskawaV1000MonitorData_offsets_[52] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaskawaV1000MonitorData, drive_status_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaskawaV1000MonitorData, fault_contents_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaskawaV1000MonitorData, data_link_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaskawaV1000MonitorData, freq_ref_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaskawaV1000MonitorData, output_freq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaskawaV1000MonitorData, output_voltage_ref_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaskawaV1000MonitorData, output_current_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaskawaV1000MonitorData, output_power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaskawaV1000MonitorData, torque_ref_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaskawaV1000MonitorData, fault_contents_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaskawaV1000MonitorData, alarm_contents_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaskawaV1000MonitorData, input_terminal_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaskawaV1000MonitorData, drive_status_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaskawaV1000MonitorData, output_terminal_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaskawaV1000MonitorData, frequency_reference_bias_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaskawaV1000MonitorData, dc_bus_voltage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaskawaV1000MonitorData, torque_monitor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaskawaV1000MonitorData, product_code_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaskawaV1000MonitorData, product_code_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaskawaV1000MonitorData, pid_feedback_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaskawaV1000MonitorData, pid_input_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaskawaV1000MonitorData, pid_output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaskawaV1000MonitorData, comm_error_log_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaskawaV1000MonitorData, output_freq_rpm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaskawaV1000MonitorData, output_freq_percent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaskawaV1000MonitorData, drive_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaskawaV1000MonitorData, alarm_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaskawaV1000MonitorData, cumulative_op_time_upper_digits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaskawaV1000MonitorData, cumulative_op_time_first_digit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaskawaV1000MonitorData, cumulative_fan_op_time_upper_digits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaskawaV1000MonitorData, cumulative_fan_op_time_first_digit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaskawaV1000MonitorData, drive_rated_current_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaskawaV1000MonitorData, motor_speed_revs_minute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaskawaV1000MonitorData, motor_speed_revs_percent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaskawaV1000MonitorData, option_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaskawaV1000MonitorData, ope_error_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaskawaV1000MonitorData, fault_contents_3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaskawaV1000MonitorData, fault_contents_4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaskawaV1000MonitorData, fault_contents_5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaskawaV1000MonitorData, fault_contents_6_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaskawaV1000MonitorData, fault_contents_7_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaskawaV1000MonitorData, alarm_contents_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaskawaV1000MonitorData, alarm_contents_3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaskawaV1000MonitorData, alarm_contents_4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaskawaV1000MonitorData, alarm_contents_5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaskawaV1000MonitorData, cpf_contents_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaskawaV1000MonitorData, cpf_contents_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaskawaV1000MonitorData, cpf_contents_3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaskawaV1000MonitorData, option_card_fault_contents_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaskawaV1000MonitorData, output_current_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaskawaV1000MonitorData, output_freq_hertz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaskawaV1000MonitorData, output_current_amps_),
  };
  YaskawaV1000MonitorData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      YaskawaV1000MonitorData_descriptor_,
      YaskawaV1000MonitorData::default_instance_,
      YaskawaV1000MonitorData_offsets_,
      -1,
      -1,
      -1,
      sizeof(YaskawaV1000MonitorData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaskawaV1000MonitorData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaskawaV1000MonitorData, _is_default_instance_));
  YaskawaV1000MonitorData_DRIVE_STATUS_1_BITS_descriptor_ = YaskawaV1000MonitorData_descriptor_->enum_type(0);
  YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS_descriptor_ = YaskawaV1000MonitorData_descriptor_->enum_type(1);
  YaskawaV1000MonitorData_DATA_LINK_STATUS_BITS_descriptor_ = YaskawaV1000MonitorData_descriptor_->enum_type(2);
  YaskawaV1000MonitorData_FAULT_CONTENTS_2_BITS_descriptor_ = YaskawaV1000MonitorData_descriptor_->enum_type(3);
  YaskawaV1000MonitorData_ALARM_CONTENTS_1_BITS_descriptor_ = YaskawaV1000MonitorData_descriptor_->enum_type(4);
  YaskawaV1000MonitorData_INPUT_TERMINAL_STATUS_BITS_descriptor_ = YaskawaV1000MonitorData_descriptor_->enum_type(5);
  YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS_descriptor_ = YaskawaV1000MonitorData_descriptor_->enum_type(6);
  YaskawaV1000MonitorData_OUTPUT_TERMINAL_STATUS_BITS_descriptor_ = YaskawaV1000MonitorData_descriptor_->enum_type(7);
  YaskawaV1000MonitorData_COMM_ERROR_LOG_BITS_descriptor_ = YaskawaV1000MonitorData_descriptor_->enum_type(8);
  YaskawaV1000MonitorData_DRIVE_STATUS_BITS_descriptor_ = YaskawaV1000MonitorData_descriptor_->enum_type(9);
  YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS_descriptor_ = YaskawaV1000MonitorData_descriptor_->enum_type(10);
  YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS_descriptor_ = YaskawaV1000MonitorData_descriptor_->enum_type(11);
  YaskawaV1000MonitorData_FAULT_CONTENTS_5_BITS_descriptor_ = YaskawaV1000MonitorData_descriptor_->enum_type(12);
  YaskawaV1000MonitorData_FAULT_CONTENTS_6_BITS_descriptor_ = YaskawaV1000MonitorData_descriptor_->enum_type(13);
  YaskawaV1000MonitorData_FAULT_CONTENTS_7_BITS_descriptor_ = YaskawaV1000MonitorData_descriptor_->enum_type(14);
  YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS_descriptor_ = YaskawaV1000MonitorData_descriptor_->enum_type(15);
  YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS_descriptor_ = YaskawaV1000MonitorData_descriptor_->enum_type(16);
  YaskawaV1000MonitorData_ALARM_CONTENTS_4_BITS_descriptor_ = YaskawaV1000MonitorData_descriptor_->enum_type(17);
  YaskawaV1000MonitorData_ALARM_CONTENTS_5_BITS_descriptor_ = YaskawaV1000MonitorData_descriptor_->enum_type(18);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_2fYaskawaV1000_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      YaskawaV1000MonitorData_descriptor_, &YaskawaV1000MonitorData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_2fYaskawaV1000_2eproto() {
  delete YaskawaV1000MonitorData::default_instance_;
  delete YaskawaV1000MonitorData_reflection_;
}

void protobuf_AddDesc_proto_2fYaskawaV1000_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_proto_2fYaskawaV1000_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030proto/YaskawaV1000.proto\022\017analogic.anc"
    "p00\"\277\?\n\027YaskawaV1000MonitorData\022\026\n\016drive"
    "_status_1\030\001 \001(\007\022\030\n\020fault_contents_1\030\002 \001("
    "\007\022\030\n\020data_link_status\030\003 \001(\007\022\020\n\010freq_ref\030"
    "\004 \001(\r\022\023\n\013output_freq\030\005 \001(\r\022\032\n\022output_vol"
    "tage_ref\030\006 \001(\002\022\026\n\016output_current\030\007 \001(\r\022\024"
    "\n\014output_power\030\010 \001(\r\022\022\n\ntorque_ref\030\t \001(\r"
    "\022\030\n\020fault_contents_2\030\n \001(\007\022\030\n\020alarm_cont"
    "ents_1\030\013 \001(\007\022\035\n\025input_terminal_status\030\014 "
    "\001(\007\022\026\n\016drive_status_2\030\r \001(\007\022\036\n\026output_te"
    "rminal_status\030\016 \001(\007\022 \n\030frequency_referen"
    "ce_bias\030\017 \001(\002\022\026\n\016dc_bus_voltage\030\020 \001(\r\022\026\n"
    "\016torque_monitor\030\021 \001(\r\022\026\n\016product_code_1\030"
    "\022 \001(\r\022\026\n\016product_code_2\030\023 \001(\r\022\024\n\014pid_fee"
    "dback\030\024 \001(\r\022\021\n\tpid_input\030\025 \001(\r\022\022\n\npid_ou"
    "tput\030\026 \001(\r\022\026\n\016comm_error_log\030\027 \001(\007\022\027\n\017ou"
    "tput_freq_rpm\030\030 \001(\r\022\033\n\023output_freq_perce"
    "nt\030\031 \001(\002\022\024\n\014drive_status\030\032 \001(\007\022\022\n\nalarm_"
    "code\030\033 \001(\007\022\'\n\037cumulative_op_time_upper_d"
    "igits\030\034 \001(\r\022&\n\036cumulative_op_time_first_"
    "digit\030\035 \001(\r\022+\n#cumulative_fan_op_time_up"
    "per_digits\030\036 \001(\r\022*\n\"cumulative_fan_op_ti"
    "me_first_digit\030\037 \001(\r\022\033\n\023drive_rated_curr"
    "ent\030  \001(\r\022\037\n\027motor_speed_revs_minute\030! \001"
    "(\r\022 \n\030motor_speed_revs_percent\030\" \001(\r\022\023\n\013"
    "option_code\030# \001(\r\022\030\n\020ope_error_number\030$ "
    "\001(\r\022\030\n\020fault_contents_3\030% \001(\007\022\030\n\020fault_c"
    "ontents_4\030& \001(\007\022\030\n\020fault_contents_5\030\' \001("
    "\007\022\030\n\020fault_contents_6\030( \001(\007\022\030\n\020fault_con"
    "tents_7\030) \001(\007\022\030\n\020alarm_contents_2\030* \001(\007\022"
    "\030\n\020alarm_contents_3\030+ \001(\007\022\030\n\020alarm_conte"
    "nts_4\030, \001(\007\022\030\n\020alarm_contents_5\030- \001(\007\022\026\n"
    "\016cpf_contents_1\030. \001(\007\022\026\n\016cpf_contents_2\030"
    "/ \001(\007\022\026\n\016cpf_contents_3\0300 \001(\007\022\"\n\032option_"
    "card_fault_contents\0301 \001(\007\022\030\n\020output_curr"
    "ent_2\0302 \001(\r\022\031\n\021output_freq_hertz\0303 \001(\002\022\033"
    "\n\023output_current_amps\0304 \001(\002\"\356\002\n\023DRIVE_ST"
    "ATUS_1_BITS\022\016\n\nNOT_USED_1\020\000\022\027\n\023DURING_RU"
    "N_STATUS_1\020\001\022\033\n\027DURING_REVERSE_STATUS_1\020"
    "\002\022\030\n\024DRIVE_READY_STATUS_1\020\004\022\022\n\016FAULT_STA"
    "TUS_1\020\010\022\037\n\033DATA_SETTING_ERROR_STATUS_1\020\020"
    "\022&\n\"MULTI_FUNC_CONTACT_OUTPUT_STATUS_1\020 "
    "\022-\n)MULTI_FUNC_PHOTOCOUPLER_OUTPUT_1_STA"
    "TUS_1\020@\022.\n)MULTI_FUNC_PHOTOCOUPLER_OUTPU"
    "T_2_STATUS_1\020\200\001\022\034\n\026COM_REF_ENABLED_STATU"
    "S\020\200\200\001\022\035\n\027COM_CTRL_ENABLED_STATUS\020\200\200\002\"\332\003\n"
    "\025FAULT_CONTENTS_1_BITS\022\016\n\nNOT_USED_2\020\000\022\034"
    "\n\030OC_GF_IGBT_SC_GF_FAULT_1\020\001\022\027\n\023OVERVOLT"
    "AGE_FAULT_1\020\002\022\032\n\026DRIVE_OVERLOAD_FAULT_1\020"
    "\004\022\026\n\022OVERHEAT_1_FAULT_1\020\010\022\037\n\033BRAKING_FAU"
    "LT_OR_OVERHEAT_1\020\020\022\035\n\031PID_FEEDBACK_LOSS_"
    "FAULT_1\020@\022\025\n\020EXTERNAL_FAULT_1\020\200\001\022\031\n\024CPF_"
    "HARDWARE_FAULT_1\020\200\002\022\033\n\026MOTER_OVERLOAD_FA"
    "ULT_1\020\200\004\022\034\n\027PG_DISCONNECTED_FAULT_1\020\200\010\022\'"
    "\n\"MAIN_CIRCUIT_UNDER_VOLTAGE_FAULT_1\020\200\020\022"
    "\031\n\024UNDERVOLTAGE_FAULT_1\020\200 \022\033\n\026OUT_PHASE_"
    "LOSS_FAULT_1\020\200@\022\030\n\022COMM_ERROR_FAULT_1\020\200\200"
    "\001\022\036\n\030OPERATOR_CONNECT_FAULT_1\020\200\200\002\"\212\001\n\025DA"
    "TA_LINK_STATUS_BITS\022\016\n\nNOT_USED_3\020\000\022\020\n\014W"
    "RITING_DATA\020\001\022\036\n\032UPPER_OR_LOWER_LIMIT_ER"
    "ROR\020\010\022\031\n\025DATA_CONFORMITY_ERROR\020\020\022\024\n\020WRIT"
    "ING_TO_EPROM\020 \"\350\001\n\025FAULT_CONTENTS_2_BITS"
    "\022\016\n\nNOT_USED_4\020\000\022(\n$IGBT_SHORT_CIRCUIT_O"
    "R_GROUND_FAULT_2\020\001\022\022\n\016GROUND_FAULT_2\020\002\022\034"
    "\n\030INPUT_PHASE_LOSS_FAULT_2\020\004\022\035\n\031OUTPUT_P"
    "HASE_LOSS_FAULT_2\020\010\022(\n$BRAKING_RESISTOR_"
    "OR_OVERHEAT_FAULT_2\020\020\022\032\n\026MOTOR_OVERHEAT_"
    "FAULT_2\020@\"\253\003\n\025ALARM_CONTENTS_1_BITS\022\016\n\nN"
    "OT_USED_5\020\000\022#\n\037RUN_COMMAND_INPUT_ERROR_A"
    "LARM_1\020\004\022\033\n\027DRIVE_BASEBLOCK_ALARM_1\020\010\022\"\n"
    "\036OVERTORQUE_DETECTION_1_ALARM_1\020\020\022\035\n\031HEA"
    "TSINK_OVERHEAT_ALARM_1\020 \022\035\n\031OVERVOLTAGE_"
    "ALARM_ALARM_1\020@\022\037\n\032UNDERVOLTAGE_ALARM_AL"
    "ARM_1\020\200\001\022\033\n\026BUS_COMM_ERROR_ALARM_1\020\200\004\022\036\n"
    "\031OPTION_COMM_ERROR_ALARM_1\020\200\010\022\"\n\035UNDERTO"
    "RQUE_DETECTION_ALARM_1\020\200\020\022\033\n\026MOTOR_OVERH"
    "EAT_ALARM_1\020\200 \022\036\n\031PID_FEEDBACK_LOSS_ALAR"
    "M_1\020\200@\022\037\n\031SERIAL_COMM_ERROR_ALARM_1\020\200\200\001\""
    "\324\001\n\032INPUT_TERMINAL_STATUS_BITS\022\016\n\nNOT_US"
    "ED_6\020\000\022\026\n\022TERMINAL_S1_CLOSED\020\001\022\026\n\022TERMIN"
    "AL_S2_CLOSED\020\002\022\026\n\022TERMINAL_S3_CLOSED\020\004\022\026"
    "\n\022TERMINAL_S4_CLOSED\020\010\022\026\n\022TERMINAL_S5_CL"
    "OSED\020\020\022\026\n\022TERMINAL_S6_CLOSED\020 \022\026\n\022TERMIN"
    "AL_S7_CLOSED\020@\"\211\004\n\023DRIVE_STATUS_2_BITS\022\016"
    "\n\nNOT_USED_7\020\000\022\027\n\023DURING_RUN_STATUS_2\020\001\022"
    "\027\n\023ZERO_SPEED_STATUS_2\020\002\022\030\n\024SPEED_AGREE_"
    "STATUS_2\020\004\022\035\n\031USER_SPEED_AGREE_STATUS_2\020"
    "\010\022\032\n\026FREQ_DETECT_1_STATUS_2\020\020\022\032\n\026FREQ_DE"
    "TECT_2_STATUS_2\020 \022\030\n\024DRIVE_READY_STATUS_"
    "2\020@\022!\n\034DURING_UNDERVOLTAGE_STATUS_2\020\200\001\022\036"
    "\n\031DURING_BASEBLOCK_STATUS_2\020\200\002\022\"\n\035FREQ_R"
    "EF_FROM_KEYPAD_STATUS_2\020\200\004\022%\n RUN_COMMAN"
    "D_FROM_KEYPAD_STATUS_2\020\200\010\022#\n\036UNDER_OVER_"
    "TORQUE_1_2_STATUS_2\020\200\020\022\033\n\026FREQ_REF_LOSS_"
    "STATUS_2\020\200 \022\"\n\035DURING_FAULT_RESTART_STAT"
    "US_2\020\200@\022\024\n\016FAULT_STATUS_2\020\200\200\001\022\033\n\025COMM_TI"
    "MEOUT_STATUS_2\020\200\200\002\"\230\001\n\033OUTPUT_TERMINAL_S"
    "TATUS_BITS\022\016\n\nNOT_USED_8\020\000\022\035\n\031MULTI_FUNC"
    "_CONTACT_OUTPUT\020\001\022$\n MULTI_FUNC_PHOTOCOU"
    "PLER_OUTPUT_1\020\002\022$\n MULTI_FUNC_PHOTOCOUPL"
    "ER_OUTPUT_2\020\004\"\221\001\n\023COMM_ERROR_LOG_BITS\022\016\n"
    "\nNOT_USED_9\020\000\022\r\n\tCRC_ERROR\020\001\022\025\n\021DATA_LEN"
    "GTH_ERROR\020\002\022\020\n\014PARITY_ERROR\020\010\022\021\n\rOVERRUN"
    "_ERROR\020\020\022\022\n\016FRAMEING_ERROR\020 \022\013\n\007TIMEOUT\020"
    "@\"\234\003\n\021DRIVE_STATUS_BITS\022\017\n\013NOT_USED_10\020\000"
    "\022\025\n\021DURING_RUN_STATUS\020\001\022\034\n\030DURING_ZERO_S"
    "PEED_STATUS\020\002\022\035\n\031DURING_REVERSE_RUN_STAT"
    "US\020\004\022\035\n\031DURING_FAULT_RESET_STATUS\020\010\022\035\n\031D"
    "URING_SPEED_AGREE_STATUS\020\020\022\026\n\022DRIVE_READ"
    "Y_STATUS\020 \022\020\n\014ALARM_STATUS\020@\022\021\n\014FAULT_ST"
    "ATUS\020\200\001\022\"\n\035DURING_OPERATION_ERROR_STATUS"
    "\020\200\002\022\'\n\"DURING_MOMENTARY_POWER_LOSS_STATU"
    "S\020\200\004\022\034\n\027MOTOR_2_SELECTED_STATUS\020\200\010\022\034\n\026CO"
    "M_REF_NET_REF_STATUS\020\200\200\001\022\036\n\030COM_CTRL_NET"
    "_CTRL_STATUS\020\200\200\002\"\236\004\n\025FAULT_CONTENTS_3_BI"
    "TS\022\017\n\013NOT_USED_11\020\000\022\030\n\024UNDERVOLTAGE_FAUL"
    "T_3\020\002\022-\n)CONTROL_POWER_SUPPLY_UNDERVOLTA"
    "GE_FAULT_3\020\004\022\037\n\033SOFT_CHARGE_CIRCUIT_FAUL"
    "T_3\020\010\022(\n$IGBT_SHORT_CIRCUIT_OR_GROUND_FA"
    "ULT_3\020\020\022\022\n\016GROUND_FAULT_3\020 \022\027\n\023OVERCURRE"
    "NT_FAULT_3\020@\022\030\n\023OVERVOLTAGE_FAULT_3\020\200\001\022 "
    "\n\033HEATSINK_OVERHEAT_1_FAULT_3\020\200\002\022 \n\033HEAT"
    "SINK_OVERHEAT_2_FAULT_3\020\200\004\022\033\n\026MOTOR_OVER"
    "LOAD_FAULT_3\020\200\010\022\033\n\026DRIVE_OVERLOAD_FAULT_"
    "3\020\200\020\022#\n\036OVERTORQUE_DETECTION_1_FAULT_3\020\200"
    " \022#\n\036OVERTORQUE_DETECTION_2_FAULT_3\020\200@\022("
    "\n\"DYNAMIC_BRAKING_TRANSISTOR_FAULT_3\020\200\200\001"
    "\022\'\n!BRAKING_RESISTOR_OVERHEAT_FAULT_3\020\200\200"
    "\002\"\356\003\n\025FAULT_CONTENTS_4_BITS\022\017\n\013NOT_USED_"
    "12\020\000\022\035\n\031EXTERNAL_INPUT_S3_FAULT_4\020\001\022\035\n\031E"
    "XTERNAL_INPUT_S4_FAULT_4\020\002\022\035\n\031EXTERNAL_I"
    "NPUT_S5_FAULT_4\020\004\022\035\n\031EXTERNAL_INPUT_S6_F"
    "AULT_4\020\010\022\035\n\031EXTERNAL_INPUT_S7_FAULT_4\020\020\022"
    "\026\n\021OVERSPEED_FAULT_4\020\200\001\022&\n!EXCESSIVE_SPE"
    "ED_DEVIATION_FAULT_4\020\200\002\022\034\n\027PG_DISCONNECT"
    "ED_FAULT_4\020\200\004\022\035\n\030INPUT_PHASE_LOSS_FAULT_"
    "4\020\200\010\022\036\n\031OUTPUT_PHASE_LOSS_FAULT_4\020\200\020\022\037\n\032"
    "MOTOR_OVERHEAT_PTC_FAULT_4\020\200 \022(\n#DIGITAL"
    "_OPERATON_CONNECTION_FAULT_4\020\200@\022 \n\032EEPRO"
    "M_WRITE_ERROR_FAULT_4\020\200\200\001\022\037\n\031MOTOR_OVERH"
    "AT_PTC_FAULT_4\020\200\200\002\"\323\002\n\025FAULT_CONTENTS_5_"
    "BITS\022\017\n\013NOT_USED_13\020\000\022#\n\037BUS_COMMUNICATI"
    "ON_ERROR_FAULT_5\020\001\022%\n!OPTION_COMMUNICATI"
    "O_ERROR_FAULT_5\020\002\022\023\n\017CONTROL_FAULT_5\020\020\022\033"
    "\n\027OPTION_EXTERNAL_FAULT_5\020@\022\036\n\031PID_FEEDB"
    "ACK_LOSS_FAULT_5\020\200\001\022$\n\037UNDERTORQUE_DETEC"
    "TION_1_FAULT_5\020\200\002\022$\n\037UNDERTORQUE_DETECTI"
    "ON_2_FAULT_5\020\200\004\022\'\n\"HIGH_SLIP_BRAKING_OVE"
    "RLOAD_FAULT_5\020\200\010\022\026\n\020HARDWARE_FAULT_5\020\200\200\002"
    "\"\323\001\n\025FAULT_CONTENTS_6_BITS\022\017\n\013NOT_USED_1"
    "4\020\000\022$\n OUTPUT_CURRENT_IMBALANCE_FAULT_6\020"
    " \022\025\n\021PULLOUT_DETECTION\020@\022\034\n\027PG_DISCONNEC"
    "TED_FAULT_6\020\200\001\022!\n\034WATCHDOG_TIMER_ERROR_F"
    "AULT_6\020\200\002\022+\n&TOO_MANY_SPEED_SEARCH_RESTA"
    "RTS_FAULT_6\020\200\010\"\206\002\n\025FAULT_CONTENTS_7_BITS"
    "\022\017\n\013NOT_USED_15\020\000\022\035\n\031PID_FEEDBACK_LOSS_F"
    "AULT_7\020\001\022\035\n\031EXTERNAL_INPUT_S1_FAULT_7\020\002\022"
    "\035\n\031EXTERNAL_INPUT_S2_FAULT_7\020\004\022\"\n\036MECHAN"
    "ICAL_WEAKENING_1_FAULT_7\020\010\022\"\n\036MECHANICAL"
    "_WEAKENING_2_FAULT_7\020\020\022\032\n\026CURRENT_OFFSET"
    "_FAULT_7\020 \022\033\n\026DRIVE_WORKS_EZ_FAULT_7\020\200\002\""
    "\307\003\n\025ALARM_CONTENTS_2_BITS\022\017\n\013NOT_USED_16"
    "\020\000\022\030\n\024UNDERVOLTAGE_ALARM_2\020\001\022\027\n\023OVERVOLT"
    "AGE_ALARM_2\020\002\022\035\n\031HEATSINK_OVERHEAT_ALARM"
    "_2\020\004\022\032\n\026DRIVE_OVERHEAT_ALARM_2\020\010\022\030\n\024OVER"
    "TORQUE_1_ALARM_2\020\020\022\030\n\024OVERTORQUE_2_ALARM"
    "_2\020 \022$\n RUN_COMMANDS_INPUT_ERROR_ALARM_2"
    "\020@\022\034\n\027DRIVE_BASEBLOCK_ALARM_2\020\200\001\022\036\n\031EXTE"
    "RNAL_FAULT_S3_ALARM_2\020\200\002\022\036\n\031EXTERNAL_FAU"
    "LT_S4_ALARM_2\020\200\004\022\036\n\031EXTERNAL_FAULT_S5_AL"
    "ARM_2\020\200\010\022\036\n\031EXTERNAL_FAULT_S6_ALARM_2\020\200\020"
    "\022\036\n\031EXTERNAL_FAULT_S7_ALARM_2\020\200 \022\027\n\021OVER"
    "SPEED_ALARM_2\020\200\200\002\"\306\004\n\025ALARM_CONTENTS_3_B"
    "ITS\022\017\n\013NOT_USED_17\020\000\022%\n!EXCESSIVE_SPEED_"
    "DEVIATION_ALARM_3\020\001\022\033\n\027PG_DISCONNECTED_A"
    "LARM_3\020\002\022-\n)DIGITAL_OPERATOR_CONNECTION_"
    "FAULT_ALARM_3\020\004\022#\n\037BUS_COMMUNICATION_ERR"
    "OR_ALARM_3\020\010\022&\n\"OPTION_COMMUNICATION_ERR"
    "OR_ALARM_3\020\020\022$\n SERIAL_TRANSMISSION_ERRO"
    "_ALARM_3\020 \022\032\n\026MOTOR_OVERLOAD_ALARM_3\020@\022\033"
    "\n\026DRIVE_OVERLOAD_ALARM_3\020\200\001\022\'\n\"OPTION_CA"
    "RD_EXTERNAL_FAULT_ALARM_3\020\200\004\0224\n/MOTOR_2_"
    "SWITHC_COMMAND_INPUT_DURING_RUN_ALARM_3\020"
    "\200\010\0224\n/SERIAL_COMMUNICATION_TRANSMISSION_"
    "ERROR_ALARM_3\020\200 \022$\n\037UNDERTORQUE_DETECTIO"
    "N_1_ALARM_3\020\200@\022%\n\037UNDERTORQUE_DETECTION_"
    "2_ALARM_3\020\200\200\001\022\033\n\025BUS_TEST_MODE_ALARM_3\020\200"
    "\200\002\"\244\001\n\025ALARM_CONTENTS_4_BITS\022\017\n\013NOT_USED"
    "_18\020\000\022\034\n\030MOTOR_OVERHEAT_1_ALARM_4\020\002\022\036\n\032P"
    "ID_FEEDACK_LOSS_L_ALARM_4\020@\022\037\n\032PID_FEEDA"
    "CK_LOSS_H_ALARM_4\020\200\001\022\033\n\026DRIVE_DISABLED_A"
    "LARM_4\020\200\004\"\211\004\n\025ALARM_CONTENTS_5_BITS\022\017\n\013N"
    "OT_USED_19\020\000\022-\n)MECHATROLINK_WATCHDOG_TI"
    "MER_ERROR_ALARM_5\020\001\0221\n-MECHATROLINK_COMM"
    "_CYCLE_SETTING_ERROR_ALARM_5\020\004\022\030\n\024HIGH_C"
    "URRENT_ALARM_5\020\010\022(\n$COOLING_FAN_MAINTENA"
    "NCE_TIME_ALARM_5\020\020\0224\n0SOFT_CHAGE_BYPASS_"
    "RELAY_MAINTENANCE_TIME_ALARM_5\020 \022\037\n\032SI_S"
    "V_EERPOM_ERROR_ALARM_5\020\200\001\022\036\n\031EXTERNAL_FA"
    "ULT_S1_ALARM_5\020\200\002\022\036\n\031EXTERNAL_FAULT_S2_A"
    "LARM_5\020\200\004\022!\n\034SAFE_DISABLE_INPUT_1_ALARM_"
    "5\020\200\010\022!\n\034SAFE_DISABLE_INPUT_2_ALARM_5\020\200\020\022"
    "-\n(MECHANICAL_WEAKENING_DETECTION_1_ALAR"
    "M_5\020\200 \022-\n(MECHANICAL_WEAKENING_DETECTION"
    "_2_ALARM_5\020\200@b\006proto3", 8181);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/YaskawaV1000.proto", &protobuf_RegisterTypes);
  YaskawaV1000MonitorData::default_instance_ = new YaskawaV1000MonitorData();
  YaskawaV1000MonitorData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2fYaskawaV1000_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2fYaskawaV1000_2eproto {
  StaticDescriptorInitializer_proto_2fYaskawaV1000_2eproto() {
    protobuf_AddDesc_proto_2fYaskawaV1000_2eproto();
  }
} static_descriptor_initializer_proto_2fYaskawaV1000_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* YaskawaV1000MonitorData_DRIVE_STATUS_1_BITS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return YaskawaV1000MonitorData_DRIVE_STATUS_1_BITS_descriptor_;
}
bool YaskawaV1000MonitorData_DRIVE_STATUS_1_BITS_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 16384:
    case 32768:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const YaskawaV1000MonitorData_DRIVE_STATUS_1_BITS YaskawaV1000MonitorData::NOT_USED_1;
const YaskawaV1000MonitorData_DRIVE_STATUS_1_BITS YaskawaV1000MonitorData::DURING_RUN_STATUS_1;
const YaskawaV1000MonitorData_DRIVE_STATUS_1_BITS YaskawaV1000MonitorData::DURING_REVERSE_STATUS_1;
const YaskawaV1000MonitorData_DRIVE_STATUS_1_BITS YaskawaV1000MonitorData::DRIVE_READY_STATUS_1;
const YaskawaV1000MonitorData_DRIVE_STATUS_1_BITS YaskawaV1000MonitorData::FAULT_STATUS_1;
const YaskawaV1000MonitorData_DRIVE_STATUS_1_BITS YaskawaV1000MonitorData::DATA_SETTING_ERROR_STATUS_1;
const YaskawaV1000MonitorData_DRIVE_STATUS_1_BITS YaskawaV1000MonitorData::MULTI_FUNC_CONTACT_OUTPUT_STATUS_1;
const YaskawaV1000MonitorData_DRIVE_STATUS_1_BITS YaskawaV1000MonitorData::MULTI_FUNC_PHOTOCOUPLER_OUTPUT_1_STATUS_1;
const YaskawaV1000MonitorData_DRIVE_STATUS_1_BITS YaskawaV1000MonitorData::MULTI_FUNC_PHOTOCOUPLER_OUTPUT_2_STATUS_1;
const YaskawaV1000MonitorData_DRIVE_STATUS_1_BITS YaskawaV1000MonitorData::COM_REF_ENABLED_STATUS;
const YaskawaV1000MonitorData_DRIVE_STATUS_1_BITS YaskawaV1000MonitorData::COM_CTRL_ENABLED_STATUS;
const YaskawaV1000MonitorData_DRIVE_STATUS_1_BITS YaskawaV1000MonitorData::DRIVE_STATUS_1_BITS_MIN;
const YaskawaV1000MonitorData_DRIVE_STATUS_1_BITS YaskawaV1000MonitorData::DRIVE_STATUS_1_BITS_MAX;
const int YaskawaV1000MonitorData::DRIVE_STATUS_1_BITS_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS_descriptor_;
}
bool YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 8192:
    case 16384:
    case 32768:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS YaskawaV1000MonitorData::NOT_USED_2;
const YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS YaskawaV1000MonitorData::OC_GF_IGBT_SC_GF_FAULT_1;
const YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS YaskawaV1000MonitorData::OVERVOLTAGE_FAULT_1;
const YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS YaskawaV1000MonitorData::DRIVE_OVERLOAD_FAULT_1;
const YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS YaskawaV1000MonitorData::OVERHEAT_1_FAULT_1;
const YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS YaskawaV1000MonitorData::BRAKING_FAULT_OR_OVERHEAT_1;
const YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS YaskawaV1000MonitorData::PID_FEEDBACK_LOSS_FAULT_1;
const YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS YaskawaV1000MonitorData::EXTERNAL_FAULT_1;
const YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS YaskawaV1000MonitorData::CPF_HARDWARE_FAULT_1;
const YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS YaskawaV1000MonitorData::MOTER_OVERLOAD_FAULT_1;
const YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS YaskawaV1000MonitorData::PG_DISCONNECTED_FAULT_1;
const YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS YaskawaV1000MonitorData::MAIN_CIRCUIT_UNDER_VOLTAGE_FAULT_1;
const YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS YaskawaV1000MonitorData::UNDERVOLTAGE_FAULT_1;
const YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS YaskawaV1000MonitorData::OUT_PHASE_LOSS_FAULT_1;
const YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS YaskawaV1000MonitorData::COMM_ERROR_FAULT_1;
const YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS YaskawaV1000MonitorData::OPERATOR_CONNECT_FAULT_1;
const YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS YaskawaV1000MonitorData::FAULT_CONTENTS_1_BITS_MIN;
const YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS YaskawaV1000MonitorData::FAULT_CONTENTS_1_BITS_MAX;
const int YaskawaV1000MonitorData::FAULT_CONTENTS_1_BITS_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* YaskawaV1000MonitorData_DATA_LINK_STATUS_BITS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return YaskawaV1000MonitorData_DATA_LINK_STATUS_BITS_descriptor_;
}
bool YaskawaV1000MonitorData_DATA_LINK_STATUS_BITS_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 8:
    case 16:
    case 32:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const YaskawaV1000MonitorData_DATA_LINK_STATUS_BITS YaskawaV1000MonitorData::NOT_USED_3;
const YaskawaV1000MonitorData_DATA_LINK_STATUS_BITS YaskawaV1000MonitorData::WRITING_DATA;
const YaskawaV1000MonitorData_DATA_LINK_STATUS_BITS YaskawaV1000MonitorData::UPPER_OR_LOWER_LIMIT_ERROR;
const YaskawaV1000MonitorData_DATA_LINK_STATUS_BITS YaskawaV1000MonitorData::DATA_CONFORMITY_ERROR;
const YaskawaV1000MonitorData_DATA_LINK_STATUS_BITS YaskawaV1000MonitorData::WRITING_TO_EPROM;
const YaskawaV1000MonitorData_DATA_LINK_STATUS_BITS YaskawaV1000MonitorData::DATA_LINK_STATUS_BITS_MIN;
const YaskawaV1000MonitorData_DATA_LINK_STATUS_BITS YaskawaV1000MonitorData::DATA_LINK_STATUS_BITS_MAX;
const int YaskawaV1000MonitorData::DATA_LINK_STATUS_BITS_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* YaskawaV1000MonitorData_FAULT_CONTENTS_2_BITS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return YaskawaV1000MonitorData_FAULT_CONTENTS_2_BITS_descriptor_;
}
bool YaskawaV1000MonitorData_FAULT_CONTENTS_2_BITS_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 64:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const YaskawaV1000MonitorData_FAULT_CONTENTS_2_BITS YaskawaV1000MonitorData::NOT_USED_4;
const YaskawaV1000MonitorData_FAULT_CONTENTS_2_BITS YaskawaV1000MonitorData::IGBT_SHORT_CIRCUIT_OR_GROUND_FAULT_2;
const YaskawaV1000MonitorData_FAULT_CONTENTS_2_BITS YaskawaV1000MonitorData::GROUND_FAULT_2;
const YaskawaV1000MonitorData_FAULT_CONTENTS_2_BITS YaskawaV1000MonitorData::INPUT_PHASE_LOSS_FAULT_2;
const YaskawaV1000MonitorData_FAULT_CONTENTS_2_BITS YaskawaV1000MonitorData::OUTPUT_PHASE_LOSS_FAULT_2;
const YaskawaV1000MonitorData_FAULT_CONTENTS_2_BITS YaskawaV1000MonitorData::BRAKING_RESISTOR_OR_OVERHEAT_FAULT_2;
const YaskawaV1000MonitorData_FAULT_CONTENTS_2_BITS YaskawaV1000MonitorData::MOTOR_OVERHEAT_FAULT_2;
const YaskawaV1000MonitorData_FAULT_CONTENTS_2_BITS YaskawaV1000MonitorData::FAULT_CONTENTS_2_BITS_MIN;
const YaskawaV1000MonitorData_FAULT_CONTENTS_2_BITS YaskawaV1000MonitorData::FAULT_CONTENTS_2_BITS_MAX;
const int YaskawaV1000MonitorData::FAULT_CONTENTS_2_BITS_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* YaskawaV1000MonitorData_ALARM_CONTENTS_1_BITS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return YaskawaV1000MonitorData_ALARM_CONTENTS_1_BITS_descriptor_;
}
bool YaskawaV1000MonitorData_ALARM_CONTENTS_1_BITS_IsValid(int value) {
  switch(value) {
    case 0:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 8192:
    case 16384:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const YaskawaV1000MonitorData_ALARM_CONTENTS_1_BITS YaskawaV1000MonitorData::NOT_USED_5;
const YaskawaV1000MonitorData_ALARM_CONTENTS_1_BITS YaskawaV1000MonitorData::RUN_COMMAND_INPUT_ERROR_ALARM_1;
const YaskawaV1000MonitorData_ALARM_CONTENTS_1_BITS YaskawaV1000MonitorData::DRIVE_BASEBLOCK_ALARM_1;
const YaskawaV1000MonitorData_ALARM_CONTENTS_1_BITS YaskawaV1000MonitorData::OVERTORQUE_DETECTION_1_ALARM_1;
const YaskawaV1000MonitorData_ALARM_CONTENTS_1_BITS YaskawaV1000MonitorData::HEATSINK_OVERHEAT_ALARM_1;
const YaskawaV1000MonitorData_ALARM_CONTENTS_1_BITS YaskawaV1000MonitorData::OVERVOLTAGE_ALARM_ALARM_1;
const YaskawaV1000MonitorData_ALARM_CONTENTS_1_BITS YaskawaV1000MonitorData::UNDERVOLTAGE_ALARM_ALARM_1;
const YaskawaV1000MonitorData_ALARM_CONTENTS_1_BITS YaskawaV1000MonitorData::BUS_COMM_ERROR_ALARM_1;
const YaskawaV1000MonitorData_ALARM_CONTENTS_1_BITS YaskawaV1000MonitorData::OPTION_COMM_ERROR_ALARM_1;
const YaskawaV1000MonitorData_ALARM_CONTENTS_1_BITS YaskawaV1000MonitorData::UNDERTORQUE_DETECTION_ALARM_1;
const YaskawaV1000MonitorData_ALARM_CONTENTS_1_BITS YaskawaV1000MonitorData::MOTOR_OVERHEAT_ALARM_1;
const YaskawaV1000MonitorData_ALARM_CONTENTS_1_BITS YaskawaV1000MonitorData::PID_FEEDBACK_LOSS_ALARM_1;
const YaskawaV1000MonitorData_ALARM_CONTENTS_1_BITS YaskawaV1000MonitorData::SERIAL_COMM_ERROR_ALARM_1;
const YaskawaV1000MonitorData_ALARM_CONTENTS_1_BITS YaskawaV1000MonitorData::ALARM_CONTENTS_1_BITS_MIN;
const YaskawaV1000MonitorData_ALARM_CONTENTS_1_BITS YaskawaV1000MonitorData::ALARM_CONTENTS_1_BITS_MAX;
const int YaskawaV1000MonitorData::ALARM_CONTENTS_1_BITS_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* YaskawaV1000MonitorData_INPUT_TERMINAL_STATUS_BITS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return YaskawaV1000MonitorData_INPUT_TERMINAL_STATUS_BITS_descriptor_;
}
bool YaskawaV1000MonitorData_INPUT_TERMINAL_STATUS_BITS_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const YaskawaV1000MonitorData_INPUT_TERMINAL_STATUS_BITS YaskawaV1000MonitorData::NOT_USED_6;
const YaskawaV1000MonitorData_INPUT_TERMINAL_STATUS_BITS YaskawaV1000MonitorData::TERMINAL_S1_CLOSED;
const YaskawaV1000MonitorData_INPUT_TERMINAL_STATUS_BITS YaskawaV1000MonitorData::TERMINAL_S2_CLOSED;
const YaskawaV1000MonitorData_INPUT_TERMINAL_STATUS_BITS YaskawaV1000MonitorData::TERMINAL_S3_CLOSED;
const YaskawaV1000MonitorData_INPUT_TERMINAL_STATUS_BITS YaskawaV1000MonitorData::TERMINAL_S4_CLOSED;
const YaskawaV1000MonitorData_INPUT_TERMINAL_STATUS_BITS YaskawaV1000MonitorData::TERMINAL_S5_CLOSED;
const YaskawaV1000MonitorData_INPUT_TERMINAL_STATUS_BITS YaskawaV1000MonitorData::TERMINAL_S6_CLOSED;
const YaskawaV1000MonitorData_INPUT_TERMINAL_STATUS_BITS YaskawaV1000MonitorData::TERMINAL_S7_CLOSED;
const YaskawaV1000MonitorData_INPUT_TERMINAL_STATUS_BITS YaskawaV1000MonitorData::INPUT_TERMINAL_STATUS_BITS_MIN;
const YaskawaV1000MonitorData_INPUT_TERMINAL_STATUS_BITS YaskawaV1000MonitorData::INPUT_TERMINAL_STATUS_BITS_MAX;
const int YaskawaV1000MonitorData::INPUT_TERMINAL_STATUS_BITS_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS_descriptor_;
}
bool YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 8192:
    case 16384:
    case 32768:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS YaskawaV1000MonitorData::NOT_USED_7;
const YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS YaskawaV1000MonitorData::DURING_RUN_STATUS_2;
const YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS YaskawaV1000MonitorData::ZERO_SPEED_STATUS_2;
const YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS YaskawaV1000MonitorData::SPEED_AGREE_STATUS_2;
const YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS YaskawaV1000MonitorData::USER_SPEED_AGREE_STATUS_2;
const YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS YaskawaV1000MonitorData::FREQ_DETECT_1_STATUS_2;
const YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS YaskawaV1000MonitorData::FREQ_DETECT_2_STATUS_2;
const YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS YaskawaV1000MonitorData::DRIVE_READY_STATUS_2;
const YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS YaskawaV1000MonitorData::DURING_UNDERVOLTAGE_STATUS_2;
const YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS YaskawaV1000MonitorData::DURING_BASEBLOCK_STATUS_2;
const YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS YaskawaV1000MonitorData::FREQ_REF_FROM_KEYPAD_STATUS_2;
const YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS YaskawaV1000MonitorData::RUN_COMMAND_FROM_KEYPAD_STATUS_2;
const YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS YaskawaV1000MonitorData::UNDER_OVER_TORQUE_1_2_STATUS_2;
const YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS YaskawaV1000MonitorData::FREQ_REF_LOSS_STATUS_2;
const YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS YaskawaV1000MonitorData::DURING_FAULT_RESTART_STATUS_2;
const YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS YaskawaV1000MonitorData::FAULT_STATUS_2;
const YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS YaskawaV1000MonitorData::COMM_TIMEOUT_STATUS_2;
const YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS YaskawaV1000MonitorData::DRIVE_STATUS_2_BITS_MIN;
const YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS YaskawaV1000MonitorData::DRIVE_STATUS_2_BITS_MAX;
const int YaskawaV1000MonitorData::DRIVE_STATUS_2_BITS_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* YaskawaV1000MonitorData_OUTPUT_TERMINAL_STATUS_BITS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return YaskawaV1000MonitorData_OUTPUT_TERMINAL_STATUS_BITS_descriptor_;
}
bool YaskawaV1000MonitorData_OUTPUT_TERMINAL_STATUS_BITS_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const YaskawaV1000MonitorData_OUTPUT_TERMINAL_STATUS_BITS YaskawaV1000MonitorData::NOT_USED_8;
const YaskawaV1000MonitorData_OUTPUT_TERMINAL_STATUS_BITS YaskawaV1000MonitorData::MULTI_FUNC_CONTACT_OUTPUT;
const YaskawaV1000MonitorData_OUTPUT_TERMINAL_STATUS_BITS YaskawaV1000MonitorData::MULTI_FUNC_PHOTOCOUPLER_OUTPUT_1;
const YaskawaV1000MonitorData_OUTPUT_TERMINAL_STATUS_BITS YaskawaV1000MonitorData::MULTI_FUNC_PHOTOCOUPLER_OUTPUT_2;
const YaskawaV1000MonitorData_OUTPUT_TERMINAL_STATUS_BITS YaskawaV1000MonitorData::OUTPUT_TERMINAL_STATUS_BITS_MIN;
const YaskawaV1000MonitorData_OUTPUT_TERMINAL_STATUS_BITS YaskawaV1000MonitorData::OUTPUT_TERMINAL_STATUS_BITS_MAX;
const int YaskawaV1000MonitorData::OUTPUT_TERMINAL_STATUS_BITS_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* YaskawaV1000MonitorData_COMM_ERROR_LOG_BITS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return YaskawaV1000MonitorData_COMM_ERROR_LOG_BITS_descriptor_;
}
bool YaskawaV1000MonitorData_COMM_ERROR_LOG_BITS_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 8:
    case 16:
    case 32:
    case 64:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const YaskawaV1000MonitorData_COMM_ERROR_LOG_BITS YaskawaV1000MonitorData::NOT_USED_9;
const YaskawaV1000MonitorData_COMM_ERROR_LOG_BITS YaskawaV1000MonitorData::CRC_ERROR;
const YaskawaV1000MonitorData_COMM_ERROR_LOG_BITS YaskawaV1000MonitorData::DATA_LENGTH_ERROR;
const YaskawaV1000MonitorData_COMM_ERROR_LOG_BITS YaskawaV1000MonitorData::PARITY_ERROR;
const YaskawaV1000MonitorData_COMM_ERROR_LOG_BITS YaskawaV1000MonitorData::OVERRUN_ERROR;
const YaskawaV1000MonitorData_COMM_ERROR_LOG_BITS YaskawaV1000MonitorData::FRAMEING_ERROR;
const YaskawaV1000MonitorData_COMM_ERROR_LOG_BITS YaskawaV1000MonitorData::TIMEOUT;
const YaskawaV1000MonitorData_COMM_ERROR_LOG_BITS YaskawaV1000MonitorData::COMM_ERROR_LOG_BITS_MIN;
const YaskawaV1000MonitorData_COMM_ERROR_LOG_BITS YaskawaV1000MonitorData::COMM_ERROR_LOG_BITS_MAX;
const int YaskawaV1000MonitorData::COMM_ERROR_LOG_BITS_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* YaskawaV1000MonitorData_DRIVE_STATUS_BITS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return YaskawaV1000MonitorData_DRIVE_STATUS_BITS_descriptor_;
}
bool YaskawaV1000MonitorData_DRIVE_STATUS_BITS_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 16384:
    case 32768:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const YaskawaV1000MonitorData_DRIVE_STATUS_BITS YaskawaV1000MonitorData::NOT_USED_10;
const YaskawaV1000MonitorData_DRIVE_STATUS_BITS YaskawaV1000MonitorData::DURING_RUN_STATUS;
const YaskawaV1000MonitorData_DRIVE_STATUS_BITS YaskawaV1000MonitorData::DURING_ZERO_SPEED_STATUS;
const YaskawaV1000MonitorData_DRIVE_STATUS_BITS YaskawaV1000MonitorData::DURING_REVERSE_RUN_STATUS;
const YaskawaV1000MonitorData_DRIVE_STATUS_BITS YaskawaV1000MonitorData::DURING_FAULT_RESET_STATUS;
const YaskawaV1000MonitorData_DRIVE_STATUS_BITS YaskawaV1000MonitorData::DURING_SPEED_AGREE_STATUS;
const YaskawaV1000MonitorData_DRIVE_STATUS_BITS YaskawaV1000MonitorData::DRIVE_READY_STATUS;
const YaskawaV1000MonitorData_DRIVE_STATUS_BITS YaskawaV1000MonitorData::ALARM_STATUS;
const YaskawaV1000MonitorData_DRIVE_STATUS_BITS YaskawaV1000MonitorData::FAULT_STATUS;
const YaskawaV1000MonitorData_DRIVE_STATUS_BITS YaskawaV1000MonitorData::DURING_OPERATION_ERROR_STATUS;
const YaskawaV1000MonitorData_DRIVE_STATUS_BITS YaskawaV1000MonitorData::DURING_MOMENTARY_POWER_LOSS_STATUS;
const YaskawaV1000MonitorData_DRIVE_STATUS_BITS YaskawaV1000MonitorData::MOTOR_2_SELECTED_STATUS;
const YaskawaV1000MonitorData_DRIVE_STATUS_BITS YaskawaV1000MonitorData::COM_REF_NET_REF_STATUS;
const YaskawaV1000MonitorData_DRIVE_STATUS_BITS YaskawaV1000MonitorData::COM_CTRL_NET_CTRL_STATUS;
const YaskawaV1000MonitorData_DRIVE_STATUS_BITS YaskawaV1000MonitorData::DRIVE_STATUS_BITS_MIN;
const YaskawaV1000MonitorData_DRIVE_STATUS_BITS YaskawaV1000MonitorData::DRIVE_STATUS_BITS_MAX;
const int YaskawaV1000MonitorData::DRIVE_STATUS_BITS_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS_descriptor_;
}
bool YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS_IsValid(int value) {
  switch(value) {
    case 0:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 8192:
    case 16384:
    case 32768:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS YaskawaV1000MonitorData::NOT_USED_11;
const YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS YaskawaV1000MonitorData::UNDERVOLTAGE_FAULT_3;
const YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS YaskawaV1000MonitorData::CONTROL_POWER_SUPPLY_UNDERVOLTAGE_FAULT_3;
const YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS YaskawaV1000MonitorData::SOFT_CHARGE_CIRCUIT_FAULT_3;
const YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS YaskawaV1000MonitorData::IGBT_SHORT_CIRCUIT_OR_GROUND_FAULT_3;
const YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS YaskawaV1000MonitorData::GROUND_FAULT_3;
const YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS YaskawaV1000MonitorData::OVERCURRENT_FAULT_3;
const YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS YaskawaV1000MonitorData::OVERVOLTAGE_FAULT_3;
const YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS YaskawaV1000MonitorData::HEATSINK_OVERHEAT_1_FAULT_3;
const YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS YaskawaV1000MonitorData::HEATSINK_OVERHEAT_2_FAULT_3;
const YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS YaskawaV1000MonitorData::MOTOR_OVERLOAD_FAULT_3;
const YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS YaskawaV1000MonitorData::DRIVE_OVERLOAD_FAULT_3;
const YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS YaskawaV1000MonitorData::OVERTORQUE_DETECTION_1_FAULT_3;
const YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS YaskawaV1000MonitorData::OVERTORQUE_DETECTION_2_FAULT_3;
const YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS YaskawaV1000MonitorData::DYNAMIC_BRAKING_TRANSISTOR_FAULT_3;
const YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS YaskawaV1000MonitorData::BRAKING_RESISTOR_OVERHEAT_FAULT_3;
const YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS YaskawaV1000MonitorData::FAULT_CONTENTS_3_BITS_MIN;
const YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS YaskawaV1000MonitorData::FAULT_CONTENTS_3_BITS_MAX;
const int YaskawaV1000MonitorData::FAULT_CONTENTS_3_BITS_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS_descriptor_;
}
bool YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 8192:
    case 16384:
    case 32768:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS YaskawaV1000MonitorData::NOT_USED_12;
const YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS YaskawaV1000MonitorData::EXTERNAL_INPUT_S3_FAULT_4;
const YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS YaskawaV1000MonitorData::EXTERNAL_INPUT_S4_FAULT_4;
const YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS YaskawaV1000MonitorData::EXTERNAL_INPUT_S5_FAULT_4;
const YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS YaskawaV1000MonitorData::EXTERNAL_INPUT_S6_FAULT_4;
const YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS YaskawaV1000MonitorData::EXTERNAL_INPUT_S7_FAULT_4;
const YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS YaskawaV1000MonitorData::OVERSPEED_FAULT_4;
const YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS YaskawaV1000MonitorData::EXCESSIVE_SPEED_DEVIATION_FAULT_4;
const YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS YaskawaV1000MonitorData::PG_DISCONNECTED_FAULT_4;
const YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS YaskawaV1000MonitorData::INPUT_PHASE_LOSS_FAULT_4;
const YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS YaskawaV1000MonitorData::OUTPUT_PHASE_LOSS_FAULT_4;
const YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS YaskawaV1000MonitorData::MOTOR_OVERHEAT_PTC_FAULT_4;
const YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS YaskawaV1000MonitorData::DIGITAL_OPERATON_CONNECTION_FAULT_4;
const YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS YaskawaV1000MonitorData::EEPROM_WRITE_ERROR_FAULT_4;
const YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS YaskawaV1000MonitorData::MOTOR_OVERHAT_PTC_FAULT_4;
const YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS YaskawaV1000MonitorData::FAULT_CONTENTS_4_BITS_MIN;
const YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS YaskawaV1000MonitorData::FAULT_CONTENTS_4_BITS_MAX;
const int YaskawaV1000MonitorData::FAULT_CONTENTS_4_BITS_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* YaskawaV1000MonitorData_FAULT_CONTENTS_5_BITS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return YaskawaV1000MonitorData_FAULT_CONTENTS_5_BITS_descriptor_;
}
bool YaskawaV1000MonitorData_FAULT_CONTENTS_5_BITS_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 16:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 32768:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const YaskawaV1000MonitorData_FAULT_CONTENTS_5_BITS YaskawaV1000MonitorData::NOT_USED_13;
const YaskawaV1000MonitorData_FAULT_CONTENTS_5_BITS YaskawaV1000MonitorData::BUS_COMMUNICATION_ERROR_FAULT_5;
const YaskawaV1000MonitorData_FAULT_CONTENTS_5_BITS YaskawaV1000MonitorData::OPTION_COMMUNICATIO_ERROR_FAULT_5;
const YaskawaV1000MonitorData_FAULT_CONTENTS_5_BITS YaskawaV1000MonitorData::CONTROL_FAULT_5;
const YaskawaV1000MonitorData_FAULT_CONTENTS_5_BITS YaskawaV1000MonitorData::OPTION_EXTERNAL_FAULT_5;
const YaskawaV1000MonitorData_FAULT_CONTENTS_5_BITS YaskawaV1000MonitorData::PID_FEEDBACK_LOSS_FAULT_5;
const YaskawaV1000MonitorData_FAULT_CONTENTS_5_BITS YaskawaV1000MonitorData::UNDERTORQUE_DETECTION_1_FAULT_5;
const YaskawaV1000MonitorData_FAULT_CONTENTS_5_BITS YaskawaV1000MonitorData::UNDERTORQUE_DETECTION_2_FAULT_5;
const YaskawaV1000MonitorData_FAULT_CONTENTS_5_BITS YaskawaV1000MonitorData::HIGH_SLIP_BRAKING_OVERLOAD_FAULT_5;
const YaskawaV1000MonitorData_FAULT_CONTENTS_5_BITS YaskawaV1000MonitorData::HARDWARE_FAULT_5;
const YaskawaV1000MonitorData_FAULT_CONTENTS_5_BITS YaskawaV1000MonitorData::FAULT_CONTENTS_5_BITS_MIN;
const YaskawaV1000MonitorData_FAULT_CONTENTS_5_BITS YaskawaV1000MonitorData::FAULT_CONTENTS_5_BITS_MAX;
const int YaskawaV1000MonitorData::FAULT_CONTENTS_5_BITS_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* YaskawaV1000MonitorData_FAULT_CONTENTS_6_BITS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return YaskawaV1000MonitorData_FAULT_CONTENTS_6_BITS_descriptor_;
}
bool YaskawaV1000MonitorData_FAULT_CONTENTS_6_BITS_IsValid(int value) {
  switch(value) {
    case 0:
    case 32:
    case 64:
    case 128:
    case 256:
    case 1024:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const YaskawaV1000MonitorData_FAULT_CONTENTS_6_BITS YaskawaV1000MonitorData::NOT_USED_14;
const YaskawaV1000MonitorData_FAULT_CONTENTS_6_BITS YaskawaV1000MonitorData::OUTPUT_CURRENT_IMBALANCE_FAULT_6;
const YaskawaV1000MonitorData_FAULT_CONTENTS_6_BITS YaskawaV1000MonitorData::PULLOUT_DETECTION;
const YaskawaV1000MonitorData_FAULT_CONTENTS_6_BITS YaskawaV1000MonitorData::PG_DISCONNECTED_FAULT_6;
const YaskawaV1000MonitorData_FAULT_CONTENTS_6_BITS YaskawaV1000MonitorData::WATCHDOG_TIMER_ERROR_FAULT_6;
const YaskawaV1000MonitorData_FAULT_CONTENTS_6_BITS YaskawaV1000MonitorData::TOO_MANY_SPEED_SEARCH_RESTARTS_FAULT_6;
const YaskawaV1000MonitorData_FAULT_CONTENTS_6_BITS YaskawaV1000MonitorData::FAULT_CONTENTS_6_BITS_MIN;
const YaskawaV1000MonitorData_FAULT_CONTENTS_6_BITS YaskawaV1000MonitorData::FAULT_CONTENTS_6_BITS_MAX;
const int YaskawaV1000MonitorData::FAULT_CONTENTS_6_BITS_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* YaskawaV1000MonitorData_FAULT_CONTENTS_7_BITS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return YaskawaV1000MonitorData_FAULT_CONTENTS_7_BITS_descriptor_;
}
bool YaskawaV1000MonitorData_FAULT_CONTENTS_7_BITS_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 256:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const YaskawaV1000MonitorData_FAULT_CONTENTS_7_BITS YaskawaV1000MonitorData::NOT_USED_15;
const YaskawaV1000MonitorData_FAULT_CONTENTS_7_BITS YaskawaV1000MonitorData::PID_FEEDBACK_LOSS_FAULT_7;
const YaskawaV1000MonitorData_FAULT_CONTENTS_7_BITS YaskawaV1000MonitorData::EXTERNAL_INPUT_S1_FAULT_7;
const YaskawaV1000MonitorData_FAULT_CONTENTS_7_BITS YaskawaV1000MonitorData::EXTERNAL_INPUT_S2_FAULT_7;
const YaskawaV1000MonitorData_FAULT_CONTENTS_7_BITS YaskawaV1000MonitorData::MECHANICAL_WEAKENING_1_FAULT_7;
const YaskawaV1000MonitorData_FAULT_CONTENTS_7_BITS YaskawaV1000MonitorData::MECHANICAL_WEAKENING_2_FAULT_7;
const YaskawaV1000MonitorData_FAULT_CONTENTS_7_BITS YaskawaV1000MonitorData::CURRENT_OFFSET_FAULT_7;
const YaskawaV1000MonitorData_FAULT_CONTENTS_7_BITS YaskawaV1000MonitorData::DRIVE_WORKS_EZ_FAULT_7;
const YaskawaV1000MonitorData_FAULT_CONTENTS_7_BITS YaskawaV1000MonitorData::FAULT_CONTENTS_7_BITS_MIN;
const YaskawaV1000MonitorData_FAULT_CONTENTS_7_BITS YaskawaV1000MonitorData::FAULT_CONTENTS_7_BITS_MAX;
const int YaskawaV1000MonitorData::FAULT_CONTENTS_7_BITS_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS_descriptor_;
}
bool YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 32768:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS YaskawaV1000MonitorData::NOT_USED_16;
const YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS YaskawaV1000MonitorData::UNDERVOLTAGE_ALARM_2;
const YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS YaskawaV1000MonitorData::OVERVOLTAGE_ALARM_2;
const YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS YaskawaV1000MonitorData::HEATSINK_OVERHEAT_ALARM_2;
const YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS YaskawaV1000MonitorData::DRIVE_OVERHEAT_ALARM_2;
const YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS YaskawaV1000MonitorData::OVERTORQUE_1_ALARM_2;
const YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS YaskawaV1000MonitorData::OVERTORQUE_2_ALARM_2;
const YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS YaskawaV1000MonitorData::RUN_COMMANDS_INPUT_ERROR_ALARM_2;
const YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS YaskawaV1000MonitorData::DRIVE_BASEBLOCK_ALARM_2;
const YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS YaskawaV1000MonitorData::EXTERNAL_FAULT_S3_ALARM_2;
const YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS YaskawaV1000MonitorData::EXTERNAL_FAULT_S4_ALARM_2;
const YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS YaskawaV1000MonitorData::EXTERNAL_FAULT_S5_ALARM_2;
const YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS YaskawaV1000MonitorData::EXTERNAL_FAULT_S6_ALARM_2;
const YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS YaskawaV1000MonitorData::EXTERNAL_FAULT_S7_ALARM_2;
const YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS YaskawaV1000MonitorData::OVERSPEED_ALARM_2;
const YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS YaskawaV1000MonitorData::ALARM_CONTENTS_2_BITS_MIN;
const YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS YaskawaV1000MonitorData::ALARM_CONTENTS_2_BITS_MAX;
const int YaskawaV1000MonitorData::ALARM_CONTENTS_2_BITS_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS_descriptor_;
}
bool YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 512:
    case 1024:
    case 4096:
    case 8192:
    case 16384:
    case 32768:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS YaskawaV1000MonitorData::NOT_USED_17;
const YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS YaskawaV1000MonitorData::EXCESSIVE_SPEED_DEVIATION_ALARM_3;
const YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS YaskawaV1000MonitorData::PG_DISCONNECTED_ALARM_3;
const YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS YaskawaV1000MonitorData::DIGITAL_OPERATOR_CONNECTION_FAULT_ALARM_3;
const YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS YaskawaV1000MonitorData::BUS_COMMUNICATION_ERROR_ALARM_3;
const YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS YaskawaV1000MonitorData::OPTION_COMMUNICATION_ERROR_ALARM_3;
const YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS YaskawaV1000MonitorData::SERIAL_TRANSMISSION_ERRO_ALARM_3;
const YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS YaskawaV1000MonitorData::MOTOR_OVERLOAD_ALARM_3;
const YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS YaskawaV1000MonitorData::DRIVE_OVERLOAD_ALARM_3;
const YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS YaskawaV1000MonitorData::OPTION_CARD_EXTERNAL_FAULT_ALARM_3;
const YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS YaskawaV1000MonitorData::MOTOR_2_SWITHC_COMMAND_INPUT_DURING_RUN_ALARM_3;
const YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS YaskawaV1000MonitorData::SERIAL_COMMUNICATION_TRANSMISSION_ERROR_ALARM_3;
const YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS YaskawaV1000MonitorData::UNDERTORQUE_DETECTION_1_ALARM_3;
const YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS YaskawaV1000MonitorData::UNDERTORQUE_DETECTION_2_ALARM_3;
const YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS YaskawaV1000MonitorData::BUS_TEST_MODE_ALARM_3;
const YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS YaskawaV1000MonitorData::ALARM_CONTENTS_3_BITS_MIN;
const YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS YaskawaV1000MonitorData::ALARM_CONTENTS_3_BITS_MAX;
const int YaskawaV1000MonitorData::ALARM_CONTENTS_3_BITS_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* YaskawaV1000MonitorData_ALARM_CONTENTS_4_BITS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return YaskawaV1000MonitorData_ALARM_CONTENTS_4_BITS_descriptor_;
}
bool YaskawaV1000MonitorData_ALARM_CONTENTS_4_BITS_IsValid(int value) {
  switch(value) {
    case 0:
    case 2:
    case 64:
    case 128:
    case 512:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const YaskawaV1000MonitorData_ALARM_CONTENTS_4_BITS YaskawaV1000MonitorData::NOT_USED_18;
const YaskawaV1000MonitorData_ALARM_CONTENTS_4_BITS YaskawaV1000MonitorData::MOTOR_OVERHEAT_1_ALARM_4;
const YaskawaV1000MonitorData_ALARM_CONTENTS_4_BITS YaskawaV1000MonitorData::PID_FEEDACK_LOSS_L_ALARM_4;
const YaskawaV1000MonitorData_ALARM_CONTENTS_4_BITS YaskawaV1000MonitorData::PID_FEEDACK_LOSS_H_ALARM_4;
const YaskawaV1000MonitorData_ALARM_CONTENTS_4_BITS YaskawaV1000MonitorData::DRIVE_DISABLED_ALARM_4;
const YaskawaV1000MonitorData_ALARM_CONTENTS_4_BITS YaskawaV1000MonitorData::ALARM_CONTENTS_4_BITS_MIN;
const YaskawaV1000MonitorData_ALARM_CONTENTS_4_BITS YaskawaV1000MonitorData::ALARM_CONTENTS_4_BITS_MAX;
const int YaskawaV1000MonitorData::ALARM_CONTENTS_4_BITS_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* YaskawaV1000MonitorData_ALARM_CONTENTS_5_BITS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return YaskawaV1000MonitorData_ALARM_CONTENTS_5_BITS_descriptor_;
}
bool YaskawaV1000MonitorData_ALARM_CONTENTS_5_BITS_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 4:
    case 8:
    case 16:
    case 32:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 8192:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const YaskawaV1000MonitorData_ALARM_CONTENTS_5_BITS YaskawaV1000MonitorData::NOT_USED_19;
const YaskawaV1000MonitorData_ALARM_CONTENTS_5_BITS YaskawaV1000MonitorData::MECHATROLINK_WATCHDOG_TIMER_ERROR_ALARM_5;
const YaskawaV1000MonitorData_ALARM_CONTENTS_5_BITS YaskawaV1000MonitorData::MECHATROLINK_COMM_CYCLE_SETTING_ERROR_ALARM_5;
const YaskawaV1000MonitorData_ALARM_CONTENTS_5_BITS YaskawaV1000MonitorData::HIGH_CURRENT_ALARM_5;
const YaskawaV1000MonitorData_ALARM_CONTENTS_5_BITS YaskawaV1000MonitorData::COOLING_FAN_MAINTENANCE_TIME_ALARM_5;
const YaskawaV1000MonitorData_ALARM_CONTENTS_5_BITS YaskawaV1000MonitorData::SOFT_CHAGE_BYPASS_RELAY_MAINTENANCE_TIME_ALARM_5;
const YaskawaV1000MonitorData_ALARM_CONTENTS_5_BITS YaskawaV1000MonitorData::SI_SV_EERPOM_ERROR_ALARM_5;
const YaskawaV1000MonitorData_ALARM_CONTENTS_5_BITS YaskawaV1000MonitorData::EXTERNAL_FAULT_S1_ALARM_5;
const YaskawaV1000MonitorData_ALARM_CONTENTS_5_BITS YaskawaV1000MonitorData::EXTERNAL_FAULT_S2_ALARM_5;
const YaskawaV1000MonitorData_ALARM_CONTENTS_5_BITS YaskawaV1000MonitorData::SAFE_DISABLE_INPUT_1_ALARM_5;
const YaskawaV1000MonitorData_ALARM_CONTENTS_5_BITS YaskawaV1000MonitorData::SAFE_DISABLE_INPUT_2_ALARM_5;
const YaskawaV1000MonitorData_ALARM_CONTENTS_5_BITS YaskawaV1000MonitorData::MECHANICAL_WEAKENING_DETECTION_1_ALARM_5;
const YaskawaV1000MonitorData_ALARM_CONTENTS_5_BITS YaskawaV1000MonitorData::MECHANICAL_WEAKENING_DETECTION_2_ALARM_5;
const YaskawaV1000MonitorData_ALARM_CONTENTS_5_BITS YaskawaV1000MonitorData::ALARM_CONTENTS_5_BITS_MIN;
const YaskawaV1000MonitorData_ALARM_CONTENTS_5_BITS YaskawaV1000MonitorData::ALARM_CONTENTS_5_BITS_MAX;
const int YaskawaV1000MonitorData::ALARM_CONTENTS_5_BITS_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int YaskawaV1000MonitorData::kDriveStatus1FieldNumber;
const int YaskawaV1000MonitorData::kFaultContents1FieldNumber;
const int YaskawaV1000MonitorData::kDataLinkStatusFieldNumber;
const int YaskawaV1000MonitorData::kFreqRefFieldNumber;
const int YaskawaV1000MonitorData::kOutputFreqFieldNumber;
const int YaskawaV1000MonitorData::kOutputVoltageRefFieldNumber;
const int YaskawaV1000MonitorData::kOutputCurrentFieldNumber;
const int YaskawaV1000MonitorData::kOutputPowerFieldNumber;
const int YaskawaV1000MonitorData::kTorqueRefFieldNumber;
const int YaskawaV1000MonitorData::kFaultContents2FieldNumber;
const int YaskawaV1000MonitorData::kAlarmContents1FieldNumber;
const int YaskawaV1000MonitorData::kInputTerminalStatusFieldNumber;
const int YaskawaV1000MonitorData::kDriveStatus2FieldNumber;
const int YaskawaV1000MonitorData::kOutputTerminalStatusFieldNumber;
const int YaskawaV1000MonitorData::kFrequencyReferenceBiasFieldNumber;
const int YaskawaV1000MonitorData::kDcBusVoltageFieldNumber;
const int YaskawaV1000MonitorData::kTorqueMonitorFieldNumber;
const int YaskawaV1000MonitorData::kProductCode1FieldNumber;
const int YaskawaV1000MonitorData::kProductCode2FieldNumber;
const int YaskawaV1000MonitorData::kPidFeedbackFieldNumber;
const int YaskawaV1000MonitorData::kPidInputFieldNumber;
const int YaskawaV1000MonitorData::kPidOutputFieldNumber;
const int YaskawaV1000MonitorData::kCommErrorLogFieldNumber;
const int YaskawaV1000MonitorData::kOutputFreqRpmFieldNumber;
const int YaskawaV1000MonitorData::kOutputFreqPercentFieldNumber;
const int YaskawaV1000MonitorData::kDriveStatusFieldNumber;
const int YaskawaV1000MonitorData::kAlarmCodeFieldNumber;
const int YaskawaV1000MonitorData::kCumulativeOpTimeUpperDigitsFieldNumber;
const int YaskawaV1000MonitorData::kCumulativeOpTimeFirstDigitFieldNumber;
const int YaskawaV1000MonitorData::kCumulativeFanOpTimeUpperDigitsFieldNumber;
const int YaskawaV1000MonitorData::kCumulativeFanOpTimeFirstDigitFieldNumber;
const int YaskawaV1000MonitorData::kDriveRatedCurrentFieldNumber;
const int YaskawaV1000MonitorData::kMotorSpeedRevsMinuteFieldNumber;
const int YaskawaV1000MonitorData::kMotorSpeedRevsPercentFieldNumber;
const int YaskawaV1000MonitorData::kOptionCodeFieldNumber;
const int YaskawaV1000MonitorData::kOpeErrorNumberFieldNumber;
const int YaskawaV1000MonitorData::kFaultContents3FieldNumber;
const int YaskawaV1000MonitorData::kFaultContents4FieldNumber;
const int YaskawaV1000MonitorData::kFaultContents5FieldNumber;
const int YaskawaV1000MonitorData::kFaultContents6FieldNumber;
const int YaskawaV1000MonitorData::kFaultContents7FieldNumber;
const int YaskawaV1000MonitorData::kAlarmContents2FieldNumber;
const int YaskawaV1000MonitorData::kAlarmContents3FieldNumber;
const int YaskawaV1000MonitorData::kAlarmContents4FieldNumber;
const int YaskawaV1000MonitorData::kAlarmContents5FieldNumber;
const int YaskawaV1000MonitorData::kCpfContents1FieldNumber;
const int YaskawaV1000MonitorData::kCpfContents2FieldNumber;
const int YaskawaV1000MonitorData::kCpfContents3FieldNumber;
const int YaskawaV1000MonitorData::kOptionCardFaultContentsFieldNumber;
const int YaskawaV1000MonitorData::kOutputCurrent2FieldNumber;
const int YaskawaV1000MonitorData::kOutputFreqHertzFieldNumber;
const int YaskawaV1000MonitorData::kOutputCurrentAmpsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

YaskawaV1000MonitorData::YaskawaV1000MonitorData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analogic.ancp00.YaskawaV1000MonitorData)
}

void YaskawaV1000MonitorData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

YaskawaV1000MonitorData::YaskawaV1000MonitorData(const YaskawaV1000MonitorData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analogic.ancp00.YaskawaV1000MonitorData)
}

void YaskawaV1000MonitorData::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  drive_status_1_ = 0u;
  fault_contents_1_ = 0u;
  data_link_status_ = 0u;
  freq_ref_ = 0u;
  output_freq_ = 0u;
  output_voltage_ref_ = 0;
  output_current_ = 0u;
  output_power_ = 0u;
  torque_ref_ = 0u;
  fault_contents_2_ = 0u;
  alarm_contents_1_ = 0u;
  input_terminal_status_ = 0u;
  drive_status_2_ = 0u;
  output_terminal_status_ = 0u;
  frequency_reference_bias_ = 0;
  dc_bus_voltage_ = 0u;
  torque_monitor_ = 0u;
  product_code_1_ = 0u;
  product_code_2_ = 0u;
  pid_feedback_ = 0u;
  pid_input_ = 0u;
  pid_output_ = 0u;
  comm_error_log_ = 0u;
  output_freq_rpm_ = 0u;
  output_freq_percent_ = 0;
  drive_status_ = 0u;
  alarm_code_ = 0u;
  cumulative_op_time_upper_digits_ = 0u;
  cumulative_op_time_first_digit_ = 0u;
  cumulative_fan_op_time_upper_digits_ = 0u;
  cumulative_fan_op_time_first_digit_ = 0u;
  drive_rated_current_ = 0u;
  motor_speed_revs_minute_ = 0u;
  motor_speed_revs_percent_ = 0u;
  option_code_ = 0u;
  ope_error_number_ = 0u;
  fault_contents_3_ = 0u;
  fault_contents_4_ = 0u;
  fault_contents_5_ = 0u;
  fault_contents_6_ = 0u;
  fault_contents_7_ = 0u;
  alarm_contents_2_ = 0u;
  alarm_contents_3_ = 0u;
  alarm_contents_4_ = 0u;
  alarm_contents_5_ = 0u;
  cpf_contents_1_ = 0u;
  cpf_contents_2_ = 0u;
  cpf_contents_3_ = 0u;
  option_card_fault_contents_ = 0u;
  output_current_2_ = 0u;
  output_freq_hertz_ = 0;
  output_current_amps_ = 0;
}

YaskawaV1000MonitorData::~YaskawaV1000MonitorData() {
  // @@protoc_insertion_point(destructor:analogic.ancp00.YaskawaV1000MonitorData)
  SharedDtor();
}

void YaskawaV1000MonitorData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void YaskawaV1000MonitorData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* YaskawaV1000MonitorData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return YaskawaV1000MonitorData_descriptor_;
}

const YaskawaV1000MonitorData& YaskawaV1000MonitorData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fYaskawaV1000_2eproto();
  return *default_instance_;
}

YaskawaV1000MonitorData* YaskawaV1000MonitorData::default_instance_ = NULL;

YaskawaV1000MonitorData* YaskawaV1000MonitorData::New(::google::protobuf::Arena* arena) const {
  YaskawaV1000MonitorData* n = new YaskawaV1000MonitorData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YaskawaV1000MonitorData::Clear() {
// @@protoc_insertion_point(message_clear_start:analogic.ancp00.YaskawaV1000MonitorData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(YaskawaV1000MonitorData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<YaskawaV1000MonitorData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(drive_status_1_, output_power_);
  ZR_(torque_ref_, dc_bus_voltage_);
  ZR_(torque_monitor_, output_freq_rpm_);
  ZR_(output_freq_percent_, drive_rated_current_);
  ZR_(motor_speed_revs_minute_, fault_contents_6_);
  ZR_(fault_contents_7_, cpf_contents_3_);
  ZR_(option_card_fault_contents_, output_current_amps_);

#undef ZR_HELPER_
#undef ZR_

}

bool YaskawaV1000MonitorData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analogic.ancp00.YaskawaV1000MonitorData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 drive_status_1 = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &drive_status_1_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_fault_contents_1;
        break;
      }

      // optional fixed32 fault_contents_1 = 2;
      case 2: {
        if (tag == 21) {
         parse_fault_contents_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &fault_contents_1_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_data_link_status;
        break;
      }

      // optional fixed32 data_link_status = 3;
      case 3: {
        if (tag == 29) {
         parse_data_link_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &data_link_status_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_freq_ref;
        break;
      }

      // optional uint32 freq_ref = 4;
      case 4: {
        if (tag == 32) {
         parse_freq_ref:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &freq_ref_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_output_freq;
        break;
      }

      // optional uint32 output_freq = 5;
      case 5: {
        if (tag == 40) {
         parse_output_freq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &output_freq_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_output_voltage_ref;
        break;
      }

      // optional float output_voltage_ref = 6;
      case 6: {
        if (tag == 53) {
         parse_output_voltage_ref:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &output_voltage_ref_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_output_current;
        break;
      }

      // optional uint32 output_current = 7;
      case 7: {
        if (tag == 56) {
         parse_output_current:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &output_current_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_output_power;
        break;
      }

      // optional uint32 output_power = 8;
      case 8: {
        if (tag == 64) {
         parse_output_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &output_power_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_torque_ref;
        break;
      }

      // optional uint32 torque_ref = 9;
      case 9: {
        if (tag == 72) {
         parse_torque_ref:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &torque_ref_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_fault_contents_2;
        break;
      }

      // optional fixed32 fault_contents_2 = 10;
      case 10: {
        if (tag == 85) {
         parse_fault_contents_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &fault_contents_2_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_alarm_contents_1;
        break;
      }

      // optional fixed32 alarm_contents_1 = 11;
      case 11: {
        if (tag == 93) {
         parse_alarm_contents_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &alarm_contents_1_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_input_terminal_status;
        break;
      }

      // optional fixed32 input_terminal_status = 12;
      case 12: {
        if (tag == 101) {
         parse_input_terminal_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &input_terminal_status_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(109)) goto parse_drive_status_2;
        break;
      }

      // optional fixed32 drive_status_2 = 13;
      case 13: {
        if (tag == 109) {
         parse_drive_status_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &drive_status_2_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(117)) goto parse_output_terminal_status;
        break;
      }

      // optional fixed32 output_terminal_status = 14;
      case 14: {
        if (tag == 117) {
         parse_output_terminal_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &output_terminal_status_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(125)) goto parse_frequency_reference_bias;
        break;
      }

      // optional float frequency_reference_bias = 15;
      case 15: {
        if (tag == 125) {
         parse_frequency_reference_bias:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &frequency_reference_bias_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_dc_bus_voltage;
        break;
      }

      // optional uint32 dc_bus_voltage = 16;
      case 16: {
        if (tag == 128) {
         parse_dc_bus_voltage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dc_bus_voltage_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_torque_monitor;
        break;
      }

      // optional uint32 torque_monitor = 17;
      case 17: {
        if (tag == 136) {
         parse_torque_monitor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &torque_monitor_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_product_code_1;
        break;
      }

      // optional uint32 product_code_1 = 18;
      case 18: {
        if (tag == 144) {
         parse_product_code_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &product_code_1_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_product_code_2;
        break;
      }

      // optional uint32 product_code_2 = 19;
      case 19: {
        if (tag == 152) {
         parse_product_code_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &product_code_2_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_pid_feedback;
        break;
      }

      // optional uint32 pid_feedback = 20;
      case 20: {
        if (tag == 160) {
         parse_pid_feedback:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pid_feedback_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_pid_input;
        break;
      }

      // optional uint32 pid_input = 21;
      case 21: {
        if (tag == 168) {
         parse_pid_input:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pid_input_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_pid_output;
        break;
      }

      // optional uint32 pid_output = 22;
      case 22: {
        if (tag == 176) {
         parse_pid_output:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pid_output_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(189)) goto parse_comm_error_log;
        break;
      }

      // optional fixed32 comm_error_log = 23;
      case 23: {
        if (tag == 189) {
         parse_comm_error_log:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &comm_error_log_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_output_freq_rpm;
        break;
      }

      // optional uint32 output_freq_rpm = 24;
      case 24: {
        if (tag == 192) {
         parse_output_freq_rpm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &output_freq_rpm_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(205)) goto parse_output_freq_percent;
        break;
      }

      // optional float output_freq_percent = 25;
      case 25: {
        if (tag == 205) {
         parse_output_freq_percent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &output_freq_percent_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(213)) goto parse_drive_status;
        break;
      }

      // optional fixed32 drive_status = 26;
      case 26: {
        if (tag == 213) {
         parse_drive_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &drive_status_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(221)) goto parse_alarm_code;
        break;
      }

      // optional fixed32 alarm_code = 27;
      case 27: {
        if (tag == 221) {
         parse_alarm_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &alarm_code_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_cumulative_op_time_upper_digits;
        break;
      }

      // optional uint32 cumulative_op_time_upper_digits = 28;
      case 28: {
        if (tag == 224) {
         parse_cumulative_op_time_upper_digits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cumulative_op_time_upper_digits_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_cumulative_op_time_first_digit;
        break;
      }

      // optional uint32 cumulative_op_time_first_digit = 29;
      case 29: {
        if (tag == 232) {
         parse_cumulative_op_time_first_digit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cumulative_op_time_first_digit_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_cumulative_fan_op_time_upper_digits;
        break;
      }

      // optional uint32 cumulative_fan_op_time_upper_digits = 30;
      case 30: {
        if (tag == 240) {
         parse_cumulative_fan_op_time_upper_digits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cumulative_fan_op_time_upper_digits_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_cumulative_fan_op_time_first_digit;
        break;
      }

      // optional uint32 cumulative_fan_op_time_first_digit = 31;
      case 31: {
        if (tag == 248) {
         parse_cumulative_fan_op_time_first_digit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cumulative_fan_op_time_first_digit_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_drive_rated_current;
        break;
      }

      // optional uint32 drive_rated_current = 32;
      case 32: {
        if (tag == 256) {
         parse_drive_rated_current:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &drive_rated_current_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_motor_speed_revs_minute;
        break;
      }

      // optional uint32 motor_speed_revs_minute = 33;
      case 33: {
        if (tag == 264) {
         parse_motor_speed_revs_minute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &motor_speed_revs_minute_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(272)) goto parse_motor_speed_revs_percent;
        break;
      }

      // optional uint32 motor_speed_revs_percent = 34;
      case 34: {
        if (tag == 272) {
         parse_motor_speed_revs_percent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &motor_speed_revs_percent_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(280)) goto parse_option_code;
        break;
      }

      // optional uint32 option_code = 35;
      case 35: {
        if (tag == 280) {
         parse_option_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &option_code_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(288)) goto parse_ope_error_number;
        break;
      }

      // optional uint32 ope_error_number = 36;
      case 36: {
        if (tag == 288) {
         parse_ope_error_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ope_error_number_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(301)) goto parse_fault_contents_3;
        break;
      }

      // optional fixed32 fault_contents_3 = 37;
      case 37: {
        if (tag == 301) {
         parse_fault_contents_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &fault_contents_3_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(309)) goto parse_fault_contents_4;
        break;
      }

      // optional fixed32 fault_contents_4 = 38;
      case 38: {
        if (tag == 309) {
         parse_fault_contents_4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &fault_contents_4_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(317)) goto parse_fault_contents_5;
        break;
      }

      // optional fixed32 fault_contents_5 = 39;
      case 39: {
        if (tag == 317) {
         parse_fault_contents_5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &fault_contents_5_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(325)) goto parse_fault_contents_6;
        break;
      }

      // optional fixed32 fault_contents_6 = 40;
      case 40: {
        if (tag == 325) {
         parse_fault_contents_6:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &fault_contents_6_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(333)) goto parse_fault_contents_7;
        break;
      }

      // optional fixed32 fault_contents_7 = 41;
      case 41: {
        if (tag == 333) {
         parse_fault_contents_7:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &fault_contents_7_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(341)) goto parse_alarm_contents_2;
        break;
      }

      // optional fixed32 alarm_contents_2 = 42;
      case 42: {
        if (tag == 341) {
         parse_alarm_contents_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &alarm_contents_2_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(349)) goto parse_alarm_contents_3;
        break;
      }

      // optional fixed32 alarm_contents_3 = 43;
      case 43: {
        if (tag == 349) {
         parse_alarm_contents_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &alarm_contents_3_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(357)) goto parse_alarm_contents_4;
        break;
      }

      // optional fixed32 alarm_contents_4 = 44;
      case 44: {
        if (tag == 357) {
         parse_alarm_contents_4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &alarm_contents_4_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(365)) goto parse_alarm_contents_5;
        break;
      }

      // optional fixed32 alarm_contents_5 = 45;
      case 45: {
        if (tag == 365) {
         parse_alarm_contents_5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &alarm_contents_5_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(373)) goto parse_cpf_contents_1;
        break;
      }

      // optional fixed32 cpf_contents_1 = 46;
      case 46: {
        if (tag == 373) {
         parse_cpf_contents_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &cpf_contents_1_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(381)) goto parse_cpf_contents_2;
        break;
      }

      // optional fixed32 cpf_contents_2 = 47;
      case 47: {
        if (tag == 381) {
         parse_cpf_contents_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &cpf_contents_2_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(389)) goto parse_cpf_contents_3;
        break;
      }

      // optional fixed32 cpf_contents_3 = 48;
      case 48: {
        if (tag == 389) {
         parse_cpf_contents_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &cpf_contents_3_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(397)) goto parse_option_card_fault_contents;
        break;
      }

      // optional fixed32 option_card_fault_contents = 49;
      case 49: {
        if (tag == 397) {
         parse_option_card_fault_contents:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &option_card_fault_contents_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(400)) goto parse_output_current_2;
        break;
      }

      // optional uint32 output_current_2 = 50;
      case 50: {
        if (tag == 400) {
         parse_output_current_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &output_current_2_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(413)) goto parse_output_freq_hertz;
        break;
      }

      // optional float output_freq_hertz = 51;
      case 51: {
        if (tag == 413) {
         parse_output_freq_hertz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &output_freq_hertz_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(421)) goto parse_output_current_amps;
        break;
      }

      // optional float output_current_amps = 52;
      case 52: {
        if (tag == 421) {
         parse_output_current_amps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &output_current_amps_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:analogic.ancp00.YaskawaV1000MonitorData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analogic.ancp00.YaskawaV1000MonitorData)
  return false;
#undef DO_
}

void YaskawaV1000MonitorData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analogic.ancp00.YaskawaV1000MonitorData)
  // optional fixed32 drive_status_1 = 1;
  if (this->drive_status_1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->drive_status_1(), output);
  }

  // optional fixed32 fault_contents_1 = 2;
  if (this->fault_contents_1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->fault_contents_1(), output);
  }

  // optional fixed32 data_link_status = 3;
  if (this->data_link_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->data_link_status(), output);
  }

  // optional uint32 freq_ref = 4;
  if (this->freq_ref() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->freq_ref(), output);
  }

  // optional uint32 output_freq = 5;
  if (this->output_freq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->output_freq(), output);
  }

  // optional float output_voltage_ref = 6;
  if (this->output_voltage_ref() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->output_voltage_ref(), output);
  }

  // optional uint32 output_current = 7;
  if (this->output_current() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->output_current(), output);
  }

  // optional uint32 output_power = 8;
  if (this->output_power() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->output_power(), output);
  }

  // optional uint32 torque_ref = 9;
  if (this->torque_ref() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->torque_ref(), output);
  }

  // optional fixed32 fault_contents_2 = 10;
  if (this->fault_contents_2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(10, this->fault_contents_2(), output);
  }

  // optional fixed32 alarm_contents_1 = 11;
  if (this->alarm_contents_1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(11, this->alarm_contents_1(), output);
  }

  // optional fixed32 input_terminal_status = 12;
  if (this->input_terminal_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(12, this->input_terminal_status(), output);
  }

  // optional fixed32 drive_status_2 = 13;
  if (this->drive_status_2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(13, this->drive_status_2(), output);
  }

  // optional fixed32 output_terminal_status = 14;
  if (this->output_terminal_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(14, this->output_terminal_status(), output);
  }

  // optional float frequency_reference_bias = 15;
  if (this->frequency_reference_bias() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->frequency_reference_bias(), output);
  }

  // optional uint32 dc_bus_voltage = 16;
  if (this->dc_bus_voltage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->dc_bus_voltage(), output);
  }

  // optional uint32 torque_monitor = 17;
  if (this->torque_monitor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->torque_monitor(), output);
  }

  // optional uint32 product_code_1 = 18;
  if (this->product_code_1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->product_code_1(), output);
  }

  // optional uint32 product_code_2 = 19;
  if (this->product_code_2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->product_code_2(), output);
  }

  // optional uint32 pid_feedback = 20;
  if (this->pid_feedback() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->pid_feedback(), output);
  }

  // optional uint32 pid_input = 21;
  if (this->pid_input() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->pid_input(), output);
  }

  // optional uint32 pid_output = 22;
  if (this->pid_output() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->pid_output(), output);
  }

  // optional fixed32 comm_error_log = 23;
  if (this->comm_error_log() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(23, this->comm_error_log(), output);
  }

  // optional uint32 output_freq_rpm = 24;
  if (this->output_freq_rpm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->output_freq_rpm(), output);
  }

  // optional float output_freq_percent = 25;
  if (this->output_freq_percent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(25, this->output_freq_percent(), output);
  }

  // optional fixed32 drive_status = 26;
  if (this->drive_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(26, this->drive_status(), output);
  }

  // optional fixed32 alarm_code = 27;
  if (this->alarm_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(27, this->alarm_code(), output);
  }

  // optional uint32 cumulative_op_time_upper_digits = 28;
  if (this->cumulative_op_time_upper_digits() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->cumulative_op_time_upper_digits(), output);
  }

  // optional uint32 cumulative_op_time_first_digit = 29;
  if (this->cumulative_op_time_first_digit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->cumulative_op_time_first_digit(), output);
  }

  // optional uint32 cumulative_fan_op_time_upper_digits = 30;
  if (this->cumulative_fan_op_time_upper_digits() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->cumulative_fan_op_time_upper_digits(), output);
  }

  // optional uint32 cumulative_fan_op_time_first_digit = 31;
  if (this->cumulative_fan_op_time_first_digit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->cumulative_fan_op_time_first_digit(), output);
  }

  // optional uint32 drive_rated_current = 32;
  if (this->drive_rated_current() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->drive_rated_current(), output);
  }

  // optional uint32 motor_speed_revs_minute = 33;
  if (this->motor_speed_revs_minute() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->motor_speed_revs_minute(), output);
  }

  // optional uint32 motor_speed_revs_percent = 34;
  if (this->motor_speed_revs_percent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->motor_speed_revs_percent(), output);
  }

  // optional uint32 option_code = 35;
  if (this->option_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(35, this->option_code(), output);
  }

  // optional uint32 ope_error_number = 36;
  if (this->ope_error_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(36, this->ope_error_number(), output);
  }

  // optional fixed32 fault_contents_3 = 37;
  if (this->fault_contents_3() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(37, this->fault_contents_3(), output);
  }

  // optional fixed32 fault_contents_4 = 38;
  if (this->fault_contents_4() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(38, this->fault_contents_4(), output);
  }

  // optional fixed32 fault_contents_5 = 39;
  if (this->fault_contents_5() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(39, this->fault_contents_5(), output);
  }

  // optional fixed32 fault_contents_6 = 40;
  if (this->fault_contents_6() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(40, this->fault_contents_6(), output);
  }

  // optional fixed32 fault_contents_7 = 41;
  if (this->fault_contents_7() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(41, this->fault_contents_7(), output);
  }

  // optional fixed32 alarm_contents_2 = 42;
  if (this->alarm_contents_2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(42, this->alarm_contents_2(), output);
  }

  // optional fixed32 alarm_contents_3 = 43;
  if (this->alarm_contents_3() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(43, this->alarm_contents_3(), output);
  }

  // optional fixed32 alarm_contents_4 = 44;
  if (this->alarm_contents_4() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(44, this->alarm_contents_4(), output);
  }

  // optional fixed32 alarm_contents_5 = 45;
  if (this->alarm_contents_5() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(45, this->alarm_contents_5(), output);
  }

  // optional fixed32 cpf_contents_1 = 46;
  if (this->cpf_contents_1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(46, this->cpf_contents_1(), output);
  }

  // optional fixed32 cpf_contents_2 = 47;
  if (this->cpf_contents_2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(47, this->cpf_contents_2(), output);
  }

  // optional fixed32 cpf_contents_3 = 48;
  if (this->cpf_contents_3() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(48, this->cpf_contents_3(), output);
  }

  // optional fixed32 option_card_fault_contents = 49;
  if (this->option_card_fault_contents() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(49, this->option_card_fault_contents(), output);
  }

  // optional uint32 output_current_2 = 50;
  if (this->output_current_2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(50, this->output_current_2(), output);
  }

  // optional float output_freq_hertz = 51;
  if (this->output_freq_hertz() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(51, this->output_freq_hertz(), output);
  }

  // optional float output_current_amps = 52;
  if (this->output_current_amps() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(52, this->output_current_amps(), output);
  }

  // @@protoc_insertion_point(serialize_end:analogic.ancp00.YaskawaV1000MonitorData)
}

::google::protobuf::uint8* YaskawaV1000MonitorData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analogic.ancp00.YaskawaV1000MonitorData)
  // optional fixed32 drive_status_1 = 1;
  if (this->drive_status_1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->drive_status_1(), target);
  }

  // optional fixed32 fault_contents_1 = 2;
  if (this->fault_contents_1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->fault_contents_1(), target);
  }

  // optional fixed32 data_link_status = 3;
  if (this->data_link_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->data_link_status(), target);
  }

  // optional uint32 freq_ref = 4;
  if (this->freq_ref() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->freq_ref(), target);
  }

  // optional uint32 output_freq = 5;
  if (this->output_freq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->output_freq(), target);
  }

  // optional float output_voltage_ref = 6;
  if (this->output_voltage_ref() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->output_voltage_ref(), target);
  }

  // optional uint32 output_current = 7;
  if (this->output_current() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->output_current(), target);
  }

  // optional uint32 output_power = 8;
  if (this->output_power() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->output_power(), target);
  }

  // optional uint32 torque_ref = 9;
  if (this->torque_ref() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->torque_ref(), target);
  }

  // optional fixed32 fault_contents_2 = 10;
  if (this->fault_contents_2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(10, this->fault_contents_2(), target);
  }

  // optional fixed32 alarm_contents_1 = 11;
  if (this->alarm_contents_1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(11, this->alarm_contents_1(), target);
  }

  // optional fixed32 input_terminal_status = 12;
  if (this->input_terminal_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(12, this->input_terminal_status(), target);
  }

  // optional fixed32 drive_status_2 = 13;
  if (this->drive_status_2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(13, this->drive_status_2(), target);
  }

  // optional fixed32 output_terminal_status = 14;
  if (this->output_terminal_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(14, this->output_terminal_status(), target);
  }

  // optional float frequency_reference_bias = 15;
  if (this->frequency_reference_bias() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->frequency_reference_bias(), target);
  }

  // optional uint32 dc_bus_voltage = 16;
  if (this->dc_bus_voltage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->dc_bus_voltage(), target);
  }

  // optional uint32 torque_monitor = 17;
  if (this->torque_monitor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->torque_monitor(), target);
  }

  // optional uint32 product_code_1 = 18;
  if (this->product_code_1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->product_code_1(), target);
  }

  // optional uint32 product_code_2 = 19;
  if (this->product_code_2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->product_code_2(), target);
  }

  // optional uint32 pid_feedback = 20;
  if (this->pid_feedback() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->pid_feedback(), target);
  }

  // optional uint32 pid_input = 21;
  if (this->pid_input() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->pid_input(), target);
  }

  // optional uint32 pid_output = 22;
  if (this->pid_output() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->pid_output(), target);
  }

  // optional fixed32 comm_error_log = 23;
  if (this->comm_error_log() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(23, this->comm_error_log(), target);
  }

  // optional uint32 output_freq_rpm = 24;
  if (this->output_freq_rpm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->output_freq_rpm(), target);
  }

  // optional float output_freq_percent = 25;
  if (this->output_freq_percent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(25, this->output_freq_percent(), target);
  }

  // optional fixed32 drive_status = 26;
  if (this->drive_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(26, this->drive_status(), target);
  }

  // optional fixed32 alarm_code = 27;
  if (this->alarm_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(27, this->alarm_code(), target);
  }

  // optional uint32 cumulative_op_time_upper_digits = 28;
  if (this->cumulative_op_time_upper_digits() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->cumulative_op_time_upper_digits(), target);
  }

  // optional uint32 cumulative_op_time_first_digit = 29;
  if (this->cumulative_op_time_first_digit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->cumulative_op_time_first_digit(), target);
  }

  // optional uint32 cumulative_fan_op_time_upper_digits = 30;
  if (this->cumulative_fan_op_time_upper_digits() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->cumulative_fan_op_time_upper_digits(), target);
  }

  // optional uint32 cumulative_fan_op_time_first_digit = 31;
  if (this->cumulative_fan_op_time_first_digit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->cumulative_fan_op_time_first_digit(), target);
  }

  // optional uint32 drive_rated_current = 32;
  if (this->drive_rated_current() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->drive_rated_current(), target);
  }

  // optional uint32 motor_speed_revs_minute = 33;
  if (this->motor_speed_revs_minute() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(33, this->motor_speed_revs_minute(), target);
  }

  // optional uint32 motor_speed_revs_percent = 34;
  if (this->motor_speed_revs_percent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(34, this->motor_speed_revs_percent(), target);
  }

  // optional uint32 option_code = 35;
  if (this->option_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(35, this->option_code(), target);
  }

  // optional uint32 ope_error_number = 36;
  if (this->ope_error_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(36, this->ope_error_number(), target);
  }

  // optional fixed32 fault_contents_3 = 37;
  if (this->fault_contents_3() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(37, this->fault_contents_3(), target);
  }

  // optional fixed32 fault_contents_4 = 38;
  if (this->fault_contents_4() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(38, this->fault_contents_4(), target);
  }

  // optional fixed32 fault_contents_5 = 39;
  if (this->fault_contents_5() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(39, this->fault_contents_5(), target);
  }

  // optional fixed32 fault_contents_6 = 40;
  if (this->fault_contents_6() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(40, this->fault_contents_6(), target);
  }

  // optional fixed32 fault_contents_7 = 41;
  if (this->fault_contents_7() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(41, this->fault_contents_7(), target);
  }

  // optional fixed32 alarm_contents_2 = 42;
  if (this->alarm_contents_2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(42, this->alarm_contents_2(), target);
  }

  // optional fixed32 alarm_contents_3 = 43;
  if (this->alarm_contents_3() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(43, this->alarm_contents_3(), target);
  }

  // optional fixed32 alarm_contents_4 = 44;
  if (this->alarm_contents_4() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(44, this->alarm_contents_4(), target);
  }

  // optional fixed32 alarm_contents_5 = 45;
  if (this->alarm_contents_5() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(45, this->alarm_contents_5(), target);
  }

  // optional fixed32 cpf_contents_1 = 46;
  if (this->cpf_contents_1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(46, this->cpf_contents_1(), target);
  }

  // optional fixed32 cpf_contents_2 = 47;
  if (this->cpf_contents_2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(47, this->cpf_contents_2(), target);
  }

  // optional fixed32 cpf_contents_3 = 48;
  if (this->cpf_contents_3() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(48, this->cpf_contents_3(), target);
  }

  // optional fixed32 option_card_fault_contents = 49;
  if (this->option_card_fault_contents() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(49, this->option_card_fault_contents(), target);
  }

  // optional uint32 output_current_2 = 50;
  if (this->output_current_2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(50, this->output_current_2(), target);
  }

  // optional float output_freq_hertz = 51;
  if (this->output_freq_hertz() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(51, this->output_freq_hertz(), target);
  }

  // optional float output_current_amps = 52;
  if (this->output_current_amps() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(52, this->output_current_amps(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:analogic.ancp00.YaskawaV1000MonitorData)
  return target;
}

int YaskawaV1000MonitorData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:analogic.ancp00.YaskawaV1000MonitorData)
  int total_size = 0;

  // optional fixed32 drive_status_1 = 1;
  if (this->drive_status_1() != 0) {
    total_size += 1 + 4;
  }

  // optional fixed32 fault_contents_1 = 2;
  if (this->fault_contents_1() != 0) {
    total_size += 1 + 4;
  }

  // optional fixed32 data_link_status = 3;
  if (this->data_link_status() != 0) {
    total_size += 1 + 4;
  }

  // optional uint32 freq_ref = 4;
  if (this->freq_ref() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->freq_ref());
  }

  // optional uint32 output_freq = 5;
  if (this->output_freq() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->output_freq());
  }

  // optional float output_voltage_ref = 6;
  if (this->output_voltage_ref() != 0) {
    total_size += 1 + 4;
  }

  // optional uint32 output_current = 7;
  if (this->output_current() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->output_current());
  }

  // optional uint32 output_power = 8;
  if (this->output_power() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->output_power());
  }

  // optional uint32 torque_ref = 9;
  if (this->torque_ref() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->torque_ref());
  }

  // optional fixed32 fault_contents_2 = 10;
  if (this->fault_contents_2() != 0) {
    total_size += 1 + 4;
  }

  // optional fixed32 alarm_contents_1 = 11;
  if (this->alarm_contents_1() != 0) {
    total_size += 1 + 4;
  }

  // optional fixed32 input_terminal_status = 12;
  if (this->input_terminal_status() != 0) {
    total_size += 1 + 4;
  }

  // optional fixed32 drive_status_2 = 13;
  if (this->drive_status_2() != 0) {
    total_size += 1 + 4;
  }

  // optional fixed32 output_terminal_status = 14;
  if (this->output_terminal_status() != 0) {
    total_size += 1 + 4;
  }

  // optional float frequency_reference_bias = 15;
  if (this->frequency_reference_bias() != 0) {
    total_size += 1 + 4;
  }

  // optional uint32 dc_bus_voltage = 16;
  if (this->dc_bus_voltage() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dc_bus_voltage());
  }

  // optional uint32 torque_monitor = 17;
  if (this->torque_monitor() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->torque_monitor());
  }

  // optional uint32 product_code_1 = 18;
  if (this->product_code_1() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->product_code_1());
  }

  // optional uint32 product_code_2 = 19;
  if (this->product_code_2() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->product_code_2());
  }

  // optional uint32 pid_feedback = 20;
  if (this->pid_feedback() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pid_feedback());
  }

  // optional uint32 pid_input = 21;
  if (this->pid_input() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pid_input());
  }

  // optional uint32 pid_output = 22;
  if (this->pid_output() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pid_output());
  }

  // optional fixed32 comm_error_log = 23;
  if (this->comm_error_log() != 0) {
    total_size += 2 + 4;
  }

  // optional uint32 output_freq_rpm = 24;
  if (this->output_freq_rpm() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->output_freq_rpm());
  }

  // optional float output_freq_percent = 25;
  if (this->output_freq_percent() != 0) {
    total_size += 2 + 4;
  }

  // optional fixed32 drive_status = 26;
  if (this->drive_status() != 0) {
    total_size += 2 + 4;
  }

  // optional fixed32 alarm_code = 27;
  if (this->alarm_code() != 0) {
    total_size += 2 + 4;
  }

  // optional uint32 cumulative_op_time_upper_digits = 28;
  if (this->cumulative_op_time_upper_digits() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cumulative_op_time_upper_digits());
  }

  // optional uint32 cumulative_op_time_first_digit = 29;
  if (this->cumulative_op_time_first_digit() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cumulative_op_time_first_digit());
  }

  // optional uint32 cumulative_fan_op_time_upper_digits = 30;
  if (this->cumulative_fan_op_time_upper_digits() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cumulative_fan_op_time_upper_digits());
  }

  // optional uint32 cumulative_fan_op_time_first_digit = 31;
  if (this->cumulative_fan_op_time_first_digit() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cumulative_fan_op_time_first_digit());
  }

  // optional uint32 drive_rated_current = 32;
  if (this->drive_rated_current() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->drive_rated_current());
  }

  // optional uint32 motor_speed_revs_minute = 33;
  if (this->motor_speed_revs_minute() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->motor_speed_revs_minute());
  }

  // optional uint32 motor_speed_revs_percent = 34;
  if (this->motor_speed_revs_percent() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->motor_speed_revs_percent());
  }

  // optional uint32 option_code = 35;
  if (this->option_code() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->option_code());
  }

  // optional uint32 ope_error_number = 36;
  if (this->ope_error_number() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ope_error_number());
  }

  // optional fixed32 fault_contents_3 = 37;
  if (this->fault_contents_3() != 0) {
    total_size += 2 + 4;
  }

  // optional fixed32 fault_contents_4 = 38;
  if (this->fault_contents_4() != 0) {
    total_size += 2 + 4;
  }

  // optional fixed32 fault_contents_5 = 39;
  if (this->fault_contents_5() != 0) {
    total_size += 2 + 4;
  }

  // optional fixed32 fault_contents_6 = 40;
  if (this->fault_contents_6() != 0) {
    total_size += 2 + 4;
  }

  // optional fixed32 fault_contents_7 = 41;
  if (this->fault_contents_7() != 0) {
    total_size += 2 + 4;
  }

  // optional fixed32 alarm_contents_2 = 42;
  if (this->alarm_contents_2() != 0) {
    total_size += 2 + 4;
  }

  // optional fixed32 alarm_contents_3 = 43;
  if (this->alarm_contents_3() != 0) {
    total_size += 2 + 4;
  }

  // optional fixed32 alarm_contents_4 = 44;
  if (this->alarm_contents_4() != 0) {
    total_size += 2 + 4;
  }

  // optional fixed32 alarm_contents_5 = 45;
  if (this->alarm_contents_5() != 0) {
    total_size += 2 + 4;
  }

  // optional fixed32 cpf_contents_1 = 46;
  if (this->cpf_contents_1() != 0) {
    total_size += 2 + 4;
  }

  // optional fixed32 cpf_contents_2 = 47;
  if (this->cpf_contents_2() != 0) {
    total_size += 2 + 4;
  }

  // optional fixed32 cpf_contents_3 = 48;
  if (this->cpf_contents_3() != 0) {
    total_size += 2 + 4;
  }

  // optional fixed32 option_card_fault_contents = 49;
  if (this->option_card_fault_contents() != 0) {
    total_size += 2 + 4;
  }

  // optional uint32 output_current_2 = 50;
  if (this->output_current_2() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->output_current_2());
  }

  // optional float output_freq_hertz = 51;
  if (this->output_freq_hertz() != 0) {
    total_size += 2 + 4;
  }

  // optional float output_current_amps = 52;
  if (this->output_current_amps() != 0) {
    total_size += 2 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YaskawaV1000MonitorData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analogic.ancp00.YaskawaV1000MonitorData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const YaskawaV1000MonitorData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const YaskawaV1000MonitorData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analogic.ancp00.YaskawaV1000MonitorData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analogic.ancp00.YaskawaV1000MonitorData)
    MergeFrom(*source);
  }
}

void YaskawaV1000MonitorData::MergeFrom(const YaskawaV1000MonitorData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analogic.ancp00.YaskawaV1000MonitorData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.drive_status_1() != 0) {
    set_drive_status_1(from.drive_status_1());
  }
  if (from.fault_contents_1() != 0) {
    set_fault_contents_1(from.fault_contents_1());
  }
  if (from.data_link_status() != 0) {
    set_data_link_status(from.data_link_status());
  }
  if (from.freq_ref() != 0) {
    set_freq_ref(from.freq_ref());
  }
  if (from.output_freq() != 0) {
    set_output_freq(from.output_freq());
  }
  if (from.output_voltage_ref() != 0) {
    set_output_voltage_ref(from.output_voltage_ref());
  }
  if (from.output_current() != 0) {
    set_output_current(from.output_current());
  }
  if (from.output_power() != 0) {
    set_output_power(from.output_power());
  }
  if (from.torque_ref() != 0) {
    set_torque_ref(from.torque_ref());
  }
  if (from.fault_contents_2() != 0) {
    set_fault_contents_2(from.fault_contents_2());
  }
  if (from.alarm_contents_1() != 0) {
    set_alarm_contents_1(from.alarm_contents_1());
  }
  if (from.input_terminal_status() != 0) {
    set_input_terminal_status(from.input_terminal_status());
  }
  if (from.drive_status_2() != 0) {
    set_drive_status_2(from.drive_status_2());
  }
  if (from.output_terminal_status() != 0) {
    set_output_terminal_status(from.output_terminal_status());
  }
  if (from.frequency_reference_bias() != 0) {
    set_frequency_reference_bias(from.frequency_reference_bias());
  }
  if (from.dc_bus_voltage() != 0) {
    set_dc_bus_voltage(from.dc_bus_voltage());
  }
  if (from.torque_monitor() != 0) {
    set_torque_monitor(from.torque_monitor());
  }
  if (from.product_code_1() != 0) {
    set_product_code_1(from.product_code_1());
  }
  if (from.product_code_2() != 0) {
    set_product_code_2(from.product_code_2());
  }
  if (from.pid_feedback() != 0) {
    set_pid_feedback(from.pid_feedback());
  }
  if (from.pid_input() != 0) {
    set_pid_input(from.pid_input());
  }
  if (from.pid_output() != 0) {
    set_pid_output(from.pid_output());
  }
  if (from.comm_error_log() != 0) {
    set_comm_error_log(from.comm_error_log());
  }
  if (from.output_freq_rpm() != 0) {
    set_output_freq_rpm(from.output_freq_rpm());
  }
  if (from.output_freq_percent() != 0) {
    set_output_freq_percent(from.output_freq_percent());
  }
  if (from.drive_status() != 0) {
    set_drive_status(from.drive_status());
  }
  if (from.alarm_code() != 0) {
    set_alarm_code(from.alarm_code());
  }
  if (from.cumulative_op_time_upper_digits() != 0) {
    set_cumulative_op_time_upper_digits(from.cumulative_op_time_upper_digits());
  }
  if (from.cumulative_op_time_first_digit() != 0) {
    set_cumulative_op_time_first_digit(from.cumulative_op_time_first_digit());
  }
  if (from.cumulative_fan_op_time_upper_digits() != 0) {
    set_cumulative_fan_op_time_upper_digits(from.cumulative_fan_op_time_upper_digits());
  }
  if (from.cumulative_fan_op_time_first_digit() != 0) {
    set_cumulative_fan_op_time_first_digit(from.cumulative_fan_op_time_first_digit());
  }
  if (from.drive_rated_current() != 0) {
    set_drive_rated_current(from.drive_rated_current());
  }
  if (from.motor_speed_revs_minute() != 0) {
    set_motor_speed_revs_minute(from.motor_speed_revs_minute());
  }
  if (from.motor_speed_revs_percent() != 0) {
    set_motor_speed_revs_percent(from.motor_speed_revs_percent());
  }
  if (from.option_code() != 0) {
    set_option_code(from.option_code());
  }
  if (from.ope_error_number() != 0) {
    set_ope_error_number(from.ope_error_number());
  }
  if (from.fault_contents_3() != 0) {
    set_fault_contents_3(from.fault_contents_3());
  }
  if (from.fault_contents_4() != 0) {
    set_fault_contents_4(from.fault_contents_4());
  }
  if (from.fault_contents_5() != 0) {
    set_fault_contents_5(from.fault_contents_5());
  }
  if (from.fault_contents_6() != 0) {
    set_fault_contents_6(from.fault_contents_6());
  }
  if (from.fault_contents_7() != 0) {
    set_fault_contents_7(from.fault_contents_7());
  }
  if (from.alarm_contents_2() != 0) {
    set_alarm_contents_2(from.alarm_contents_2());
  }
  if (from.alarm_contents_3() != 0) {
    set_alarm_contents_3(from.alarm_contents_3());
  }
  if (from.alarm_contents_4() != 0) {
    set_alarm_contents_4(from.alarm_contents_4());
  }
  if (from.alarm_contents_5() != 0) {
    set_alarm_contents_5(from.alarm_contents_5());
  }
  if (from.cpf_contents_1() != 0) {
    set_cpf_contents_1(from.cpf_contents_1());
  }
  if (from.cpf_contents_2() != 0) {
    set_cpf_contents_2(from.cpf_contents_2());
  }
  if (from.cpf_contents_3() != 0) {
    set_cpf_contents_3(from.cpf_contents_3());
  }
  if (from.option_card_fault_contents() != 0) {
    set_option_card_fault_contents(from.option_card_fault_contents());
  }
  if (from.output_current_2() != 0) {
    set_output_current_2(from.output_current_2());
  }
  if (from.output_freq_hertz() != 0) {
    set_output_freq_hertz(from.output_freq_hertz());
  }
  if (from.output_current_amps() != 0) {
    set_output_current_amps(from.output_current_amps());
  }
}

void YaskawaV1000MonitorData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analogic.ancp00.YaskawaV1000MonitorData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YaskawaV1000MonitorData::CopyFrom(const YaskawaV1000MonitorData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analogic.ancp00.YaskawaV1000MonitorData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YaskawaV1000MonitorData::IsInitialized() const {

  return true;
}

void YaskawaV1000MonitorData::Swap(YaskawaV1000MonitorData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YaskawaV1000MonitorData::InternalSwap(YaskawaV1000MonitorData* other) {
  std::swap(drive_status_1_, other->drive_status_1_);
  std::swap(fault_contents_1_, other->fault_contents_1_);
  std::swap(data_link_status_, other->data_link_status_);
  std::swap(freq_ref_, other->freq_ref_);
  std::swap(output_freq_, other->output_freq_);
  std::swap(output_voltage_ref_, other->output_voltage_ref_);
  std::swap(output_current_, other->output_current_);
  std::swap(output_power_, other->output_power_);
  std::swap(torque_ref_, other->torque_ref_);
  std::swap(fault_contents_2_, other->fault_contents_2_);
  std::swap(alarm_contents_1_, other->alarm_contents_1_);
  std::swap(input_terminal_status_, other->input_terminal_status_);
  std::swap(drive_status_2_, other->drive_status_2_);
  std::swap(output_terminal_status_, other->output_terminal_status_);
  std::swap(frequency_reference_bias_, other->frequency_reference_bias_);
  std::swap(dc_bus_voltage_, other->dc_bus_voltage_);
  std::swap(torque_monitor_, other->torque_monitor_);
  std::swap(product_code_1_, other->product_code_1_);
  std::swap(product_code_2_, other->product_code_2_);
  std::swap(pid_feedback_, other->pid_feedback_);
  std::swap(pid_input_, other->pid_input_);
  std::swap(pid_output_, other->pid_output_);
  std::swap(comm_error_log_, other->comm_error_log_);
  std::swap(output_freq_rpm_, other->output_freq_rpm_);
  std::swap(output_freq_percent_, other->output_freq_percent_);
  std::swap(drive_status_, other->drive_status_);
  std::swap(alarm_code_, other->alarm_code_);
  std::swap(cumulative_op_time_upper_digits_, other->cumulative_op_time_upper_digits_);
  std::swap(cumulative_op_time_first_digit_, other->cumulative_op_time_first_digit_);
  std::swap(cumulative_fan_op_time_upper_digits_, other->cumulative_fan_op_time_upper_digits_);
  std::swap(cumulative_fan_op_time_first_digit_, other->cumulative_fan_op_time_first_digit_);
  std::swap(drive_rated_current_, other->drive_rated_current_);
  std::swap(motor_speed_revs_minute_, other->motor_speed_revs_minute_);
  std::swap(motor_speed_revs_percent_, other->motor_speed_revs_percent_);
  std::swap(option_code_, other->option_code_);
  std::swap(ope_error_number_, other->ope_error_number_);
  std::swap(fault_contents_3_, other->fault_contents_3_);
  std::swap(fault_contents_4_, other->fault_contents_4_);
  std::swap(fault_contents_5_, other->fault_contents_5_);
  std::swap(fault_contents_6_, other->fault_contents_6_);
  std::swap(fault_contents_7_, other->fault_contents_7_);
  std::swap(alarm_contents_2_, other->alarm_contents_2_);
  std::swap(alarm_contents_3_, other->alarm_contents_3_);
  std::swap(alarm_contents_4_, other->alarm_contents_4_);
  std::swap(alarm_contents_5_, other->alarm_contents_5_);
  std::swap(cpf_contents_1_, other->cpf_contents_1_);
  std::swap(cpf_contents_2_, other->cpf_contents_2_);
  std::swap(cpf_contents_3_, other->cpf_contents_3_);
  std::swap(option_card_fault_contents_, other->option_card_fault_contents_);
  std::swap(output_current_2_, other->output_current_2_);
  std::swap(output_freq_hertz_, other->output_freq_hertz_);
  std::swap(output_current_amps_, other->output_current_amps_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata YaskawaV1000MonitorData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = YaskawaV1000MonitorData_descriptor_;
  metadata.reflection = YaskawaV1000MonitorData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YaskawaV1000MonitorData

// optional fixed32 drive_status_1 = 1;
void YaskawaV1000MonitorData::clear_drive_status_1() {
  drive_status_1_ = 0u;
}
 ::google::protobuf::uint32 YaskawaV1000MonitorData::drive_status_1() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.drive_status_1)
  return drive_status_1_;
}
 void YaskawaV1000MonitorData::set_drive_status_1(::google::protobuf::uint32 value) {
  
  drive_status_1_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.drive_status_1)
}

// optional fixed32 fault_contents_1 = 2;
void YaskawaV1000MonitorData::clear_fault_contents_1() {
  fault_contents_1_ = 0u;
}
 ::google::protobuf::uint32 YaskawaV1000MonitorData::fault_contents_1() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.fault_contents_1)
  return fault_contents_1_;
}
 void YaskawaV1000MonitorData::set_fault_contents_1(::google::protobuf::uint32 value) {
  
  fault_contents_1_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.fault_contents_1)
}

// optional fixed32 data_link_status = 3;
void YaskawaV1000MonitorData::clear_data_link_status() {
  data_link_status_ = 0u;
}
 ::google::protobuf::uint32 YaskawaV1000MonitorData::data_link_status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.data_link_status)
  return data_link_status_;
}
 void YaskawaV1000MonitorData::set_data_link_status(::google::protobuf::uint32 value) {
  
  data_link_status_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.data_link_status)
}

// optional uint32 freq_ref = 4;
void YaskawaV1000MonitorData::clear_freq_ref() {
  freq_ref_ = 0u;
}
 ::google::protobuf::uint32 YaskawaV1000MonitorData::freq_ref() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.freq_ref)
  return freq_ref_;
}
 void YaskawaV1000MonitorData::set_freq_ref(::google::protobuf::uint32 value) {
  
  freq_ref_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.freq_ref)
}

// optional uint32 output_freq = 5;
void YaskawaV1000MonitorData::clear_output_freq() {
  output_freq_ = 0u;
}
 ::google::protobuf::uint32 YaskawaV1000MonitorData::output_freq() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.output_freq)
  return output_freq_;
}
 void YaskawaV1000MonitorData::set_output_freq(::google::protobuf::uint32 value) {
  
  output_freq_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.output_freq)
}

// optional float output_voltage_ref = 6;
void YaskawaV1000MonitorData::clear_output_voltage_ref() {
  output_voltage_ref_ = 0;
}
 float YaskawaV1000MonitorData::output_voltage_ref() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.output_voltage_ref)
  return output_voltage_ref_;
}
 void YaskawaV1000MonitorData::set_output_voltage_ref(float value) {
  
  output_voltage_ref_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.output_voltage_ref)
}

// optional uint32 output_current = 7;
void YaskawaV1000MonitorData::clear_output_current() {
  output_current_ = 0u;
}
 ::google::protobuf::uint32 YaskawaV1000MonitorData::output_current() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.output_current)
  return output_current_;
}
 void YaskawaV1000MonitorData::set_output_current(::google::protobuf::uint32 value) {
  
  output_current_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.output_current)
}

// optional uint32 output_power = 8;
void YaskawaV1000MonitorData::clear_output_power() {
  output_power_ = 0u;
}
 ::google::protobuf::uint32 YaskawaV1000MonitorData::output_power() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.output_power)
  return output_power_;
}
 void YaskawaV1000MonitorData::set_output_power(::google::protobuf::uint32 value) {
  
  output_power_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.output_power)
}

// optional uint32 torque_ref = 9;
void YaskawaV1000MonitorData::clear_torque_ref() {
  torque_ref_ = 0u;
}
 ::google::protobuf::uint32 YaskawaV1000MonitorData::torque_ref() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.torque_ref)
  return torque_ref_;
}
 void YaskawaV1000MonitorData::set_torque_ref(::google::protobuf::uint32 value) {
  
  torque_ref_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.torque_ref)
}

// optional fixed32 fault_contents_2 = 10;
void YaskawaV1000MonitorData::clear_fault_contents_2() {
  fault_contents_2_ = 0u;
}
 ::google::protobuf::uint32 YaskawaV1000MonitorData::fault_contents_2() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.fault_contents_2)
  return fault_contents_2_;
}
 void YaskawaV1000MonitorData::set_fault_contents_2(::google::protobuf::uint32 value) {
  
  fault_contents_2_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.fault_contents_2)
}

// optional fixed32 alarm_contents_1 = 11;
void YaskawaV1000MonitorData::clear_alarm_contents_1() {
  alarm_contents_1_ = 0u;
}
 ::google::protobuf::uint32 YaskawaV1000MonitorData::alarm_contents_1() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.alarm_contents_1)
  return alarm_contents_1_;
}
 void YaskawaV1000MonitorData::set_alarm_contents_1(::google::protobuf::uint32 value) {
  
  alarm_contents_1_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.alarm_contents_1)
}

// optional fixed32 input_terminal_status = 12;
void YaskawaV1000MonitorData::clear_input_terminal_status() {
  input_terminal_status_ = 0u;
}
 ::google::protobuf::uint32 YaskawaV1000MonitorData::input_terminal_status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.input_terminal_status)
  return input_terminal_status_;
}
 void YaskawaV1000MonitorData::set_input_terminal_status(::google::protobuf::uint32 value) {
  
  input_terminal_status_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.input_terminal_status)
}

// optional fixed32 drive_status_2 = 13;
void YaskawaV1000MonitorData::clear_drive_status_2() {
  drive_status_2_ = 0u;
}
 ::google::protobuf::uint32 YaskawaV1000MonitorData::drive_status_2() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.drive_status_2)
  return drive_status_2_;
}
 void YaskawaV1000MonitorData::set_drive_status_2(::google::protobuf::uint32 value) {
  
  drive_status_2_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.drive_status_2)
}

// optional fixed32 output_terminal_status = 14;
void YaskawaV1000MonitorData::clear_output_terminal_status() {
  output_terminal_status_ = 0u;
}
 ::google::protobuf::uint32 YaskawaV1000MonitorData::output_terminal_status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.output_terminal_status)
  return output_terminal_status_;
}
 void YaskawaV1000MonitorData::set_output_terminal_status(::google::protobuf::uint32 value) {
  
  output_terminal_status_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.output_terminal_status)
}

// optional float frequency_reference_bias = 15;
void YaskawaV1000MonitorData::clear_frequency_reference_bias() {
  frequency_reference_bias_ = 0;
}
 float YaskawaV1000MonitorData::frequency_reference_bias() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.frequency_reference_bias)
  return frequency_reference_bias_;
}
 void YaskawaV1000MonitorData::set_frequency_reference_bias(float value) {
  
  frequency_reference_bias_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.frequency_reference_bias)
}

// optional uint32 dc_bus_voltage = 16;
void YaskawaV1000MonitorData::clear_dc_bus_voltage() {
  dc_bus_voltage_ = 0u;
}
 ::google::protobuf::uint32 YaskawaV1000MonitorData::dc_bus_voltage() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.dc_bus_voltage)
  return dc_bus_voltage_;
}
 void YaskawaV1000MonitorData::set_dc_bus_voltage(::google::protobuf::uint32 value) {
  
  dc_bus_voltage_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.dc_bus_voltage)
}

// optional uint32 torque_monitor = 17;
void YaskawaV1000MonitorData::clear_torque_monitor() {
  torque_monitor_ = 0u;
}
 ::google::protobuf::uint32 YaskawaV1000MonitorData::torque_monitor() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.torque_monitor)
  return torque_monitor_;
}
 void YaskawaV1000MonitorData::set_torque_monitor(::google::protobuf::uint32 value) {
  
  torque_monitor_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.torque_monitor)
}

// optional uint32 product_code_1 = 18;
void YaskawaV1000MonitorData::clear_product_code_1() {
  product_code_1_ = 0u;
}
 ::google::protobuf::uint32 YaskawaV1000MonitorData::product_code_1() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.product_code_1)
  return product_code_1_;
}
 void YaskawaV1000MonitorData::set_product_code_1(::google::protobuf::uint32 value) {
  
  product_code_1_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.product_code_1)
}

// optional uint32 product_code_2 = 19;
void YaskawaV1000MonitorData::clear_product_code_2() {
  product_code_2_ = 0u;
}
 ::google::protobuf::uint32 YaskawaV1000MonitorData::product_code_2() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.product_code_2)
  return product_code_2_;
}
 void YaskawaV1000MonitorData::set_product_code_2(::google::protobuf::uint32 value) {
  
  product_code_2_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.product_code_2)
}

// optional uint32 pid_feedback = 20;
void YaskawaV1000MonitorData::clear_pid_feedback() {
  pid_feedback_ = 0u;
}
 ::google::protobuf::uint32 YaskawaV1000MonitorData::pid_feedback() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.pid_feedback)
  return pid_feedback_;
}
 void YaskawaV1000MonitorData::set_pid_feedback(::google::protobuf::uint32 value) {
  
  pid_feedback_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.pid_feedback)
}

// optional uint32 pid_input = 21;
void YaskawaV1000MonitorData::clear_pid_input() {
  pid_input_ = 0u;
}
 ::google::protobuf::uint32 YaskawaV1000MonitorData::pid_input() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.pid_input)
  return pid_input_;
}
 void YaskawaV1000MonitorData::set_pid_input(::google::protobuf::uint32 value) {
  
  pid_input_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.pid_input)
}

// optional uint32 pid_output = 22;
void YaskawaV1000MonitorData::clear_pid_output() {
  pid_output_ = 0u;
}
 ::google::protobuf::uint32 YaskawaV1000MonitorData::pid_output() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.pid_output)
  return pid_output_;
}
 void YaskawaV1000MonitorData::set_pid_output(::google::protobuf::uint32 value) {
  
  pid_output_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.pid_output)
}

// optional fixed32 comm_error_log = 23;
void YaskawaV1000MonitorData::clear_comm_error_log() {
  comm_error_log_ = 0u;
}
 ::google::protobuf::uint32 YaskawaV1000MonitorData::comm_error_log() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.comm_error_log)
  return comm_error_log_;
}
 void YaskawaV1000MonitorData::set_comm_error_log(::google::protobuf::uint32 value) {
  
  comm_error_log_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.comm_error_log)
}

// optional uint32 output_freq_rpm = 24;
void YaskawaV1000MonitorData::clear_output_freq_rpm() {
  output_freq_rpm_ = 0u;
}
 ::google::protobuf::uint32 YaskawaV1000MonitorData::output_freq_rpm() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.output_freq_rpm)
  return output_freq_rpm_;
}
 void YaskawaV1000MonitorData::set_output_freq_rpm(::google::protobuf::uint32 value) {
  
  output_freq_rpm_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.output_freq_rpm)
}

// optional float output_freq_percent = 25;
void YaskawaV1000MonitorData::clear_output_freq_percent() {
  output_freq_percent_ = 0;
}
 float YaskawaV1000MonitorData::output_freq_percent() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.output_freq_percent)
  return output_freq_percent_;
}
 void YaskawaV1000MonitorData::set_output_freq_percent(float value) {
  
  output_freq_percent_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.output_freq_percent)
}

// optional fixed32 drive_status = 26;
void YaskawaV1000MonitorData::clear_drive_status() {
  drive_status_ = 0u;
}
 ::google::protobuf::uint32 YaskawaV1000MonitorData::drive_status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.drive_status)
  return drive_status_;
}
 void YaskawaV1000MonitorData::set_drive_status(::google::protobuf::uint32 value) {
  
  drive_status_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.drive_status)
}

// optional fixed32 alarm_code = 27;
void YaskawaV1000MonitorData::clear_alarm_code() {
  alarm_code_ = 0u;
}
 ::google::protobuf::uint32 YaskawaV1000MonitorData::alarm_code() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.alarm_code)
  return alarm_code_;
}
 void YaskawaV1000MonitorData::set_alarm_code(::google::protobuf::uint32 value) {
  
  alarm_code_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.alarm_code)
}

// optional uint32 cumulative_op_time_upper_digits = 28;
void YaskawaV1000MonitorData::clear_cumulative_op_time_upper_digits() {
  cumulative_op_time_upper_digits_ = 0u;
}
 ::google::protobuf::uint32 YaskawaV1000MonitorData::cumulative_op_time_upper_digits() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.cumulative_op_time_upper_digits)
  return cumulative_op_time_upper_digits_;
}
 void YaskawaV1000MonitorData::set_cumulative_op_time_upper_digits(::google::protobuf::uint32 value) {
  
  cumulative_op_time_upper_digits_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.cumulative_op_time_upper_digits)
}

// optional uint32 cumulative_op_time_first_digit = 29;
void YaskawaV1000MonitorData::clear_cumulative_op_time_first_digit() {
  cumulative_op_time_first_digit_ = 0u;
}
 ::google::protobuf::uint32 YaskawaV1000MonitorData::cumulative_op_time_first_digit() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.cumulative_op_time_first_digit)
  return cumulative_op_time_first_digit_;
}
 void YaskawaV1000MonitorData::set_cumulative_op_time_first_digit(::google::protobuf::uint32 value) {
  
  cumulative_op_time_first_digit_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.cumulative_op_time_first_digit)
}

// optional uint32 cumulative_fan_op_time_upper_digits = 30;
void YaskawaV1000MonitorData::clear_cumulative_fan_op_time_upper_digits() {
  cumulative_fan_op_time_upper_digits_ = 0u;
}
 ::google::protobuf::uint32 YaskawaV1000MonitorData::cumulative_fan_op_time_upper_digits() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.cumulative_fan_op_time_upper_digits)
  return cumulative_fan_op_time_upper_digits_;
}
 void YaskawaV1000MonitorData::set_cumulative_fan_op_time_upper_digits(::google::protobuf::uint32 value) {
  
  cumulative_fan_op_time_upper_digits_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.cumulative_fan_op_time_upper_digits)
}

// optional uint32 cumulative_fan_op_time_first_digit = 31;
void YaskawaV1000MonitorData::clear_cumulative_fan_op_time_first_digit() {
  cumulative_fan_op_time_first_digit_ = 0u;
}
 ::google::protobuf::uint32 YaskawaV1000MonitorData::cumulative_fan_op_time_first_digit() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.cumulative_fan_op_time_first_digit)
  return cumulative_fan_op_time_first_digit_;
}
 void YaskawaV1000MonitorData::set_cumulative_fan_op_time_first_digit(::google::protobuf::uint32 value) {
  
  cumulative_fan_op_time_first_digit_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.cumulative_fan_op_time_first_digit)
}

// optional uint32 drive_rated_current = 32;
void YaskawaV1000MonitorData::clear_drive_rated_current() {
  drive_rated_current_ = 0u;
}
 ::google::protobuf::uint32 YaskawaV1000MonitorData::drive_rated_current() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.drive_rated_current)
  return drive_rated_current_;
}
 void YaskawaV1000MonitorData::set_drive_rated_current(::google::protobuf::uint32 value) {
  
  drive_rated_current_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.drive_rated_current)
}

// optional uint32 motor_speed_revs_minute = 33;
void YaskawaV1000MonitorData::clear_motor_speed_revs_minute() {
  motor_speed_revs_minute_ = 0u;
}
 ::google::protobuf::uint32 YaskawaV1000MonitorData::motor_speed_revs_minute() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.motor_speed_revs_minute)
  return motor_speed_revs_minute_;
}
 void YaskawaV1000MonitorData::set_motor_speed_revs_minute(::google::protobuf::uint32 value) {
  
  motor_speed_revs_minute_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.motor_speed_revs_minute)
}

// optional uint32 motor_speed_revs_percent = 34;
void YaskawaV1000MonitorData::clear_motor_speed_revs_percent() {
  motor_speed_revs_percent_ = 0u;
}
 ::google::protobuf::uint32 YaskawaV1000MonitorData::motor_speed_revs_percent() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.motor_speed_revs_percent)
  return motor_speed_revs_percent_;
}
 void YaskawaV1000MonitorData::set_motor_speed_revs_percent(::google::protobuf::uint32 value) {
  
  motor_speed_revs_percent_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.motor_speed_revs_percent)
}

// optional uint32 option_code = 35;
void YaskawaV1000MonitorData::clear_option_code() {
  option_code_ = 0u;
}
 ::google::protobuf::uint32 YaskawaV1000MonitorData::option_code() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.option_code)
  return option_code_;
}
 void YaskawaV1000MonitorData::set_option_code(::google::protobuf::uint32 value) {
  
  option_code_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.option_code)
}

// optional uint32 ope_error_number = 36;
void YaskawaV1000MonitorData::clear_ope_error_number() {
  ope_error_number_ = 0u;
}
 ::google::protobuf::uint32 YaskawaV1000MonitorData::ope_error_number() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.ope_error_number)
  return ope_error_number_;
}
 void YaskawaV1000MonitorData::set_ope_error_number(::google::protobuf::uint32 value) {
  
  ope_error_number_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.ope_error_number)
}

// optional fixed32 fault_contents_3 = 37;
void YaskawaV1000MonitorData::clear_fault_contents_3() {
  fault_contents_3_ = 0u;
}
 ::google::protobuf::uint32 YaskawaV1000MonitorData::fault_contents_3() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.fault_contents_3)
  return fault_contents_3_;
}
 void YaskawaV1000MonitorData::set_fault_contents_3(::google::protobuf::uint32 value) {
  
  fault_contents_3_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.fault_contents_3)
}

// optional fixed32 fault_contents_4 = 38;
void YaskawaV1000MonitorData::clear_fault_contents_4() {
  fault_contents_4_ = 0u;
}
 ::google::protobuf::uint32 YaskawaV1000MonitorData::fault_contents_4() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.fault_contents_4)
  return fault_contents_4_;
}
 void YaskawaV1000MonitorData::set_fault_contents_4(::google::protobuf::uint32 value) {
  
  fault_contents_4_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.fault_contents_4)
}

// optional fixed32 fault_contents_5 = 39;
void YaskawaV1000MonitorData::clear_fault_contents_5() {
  fault_contents_5_ = 0u;
}
 ::google::protobuf::uint32 YaskawaV1000MonitorData::fault_contents_5() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.fault_contents_5)
  return fault_contents_5_;
}
 void YaskawaV1000MonitorData::set_fault_contents_5(::google::protobuf::uint32 value) {
  
  fault_contents_5_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.fault_contents_5)
}

// optional fixed32 fault_contents_6 = 40;
void YaskawaV1000MonitorData::clear_fault_contents_6() {
  fault_contents_6_ = 0u;
}
 ::google::protobuf::uint32 YaskawaV1000MonitorData::fault_contents_6() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.fault_contents_6)
  return fault_contents_6_;
}
 void YaskawaV1000MonitorData::set_fault_contents_6(::google::protobuf::uint32 value) {
  
  fault_contents_6_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.fault_contents_6)
}

// optional fixed32 fault_contents_7 = 41;
void YaskawaV1000MonitorData::clear_fault_contents_7() {
  fault_contents_7_ = 0u;
}
 ::google::protobuf::uint32 YaskawaV1000MonitorData::fault_contents_7() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.fault_contents_7)
  return fault_contents_7_;
}
 void YaskawaV1000MonitorData::set_fault_contents_7(::google::protobuf::uint32 value) {
  
  fault_contents_7_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.fault_contents_7)
}

// optional fixed32 alarm_contents_2 = 42;
void YaskawaV1000MonitorData::clear_alarm_contents_2() {
  alarm_contents_2_ = 0u;
}
 ::google::protobuf::uint32 YaskawaV1000MonitorData::alarm_contents_2() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.alarm_contents_2)
  return alarm_contents_2_;
}
 void YaskawaV1000MonitorData::set_alarm_contents_2(::google::protobuf::uint32 value) {
  
  alarm_contents_2_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.alarm_contents_2)
}

// optional fixed32 alarm_contents_3 = 43;
void YaskawaV1000MonitorData::clear_alarm_contents_3() {
  alarm_contents_3_ = 0u;
}
 ::google::protobuf::uint32 YaskawaV1000MonitorData::alarm_contents_3() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.alarm_contents_3)
  return alarm_contents_3_;
}
 void YaskawaV1000MonitorData::set_alarm_contents_3(::google::protobuf::uint32 value) {
  
  alarm_contents_3_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.alarm_contents_3)
}

// optional fixed32 alarm_contents_4 = 44;
void YaskawaV1000MonitorData::clear_alarm_contents_4() {
  alarm_contents_4_ = 0u;
}
 ::google::protobuf::uint32 YaskawaV1000MonitorData::alarm_contents_4() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.alarm_contents_4)
  return alarm_contents_4_;
}
 void YaskawaV1000MonitorData::set_alarm_contents_4(::google::protobuf::uint32 value) {
  
  alarm_contents_4_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.alarm_contents_4)
}

// optional fixed32 alarm_contents_5 = 45;
void YaskawaV1000MonitorData::clear_alarm_contents_5() {
  alarm_contents_5_ = 0u;
}
 ::google::protobuf::uint32 YaskawaV1000MonitorData::alarm_contents_5() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.alarm_contents_5)
  return alarm_contents_5_;
}
 void YaskawaV1000MonitorData::set_alarm_contents_5(::google::protobuf::uint32 value) {
  
  alarm_contents_5_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.alarm_contents_5)
}

// optional fixed32 cpf_contents_1 = 46;
void YaskawaV1000MonitorData::clear_cpf_contents_1() {
  cpf_contents_1_ = 0u;
}
 ::google::protobuf::uint32 YaskawaV1000MonitorData::cpf_contents_1() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.cpf_contents_1)
  return cpf_contents_1_;
}
 void YaskawaV1000MonitorData::set_cpf_contents_1(::google::protobuf::uint32 value) {
  
  cpf_contents_1_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.cpf_contents_1)
}

// optional fixed32 cpf_contents_2 = 47;
void YaskawaV1000MonitorData::clear_cpf_contents_2() {
  cpf_contents_2_ = 0u;
}
 ::google::protobuf::uint32 YaskawaV1000MonitorData::cpf_contents_2() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.cpf_contents_2)
  return cpf_contents_2_;
}
 void YaskawaV1000MonitorData::set_cpf_contents_2(::google::protobuf::uint32 value) {
  
  cpf_contents_2_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.cpf_contents_2)
}

// optional fixed32 cpf_contents_3 = 48;
void YaskawaV1000MonitorData::clear_cpf_contents_3() {
  cpf_contents_3_ = 0u;
}
 ::google::protobuf::uint32 YaskawaV1000MonitorData::cpf_contents_3() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.cpf_contents_3)
  return cpf_contents_3_;
}
 void YaskawaV1000MonitorData::set_cpf_contents_3(::google::protobuf::uint32 value) {
  
  cpf_contents_3_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.cpf_contents_3)
}

// optional fixed32 option_card_fault_contents = 49;
void YaskawaV1000MonitorData::clear_option_card_fault_contents() {
  option_card_fault_contents_ = 0u;
}
 ::google::protobuf::uint32 YaskawaV1000MonitorData::option_card_fault_contents() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.option_card_fault_contents)
  return option_card_fault_contents_;
}
 void YaskawaV1000MonitorData::set_option_card_fault_contents(::google::protobuf::uint32 value) {
  
  option_card_fault_contents_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.option_card_fault_contents)
}

// optional uint32 output_current_2 = 50;
void YaskawaV1000MonitorData::clear_output_current_2() {
  output_current_2_ = 0u;
}
 ::google::protobuf::uint32 YaskawaV1000MonitorData::output_current_2() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.output_current_2)
  return output_current_2_;
}
 void YaskawaV1000MonitorData::set_output_current_2(::google::protobuf::uint32 value) {
  
  output_current_2_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.output_current_2)
}

// optional float output_freq_hertz = 51;
void YaskawaV1000MonitorData::clear_output_freq_hertz() {
  output_freq_hertz_ = 0;
}
 float YaskawaV1000MonitorData::output_freq_hertz() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.output_freq_hertz)
  return output_freq_hertz_;
}
 void YaskawaV1000MonitorData::set_output_freq_hertz(float value) {
  
  output_freq_hertz_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.output_freq_hertz)
}

// optional float output_current_amps = 52;
void YaskawaV1000MonitorData::clear_output_current_amps() {
  output_current_amps_ = 0;
}
 float YaskawaV1000MonitorData::output_current_amps() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.output_current_amps)
  return output_current_amps_;
}
 void YaskawaV1000MonitorData::set_output_current_amps(float value) {
  
  output_current_amps_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.output_current_amps)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ancp00
}  // namespace analogic

// @@protoc_insertion_point(global_scope)
