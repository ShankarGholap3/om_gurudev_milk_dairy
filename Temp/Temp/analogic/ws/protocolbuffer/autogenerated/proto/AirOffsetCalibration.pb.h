// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/AirOffsetCalibration.proto

#ifndef PROTOBUF_proto_2fAirOffsetCalibration_2eproto__INCLUDED
#define PROTOBUF_proto_2fAirOffsetCalibration_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace analogic {
namespace ancp00 {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_proto_2fAirOffsetCalibration_2eproto();
void protobuf_AssignDesc_proto_2fAirOffsetCalibration_2eproto();
void protobuf_ShutdownFile_proto_2fAirOffsetCalibration_2eproto();

class AirOffsetCalExtReqMsg;
class AirOffsetCalServerMsg;
class AirOffsetDynCalStatusMsg;

enum AirOffsetCalExtReqMsg_AIR_OFFSET_CAL_REQ_MSG_ID {
  AirOffsetCalExtReqMsg_AIR_OFFSET_CAL_REQ_MSG_ID_NOT_USED = 0,
  AirOffsetCalExtReqMsg_AIR_OFFSET_CAL_REQ_MSG_ID_DYNAMIC_CAL_WANT_AIR_REQ = 1,
  AirOffsetCalExtReqMsg_AIR_OFFSET_CAL_REQ_MSG_ID_DYNAMIC_CAL_ASK_AIR_REQ = 2,
  AirOffsetCalExtReqMsg_AIR_OFFSET_CAL_REQ_MSG_ID_DYNAMIC_CAL_NEED_AIR_REQ = 3,
  AirOffsetCalExtReqMsg_AIR_OFFSET_CAL_REQ_MSG_ID_DYNAMIC_CAL_WANT_OFFSET_REQ = 4,
  AirOffsetCalExtReqMsg_AIR_OFFSET_CAL_REQ_MSG_ID_DYNAMIC_CAL_ASK_OFFSET_REQ = 5,
  AirOffsetCalExtReqMsg_AIR_OFFSET_CAL_REQ_MSG_ID_DYNAMIC_CAL_NEED_OFFSET_REQ = 6,
  AirOffsetCalExtReqMsg_AIR_OFFSET_CAL_REQ_MSG_ID_AirOffsetCalExtReqMsg_AIR_OFFSET_CAL_REQ_MSG_ID_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  AirOffsetCalExtReqMsg_AIR_OFFSET_CAL_REQ_MSG_ID_AirOffsetCalExtReqMsg_AIR_OFFSET_CAL_REQ_MSG_ID_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool AirOffsetCalExtReqMsg_AIR_OFFSET_CAL_REQ_MSG_ID_IsValid(int value);
const AirOffsetCalExtReqMsg_AIR_OFFSET_CAL_REQ_MSG_ID AirOffsetCalExtReqMsg_AIR_OFFSET_CAL_REQ_MSG_ID_AIR_OFFSET_CAL_REQ_MSG_ID_MIN = AirOffsetCalExtReqMsg_AIR_OFFSET_CAL_REQ_MSG_ID_NOT_USED;
const AirOffsetCalExtReqMsg_AIR_OFFSET_CAL_REQ_MSG_ID AirOffsetCalExtReqMsg_AIR_OFFSET_CAL_REQ_MSG_ID_AIR_OFFSET_CAL_REQ_MSG_ID_MAX = AirOffsetCalExtReqMsg_AIR_OFFSET_CAL_REQ_MSG_ID_DYNAMIC_CAL_NEED_OFFSET_REQ;
const int AirOffsetCalExtReqMsg_AIR_OFFSET_CAL_REQ_MSG_ID_AIR_OFFSET_CAL_REQ_MSG_ID_ARRAYSIZE = AirOffsetCalExtReqMsg_AIR_OFFSET_CAL_REQ_MSG_ID_AIR_OFFSET_CAL_REQ_MSG_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* AirOffsetCalExtReqMsg_AIR_OFFSET_CAL_REQ_MSG_ID_descriptor();
inline const ::std::string& AirOffsetCalExtReqMsg_AIR_OFFSET_CAL_REQ_MSG_ID_Name(AirOffsetCalExtReqMsg_AIR_OFFSET_CAL_REQ_MSG_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    AirOffsetCalExtReqMsg_AIR_OFFSET_CAL_REQ_MSG_ID_descriptor(), value);
}
inline bool AirOffsetCalExtReqMsg_AIR_OFFSET_CAL_REQ_MSG_ID_Parse(
    const ::std::string& name, AirOffsetCalExtReqMsg_AIR_OFFSET_CAL_REQ_MSG_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AirOffsetCalExtReqMsg_AIR_OFFSET_CAL_REQ_MSG_ID>(
    AirOffsetCalExtReqMsg_AIR_OFFSET_CAL_REQ_MSG_ID_descriptor(), name, value);
}
enum AirOffsetCalServerMsg_CAL_SERVER_MSG_ID {
  AirOffsetCalServerMsg_CAL_SERVER_MSG_ID_AIR_CAL_REQ = 0,
  AirOffsetCalServerMsg_CAL_SERVER_MSG_ID_OFFSET_CAL_REQ = 1,
  AirOffsetCalServerMsg_CAL_SERVER_MSG_ID_AIR_CAL_NZC_REQ = 2,
  AirOffsetCalServerMsg_CAL_SERVER_MSG_ID_SCANNING = 3,
  AirOffsetCalServerMsg_CAL_SERVER_MSG_ID_NOT_SCANNING = 4,
  AirOffsetCalServerMsg_CAL_SERVER_MSG_ID_DYNAMIC_AIR_CAL_REQ = 5,
  AirOffsetCalServerMsg_CAL_SERVER_MSG_ID_DYNAMIC_OFFSET_CAL_REQ = 6,
  AirOffsetCalServerMsg_CAL_SERVER_MSG_ID_DYNAMIC_AIR_CAL_NZC_REQ = 7,
  AirOffsetCalServerMsg_CAL_SERVER_MSG_ID_AIR_CAL_RESET = 8,
  AirOffsetCalServerMsg_CAL_SERVER_MSG_ID_OFFSET_CAL_RESET = 9,
  AirOffsetCalServerMsg_CAL_SERVER_MSG_ID_AirOffsetCalServerMsg_CAL_SERVER_MSG_ID_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  AirOffsetCalServerMsg_CAL_SERVER_MSG_ID_AirOffsetCalServerMsg_CAL_SERVER_MSG_ID_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool AirOffsetCalServerMsg_CAL_SERVER_MSG_ID_IsValid(int value);
const AirOffsetCalServerMsg_CAL_SERVER_MSG_ID AirOffsetCalServerMsg_CAL_SERVER_MSG_ID_CAL_SERVER_MSG_ID_MIN = AirOffsetCalServerMsg_CAL_SERVER_MSG_ID_AIR_CAL_REQ;
const AirOffsetCalServerMsg_CAL_SERVER_MSG_ID AirOffsetCalServerMsg_CAL_SERVER_MSG_ID_CAL_SERVER_MSG_ID_MAX = AirOffsetCalServerMsg_CAL_SERVER_MSG_ID_OFFSET_CAL_RESET;
const int AirOffsetCalServerMsg_CAL_SERVER_MSG_ID_CAL_SERVER_MSG_ID_ARRAYSIZE = AirOffsetCalServerMsg_CAL_SERVER_MSG_ID_CAL_SERVER_MSG_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* AirOffsetCalServerMsg_CAL_SERVER_MSG_ID_descriptor();
inline const ::std::string& AirOffsetCalServerMsg_CAL_SERVER_MSG_ID_Name(AirOffsetCalServerMsg_CAL_SERVER_MSG_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    AirOffsetCalServerMsg_CAL_SERVER_MSG_ID_descriptor(), value);
}
inline bool AirOffsetCalServerMsg_CAL_SERVER_MSG_ID_Parse(
    const ::std::string& name, AirOffsetCalServerMsg_CAL_SERVER_MSG_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AirOffsetCalServerMsg_CAL_SERVER_MSG_ID>(
    AirOffsetCalServerMsg_CAL_SERVER_MSG_ID_descriptor(), name, value);
}
enum AirOffsetDynCalStatusMsg_DYN_CAL_STATUS_ID {
  AirOffsetDynCalStatusMsg_DYN_CAL_STATUS_ID_AIR_CAL_SUCCESS = 0,
  AirOffsetDynCalStatusMsg_DYN_CAL_STATUS_ID_AIR_CAL_INCOMPLETE = 1,
  AirOffsetDynCalStatusMsg_DYN_CAL_STATUS_ID_AIR_CAL_FAILURE = 2,
  AirOffsetDynCalStatusMsg_DYN_CAL_STATUS_ID_AIR_CAL_ZIPPER_IN_BEAM = 3,
  AirOffsetDynCalStatusMsg_DYN_CAL_STATUS_ID_OFFSET_CAL_SUCCESS = 4,
  AirOffsetDynCalStatusMsg_DYN_CAL_STATUS_ID_OFFSET_CAL_INCOMPLETE = 5,
  AirOffsetDynCalStatusMsg_DYN_CAL_STATUS_ID_OFFSET_CAL_FAILURE = 6,
  AirOffsetDynCalStatusMsg_DYN_CAL_STATUS_ID_AirOffsetDynCalStatusMsg_DYN_CAL_STATUS_ID_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  AirOffsetDynCalStatusMsg_DYN_CAL_STATUS_ID_AirOffsetDynCalStatusMsg_DYN_CAL_STATUS_ID_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool AirOffsetDynCalStatusMsg_DYN_CAL_STATUS_ID_IsValid(int value);
const AirOffsetDynCalStatusMsg_DYN_CAL_STATUS_ID AirOffsetDynCalStatusMsg_DYN_CAL_STATUS_ID_DYN_CAL_STATUS_ID_MIN = AirOffsetDynCalStatusMsg_DYN_CAL_STATUS_ID_AIR_CAL_SUCCESS;
const AirOffsetDynCalStatusMsg_DYN_CAL_STATUS_ID AirOffsetDynCalStatusMsg_DYN_CAL_STATUS_ID_DYN_CAL_STATUS_ID_MAX = AirOffsetDynCalStatusMsg_DYN_CAL_STATUS_ID_OFFSET_CAL_FAILURE;
const int AirOffsetDynCalStatusMsg_DYN_CAL_STATUS_ID_DYN_CAL_STATUS_ID_ARRAYSIZE = AirOffsetDynCalStatusMsg_DYN_CAL_STATUS_ID_DYN_CAL_STATUS_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* AirOffsetDynCalStatusMsg_DYN_CAL_STATUS_ID_descriptor();
inline const ::std::string& AirOffsetDynCalStatusMsg_DYN_CAL_STATUS_ID_Name(AirOffsetDynCalStatusMsg_DYN_CAL_STATUS_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    AirOffsetDynCalStatusMsg_DYN_CAL_STATUS_ID_descriptor(), value);
}
inline bool AirOffsetDynCalStatusMsg_DYN_CAL_STATUS_ID_Parse(
    const ::std::string& name, AirOffsetDynCalStatusMsg_DYN_CAL_STATUS_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AirOffsetDynCalStatusMsg_DYN_CAL_STATUS_ID>(
    AirOffsetDynCalStatusMsg_DYN_CAL_STATUS_ID_descriptor(), name, value);
}
// ===================================================================

class AirOffsetCalExtReqMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:analogic.ancp00.AirOffsetCalExtReqMsg) */ {
 public:
  AirOffsetCalExtReqMsg();
  virtual ~AirOffsetCalExtReqMsg();

  AirOffsetCalExtReqMsg(const AirOffsetCalExtReqMsg& from);

  inline AirOffsetCalExtReqMsg& operator=(const AirOffsetCalExtReqMsg& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AirOffsetCalExtReqMsg& default_instance();

  void Swap(AirOffsetCalExtReqMsg* other);

  // implements Message ----------------------------------------------

  inline AirOffsetCalExtReqMsg* New() const { return New(NULL); }

  AirOffsetCalExtReqMsg* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AirOffsetCalExtReqMsg& from);
  void MergeFrom(const AirOffsetCalExtReqMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AirOffsetCalExtReqMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef AirOffsetCalExtReqMsg_AIR_OFFSET_CAL_REQ_MSG_ID AIR_OFFSET_CAL_REQ_MSG_ID;
  static const AIR_OFFSET_CAL_REQ_MSG_ID NOT_USED =
    AirOffsetCalExtReqMsg_AIR_OFFSET_CAL_REQ_MSG_ID_NOT_USED;
  static const AIR_OFFSET_CAL_REQ_MSG_ID DYNAMIC_CAL_WANT_AIR_REQ =
    AirOffsetCalExtReqMsg_AIR_OFFSET_CAL_REQ_MSG_ID_DYNAMIC_CAL_WANT_AIR_REQ;
  static const AIR_OFFSET_CAL_REQ_MSG_ID DYNAMIC_CAL_ASK_AIR_REQ =
    AirOffsetCalExtReqMsg_AIR_OFFSET_CAL_REQ_MSG_ID_DYNAMIC_CAL_ASK_AIR_REQ;
  static const AIR_OFFSET_CAL_REQ_MSG_ID DYNAMIC_CAL_NEED_AIR_REQ =
    AirOffsetCalExtReqMsg_AIR_OFFSET_CAL_REQ_MSG_ID_DYNAMIC_CAL_NEED_AIR_REQ;
  static const AIR_OFFSET_CAL_REQ_MSG_ID DYNAMIC_CAL_WANT_OFFSET_REQ =
    AirOffsetCalExtReqMsg_AIR_OFFSET_CAL_REQ_MSG_ID_DYNAMIC_CAL_WANT_OFFSET_REQ;
  static const AIR_OFFSET_CAL_REQ_MSG_ID DYNAMIC_CAL_ASK_OFFSET_REQ =
    AirOffsetCalExtReqMsg_AIR_OFFSET_CAL_REQ_MSG_ID_DYNAMIC_CAL_ASK_OFFSET_REQ;
  static const AIR_OFFSET_CAL_REQ_MSG_ID DYNAMIC_CAL_NEED_OFFSET_REQ =
    AirOffsetCalExtReqMsg_AIR_OFFSET_CAL_REQ_MSG_ID_DYNAMIC_CAL_NEED_OFFSET_REQ;
  static inline bool AIR_OFFSET_CAL_REQ_MSG_ID_IsValid(int value) {
    return AirOffsetCalExtReqMsg_AIR_OFFSET_CAL_REQ_MSG_ID_IsValid(value);
  }
  static const AIR_OFFSET_CAL_REQ_MSG_ID AIR_OFFSET_CAL_REQ_MSG_ID_MIN =
    AirOffsetCalExtReqMsg_AIR_OFFSET_CAL_REQ_MSG_ID_AIR_OFFSET_CAL_REQ_MSG_ID_MIN;
  static const AIR_OFFSET_CAL_REQ_MSG_ID AIR_OFFSET_CAL_REQ_MSG_ID_MAX =
    AirOffsetCalExtReqMsg_AIR_OFFSET_CAL_REQ_MSG_ID_AIR_OFFSET_CAL_REQ_MSG_ID_MAX;
  static const int AIR_OFFSET_CAL_REQ_MSG_ID_ARRAYSIZE =
    AirOffsetCalExtReqMsg_AIR_OFFSET_CAL_REQ_MSG_ID_AIR_OFFSET_CAL_REQ_MSG_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  AIR_OFFSET_CAL_REQ_MSG_ID_descriptor() {
    return AirOffsetCalExtReqMsg_AIR_OFFSET_CAL_REQ_MSG_ID_descriptor();
  }
  static inline const ::std::string& AIR_OFFSET_CAL_REQ_MSG_ID_Name(AIR_OFFSET_CAL_REQ_MSG_ID value) {
    return AirOffsetCalExtReqMsg_AIR_OFFSET_CAL_REQ_MSG_ID_Name(value);
  }
  static inline bool AIR_OFFSET_CAL_REQ_MSG_ID_Parse(const ::std::string& name,
      AIR_OFFSET_CAL_REQ_MSG_ID* value) {
    return AirOffsetCalExtReqMsg_AIR_OFFSET_CAL_REQ_MSG_ID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .analogic.ancp00.AirOffsetCalExtReqMsg.AIR_OFFSET_CAL_REQ_MSG_ID msg_id = 1;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 1;
  ::analogic::ancp00::AirOffsetCalExtReqMsg_AIR_OFFSET_CAL_REQ_MSG_ID msg_id() const;
  void set_msg_id(::analogic::ancp00::AirOffsetCalExtReqMsg_AIR_OFFSET_CAL_REQ_MSG_ID value);

  // optional string msg_data = 2;
  void clear_msg_data();
  static const int kMsgDataFieldNumber = 2;
  const ::std::string& msg_data() const;
  void set_msg_data(const ::std::string& value);
  void set_msg_data(const char* value);
  void set_msg_data(const char* value, size_t size);
  ::std::string* mutable_msg_data();
  ::std::string* release_msg_data();
  void set_allocated_msg_data(::std::string* msg_data);

  // @@protoc_insertion_point(class_scope:analogic.ancp00.AirOffsetCalExtReqMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr msg_data_;
  int msg_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_proto_2fAirOffsetCalibration_2eproto();
  friend void protobuf_AssignDesc_proto_2fAirOffsetCalibration_2eproto();
  friend void protobuf_ShutdownFile_proto_2fAirOffsetCalibration_2eproto();

  void InitAsDefaultInstance();
  static AirOffsetCalExtReqMsg* default_instance_;
};
// -------------------------------------------------------------------

class AirOffsetCalServerMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:analogic.ancp00.AirOffsetCalServerMsg) */ {
 public:
  AirOffsetCalServerMsg();
  virtual ~AirOffsetCalServerMsg();

  AirOffsetCalServerMsg(const AirOffsetCalServerMsg& from);

  inline AirOffsetCalServerMsg& operator=(const AirOffsetCalServerMsg& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AirOffsetCalServerMsg& default_instance();

  void Swap(AirOffsetCalServerMsg* other);

  // implements Message ----------------------------------------------

  inline AirOffsetCalServerMsg* New() const { return New(NULL); }

  AirOffsetCalServerMsg* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AirOffsetCalServerMsg& from);
  void MergeFrom(const AirOffsetCalServerMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AirOffsetCalServerMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef AirOffsetCalServerMsg_CAL_SERVER_MSG_ID CAL_SERVER_MSG_ID;
  static const CAL_SERVER_MSG_ID AIR_CAL_REQ =
    AirOffsetCalServerMsg_CAL_SERVER_MSG_ID_AIR_CAL_REQ;
  static const CAL_SERVER_MSG_ID OFFSET_CAL_REQ =
    AirOffsetCalServerMsg_CAL_SERVER_MSG_ID_OFFSET_CAL_REQ;
  static const CAL_SERVER_MSG_ID AIR_CAL_NZC_REQ =
    AirOffsetCalServerMsg_CAL_SERVER_MSG_ID_AIR_CAL_NZC_REQ;
  static const CAL_SERVER_MSG_ID SCANNING =
    AirOffsetCalServerMsg_CAL_SERVER_MSG_ID_SCANNING;
  static const CAL_SERVER_MSG_ID NOT_SCANNING =
    AirOffsetCalServerMsg_CAL_SERVER_MSG_ID_NOT_SCANNING;
  static const CAL_SERVER_MSG_ID DYNAMIC_AIR_CAL_REQ =
    AirOffsetCalServerMsg_CAL_SERVER_MSG_ID_DYNAMIC_AIR_CAL_REQ;
  static const CAL_SERVER_MSG_ID DYNAMIC_OFFSET_CAL_REQ =
    AirOffsetCalServerMsg_CAL_SERVER_MSG_ID_DYNAMIC_OFFSET_CAL_REQ;
  static const CAL_SERVER_MSG_ID DYNAMIC_AIR_CAL_NZC_REQ =
    AirOffsetCalServerMsg_CAL_SERVER_MSG_ID_DYNAMIC_AIR_CAL_NZC_REQ;
  static const CAL_SERVER_MSG_ID AIR_CAL_RESET =
    AirOffsetCalServerMsg_CAL_SERVER_MSG_ID_AIR_CAL_RESET;
  static const CAL_SERVER_MSG_ID OFFSET_CAL_RESET =
    AirOffsetCalServerMsg_CAL_SERVER_MSG_ID_OFFSET_CAL_RESET;
  static inline bool CAL_SERVER_MSG_ID_IsValid(int value) {
    return AirOffsetCalServerMsg_CAL_SERVER_MSG_ID_IsValid(value);
  }
  static const CAL_SERVER_MSG_ID CAL_SERVER_MSG_ID_MIN =
    AirOffsetCalServerMsg_CAL_SERVER_MSG_ID_CAL_SERVER_MSG_ID_MIN;
  static const CAL_SERVER_MSG_ID CAL_SERVER_MSG_ID_MAX =
    AirOffsetCalServerMsg_CAL_SERVER_MSG_ID_CAL_SERVER_MSG_ID_MAX;
  static const int CAL_SERVER_MSG_ID_ARRAYSIZE =
    AirOffsetCalServerMsg_CAL_SERVER_MSG_ID_CAL_SERVER_MSG_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CAL_SERVER_MSG_ID_descriptor() {
    return AirOffsetCalServerMsg_CAL_SERVER_MSG_ID_descriptor();
  }
  static inline const ::std::string& CAL_SERVER_MSG_ID_Name(CAL_SERVER_MSG_ID value) {
    return AirOffsetCalServerMsg_CAL_SERVER_MSG_ID_Name(value);
  }
  static inline bool CAL_SERVER_MSG_ID_Parse(const ::std::string& name,
      CAL_SERVER_MSG_ID* value) {
    return AirOffsetCalServerMsg_CAL_SERVER_MSG_ID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .analogic.ancp00.AirOffsetCalServerMsg.CAL_SERVER_MSG_ID msg_id = 1;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 1;
  ::analogic::ancp00::AirOffsetCalServerMsg_CAL_SERVER_MSG_ID msg_id() const;
  void set_msg_id(::analogic::ancp00::AirOffsetCalServerMsg_CAL_SERVER_MSG_ID value);

  // optional string msg_data = 2;
  void clear_msg_data();
  static const int kMsgDataFieldNumber = 2;
  const ::std::string& msg_data() const;
  void set_msg_data(const ::std::string& value);
  void set_msg_data(const char* value);
  void set_msg_data(const char* value, size_t size);
  ::std::string* mutable_msg_data();
  ::std::string* release_msg_data();
  void set_allocated_msg_data(::std::string* msg_data);

  // @@protoc_insertion_point(class_scope:analogic.ancp00.AirOffsetCalServerMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr msg_data_;
  int msg_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_proto_2fAirOffsetCalibration_2eproto();
  friend void protobuf_AssignDesc_proto_2fAirOffsetCalibration_2eproto();
  friend void protobuf_ShutdownFile_proto_2fAirOffsetCalibration_2eproto();

  void InitAsDefaultInstance();
  static AirOffsetCalServerMsg* default_instance_;
};
// -------------------------------------------------------------------

class AirOffsetDynCalStatusMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:analogic.ancp00.AirOffsetDynCalStatusMsg) */ {
 public:
  AirOffsetDynCalStatusMsg();
  virtual ~AirOffsetDynCalStatusMsg();

  AirOffsetDynCalStatusMsg(const AirOffsetDynCalStatusMsg& from);

  inline AirOffsetDynCalStatusMsg& operator=(const AirOffsetDynCalStatusMsg& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AirOffsetDynCalStatusMsg& default_instance();

  void Swap(AirOffsetDynCalStatusMsg* other);

  // implements Message ----------------------------------------------

  inline AirOffsetDynCalStatusMsg* New() const { return New(NULL); }

  AirOffsetDynCalStatusMsg* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AirOffsetDynCalStatusMsg& from);
  void MergeFrom(const AirOffsetDynCalStatusMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AirOffsetDynCalStatusMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef AirOffsetDynCalStatusMsg_DYN_CAL_STATUS_ID DYN_CAL_STATUS_ID;
  static const DYN_CAL_STATUS_ID AIR_CAL_SUCCESS =
    AirOffsetDynCalStatusMsg_DYN_CAL_STATUS_ID_AIR_CAL_SUCCESS;
  static const DYN_CAL_STATUS_ID AIR_CAL_INCOMPLETE =
    AirOffsetDynCalStatusMsg_DYN_CAL_STATUS_ID_AIR_CAL_INCOMPLETE;
  static const DYN_CAL_STATUS_ID AIR_CAL_FAILURE =
    AirOffsetDynCalStatusMsg_DYN_CAL_STATUS_ID_AIR_CAL_FAILURE;
  static const DYN_CAL_STATUS_ID AIR_CAL_ZIPPER_IN_BEAM =
    AirOffsetDynCalStatusMsg_DYN_CAL_STATUS_ID_AIR_CAL_ZIPPER_IN_BEAM;
  static const DYN_CAL_STATUS_ID OFFSET_CAL_SUCCESS =
    AirOffsetDynCalStatusMsg_DYN_CAL_STATUS_ID_OFFSET_CAL_SUCCESS;
  static const DYN_CAL_STATUS_ID OFFSET_CAL_INCOMPLETE =
    AirOffsetDynCalStatusMsg_DYN_CAL_STATUS_ID_OFFSET_CAL_INCOMPLETE;
  static const DYN_CAL_STATUS_ID OFFSET_CAL_FAILURE =
    AirOffsetDynCalStatusMsg_DYN_CAL_STATUS_ID_OFFSET_CAL_FAILURE;
  static inline bool DYN_CAL_STATUS_ID_IsValid(int value) {
    return AirOffsetDynCalStatusMsg_DYN_CAL_STATUS_ID_IsValid(value);
  }
  static const DYN_CAL_STATUS_ID DYN_CAL_STATUS_ID_MIN =
    AirOffsetDynCalStatusMsg_DYN_CAL_STATUS_ID_DYN_CAL_STATUS_ID_MIN;
  static const DYN_CAL_STATUS_ID DYN_CAL_STATUS_ID_MAX =
    AirOffsetDynCalStatusMsg_DYN_CAL_STATUS_ID_DYN_CAL_STATUS_ID_MAX;
  static const int DYN_CAL_STATUS_ID_ARRAYSIZE =
    AirOffsetDynCalStatusMsg_DYN_CAL_STATUS_ID_DYN_CAL_STATUS_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DYN_CAL_STATUS_ID_descriptor() {
    return AirOffsetDynCalStatusMsg_DYN_CAL_STATUS_ID_descriptor();
  }
  static inline const ::std::string& DYN_CAL_STATUS_ID_Name(DYN_CAL_STATUS_ID value) {
    return AirOffsetDynCalStatusMsg_DYN_CAL_STATUS_ID_Name(value);
  }
  static inline bool DYN_CAL_STATUS_ID_Parse(const ::std::string& name,
      DYN_CAL_STATUS_ID* value) {
    return AirOffsetDynCalStatusMsg_DYN_CAL_STATUS_ID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .analogic.ancp00.AirOffsetDynCalStatusMsg.DYN_CAL_STATUS_ID id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::analogic::ancp00::AirOffsetDynCalStatusMsg_DYN_CAL_STATUS_ID id() const;
  void set_id(::analogic::ancp00::AirOffsetDynCalStatusMsg_DYN_CAL_STATUS_ID value);

  // optional string data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:analogic.ancp00.AirOffsetDynCalStatusMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  int id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_proto_2fAirOffsetCalibration_2eproto();
  friend void protobuf_AssignDesc_proto_2fAirOffsetCalibration_2eproto();
  friend void protobuf_ShutdownFile_proto_2fAirOffsetCalibration_2eproto();

  void InitAsDefaultInstance();
  static AirOffsetDynCalStatusMsg* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// AirOffsetCalExtReqMsg

// optional .analogic.ancp00.AirOffsetCalExtReqMsg.AIR_OFFSET_CAL_REQ_MSG_ID msg_id = 1;
inline void AirOffsetCalExtReqMsg::clear_msg_id() {
  msg_id_ = 0;
}
inline ::analogic::ancp00::AirOffsetCalExtReqMsg_AIR_OFFSET_CAL_REQ_MSG_ID AirOffsetCalExtReqMsg::msg_id() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.AirOffsetCalExtReqMsg.msg_id)
  return static_cast< ::analogic::ancp00::AirOffsetCalExtReqMsg_AIR_OFFSET_CAL_REQ_MSG_ID >(msg_id_);
}
inline void AirOffsetCalExtReqMsg::set_msg_id(::analogic::ancp00::AirOffsetCalExtReqMsg_AIR_OFFSET_CAL_REQ_MSG_ID value) {
  
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.AirOffsetCalExtReqMsg.msg_id)
}

// optional string msg_data = 2;
inline void AirOffsetCalExtReqMsg::clear_msg_data() {
  msg_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AirOffsetCalExtReqMsg::msg_data() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.AirOffsetCalExtReqMsg.msg_data)
  return msg_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AirOffsetCalExtReqMsg::set_msg_data(const ::std::string& value) {
  
  msg_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.AirOffsetCalExtReqMsg.msg_data)
}
inline void AirOffsetCalExtReqMsg::set_msg_data(const char* value) {
  
  msg_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.AirOffsetCalExtReqMsg.msg_data)
}
inline void AirOffsetCalExtReqMsg::set_msg_data(const char* value, size_t size) {
  
  msg_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.AirOffsetCalExtReqMsg.msg_data)
}
inline ::std::string* AirOffsetCalExtReqMsg::mutable_msg_data() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.AirOffsetCalExtReqMsg.msg_data)
  return msg_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AirOffsetCalExtReqMsg::release_msg_data() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.AirOffsetCalExtReqMsg.msg_data)
  
  return msg_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AirOffsetCalExtReqMsg::set_allocated_msg_data(::std::string* msg_data) {
  if (msg_data != NULL) {
    
  } else {
    
  }
  msg_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_data);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.AirOffsetCalExtReqMsg.msg_data)
}

// -------------------------------------------------------------------

// AirOffsetCalServerMsg

// optional .analogic.ancp00.AirOffsetCalServerMsg.CAL_SERVER_MSG_ID msg_id = 1;
inline void AirOffsetCalServerMsg::clear_msg_id() {
  msg_id_ = 0;
}
inline ::analogic::ancp00::AirOffsetCalServerMsg_CAL_SERVER_MSG_ID AirOffsetCalServerMsg::msg_id() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.AirOffsetCalServerMsg.msg_id)
  return static_cast< ::analogic::ancp00::AirOffsetCalServerMsg_CAL_SERVER_MSG_ID >(msg_id_);
}
inline void AirOffsetCalServerMsg::set_msg_id(::analogic::ancp00::AirOffsetCalServerMsg_CAL_SERVER_MSG_ID value) {
  
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.AirOffsetCalServerMsg.msg_id)
}

// optional string msg_data = 2;
inline void AirOffsetCalServerMsg::clear_msg_data() {
  msg_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AirOffsetCalServerMsg::msg_data() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.AirOffsetCalServerMsg.msg_data)
  return msg_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AirOffsetCalServerMsg::set_msg_data(const ::std::string& value) {
  
  msg_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.AirOffsetCalServerMsg.msg_data)
}
inline void AirOffsetCalServerMsg::set_msg_data(const char* value) {
  
  msg_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.AirOffsetCalServerMsg.msg_data)
}
inline void AirOffsetCalServerMsg::set_msg_data(const char* value, size_t size) {
  
  msg_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.AirOffsetCalServerMsg.msg_data)
}
inline ::std::string* AirOffsetCalServerMsg::mutable_msg_data() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.AirOffsetCalServerMsg.msg_data)
  return msg_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AirOffsetCalServerMsg::release_msg_data() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.AirOffsetCalServerMsg.msg_data)
  
  return msg_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AirOffsetCalServerMsg::set_allocated_msg_data(::std::string* msg_data) {
  if (msg_data != NULL) {
    
  } else {
    
  }
  msg_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_data);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.AirOffsetCalServerMsg.msg_data)
}

// -------------------------------------------------------------------

// AirOffsetDynCalStatusMsg

// optional .analogic.ancp00.AirOffsetDynCalStatusMsg.DYN_CAL_STATUS_ID id = 1;
inline void AirOffsetDynCalStatusMsg::clear_id() {
  id_ = 0;
}
inline ::analogic::ancp00::AirOffsetDynCalStatusMsg_DYN_CAL_STATUS_ID AirOffsetDynCalStatusMsg::id() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.AirOffsetDynCalStatusMsg.id)
  return static_cast< ::analogic::ancp00::AirOffsetDynCalStatusMsg_DYN_CAL_STATUS_ID >(id_);
}
inline void AirOffsetDynCalStatusMsg::set_id(::analogic::ancp00::AirOffsetDynCalStatusMsg_DYN_CAL_STATUS_ID value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.AirOffsetDynCalStatusMsg.id)
}

// optional string data = 2;
inline void AirOffsetDynCalStatusMsg::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AirOffsetDynCalStatusMsg::data() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.AirOffsetDynCalStatusMsg.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AirOffsetDynCalStatusMsg::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.AirOffsetDynCalStatusMsg.data)
}
inline void AirOffsetDynCalStatusMsg::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.AirOffsetDynCalStatusMsg.data)
}
inline void AirOffsetDynCalStatusMsg::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.AirOffsetDynCalStatusMsg.data)
}
inline ::std::string* AirOffsetDynCalStatusMsg::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.AirOffsetDynCalStatusMsg.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AirOffsetDynCalStatusMsg::release_data() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.AirOffsetDynCalStatusMsg.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AirOffsetDynCalStatusMsg::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.AirOffsetDynCalStatusMsg.data)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ancp00
}  // namespace analogic

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::analogic::ancp00::AirOffsetCalExtReqMsg_AIR_OFFSET_CAL_REQ_MSG_ID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::analogic::ancp00::AirOffsetCalExtReqMsg_AIR_OFFSET_CAL_REQ_MSG_ID>() {
  return ::analogic::ancp00::AirOffsetCalExtReqMsg_AIR_OFFSET_CAL_REQ_MSG_ID_descriptor();
}
template <> struct is_proto_enum< ::analogic::ancp00::AirOffsetCalServerMsg_CAL_SERVER_MSG_ID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::analogic::ancp00::AirOffsetCalServerMsg_CAL_SERVER_MSG_ID>() {
  return ::analogic::ancp00::AirOffsetCalServerMsg_CAL_SERVER_MSG_ID_descriptor();
}
template <> struct is_proto_enum< ::analogic::ancp00::AirOffsetDynCalStatusMsg_DYN_CAL_STATUS_ID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::analogic::ancp00::AirOffsetDynCalStatusMsg_DYN_CAL_STATUS_ID>() {
  return ::analogic::ancp00::AirOffsetDynCalStatusMsg_DYN_CAL_STATUS_ID_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_2fAirOffsetCalibration_2eproto__INCLUDED
