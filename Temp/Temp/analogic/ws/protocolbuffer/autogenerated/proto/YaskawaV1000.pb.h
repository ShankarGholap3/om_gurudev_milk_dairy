// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/YaskawaV1000.proto

#ifndef PROTOBUF_proto_2fYaskawaV1000_2eproto__INCLUDED
#define PROTOBUF_proto_2fYaskawaV1000_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace analogic {
namespace ancp00 {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_proto_2fYaskawaV1000_2eproto();
void protobuf_AssignDesc_proto_2fYaskawaV1000_2eproto();
void protobuf_ShutdownFile_proto_2fYaskawaV1000_2eproto();

class YaskawaV1000MonitorData;

enum YaskawaV1000MonitorData_DRIVE_STATUS_1_BITS {
  YaskawaV1000MonitorData_DRIVE_STATUS_1_BITS_NOT_USED_1 = 0,
  YaskawaV1000MonitorData_DRIVE_STATUS_1_BITS_DURING_RUN_STATUS_1 = 1,
  YaskawaV1000MonitorData_DRIVE_STATUS_1_BITS_DURING_REVERSE_STATUS_1 = 2,
  YaskawaV1000MonitorData_DRIVE_STATUS_1_BITS_DRIVE_READY_STATUS_1 = 4,
  YaskawaV1000MonitorData_DRIVE_STATUS_1_BITS_FAULT_STATUS_1 = 8,
  YaskawaV1000MonitorData_DRIVE_STATUS_1_BITS_DATA_SETTING_ERROR_STATUS_1 = 16,
  YaskawaV1000MonitorData_DRIVE_STATUS_1_BITS_MULTI_FUNC_CONTACT_OUTPUT_STATUS_1 = 32,
  YaskawaV1000MonitorData_DRIVE_STATUS_1_BITS_MULTI_FUNC_PHOTOCOUPLER_OUTPUT_1_STATUS_1 = 64,
  YaskawaV1000MonitorData_DRIVE_STATUS_1_BITS_MULTI_FUNC_PHOTOCOUPLER_OUTPUT_2_STATUS_1 = 128,
  YaskawaV1000MonitorData_DRIVE_STATUS_1_BITS_COM_REF_ENABLED_STATUS = 16384,
  YaskawaV1000MonitorData_DRIVE_STATUS_1_BITS_COM_CTRL_ENABLED_STATUS = 32768,
  YaskawaV1000MonitorData_DRIVE_STATUS_1_BITS_YaskawaV1000MonitorData_DRIVE_STATUS_1_BITS_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  YaskawaV1000MonitorData_DRIVE_STATUS_1_BITS_YaskawaV1000MonitorData_DRIVE_STATUS_1_BITS_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool YaskawaV1000MonitorData_DRIVE_STATUS_1_BITS_IsValid(int value);
const YaskawaV1000MonitorData_DRIVE_STATUS_1_BITS YaskawaV1000MonitorData_DRIVE_STATUS_1_BITS_DRIVE_STATUS_1_BITS_MIN = YaskawaV1000MonitorData_DRIVE_STATUS_1_BITS_NOT_USED_1;
const YaskawaV1000MonitorData_DRIVE_STATUS_1_BITS YaskawaV1000MonitorData_DRIVE_STATUS_1_BITS_DRIVE_STATUS_1_BITS_MAX = YaskawaV1000MonitorData_DRIVE_STATUS_1_BITS_COM_CTRL_ENABLED_STATUS;
const int YaskawaV1000MonitorData_DRIVE_STATUS_1_BITS_DRIVE_STATUS_1_BITS_ARRAYSIZE = YaskawaV1000MonitorData_DRIVE_STATUS_1_BITS_DRIVE_STATUS_1_BITS_MAX + 1;

const ::google::protobuf::EnumDescriptor* YaskawaV1000MonitorData_DRIVE_STATUS_1_BITS_descriptor();
inline const ::std::string& YaskawaV1000MonitorData_DRIVE_STATUS_1_BITS_Name(YaskawaV1000MonitorData_DRIVE_STATUS_1_BITS value) {
  return ::google::protobuf::internal::NameOfEnum(
    YaskawaV1000MonitorData_DRIVE_STATUS_1_BITS_descriptor(), value);
}
inline bool YaskawaV1000MonitorData_DRIVE_STATUS_1_BITS_Parse(
    const ::std::string& name, YaskawaV1000MonitorData_DRIVE_STATUS_1_BITS* value) {
  return ::google::protobuf::internal::ParseNamedEnum<YaskawaV1000MonitorData_DRIVE_STATUS_1_BITS>(
    YaskawaV1000MonitorData_DRIVE_STATUS_1_BITS_descriptor(), name, value);
}
enum YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS {
  YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS_NOT_USED_2 = 0,
  YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS_OC_GF_IGBT_SC_GF_FAULT_1 = 1,
  YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS_OVERVOLTAGE_FAULT_1 = 2,
  YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS_DRIVE_OVERLOAD_FAULT_1 = 4,
  YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS_OVERHEAT_1_FAULT_1 = 8,
  YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS_BRAKING_FAULT_OR_OVERHEAT_1 = 16,
  YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS_PID_FEEDBACK_LOSS_FAULT_1 = 64,
  YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS_EXTERNAL_FAULT_1 = 128,
  YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS_CPF_HARDWARE_FAULT_1 = 256,
  YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS_MOTER_OVERLOAD_FAULT_1 = 512,
  YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS_PG_DISCONNECTED_FAULT_1 = 1024,
  YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS_MAIN_CIRCUIT_UNDER_VOLTAGE_FAULT_1 = 2048,
  YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS_UNDERVOLTAGE_FAULT_1 = 4096,
  YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS_OUT_PHASE_LOSS_FAULT_1 = 8192,
  YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS_COMM_ERROR_FAULT_1 = 16384,
  YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS_OPERATOR_CONNECT_FAULT_1 = 32768,
  YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS_YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS_YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS_IsValid(int value);
const YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS_FAULT_CONTENTS_1_BITS_MIN = YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS_NOT_USED_2;
const YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS_FAULT_CONTENTS_1_BITS_MAX = YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS_OPERATOR_CONNECT_FAULT_1;
const int YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS_FAULT_CONTENTS_1_BITS_ARRAYSIZE = YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS_FAULT_CONTENTS_1_BITS_MAX + 1;

const ::google::protobuf::EnumDescriptor* YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS_descriptor();
inline const ::std::string& YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS_Name(YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS value) {
  return ::google::protobuf::internal::NameOfEnum(
    YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS_descriptor(), value);
}
inline bool YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS_Parse(
    const ::std::string& name, YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS* value) {
  return ::google::protobuf::internal::ParseNamedEnum<YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS>(
    YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS_descriptor(), name, value);
}
enum YaskawaV1000MonitorData_DATA_LINK_STATUS_BITS {
  YaskawaV1000MonitorData_DATA_LINK_STATUS_BITS_NOT_USED_3 = 0,
  YaskawaV1000MonitorData_DATA_LINK_STATUS_BITS_WRITING_DATA = 1,
  YaskawaV1000MonitorData_DATA_LINK_STATUS_BITS_UPPER_OR_LOWER_LIMIT_ERROR = 8,
  YaskawaV1000MonitorData_DATA_LINK_STATUS_BITS_DATA_CONFORMITY_ERROR = 16,
  YaskawaV1000MonitorData_DATA_LINK_STATUS_BITS_WRITING_TO_EPROM = 32,
  YaskawaV1000MonitorData_DATA_LINK_STATUS_BITS_YaskawaV1000MonitorData_DATA_LINK_STATUS_BITS_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  YaskawaV1000MonitorData_DATA_LINK_STATUS_BITS_YaskawaV1000MonitorData_DATA_LINK_STATUS_BITS_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool YaskawaV1000MonitorData_DATA_LINK_STATUS_BITS_IsValid(int value);
const YaskawaV1000MonitorData_DATA_LINK_STATUS_BITS YaskawaV1000MonitorData_DATA_LINK_STATUS_BITS_DATA_LINK_STATUS_BITS_MIN = YaskawaV1000MonitorData_DATA_LINK_STATUS_BITS_NOT_USED_3;
const YaskawaV1000MonitorData_DATA_LINK_STATUS_BITS YaskawaV1000MonitorData_DATA_LINK_STATUS_BITS_DATA_LINK_STATUS_BITS_MAX = YaskawaV1000MonitorData_DATA_LINK_STATUS_BITS_WRITING_TO_EPROM;
const int YaskawaV1000MonitorData_DATA_LINK_STATUS_BITS_DATA_LINK_STATUS_BITS_ARRAYSIZE = YaskawaV1000MonitorData_DATA_LINK_STATUS_BITS_DATA_LINK_STATUS_BITS_MAX + 1;

const ::google::protobuf::EnumDescriptor* YaskawaV1000MonitorData_DATA_LINK_STATUS_BITS_descriptor();
inline const ::std::string& YaskawaV1000MonitorData_DATA_LINK_STATUS_BITS_Name(YaskawaV1000MonitorData_DATA_LINK_STATUS_BITS value) {
  return ::google::protobuf::internal::NameOfEnum(
    YaskawaV1000MonitorData_DATA_LINK_STATUS_BITS_descriptor(), value);
}
inline bool YaskawaV1000MonitorData_DATA_LINK_STATUS_BITS_Parse(
    const ::std::string& name, YaskawaV1000MonitorData_DATA_LINK_STATUS_BITS* value) {
  return ::google::protobuf::internal::ParseNamedEnum<YaskawaV1000MonitorData_DATA_LINK_STATUS_BITS>(
    YaskawaV1000MonitorData_DATA_LINK_STATUS_BITS_descriptor(), name, value);
}
enum YaskawaV1000MonitorData_FAULT_CONTENTS_2_BITS {
  YaskawaV1000MonitorData_FAULT_CONTENTS_2_BITS_NOT_USED_4 = 0,
  YaskawaV1000MonitorData_FAULT_CONTENTS_2_BITS_IGBT_SHORT_CIRCUIT_OR_GROUND_FAULT_2 = 1,
  YaskawaV1000MonitorData_FAULT_CONTENTS_2_BITS_GROUND_FAULT_2 = 2,
  YaskawaV1000MonitorData_FAULT_CONTENTS_2_BITS_INPUT_PHASE_LOSS_FAULT_2 = 4,
  YaskawaV1000MonitorData_FAULT_CONTENTS_2_BITS_OUTPUT_PHASE_LOSS_FAULT_2 = 8,
  YaskawaV1000MonitorData_FAULT_CONTENTS_2_BITS_BRAKING_RESISTOR_OR_OVERHEAT_FAULT_2 = 16,
  YaskawaV1000MonitorData_FAULT_CONTENTS_2_BITS_MOTOR_OVERHEAT_FAULT_2 = 64,
  YaskawaV1000MonitorData_FAULT_CONTENTS_2_BITS_YaskawaV1000MonitorData_FAULT_CONTENTS_2_BITS_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  YaskawaV1000MonitorData_FAULT_CONTENTS_2_BITS_YaskawaV1000MonitorData_FAULT_CONTENTS_2_BITS_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool YaskawaV1000MonitorData_FAULT_CONTENTS_2_BITS_IsValid(int value);
const YaskawaV1000MonitorData_FAULT_CONTENTS_2_BITS YaskawaV1000MonitorData_FAULT_CONTENTS_2_BITS_FAULT_CONTENTS_2_BITS_MIN = YaskawaV1000MonitorData_FAULT_CONTENTS_2_BITS_NOT_USED_4;
const YaskawaV1000MonitorData_FAULT_CONTENTS_2_BITS YaskawaV1000MonitorData_FAULT_CONTENTS_2_BITS_FAULT_CONTENTS_2_BITS_MAX = YaskawaV1000MonitorData_FAULT_CONTENTS_2_BITS_MOTOR_OVERHEAT_FAULT_2;
const int YaskawaV1000MonitorData_FAULT_CONTENTS_2_BITS_FAULT_CONTENTS_2_BITS_ARRAYSIZE = YaskawaV1000MonitorData_FAULT_CONTENTS_2_BITS_FAULT_CONTENTS_2_BITS_MAX + 1;

const ::google::protobuf::EnumDescriptor* YaskawaV1000MonitorData_FAULT_CONTENTS_2_BITS_descriptor();
inline const ::std::string& YaskawaV1000MonitorData_FAULT_CONTENTS_2_BITS_Name(YaskawaV1000MonitorData_FAULT_CONTENTS_2_BITS value) {
  return ::google::protobuf::internal::NameOfEnum(
    YaskawaV1000MonitorData_FAULT_CONTENTS_2_BITS_descriptor(), value);
}
inline bool YaskawaV1000MonitorData_FAULT_CONTENTS_2_BITS_Parse(
    const ::std::string& name, YaskawaV1000MonitorData_FAULT_CONTENTS_2_BITS* value) {
  return ::google::protobuf::internal::ParseNamedEnum<YaskawaV1000MonitorData_FAULT_CONTENTS_2_BITS>(
    YaskawaV1000MonitorData_FAULT_CONTENTS_2_BITS_descriptor(), name, value);
}
enum YaskawaV1000MonitorData_ALARM_CONTENTS_1_BITS {
  YaskawaV1000MonitorData_ALARM_CONTENTS_1_BITS_NOT_USED_5 = 0,
  YaskawaV1000MonitorData_ALARM_CONTENTS_1_BITS_RUN_COMMAND_INPUT_ERROR_ALARM_1 = 4,
  YaskawaV1000MonitorData_ALARM_CONTENTS_1_BITS_DRIVE_BASEBLOCK_ALARM_1 = 8,
  YaskawaV1000MonitorData_ALARM_CONTENTS_1_BITS_OVERTORQUE_DETECTION_1_ALARM_1 = 16,
  YaskawaV1000MonitorData_ALARM_CONTENTS_1_BITS_HEATSINK_OVERHEAT_ALARM_1 = 32,
  YaskawaV1000MonitorData_ALARM_CONTENTS_1_BITS_OVERVOLTAGE_ALARM_ALARM_1 = 64,
  YaskawaV1000MonitorData_ALARM_CONTENTS_1_BITS_UNDERVOLTAGE_ALARM_ALARM_1 = 128,
  YaskawaV1000MonitorData_ALARM_CONTENTS_1_BITS_BUS_COMM_ERROR_ALARM_1 = 512,
  YaskawaV1000MonitorData_ALARM_CONTENTS_1_BITS_OPTION_COMM_ERROR_ALARM_1 = 1024,
  YaskawaV1000MonitorData_ALARM_CONTENTS_1_BITS_UNDERTORQUE_DETECTION_ALARM_1 = 2048,
  YaskawaV1000MonitorData_ALARM_CONTENTS_1_BITS_MOTOR_OVERHEAT_ALARM_1 = 4096,
  YaskawaV1000MonitorData_ALARM_CONTENTS_1_BITS_PID_FEEDBACK_LOSS_ALARM_1 = 8192,
  YaskawaV1000MonitorData_ALARM_CONTENTS_1_BITS_SERIAL_COMM_ERROR_ALARM_1 = 16384,
  YaskawaV1000MonitorData_ALARM_CONTENTS_1_BITS_YaskawaV1000MonitorData_ALARM_CONTENTS_1_BITS_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  YaskawaV1000MonitorData_ALARM_CONTENTS_1_BITS_YaskawaV1000MonitorData_ALARM_CONTENTS_1_BITS_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool YaskawaV1000MonitorData_ALARM_CONTENTS_1_BITS_IsValid(int value);
const YaskawaV1000MonitorData_ALARM_CONTENTS_1_BITS YaskawaV1000MonitorData_ALARM_CONTENTS_1_BITS_ALARM_CONTENTS_1_BITS_MIN = YaskawaV1000MonitorData_ALARM_CONTENTS_1_BITS_NOT_USED_5;
const YaskawaV1000MonitorData_ALARM_CONTENTS_1_BITS YaskawaV1000MonitorData_ALARM_CONTENTS_1_BITS_ALARM_CONTENTS_1_BITS_MAX = YaskawaV1000MonitorData_ALARM_CONTENTS_1_BITS_SERIAL_COMM_ERROR_ALARM_1;
const int YaskawaV1000MonitorData_ALARM_CONTENTS_1_BITS_ALARM_CONTENTS_1_BITS_ARRAYSIZE = YaskawaV1000MonitorData_ALARM_CONTENTS_1_BITS_ALARM_CONTENTS_1_BITS_MAX + 1;

const ::google::protobuf::EnumDescriptor* YaskawaV1000MonitorData_ALARM_CONTENTS_1_BITS_descriptor();
inline const ::std::string& YaskawaV1000MonitorData_ALARM_CONTENTS_1_BITS_Name(YaskawaV1000MonitorData_ALARM_CONTENTS_1_BITS value) {
  return ::google::protobuf::internal::NameOfEnum(
    YaskawaV1000MonitorData_ALARM_CONTENTS_1_BITS_descriptor(), value);
}
inline bool YaskawaV1000MonitorData_ALARM_CONTENTS_1_BITS_Parse(
    const ::std::string& name, YaskawaV1000MonitorData_ALARM_CONTENTS_1_BITS* value) {
  return ::google::protobuf::internal::ParseNamedEnum<YaskawaV1000MonitorData_ALARM_CONTENTS_1_BITS>(
    YaskawaV1000MonitorData_ALARM_CONTENTS_1_BITS_descriptor(), name, value);
}
enum YaskawaV1000MonitorData_INPUT_TERMINAL_STATUS_BITS {
  YaskawaV1000MonitorData_INPUT_TERMINAL_STATUS_BITS_NOT_USED_6 = 0,
  YaskawaV1000MonitorData_INPUT_TERMINAL_STATUS_BITS_TERMINAL_S1_CLOSED = 1,
  YaskawaV1000MonitorData_INPUT_TERMINAL_STATUS_BITS_TERMINAL_S2_CLOSED = 2,
  YaskawaV1000MonitorData_INPUT_TERMINAL_STATUS_BITS_TERMINAL_S3_CLOSED = 4,
  YaskawaV1000MonitorData_INPUT_TERMINAL_STATUS_BITS_TERMINAL_S4_CLOSED = 8,
  YaskawaV1000MonitorData_INPUT_TERMINAL_STATUS_BITS_TERMINAL_S5_CLOSED = 16,
  YaskawaV1000MonitorData_INPUT_TERMINAL_STATUS_BITS_TERMINAL_S6_CLOSED = 32,
  YaskawaV1000MonitorData_INPUT_TERMINAL_STATUS_BITS_TERMINAL_S7_CLOSED = 64,
  YaskawaV1000MonitorData_INPUT_TERMINAL_STATUS_BITS_YaskawaV1000MonitorData_INPUT_TERMINAL_STATUS_BITS_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  YaskawaV1000MonitorData_INPUT_TERMINAL_STATUS_BITS_YaskawaV1000MonitorData_INPUT_TERMINAL_STATUS_BITS_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool YaskawaV1000MonitorData_INPUT_TERMINAL_STATUS_BITS_IsValid(int value);
const YaskawaV1000MonitorData_INPUT_TERMINAL_STATUS_BITS YaskawaV1000MonitorData_INPUT_TERMINAL_STATUS_BITS_INPUT_TERMINAL_STATUS_BITS_MIN = YaskawaV1000MonitorData_INPUT_TERMINAL_STATUS_BITS_NOT_USED_6;
const YaskawaV1000MonitorData_INPUT_TERMINAL_STATUS_BITS YaskawaV1000MonitorData_INPUT_TERMINAL_STATUS_BITS_INPUT_TERMINAL_STATUS_BITS_MAX = YaskawaV1000MonitorData_INPUT_TERMINAL_STATUS_BITS_TERMINAL_S7_CLOSED;
const int YaskawaV1000MonitorData_INPUT_TERMINAL_STATUS_BITS_INPUT_TERMINAL_STATUS_BITS_ARRAYSIZE = YaskawaV1000MonitorData_INPUT_TERMINAL_STATUS_BITS_INPUT_TERMINAL_STATUS_BITS_MAX + 1;

const ::google::protobuf::EnumDescriptor* YaskawaV1000MonitorData_INPUT_TERMINAL_STATUS_BITS_descriptor();
inline const ::std::string& YaskawaV1000MonitorData_INPUT_TERMINAL_STATUS_BITS_Name(YaskawaV1000MonitorData_INPUT_TERMINAL_STATUS_BITS value) {
  return ::google::protobuf::internal::NameOfEnum(
    YaskawaV1000MonitorData_INPUT_TERMINAL_STATUS_BITS_descriptor(), value);
}
inline bool YaskawaV1000MonitorData_INPUT_TERMINAL_STATUS_BITS_Parse(
    const ::std::string& name, YaskawaV1000MonitorData_INPUT_TERMINAL_STATUS_BITS* value) {
  return ::google::protobuf::internal::ParseNamedEnum<YaskawaV1000MonitorData_INPUT_TERMINAL_STATUS_BITS>(
    YaskawaV1000MonitorData_INPUT_TERMINAL_STATUS_BITS_descriptor(), name, value);
}
enum YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS {
  YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS_NOT_USED_7 = 0,
  YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS_DURING_RUN_STATUS_2 = 1,
  YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS_ZERO_SPEED_STATUS_2 = 2,
  YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS_SPEED_AGREE_STATUS_2 = 4,
  YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS_USER_SPEED_AGREE_STATUS_2 = 8,
  YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS_FREQ_DETECT_1_STATUS_2 = 16,
  YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS_FREQ_DETECT_2_STATUS_2 = 32,
  YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS_DRIVE_READY_STATUS_2 = 64,
  YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS_DURING_UNDERVOLTAGE_STATUS_2 = 128,
  YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS_DURING_BASEBLOCK_STATUS_2 = 256,
  YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS_FREQ_REF_FROM_KEYPAD_STATUS_2 = 512,
  YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS_RUN_COMMAND_FROM_KEYPAD_STATUS_2 = 1024,
  YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS_UNDER_OVER_TORQUE_1_2_STATUS_2 = 2048,
  YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS_FREQ_REF_LOSS_STATUS_2 = 4096,
  YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS_DURING_FAULT_RESTART_STATUS_2 = 8192,
  YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS_FAULT_STATUS_2 = 16384,
  YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS_COMM_TIMEOUT_STATUS_2 = 32768,
  YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS_YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS_YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS_IsValid(int value);
const YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS_DRIVE_STATUS_2_BITS_MIN = YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS_NOT_USED_7;
const YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS_DRIVE_STATUS_2_BITS_MAX = YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS_COMM_TIMEOUT_STATUS_2;
const int YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS_DRIVE_STATUS_2_BITS_ARRAYSIZE = YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS_DRIVE_STATUS_2_BITS_MAX + 1;

const ::google::protobuf::EnumDescriptor* YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS_descriptor();
inline const ::std::string& YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS_Name(YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS value) {
  return ::google::protobuf::internal::NameOfEnum(
    YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS_descriptor(), value);
}
inline bool YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS_Parse(
    const ::std::string& name, YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS* value) {
  return ::google::protobuf::internal::ParseNamedEnum<YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS>(
    YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS_descriptor(), name, value);
}
enum YaskawaV1000MonitorData_OUTPUT_TERMINAL_STATUS_BITS {
  YaskawaV1000MonitorData_OUTPUT_TERMINAL_STATUS_BITS_NOT_USED_8 = 0,
  YaskawaV1000MonitorData_OUTPUT_TERMINAL_STATUS_BITS_MULTI_FUNC_CONTACT_OUTPUT = 1,
  YaskawaV1000MonitorData_OUTPUT_TERMINAL_STATUS_BITS_MULTI_FUNC_PHOTOCOUPLER_OUTPUT_1 = 2,
  YaskawaV1000MonitorData_OUTPUT_TERMINAL_STATUS_BITS_MULTI_FUNC_PHOTOCOUPLER_OUTPUT_2 = 4,
  YaskawaV1000MonitorData_OUTPUT_TERMINAL_STATUS_BITS_YaskawaV1000MonitorData_OUTPUT_TERMINAL_STATUS_BITS_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  YaskawaV1000MonitorData_OUTPUT_TERMINAL_STATUS_BITS_YaskawaV1000MonitorData_OUTPUT_TERMINAL_STATUS_BITS_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool YaskawaV1000MonitorData_OUTPUT_TERMINAL_STATUS_BITS_IsValid(int value);
const YaskawaV1000MonitorData_OUTPUT_TERMINAL_STATUS_BITS YaskawaV1000MonitorData_OUTPUT_TERMINAL_STATUS_BITS_OUTPUT_TERMINAL_STATUS_BITS_MIN = YaskawaV1000MonitorData_OUTPUT_TERMINAL_STATUS_BITS_NOT_USED_8;
const YaskawaV1000MonitorData_OUTPUT_TERMINAL_STATUS_BITS YaskawaV1000MonitorData_OUTPUT_TERMINAL_STATUS_BITS_OUTPUT_TERMINAL_STATUS_BITS_MAX = YaskawaV1000MonitorData_OUTPUT_TERMINAL_STATUS_BITS_MULTI_FUNC_PHOTOCOUPLER_OUTPUT_2;
const int YaskawaV1000MonitorData_OUTPUT_TERMINAL_STATUS_BITS_OUTPUT_TERMINAL_STATUS_BITS_ARRAYSIZE = YaskawaV1000MonitorData_OUTPUT_TERMINAL_STATUS_BITS_OUTPUT_TERMINAL_STATUS_BITS_MAX + 1;

const ::google::protobuf::EnumDescriptor* YaskawaV1000MonitorData_OUTPUT_TERMINAL_STATUS_BITS_descriptor();
inline const ::std::string& YaskawaV1000MonitorData_OUTPUT_TERMINAL_STATUS_BITS_Name(YaskawaV1000MonitorData_OUTPUT_TERMINAL_STATUS_BITS value) {
  return ::google::protobuf::internal::NameOfEnum(
    YaskawaV1000MonitorData_OUTPUT_TERMINAL_STATUS_BITS_descriptor(), value);
}
inline bool YaskawaV1000MonitorData_OUTPUT_TERMINAL_STATUS_BITS_Parse(
    const ::std::string& name, YaskawaV1000MonitorData_OUTPUT_TERMINAL_STATUS_BITS* value) {
  return ::google::protobuf::internal::ParseNamedEnum<YaskawaV1000MonitorData_OUTPUT_TERMINAL_STATUS_BITS>(
    YaskawaV1000MonitorData_OUTPUT_TERMINAL_STATUS_BITS_descriptor(), name, value);
}
enum YaskawaV1000MonitorData_COMM_ERROR_LOG_BITS {
  YaskawaV1000MonitorData_COMM_ERROR_LOG_BITS_NOT_USED_9 = 0,
  YaskawaV1000MonitorData_COMM_ERROR_LOG_BITS_CRC_ERROR = 1,
  YaskawaV1000MonitorData_COMM_ERROR_LOG_BITS_DATA_LENGTH_ERROR = 2,
  YaskawaV1000MonitorData_COMM_ERROR_LOG_BITS_PARITY_ERROR = 8,
  YaskawaV1000MonitorData_COMM_ERROR_LOG_BITS_OVERRUN_ERROR = 16,
  YaskawaV1000MonitorData_COMM_ERROR_LOG_BITS_FRAMEING_ERROR = 32,
  YaskawaV1000MonitorData_COMM_ERROR_LOG_BITS_TIMEOUT = 64,
  YaskawaV1000MonitorData_COMM_ERROR_LOG_BITS_YaskawaV1000MonitorData_COMM_ERROR_LOG_BITS_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  YaskawaV1000MonitorData_COMM_ERROR_LOG_BITS_YaskawaV1000MonitorData_COMM_ERROR_LOG_BITS_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool YaskawaV1000MonitorData_COMM_ERROR_LOG_BITS_IsValid(int value);
const YaskawaV1000MonitorData_COMM_ERROR_LOG_BITS YaskawaV1000MonitorData_COMM_ERROR_LOG_BITS_COMM_ERROR_LOG_BITS_MIN = YaskawaV1000MonitorData_COMM_ERROR_LOG_BITS_NOT_USED_9;
const YaskawaV1000MonitorData_COMM_ERROR_LOG_BITS YaskawaV1000MonitorData_COMM_ERROR_LOG_BITS_COMM_ERROR_LOG_BITS_MAX = YaskawaV1000MonitorData_COMM_ERROR_LOG_BITS_TIMEOUT;
const int YaskawaV1000MonitorData_COMM_ERROR_LOG_BITS_COMM_ERROR_LOG_BITS_ARRAYSIZE = YaskawaV1000MonitorData_COMM_ERROR_LOG_BITS_COMM_ERROR_LOG_BITS_MAX + 1;

const ::google::protobuf::EnumDescriptor* YaskawaV1000MonitorData_COMM_ERROR_LOG_BITS_descriptor();
inline const ::std::string& YaskawaV1000MonitorData_COMM_ERROR_LOG_BITS_Name(YaskawaV1000MonitorData_COMM_ERROR_LOG_BITS value) {
  return ::google::protobuf::internal::NameOfEnum(
    YaskawaV1000MonitorData_COMM_ERROR_LOG_BITS_descriptor(), value);
}
inline bool YaskawaV1000MonitorData_COMM_ERROR_LOG_BITS_Parse(
    const ::std::string& name, YaskawaV1000MonitorData_COMM_ERROR_LOG_BITS* value) {
  return ::google::protobuf::internal::ParseNamedEnum<YaskawaV1000MonitorData_COMM_ERROR_LOG_BITS>(
    YaskawaV1000MonitorData_COMM_ERROR_LOG_BITS_descriptor(), name, value);
}
enum YaskawaV1000MonitorData_DRIVE_STATUS_BITS {
  YaskawaV1000MonitorData_DRIVE_STATUS_BITS_NOT_USED_10 = 0,
  YaskawaV1000MonitorData_DRIVE_STATUS_BITS_DURING_RUN_STATUS = 1,
  YaskawaV1000MonitorData_DRIVE_STATUS_BITS_DURING_ZERO_SPEED_STATUS = 2,
  YaskawaV1000MonitorData_DRIVE_STATUS_BITS_DURING_REVERSE_RUN_STATUS = 4,
  YaskawaV1000MonitorData_DRIVE_STATUS_BITS_DURING_FAULT_RESET_STATUS = 8,
  YaskawaV1000MonitorData_DRIVE_STATUS_BITS_DURING_SPEED_AGREE_STATUS = 16,
  YaskawaV1000MonitorData_DRIVE_STATUS_BITS_DRIVE_READY_STATUS = 32,
  YaskawaV1000MonitorData_DRIVE_STATUS_BITS_ALARM_STATUS = 64,
  YaskawaV1000MonitorData_DRIVE_STATUS_BITS_FAULT_STATUS = 128,
  YaskawaV1000MonitorData_DRIVE_STATUS_BITS_DURING_OPERATION_ERROR_STATUS = 256,
  YaskawaV1000MonitorData_DRIVE_STATUS_BITS_DURING_MOMENTARY_POWER_LOSS_STATUS = 512,
  YaskawaV1000MonitorData_DRIVE_STATUS_BITS_MOTOR_2_SELECTED_STATUS = 1024,
  YaskawaV1000MonitorData_DRIVE_STATUS_BITS_COM_REF_NET_REF_STATUS = 16384,
  YaskawaV1000MonitorData_DRIVE_STATUS_BITS_COM_CTRL_NET_CTRL_STATUS = 32768,
  YaskawaV1000MonitorData_DRIVE_STATUS_BITS_YaskawaV1000MonitorData_DRIVE_STATUS_BITS_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  YaskawaV1000MonitorData_DRIVE_STATUS_BITS_YaskawaV1000MonitorData_DRIVE_STATUS_BITS_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool YaskawaV1000MonitorData_DRIVE_STATUS_BITS_IsValid(int value);
const YaskawaV1000MonitorData_DRIVE_STATUS_BITS YaskawaV1000MonitorData_DRIVE_STATUS_BITS_DRIVE_STATUS_BITS_MIN = YaskawaV1000MonitorData_DRIVE_STATUS_BITS_NOT_USED_10;
const YaskawaV1000MonitorData_DRIVE_STATUS_BITS YaskawaV1000MonitorData_DRIVE_STATUS_BITS_DRIVE_STATUS_BITS_MAX = YaskawaV1000MonitorData_DRIVE_STATUS_BITS_COM_CTRL_NET_CTRL_STATUS;
const int YaskawaV1000MonitorData_DRIVE_STATUS_BITS_DRIVE_STATUS_BITS_ARRAYSIZE = YaskawaV1000MonitorData_DRIVE_STATUS_BITS_DRIVE_STATUS_BITS_MAX + 1;

const ::google::protobuf::EnumDescriptor* YaskawaV1000MonitorData_DRIVE_STATUS_BITS_descriptor();
inline const ::std::string& YaskawaV1000MonitorData_DRIVE_STATUS_BITS_Name(YaskawaV1000MonitorData_DRIVE_STATUS_BITS value) {
  return ::google::protobuf::internal::NameOfEnum(
    YaskawaV1000MonitorData_DRIVE_STATUS_BITS_descriptor(), value);
}
inline bool YaskawaV1000MonitorData_DRIVE_STATUS_BITS_Parse(
    const ::std::string& name, YaskawaV1000MonitorData_DRIVE_STATUS_BITS* value) {
  return ::google::protobuf::internal::ParseNamedEnum<YaskawaV1000MonitorData_DRIVE_STATUS_BITS>(
    YaskawaV1000MonitorData_DRIVE_STATUS_BITS_descriptor(), name, value);
}
enum YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS {
  YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS_NOT_USED_11 = 0,
  YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS_UNDERVOLTAGE_FAULT_3 = 2,
  YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS_CONTROL_POWER_SUPPLY_UNDERVOLTAGE_FAULT_3 = 4,
  YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS_SOFT_CHARGE_CIRCUIT_FAULT_3 = 8,
  YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS_IGBT_SHORT_CIRCUIT_OR_GROUND_FAULT_3 = 16,
  YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS_GROUND_FAULT_3 = 32,
  YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS_OVERCURRENT_FAULT_3 = 64,
  YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS_OVERVOLTAGE_FAULT_3 = 128,
  YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS_HEATSINK_OVERHEAT_1_FAULT_3 = 256,
  YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS_HEATSINK_OVERHEAT_2_FAULT_3 = 512,
  YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS_MOTOR_OVERLOAD_FAULT_3 = 1024,
  YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS_DRIVE_OVERLOAD_FAULT_3 = 2048,
  YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS_OVERTORQUE_DETECTION_1_FAULT_3 = 4096,
  YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS_OVERTORQUE_DETECTION_2_FAULT_3 = 8192,
  YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS_DYNAMIC_BRAKING_TRANSISTOR_FAULT_3 = 16384,
  YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS_BRAKING_RESISTOR_OVERHEAT_FAULT_3 = 32768,
  YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS_YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS_YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS_IsValid(int value);
const YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS_FAULT_CONTENTS_3_BITS_MIN = YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS_NOT_USED_11;
const YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS_FAULT_CONTENTS_3_BITS_MAX = YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS_BRAKING_RESISTOR_OVERHEAT_FAULT_3;
const int YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS_FAULT_CONTENTS_3_BITS_ARRAYSIZE = YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS_FAULT_CONTENTS_3_BITS_MAX + 1;

const ::google::protobuf::EnumDescriptor* YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS_descriptor();
inline const ::std::string& YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS_Name(YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS value) {
  return ::google::protobuf::internal::NameOfEnum(
    YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS_descriptor(), value);
}
inline bool YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS_Parse(
    const ::std::string& name, YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS* value) {
  return ::google::protobuf::internal::ParseNamedEnum<YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS>(
    YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS_descriptor(), name, value);
}
enum YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS {
  YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS_NOT_USED_12 = 0,
  YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS_EXTERNAL_INPUT_S3_FAULT_4 = 1,
  YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS_EXTERNAL_INPUT_S4_FAULT_4 = 2,
  YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS_EXTERNAL_INPUT_S5_FAULT_4 = 4,
  YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS_EXTERNAL_INPUT_S6_FAULT_4 = 8,
  YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS_EXTERNAL_INPUT_S7_FAULT_4 = 16,
  YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS_OVERSPEED_FAULT_4 = 128,
  YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS_EXCESSIVE_SPEED_DEVIATION_FAULT_4 = 256,
  YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS_PG_DISCONNECTED_FAULT_4 = 512,
  YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS_INPUT_PHASE_LOSS_FAULT_4 = 1024,
  YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS_OUTPUT_PHASE_LOSS_FAULT_4 = 2048,
  YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS_MOTOR_OVERHEAT_PTC_FAULT_4 = 4096,
  YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS_DIGITAL_OPERATON_CONNECTION_FAULT_4 = 8192,
  YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS_EEPROM_WRITE_ERROR_FAULT_4 = 16384,
  YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS_MOTOR_OVERHAT_PTC_FAULT_4 = 32768,
  YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS_YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS_YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS_IsValid(int value);
const YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS_FAULT_CONTENTS_4_BITS_MIN = YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS_NOT_USED_12;
const YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS_FAULT_CONTENTS_4_BITS_MAX = YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS_MOTOR_OVERHAT_PTC_FAULT_4;
const int YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS_FAULT_CONTENTS_4_BITS_ARRAYSIZE = YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS_FAULT_CONTENTS_4_BITS_MAX + 1;

const ::google::protobuf::EnumDescriptor* YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS_descriptor();
inline const ::std::string& YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS_Name(YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS value) {
  return ::google::protobuf::internal::NameOfEnum(
    YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS_descriptor(), value);
}
inline bool YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS_Parse(
    const ::std::string& name, YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS* value) {
  return ::google::protobuf::internal::ParseNamedEnum<YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS>(
    YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS_descriptor(), name, value);
}
enum YaskawaV1000MonitorData_FAULT_CONTENTS_5_BITS {
  YaskawaV1000MonitorData_FAULT_CONTENTS_5_BITS_NOT_USED_13 = 0,
  YaskawaV1000MonitorData_FAULT_CONTENTS_5_BITS_BUS_COMMUNICATION_ERROR_FAULT_5 = 1,
  YaskawaV1000MonitorData_FAULT_CONTENTS_5_BITS_OPTION_COMMUNICATIO_ERROR_FAULT_5 = 2,
  YaskawaV1000MonitorData_FAULT_CONTENTS_5_BITS_CONTROL_FAULT_5 = 16,
  YaskawaV1000MonitorData_FAULT_CONTENTS_5_BITS_OPTION_EXTERNAL_FAULT_5 = 64,
  YaskawaV1000MonitorData_FAULT_CONTENTS_5_BITS_PID_FEEDBACK_LOSS_FAULT_5 = 128,
  YaskawaV1000MonitorData_FAULT_CONTENTS_5_BITS_UNDERTORQUE_DETECTION_1_FAULT_5 = 256,
  YaskawaV1000MonitorData_FAULT_CONTENTS_5_BITS_UNDERTORQUE_DETECTION_2_FAULT_5 = 512,
  YaskawaV1000MonitorData_FAULT_CONTENTS_5_BITS_HIGH_SLIP_BRAKING_OVERLOAD_FAULT_5 = 1024,
  YaskawaV1000MonitorData_FAULT_CONTENTS_5_BITS_HARDWARE_FAULT_5 = 32768,
  YaskawaV1000MonitorData_FAULT_CONTENTS_5_BITS_YaskawaV1000MonitorData_FAULT_CONTENTS_5_BITS_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  YaskawaV1000MonitorData_FAULT_CONTENTS_5_BITS_YaskawaV1000MonitorData_FAULT_CONTENTS_5_BITS_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool YaskawaV1000MonitorData_FAULT_CONTENTS_5_BITS_IsValid(int value);
const YaskawaV1000MonitorData_FAULT_CONTENTS_5_BITS YaskawaV1000MonitorData_FAULT_CONTENTS_5_BITS_FAULT_CONTENTS_5_BITS_MIN = YaskawaV1000MonitorData_FAULT_CONTENTS_5_BITS_NOT_USED_13;
const YaskawaV1000MonitorData_FAULT_CONTENTS_5_BITS YaskawaV1000MonitorData_FAULT_CONTENTS_5_BITS_FAULT_CONTENTS_5_BITS_MAX = YaskawaV1000MonitorData_FAULT_CONTENTS_5_BITS_HARDWARE_FAULT_5;
const int YaskawaV1000MonitorData_FAULT_CONTENTS_5_BITS_FAULT_CONTENTS_5_BITS_ARRAYSIZE = YaskawaV1000MonitorData_FAULT_CONTENTS_5_BITS_FAULT_CONTENTS_5_BITS_MAX + 1;

const ::google::protobuf::EnumDescriptor* YaskawaV1000MonitorData_FAULT_CONTENTS_5_BITS_descriptor();
inline const ::std::string& YaskawaV1000MonitorData_FAULT_CONTENTS_5_BITS_Name(YaskawaV1000MonitorData_FAULT_CONTENTS_5_BITS value) {
  return ::google::protobuf::internal::NameOfEnum(
    YaskawaV1000MonitorData_FAULT_CONTENTS_5_BITS_descriptor(), value);
}
inline bool YaskawaV1000MonitorData_FAULT_CONTENTS_5_BITS_Parse(
    const ::std::string& name, YaskawaV1000MonitorData_FAULT_CONTENTS_5_BITS* value) {
  return ::google::protobuf::internal::ParseNamedEnum<YaskawaV1000MonitorData_FAULT_CONTENTS_5_BITS>(
    YaskawaV1000MonitorData_FAULT_CONTENTS_5_BITS_descriptor(), name, value);
}
enum YaskawaV1000MonitorData_FAULT_CONTENTS_6_BITS {
  YaskawaV1000MonitorData_FAULT_CONTENTS_6_BITS_NOT_USED_14 = 0,
  YaskawaV1000MonitorData_FAULT_CONTENTS_6_BITS_OUTPUT_CURRENT_IMBALANCE_FAULT_6 = 32,
  YaskawaV1000MonitorData_FAULT_CONTENTS_6_BITS_PULLOUT_DETECTION = 64,
  YaskawaV1000MonitorData_FAULT_CONTENTS_6_BITS_PG_DISCONNECTED_FAULT_6 = 128,
  YaskawaV1000MonitorData_FAULT_CONTENTS_6_BITS_WATCHDOG_TIMER_ERROR_FAULT_6 = 256,
  YaskawaV1000MonitorData_FAULT_CONTENTS_6_BITS_TOO_MANY_SPEED_SEARCH_RESTARTS_FAULT_6 = 1024,
  YaskawaV1000MonitorData_FAULT_CONTENTS_6_BITS_YaskawaV1000MonitorData_FAULT_CONTENTS_6_BITS_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  YaskawaV1000MonitorData_FAULT_CONTENTS_6_BITS_YaskawaV1000MonitorData_FAULT_CONTENTS_6_BITS_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool YaskawaV1000MonitorData_FAULT_CONTENTS_6_BITS_IsValid(int value);
const YaskawaV1000MonitorData_FAULT_CONTENTS_6_BITS YaskawaV1000MonitorData_FAULT_CONTENTS_6_BITS_FAULT_CONTENTS_6_BITS_MIN = YaskawaV1000MonitorData_FAULT_CONTENTS_6_BITS_NOT_USED_14;
const YaskawaV1000MonitorData_FAULT_CONTENTS_6_BITS YaskawaV1000MonitorData_FAULT_CONTENTS_6_BITS_FAULT_CONTENTS_6_BITS_MAX = YaskawaV1000MonitorData_FAULT_CONTENTS_6_BITS_TOO_MANY_SPEED_SEARCH_RESTARTS_FAULT_6;
const int YaskawaV1000MonitorData_FAULT_CONTENTS_6_BITS_FAULT_CONTENTS_6_BITS_ARRAYSIZE = YaskawaV1000MonitorData_FAULT_CONTENTS_6_BITS_FAULT_CONTENTS_6_BITS_MAX + 1;

const ::google::protobuf::EnumDescriptor* YaskawaV1000MonitorData_FAULT_CONTENTS_6_BITS_descriptor();
inline const ::std::string& YaskawaV1000MonitorData_FAULT_CONTENTS_6_BITS_Name(YaskawaV1000MonitorData_FAULT_CONTENTS_6_BITS value) {
  return ::google::protobuf::internal::NameOfEnum(
    YaskawaV1000MonitorData_FAULT_CONTENTS_6_BITS_descriptor(), value);
}
inline bool YaskawaV1000MonitorData_FAULT_CONTENTS_6_BITS_Parse(
    const ::std::string& name, YaskawaV1000MonitorData_FAULT_CONTENTS_6_BITS* value) {
  return ::google::protobuf::internal::ParseNamedEnum<YaskawaV1000MonitorData_FAULT_CONTENTS_6_BITS>(
    YaskawaV1000MonitorData_FAULT_CONTENTS_6_BITS_descriptor(), name, value);
}
enum YaskawaV1000MonitorData_FAULT_CONTENTS_7_BITS {
  YaskawaV1000MonitorData_FAULT_CONTENTS_7_BITS_NOT_USED_15 = 0,
  YaskawaV1000MonitorData_FAULT_CONTENTS_7_BITS_PID_FEEDBACK_LOSS_FAULT_7 = 1,
  YaskawaV1000MonitorData_FAULT_CONTENTS_7_BITS_EXTERNAL_INPUT_S1_FAULT_7 = 2,
  YaskawaV1000MonitorData_FAULT_CONTENTS_7_BITS_EXTERNAL_INPUT_S2_FAULT_7 = 4,
  YaskawaV1000MonitorData_FAULT_CONTENTS_7_BITS_MECHANICAL_WEAKENING_1_FAULT_7 = 8,
  YaskawaV1000MonitorData_FAULT_CONTENTS_7_BITS_MECHANICAL_WEAKENING_2_FAULT_7 = 16,
  YaskawaV1000MonitorData_FAULT_CONTENTS_7_BITS_CURRENT_OFFSET_FAULT_7 = 32,
  YaskawaV1000MonitorData_FAULT_CONTENTS_7_BITS_DRIVE_WORKS_EZ_FAULT_7 = 256,
  YaskawaV1000MonitorData_FAULT_CONTENTS_7_BITS_YaskawaV1000MonitorData_FAULT_CONTENTS_7_BITS_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  YaskawaV1000MonitorData_FAULT_CONTENTS_7_BITS_YaskawaV1000MonitorData_FAULT_CONTENTS_7_BITS_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool YaskawaV1000MonitorData_FAULT_CONTENTS_7_BITS_IsValid(int value);
const YaskawaV1000MonitorData_FAULT_CONTENTS_7_BITS YaskawaV1000MonitorData_FAULT_CONTENTS_7_BITS_FAULT_CONTENTS_7_BITS_MIN = YaskawaV1000MonitorData_FAULT_CONTENTS_7_BITS_NOT_USED_15;
const YaskawaV1000MonitorData_FAULT_CONTENTS_7_BITS YaskawaV1000MonitorData_FAULT_CONTENTS_7_BITS_FAULT_CONTENTS_7_BITS_MAX = YaskawaV1000MonitorData_FAULT_CONTENTS_7_BITS_DRIVE_WORKS_EZ_FAULT_7;
const int YaskawaV1000MonitorData_FAULT_CONTENTS_7_BITS_FAULT_CONTENTS_7_BITS_ARRAYSIZE = YaskawaV1000MonitorData_FAULT_CONTENTS_7_BITS_FAULT_CONTENTS_7_BITS_MAX + 1;

const ::google::protobuf::EnumDescriptor* YaskawaV1000MonitorData_FAULT_CONTENTS_7_BITS_descriptor();
inline const ::std::string& YaskawaV1000MonitorData_FAULT_CONTENTS_7_BITS_Name(YaskawaV1000MonitorData_FAULT_CONTENTS_7_BITS value) {
  return ::google::protobuf::internal::NameOfEnum(
    YaskawaV1000MonitorData_FAULT_CONTENTS_7_BITS_descriptor(), value);
}
inline bool YaskawaV1000MonitorData_FAULT_CONTENTS_7_BITS_Parse(
    const ::std::string& name, YaskawaV1000MonitorData_FAULT_CONTENTS_7_BITS* value) {
  return ::google::protobuf::internal::ParseNamedEnum<YaskawaV1000MonitorData_FAULT_CONTENTS_7_BITS>(
    YaskawaV1000MonitorData_FAULT_CONTENTS_7_BITS_descriptor(), name, value);
}
enum YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS {
  YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS_NOT_USED_16 = 0,
  YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS_UNDERVOLTAGE_ALARM_2 = 1,
  YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS_OVERVOLTAGE_ALARM_2 = 2,
  YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS_HEATSINK_OVERHEAT_ALARM_2 = 4,
  YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS_DRIVE_OVERHEAT_ALARM_2 = 8,
  YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS_OVERTORQUE_1_ALARM_2 = 16,
  YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS_OVERTORQUE_2_ALARM_2 = 32,
  YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS_RUN_COMMANDS_INPUT_ERROR_ALARM_2 = 64,
  YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS_DRIVE_BASEBLOCK_ALARM_2 = 128,
  YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS_EXTERNAL_FAULT_S3_ALARM_2 = 256,
  YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS_EXTERNAL_FAULT_S4_ALARM_2 = 512,
  YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS_EXTERNAL_FAULT_S5_ALARM_2 = 1024,
  YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS_EXTERNAL_FAULT_S6_ALARM_2 = 2048,
  YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS_EXTERNAL_FAULT_S7_ALARM_2 = 4096,
  YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS_OVERSPEED_ALARM_2 = 32768,
  YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS_YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS_YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS_IsValid(int value);
const YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS_ALARM_CONTENTS_2_BITS_MIN = YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS_NOT_USED_16;
const YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS_ALARM_CONTENTS_2_BITS_MAX = YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS_OVERSPEED_ALARM_2;
const int YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS_ALARM_CONTENTS_2_BITS_ARRAYSIZE = YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS_ALARM_CONTENTS_2_BITS_MAX + 1;

const ::google::protobuf::EnumDescriptor* YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS_descriptor();
inline const ::std::string& YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS_Name(YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS value) {
  return ::google::protobuf::internal::NameOfEnum(
    YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS_descriptor(), value);
}
inline bool YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS_Parse(
    const ::std::string& name, YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS* value) {
  return ::google::protobuf::internal::ParseNamedEnum<YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS>(
    YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS_descriptor(), name, value);
}
enum YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS {
  YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS_NOT_USED_17 = 0,
  YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS_EXCESSIVE_SPEED_DEVIATION_ALARM_3 = 1,
  YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS_PG_DISCONNECTED_ALARM_3 = 2,
  YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS_DIGITAL_OPERATOR_CONNECTION_FAULT_ALARM_3 = 4,
  YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS_BUS_COMMUNICATION_ERROR_ALARM_3 = 8,
  YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS_OPTION_COMMUNICATION_ERROR_ALARM_3 = 16,
  YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS_SERIAL_TRANSMISSION_ERRO_ALARM_3 = 32,
  YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS_MOTOR_OVERLOAD_ALARM_3 = 64,
  YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS_DRIVE_OVERLOAD_ALARM_3 = 128,
  YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS_OPTION_CARD_EXTERNAL_FAULT_ALARM_3 = 512,
  YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS_MOTOR_2_SWITHC_COMMAND_INPUT_DURING_RUN_ALARM_3 = 1024,
  YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS_SERIAL_COMMUNICATION_TRANSMISSION_ERROR_ALARM_3 = 4096,
  YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS_UNDERTORQUE_DETECTION_1_ALARM_3 = 8192,
  YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS_UNDERTORQUE_DETECTION_2_ALARM_3 = 16384,
  YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS_BUS_TEST_MODE_ALARM_3 = 32768,
  YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS_YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS_YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS_IsValid(int value);
const YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS_ALARM_CONTENTS_3_BITS_MIN = YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS_NOT_USED_17;
const YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS_ALARM_CONTENTS_3_BITS_MAX = YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS_BUS_TEST_MODE_ALARM_3;
const int YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS_ALARM_CONTENTS_3_BITS_ARRAYSIZE = YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS_ALARM_CONTENTS_3_BITS_MAX + 1;

const ::google::protobuf::EnumDescriptor* YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS_descriptor();
inline const ::std::string& YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS_Name(YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS value) {
  return ::google::protobuf::internal::NameOfEnum(
    YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS_descriptor(), value);
}
inline bool YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS_Parse(
    const ::std::string& name, YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS* value) {
  return ::google::protobuf::internal::ParseNamedEnum<YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS>(
    YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS_descriptor(), name, value);
}
enum YaskawaV1000MonitorData_ALARM_CONTENTS_4_BITS {
  YaskawaV1000MonitorData_ALARM_CONTENTS_4_BITS_NOT_USED_18 = 0,
  YaskawaV1000MonitorData_ALARM_CONTENTS_4_BITS_MOTOR_OVERHEAT_1_ALARM_4 = 2,
  YaskawaV1000MonitorData_ALARM_CONTENTS_4_BITS_PID_FEEDACK_LOSS_L_ALARM_4 = 64,
  YaskawaV1000MonitorData_ALARM_CONTENTS_4_BITS_PID_FEEDACK_LOSS_H_ALARM_4 = 128,
  YaskawaV1000MonitorData_ALARM_CONTENTS_4_BITS_DRIVE_DISABLED_ALARM_4 = 512,
  YaskawaV1000MonitorData_ALARM_CONTENTS_4_BITS_YaskawaV1000MonitorData_ALARM_CONTENTS_4_BITS_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  YaskawaV1000MonitorData_ALARM_CONTENTS_4_BITS_YaskawaV1000MonitorData_ALARM_CONTENTS_4_BITS_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool YaskawaV1000MonitorData_ALARM_CONTENTS_4_BITS_IsValid(int value);
const YaskawaV1000MonitorData_ALARM_CONTENTS_4_BITS YaskawaV1000MonitorData_ALARM_CONTENTS_4_BITS_ALARM_CONTENTS_4_BITS_MIN = YaskawaV1000MonitorData_ALARM_CONTENTS_4_BITS_NOT_USED_18;
const YaskawaV1000MonitorData_ALARM_CONTENTS_4_BITS YaskawaV1000MonitorData_ALARM_CONTENTS_4_BITS_ALARM_CONTENTS_4_BITS_MAX = YaskawaV1000MonitorData_ALARM_CONTENTS_4_BITS_DRIVE_DISABLED_ALARM_4;
const int YaskawaV1000MonitorData_ALARM_CONTENTS_4_BITS_ALARM_CONTENTS_4_BITS_ARRAYSIZE = YaskawaV1000MonitorData_ALARM_CONTENTS_4_BITS_ALARM_CONTENTS_4_BITS_MAX + 1;

const ::google::protobuf::EnumDescriptor* YaskawaV1000MonitorData_ALARM_CONTENTS_4_BITS_descriptor();
inline const ::std::string& YaskawaV1000MonitorData_ALARM_CONTENTS_4_BITS_Name(YaskawaV1000MonitorData_ALARM_CONTENTS_4_BITS value) {
  return ::google::protobuf::internal::NameOfEnum(
    YaskawaV1000MonitorData_ALARM_CONTENTS_4_BITS_descriptor(), value);
}
inline bool YaskawaV1000MonitorData_ALARM_CONTENTS_4_BITS_Parse(
    const ::std::string& name, YaskawaV1000MonitorData_ALARM_CONTENTS_4_BITS* value) {
  return ::google::protobuf::internal::ParseNamedEnum<YaskawaV1000MonitorData_ALARM_CONTENTS_4_BITS>(
    YaskawaV1000MonitorData_ALARM_CONTENTS_4_BITS_descriptor(), name, value);
}
enum YaskawaV1000MonitorData_ALARM_CONTENTS_5_BITS {
  YaskawaV1000MonitorData_ALARM_CONTENTS_5_BITS_NOT_USED_19 = 0,
  YaskawaV1000MonitorData_ALARM_CONTENTS_5_BITS_MECHATROLINK_WATCHDOG_TIMER_ERROR_ALARM_5 = 1,
  YaskawaV1000MonitorData_ALARM_CONTENTS_5_BITS_MECHATROLINK_COMM_CYCLE_SETTING_ERROR_ALARM_5 = 4,
  YaskawaV1000MonitorData_ALARM_CONTENTS_5_BITS_HIGH_CURRENT_ALARM_5 = 8,
  YaskawaV1000MonitorData_ALARM_CONTENTS_5_BITS_COOLING_FAN_MAINTENANCE_TIME_ALARM_5 = 16,
  YaskawaV1000MonitorData_ALARM_CONTENTS_5_BITS_SOFT_CHAGE_BYPASS_RELAY_MAINTENANCE_TIME_ALARM_5 = 32,
  YaskawaV1000MonitorData_ALARM_CONTENTS_5_BITS_SI_SV_EERPOM_ERROR_ALARM_5 = 128,
  YaskawaV1000MonitorData_ALARM_CONTENTS_5_BITS_EXTERNAL_FAULT_S1_ALARM_5 = 256,
  YaskawaV1000MonitorData_ALARM_CONTENTS_5_BITS_EXTERNAL_FAULT_S2_ALARM_5 = 512,
  YaskawaV1000MonitorData_ALARM_CONTENTS_5_BITS_SAFE_DISABLE_INPUT_1_ALARM_5 = 1024,
  YaskawaV1000MonitorData_ALARM_CONTENTS_5_BITS_SAFE_DISABLE_INPUT_2_ALARM_5 = 2048,
  YaskawaV1000MonitorData_ALARM_CONTENTS_5_BITS_MECHANICAL_WEAKENING_DETECTION_1_ALARM_5 = 4096,
  YaskawaV1000MonitorData_ALARM_CONTENTS_5_BITS_MECHANICAL_WEAKENING_DETECTION_2_ALARM_5 = 8192,
  YaskawaV1000MonitorData_ALARM_CONTENTS_5_BITS_YaskawaV1000MonitorData_ALARM_CONTENTS_5_BITS_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  YaskawaV1000MonitorData_ALARM_CONTENTS_5_BITS_YaskawaV1000MonitorData_ALARM_CONTENTS_5_BITS_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool YaskawaV1000MonitorData_ALARM_CONTENTS_5_BITS_IsValid(int value);
const YaskawaV1000MonitorData_ALARM_CONTENTS_5_BITS YaskawaV1000MonitorData_ALARM_CONTENTS_5_BITS_ALARM_CONTENTS_5_BITS_MIN = YaskawaV1000MonitorData_ALARM_CONTENTS_5_BITS_NOT_USED_19;
const YaskawaV1000MonitorData_ALARM_CONTENTS_5_BITS YaskawaV1000MonitorData_ALARM_CONTENTS_5_BITS_ALARM_CONTENTS_5_BITS_MAX = YaskawaV1000MonitorData_ALARM_CONTENTS_5_BITS_MECHANICAL_WEAKENING_DETECTION_2_ALARM_5;
const int YaskawaV1000MonitorData_ALARM_CONTENTS_5_BITS_ALARM_CONTENTS_5_BITS_ARRAYSIZE = YaskawaV1000MonitorData_ALARM_CONTENTS_5_BITS_ALARM_CONTENTS_5_BITS_MAX + 1;

const ::google::protobuf::EnumDescriptor* YaskawaV1000MonitorData_ALARM_CONTENTS_5_BITS_descriptor();
inline const ::std::string& YaskawaV1000MonitorData_ALARM_CONTENTS_5_BITS_Name(YaskawaV1000MonitorData_ALARM_CONTENTS_5_BITS value) {
  return ::google::protobuf::internal::NameOfEnum(
    YaskawaV1000MonitorData_ALARM_CONTENTS_5_BITS_descriptor(), value);
}
inline bool YaskawaV1000MonitorData_ALARM_CONTENTS_5_BITS_Parse(
    const ::std::string& name, YaskawaV1000MonitorData_ALARM_CONTENTS_5_BITS* value) {
  return ::google::protobuf::internal::ParseNamedEnum<YaskawaV1000MonitorData_ALARM_CONTENTS_5_BITS>(
    YaskawaV1000MonitorData_ALARM_CONTENTS_5_BITS_descriptor(), name, value);
}
// ===================================================================

class YaskawaV1000MonitorData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:analogic.ancp00.YaskawaV1000MonitorData) */ {
 public:
  YaskawaV1000MonitorData();
  virtual ~YaskawaV1000MonitorData();

  YaskawaV1000MonitorData(const YaskawaV1000MonitorData& from);

  inline YaskawaV1000MonitorData& operator=(const YaskawaV1000MonitorData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const YaskawaV1000MonitorData& default_instance();

  void Swap(YaskawaV1000MonitorData* other);

  // implements Message ----------------------------------------------

  inline YaskawaV1000MonitorData* New() const { return New(NULL); }

  YaskawaV1000MonitorData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const YaskawaV1000MonitorData& from);
  void MergeFrom(const YaskawaV1000MonitorData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YaskawaV1000MonitorData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef YaskawaV1000MonitorData_DRIVE_STATUS_1_BITS DRIVE_STATUS_1_BITS;
  static const DRIVE_STATUS_1_BITS NOT_USED_1 =
    YaskawaV1000MonitorData_DRIVE_STATUS_1_BITS_NOT_USED_1;
  static const DRIVE_STATUS_1_BITS DURING_RUN_STATUS_1 =
    YaskawaV1000MonitorData_DRIVE_STATUS_1_BITS_DURING_RUN_STATUS_1;
  static const DRIVE_STATUS_1_BITS DURING_REVERSE_STATUS_1 =
    YaskawaV1000MonitorData_DRIVE_STATUS_1_BITS_DURING_REVERSE_STATUS_1;
  static const DRIVE_STATUS_1_BITS DRIVE_READY_STATUS_1 =
    YaskawaV1000MonitorData_DRIVE_STATUS_1_BITS_DRIVE_READY_STATUS_1;
  static const DRIVE_STATUS_1_BITS FAULT_STATUS_1 =
    YaskawaV1000MonitorData_DRIVE_STATUS_1_BITS_FAULT_STATUS_1;
  static const DRIVE_STATUS_1_BITS DATA_SETTING_ERROR_STATUS_1 =
    YaskawaV1000MonitorData_DRIVE_STATUS_1_BITS_DATA_SETTING_ERROR_STATUS_1;
  static const DRIVE_STATUS_1_BITS MULTI_FUNC_CONTACT_OUTPUT_STATUS_1 =
    YaskawaV1000MonitorData_DRIVE_STATUS_1_BITS_MULTI_FUNC_CONTACT_OUTPUT_STATUS_1;
  static const DRIVE_STATUS_1_BITS MULTI_FUNC_PHOTOCOUPLER_OUTPUT_1_STATUS_1 =
    YaskawaV1000MonitorData_DRIVE_STATUS_1_BITS_MULTI_FUNC_PHOTOCOUPLER_OUTPUT_1_STATUS_1;
  static const DRIVE_STATUS_1_BITS MULTI_FUNC_PHOTOCOUPLER_OUTPUT_2_STATUS_1 =
    YaskawaV1000MonitorData_DRIVE_STATUS_1_BITS_MULTI_FUNC_PHOTOCOUPLER_OUTPUT_2_STATUS_1;
  static const DRIVE_STATUS_1_BITS COM_REF_ENABLED_STATUS =
    YaskawaV1000MonitorData_DRIVE_STATUS_1_BITS_COM_REF_ENABLED_STATUS;
  static const DRIVE_STATUS_1_BITS COM_CTRL_ENABLED_STATUS =
    YaskawaV1000MonitorData_DRIVE_STATUS_1_BITS_COM_CTRL_ENABLED_STATUS;
  static inline bool DRIVE_STATUS_1_BITS_IsValid(int value) {
    return YaskawaV1000MonitorData_DRIVE_STATUS_1_BITS_IsValid(value);
  }
  static const DRIVE_STATUS_1_BITS DRIVE_STATUS_1_BITS_MIN =
    YaskawaV1000MonitorData_DRIVE_STATUS_1_BITS_DRIVE_STATUS_1_BITS_MIN;
  static const DRIVE_STATUS_1_BITS DRIVE_STATUS_1_BITS_MAX =
    YaskawaV1000MonitorData_DRIVE_STATUS_1_BITS_DRIVE_STATUS_1_BITS_MAX;
  static const int DRIVE_STATUS_1_BITS_ARRAYSIZE =
    YaskawaV1000MonitorData_DRIVE_STATUS_1_BITS_DRIVE_STATUS_1_BITS_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DRIVE_STATUS_1_BITS_descriptor() {
    return YaskawaV1000MonitorData_DRIVE_STATUS_1_BITS_descriptor();
  }
  static inline const ::std::string& DRIVE_STATUS_1_BITS_Name(DRIVE_STATUS_1_BITS value) {
    return YaskawaV1000MonitorData_DRIVE_STATUS_1_BITS_Name(value);
  }
  static inline bool DRIVE_STATUS_1_BITS_Parse(const ::std::string& name,
      DRIVE_STATUS_1_BITS* value) {
    return YaskawaV1000MonitorData_DRIVE_STATUS_1_BITS_Parse(name, value);
  }

  typedef YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS FAULT_CONTENTS_1_BITS;
  static const FAULT_CONTENTS_1_BITS NOT_USED_2 =
    YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS_NOT_USED_2;
  static const FAULT_CONTENTS_1_BITS OC_GF_IGBT_SC_GF_FAULT_1 =
    YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS_OC_GF_IGBT_SC_GF_FAULT_1;
  static const FAULT_CONTENTS_1_BITS OVERVOLTAGE_FAULT_1 =
    YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS_OVERVOLTAGE_FAULT_1;
  static const FAULT_CONTENTS_1_BITS DRIVE_OVERLOAD_FAULT_1 =
    YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS_DRIVE_OVERLOAD_FAULT_1;
  static const FAULT_CONTENTS_1_BITS OVERHEAT_1_FAULT_1 =
    YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS_OVERHEAT_1_FAULT_1;
  static const FAULT_CONTENTS_1_BITS BRAKING_FAULT_OR_OVERHEAT_1 =
    YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS_BRAKING_FAULT_OR_OVERHEAT_1;
  static const FAULT_CONTENTS_1_BITS PID_FEEDBACK_LOSS_FAULT_1 =
    YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS_PID_FEEDBACK_LOSS_FAULT_1;
  static const FAULT_CONTENTS_1_BITS EXTERNAL_FAULT_1 =
    YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS_EXTERNAL_FAULT_1;
  static const FAULT_CONTENTS_1_BITS CPF_HARDWARE_FAULT_1 =
    YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS_CPF_HARDWARE_FAULT_1;
  static const FAULT_CONTENTS_1_BITS MOTER_OVERLOAD_FAULT_1 =
    YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS_MOTER_OVERLOAD_FAULT_1;
  static const FAULT_CONTENTS_1_BITS PG_DISCONNECTED_FAULT_1 =
    YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS_PG_DISCONNECTED_FAULT_1;
  static const FAULT_CONTENTS_1_BITS MAIN_CIRCUIT_UNDER_VOLTAGE_FAULT_1 =
    YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS_MAIN_CIRCUIT_UNDER_VOLTAGE_FAULT_1;
  static const FAULT_CONTENTS_1_BITS UNDERVOLTAGE_FAULT_1 =
    YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS_UNDERVOLTAGE_FAULT_1;
  static const FAULT_CONTENTS_1_BITS OUT_PHASE_LOSS_FAULT_1 =
    YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS_OUT_PHASE_LOSS_FAULT_1;
  static const FAULT_CONTENTS_1_BITS COMM_ERROR_FAULT_1 =
    YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS_COMM_ERROR_FAULT_1;
  static const FAULT_CONTENTS_1_BITS OPERATOR_CONNECT_FAULT_1 =
    YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS_OPERATOR_CONNECT_FAULT_1;
  static inline bool FAULT_CONTENTS_1_BITS_IsValid(int value) {
    return YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS_IsValid(value);
  }
  static const FAULT_CONTENTS_1_BITS FAULT_CONTENTS_1_BITS_MIN =
    YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS_FAULT_CONTENTS_1_BITS_MIN;
  static const FAULT_CONTENTS_1_BITS FAULT_CONTENTS_1_BITS_MAX =
    YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS_FAULT_CONTENTS_1_BITS_MAX;
  static const int FAULT_CONTENTS_1_BITS_ARRAYSIZE =
    YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS_FAULT_CONTENTS_1_BITS_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FAULT_CONTENTS_1_BITS_descriptor() {
    return YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS_descriptor();
  }
  static inline const ::std::string& FAULT_CONTENTS_1_BITS_Name(FAULT_CONTENTS_1_BITS value) {
    return YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS_Name(value);
  }
  static inline bool FAULT_CONTENTS_1_BITS_Parse(const ::std::string& name,
      FAULT_CONTENTS_1_BITS* value) {
    return YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS_Parse(name, value);
  }

  typedef YaskawaV1000MonitorData_DATA_LINK_STATUS_BITS DATA_LINK_STATUS_BITS;
  static const DATA_LINK_STATUS_BITS NOT_USED_3 =
    YaskawaV1000MonitorData_DATA_LINK_STATUS_BITS_NOT_USED_3;
  static const DATA_LINK_STATUS_BITS WRITING_DATA =
    YaskawaV1000MonitorData_DATA_LINK_STATUS_BITS_WRITING_DATA;
  static const DATA_LINK_STATUS_BITS UPPER_OR_LOWER_LIMIT_ERROR =
    YaskawaV1000MonitorData_DATA_LINK_STATUS_BITS_UPPER_OR_LOWER_LIMIT_ERROR;
  static const DATA_LINK_STATUS_BITS DATA_CONFORMITY_ERROR =
    YaskawaV1000MonitorData_DATA_LINK_STATUS_BITS_DATA_CONFORMITY_ERROR;
  static const DATA_LINK_STATUS_BITS WRITING_TO_EPROM =
    YaskawaV1000MonitorData_DATA_LINK_STATUS_BITS_WRITING_TO_EPROM;
  static inline bool DATA_LINK_STATUS_BITS_IsValid(int value) {
    return YaskawaV1000MonitorData_DATA_LINK_STATUS_BITS_IsValid(value);
  }
  static const DATA_LINK_STATUS_BITS DATA_LINK_STATUS_BITS_MIN =
    YaskawaV1000MonitorData_DATA_LINK_STATUS_BITS_DATA_LINK_STATUS_BITS_MIN;
  static const DATA_LINK_STATUS_BITS DATA_LINK_STATUS_BITS_MAX =
    YaskawaV1000MonitorData_DATA_LINK_STATUS_BITS_DATA_LINK_STATUS_BITS_MAX;
  static const int DATA_LINK_STATUS_BITS_ARRAYSIZE =
    YaskawaV1000MonitorData_DATA_LINK_STATUS_BITS_DATA_LINK_STATUS_BITS_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DATA_LINK_STATUS_BITS_descriptor() {
    return YaskawaV1000MonitorData_DATA_LINK_STATUS_BITS_descriptor();
  }
  static inline const ::std::string& DATA_LINK_STATUS_BITS_Name(DATA_LINK_STATUS_BITS value) {
    return YaskawaV1000MonitorData_DATA_LINK_STATUS_BITS_Name(value);
  }
  static inline bool DATA_LINK_STATUS_BITS_Parse(const ::std::string& name,
      DATA_LINK_STATUS_BITS* value) {
    return YaskawaV1000MonitorData_DATA_LINK_STATUS_BITS_Parse(name, value);
  }

  typedef YaskawaV1000MonitorData_FAULT_CONTENTS_2_BITS FAULT_CONTENTS_2_BITS;
  static const FAULT_CONTENTS_2_BITS NOT_USED_4 =
    YaskawaV1000MonitorData_FAULT_CONTENTS_2_BITS_NOT_USED_4;
  static const FAULT_CONTENTS_2_BITS IGBT_SHORT_CIRCUIT_OR_GROUND_FAULT_2 =
    YaskawaV1000MonitorData_FAULT_CONTENTS_2_BITS_IGBT_SHORT_CIRCUIT_OR_GROUND_FAULT_2;
  static const FAULT_CONTENTS_2_BITS GROUND_FAULT_2 =
    YaskawaV1000MonitorData_FAULT_CONTENTS_2_BITS_GROUND_FAULT_2;
  static const FAULT_CONTENTS_2_BITS INPUT_PHASE_LOSS_FAULT_2 =
    YaskawaV1000MonitorData_FAULT_CONTENTS_2_BITS_INPUT_PHASE_LOSS_FAULT_2;
  static const FAULT_CONTENTS_2_BITS OUTPUT_PHASE_LOSS_FAULT_2 =
    YaskawaV1000MonitorData_FAULT_CONTENTS_2_BITS_OUTPUT_PHASE_LOSS_FAULT_2;
  static const FAULT_CONTENTS_2_BITS BRAKING_RESISTOR_OR_OVERHEAT_FAULT_2 =
    YaskawaV1000MonitorData_FAULT_CONTENTS_2_BITS_BRAKING_RESISTOR_OR_OVERHEAT_FAULT_2;
  static const FAULT_CONTENTS_2_BITS MOTOR_OVERHEAT_FAULT_2 =
    YaskawaV1000MonitorData_FAULT_CONTENTS_2_BITS_MOTOR_OVERHEAT_FAULT_2;
  static inline bool FAULT_CONTENTS_2_BITS_IsValid(int value) {
    return YaskawaV1000MonitorData_FAULT_CONTENTS_2_BITS_IsValid(value);
  }
  static const FAULT_CONTENTS_2_BITS FAULT_CONTENTS_2_BITS_MIN =
    YaskawaV1000MonitorData_FAULT_CONTENTS_2_BITS_FAULT_CONTENTS_2_BITS_MIN;
  static const FAULT_CONTENTS_2_BITS FAULT_CONTENTS_2_BITS_MAX =
    YaskawaV1000MonitorData_FAULT_CONTENTS_2_BITS_FAULT_CONTENTS_2_BITS_MAX;
  static const int FAULT_CONTENTS_2_BITS_ARRAYSIZE =
    YaskawaV1000MonitorData_FAULT_CONTENTS_2_BITS_FAULT_CONTENTS_2_BITS_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FAULT_CONTENTS_2_BITS_descriptor() {
    return YaskawaV1000MonitorData_FAULT_CONTENTS_2_BITS_descriptor();
  }
  static inline const ::std::string& FAULT_CONTENTS_2_BITS_Name(FAULT_CONTENTS_2_BITS value) {
    return YaskawaV1000MonitorData_FAULT_CONTENTS_2_BITS_Name(value);
  }
  static inline bool FAULT_CONTENTS_2_BITS_Parse(const ::std::string& name,
      FAULT_CONTENTS_2_BITS* value) {
    return YaskawaV1000MonitorData_FAULT_CONTENTS_2_BITS_Parse(name, value);
  }

  typedef YaskawaV1000MonitorData_ALARM_CONTENTS_1_BITS ALARM_CONTENTS_1_BITS;
  static const ALARM_CONTENTS_1_BITS NOT_USED_5 =
    YaskawaV1000MonitorData_ALARM_CONTENTS_1_BITS_NOT_USED_5;
  static const ALARM_CONTENTS_1_BITS RUN_COMMAND_INPUT_ERROR_ALARM_1 =
    YaskawaV1000MonitorData_ALARM_CONTENTS_1_BITS_RUN_COMMAND_INPUT_ERROR_ALARM_1;
  static const ALARM_CONTENTS_1_BITS DRIVE_BASEBLOCK_ALARM_1 =
    YaskawaV1000MonitorData_ALARM_CONTENTS_1_BITS_DRIVE_BASEBLOCK_ALARM_1;
  static const ALARM_CONTENTS_1_BITS OVERTORQUE_DETECTION_1_ALARM_1 =
    YaskawaV1000MonitorData_ALARM_CONTENTS_1_BITS_OVERTORQUE_DETECTION_1_ALARM_1;
  static const ALARM_CONTENTS_1_BITS HEATSINK_OVERHEAT_ALARM_1 =
    YaskawaV1000MonitorData_ALARM_CONTENTS_1_BITS_HEATSINK_OVERHEAT_ALARM_1;
  static const ALARM_CONTENTS_1_BITS OVERVOLTAGE_ALARM_ALARM_1 =
    YaskawaV1000MonitorData_ALARM_CONTENTS_1_BITS_OVERVOLTAGE_ALARM_ALARM_1;
  static const ALARM_CONTENTS_1_BITS UNDERVOLTAGE_ALARM_ALARM_1 =
    YaskawaV1000MonitorData_ALARM_CONTENTS_1_BITS_UNDERVOLTAGE_ALARM_ALARM_1;
  static const ALARM_CONTENTS_1_BITS BUS_COMM_ERROR_ALARM_1 =
    YaskawaV1000MonitorData_ALARM_CONTENTS_1_BITS_BUS_COMM_ERROR_ALARM_1;
  static const ALARM_CONTENTS_1_BITS OPTION_COMM_ERROR_ALARM_1 =
    YaskawaV1000MonitorData_ALARM_CONTENTS_1_BITS_OPTION_COMM_ERROR_ALARM_1;
  static const ALARM_CONTENTS_1_BITS UNDERTORQUE_DETECTION_ALARM_1 =
    YaskawaV1000MonitorData_ALARM_CONTENTS_1_BITS_UNDERTORQUE_DETECTION_ALARM_1;
  static const ALARM_CONTENTS_1_BITS MOTOR_OVERHEAT_ALARM_1 =
    YaskawaV1000MonitorData_ALARM_CONTENTS_1_BITS_MOTOR_OVERHEAT_ALARM_1;
  static const ALARM_CONTENTS_1_BITS PID_FEEDBACK_LOSS_ALARM_1 =
    YaskawaV1000MonitorData_ALARM_CONTENTS_1_BITS_PID_FEEDBACK_LOSS_ALARM_1;
  static const ALARM_CONTENTS_1_BITS SERIAL_COMM_ERROR_ALARM_1 =
    YaskawaV1000MonitorData_ALARM_CONTENTS_1_BITS_SERIAL_COMM_ERROR_ALARM_1;
  static inline bool ALARM_CONTENTS_1_BITS_IsValid(int value) {
    return YaskawaV1000MonitorData_ALARM_CONTENTS_1_BITS_IsValid(value);
  }
  static const ALARM_CONTENTS_1_BITS ALARM_CONTENTS_1_BITS_MIN =
    YaskawaV1000MonitorData_ALARM_CONTENTS_1_BITS_ALARM_CONTENTS_1_BITS_MIN;
  static const ALARM_CONTENTS_1_BITS ALARM_CONTENTS_1_BITS_MAX =
    YaskawaV1000MonitorData_ALARM_CONTENTS_1_BITS_ALARM_CONTENTS_1_BITS_MAX;
  static const int ALARM_CONTENTS_1_BITS_ARRAYSIZE =
    YaskawaV1000MonitorData_ALARM_CONTENTS_1_BITS_ALARM_CONTENTS_1_BITS_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ALARM_CONTENTS_1_BITS_descriptor() {
    return YaskawaV1000MonitorData_ALARM_CONTENTS_1_BITS_descriptor();
  }
  static inline const ::std::string& ALARM_CONTENTS_1_BITS_Name(ALARM_CONTENTS_1_BITS value) {
    return YaskawaV1000MonitorData_ALARM_CONTENTS_1_BITS_Name(value);
  }
  static inline bool ALARM_CONTENTS_1_BITS_Parse(const ::std::string& name,
      ALARM_CONTENTS_1_BITS* value) {
    return YaskawaV1000MonitorData_ALARM_CONTENTS_1_BITS_Parse(name, value);
  }

  typedef YaskawaV1000MonitorData_INPUT_TERMINAL_STATUS_BITS INPUT_TERMINAL_STATUS_BITS;
  static const INPUT_TERMINAL_STATUS_BITS NOT_USED_6 =
    YaskawaV1000MonitorData_INPUT_TERMINAL_STATUS_BITS_NOT_USED_6;
  static const INPUT_TERMINAL_STATUS_BITS TERMINAL_S1_CLOSED =
    YaskawaV1000MonitorData_INPUT_TERMINAL_STATUS_BITS_TERMINAL_S1_CLOSED;
  static const INPUT_TERMINAL_STATUS_BITS TERMINAL_S2_CLOSED =
    YaskawaV1000MonitorData_INPUT_TERMINAL_STATUS_BITS_TERMINAL_S2_CLOSED;
  static const INPUT_TERMINAL_STATUS_BITS TERMINAL_S3_CLOSED =
    YaskawaV1000MonitorData_INPUT_TERMINAL_STATUS_BITS_TERMINAL_S3_CLOSED;
  static const INPUT_TERMINAL_STATUS_BITS TERMINAL_S4_CLOSED =
    YaskawaV1000MonitorData_INPUT_TERMINAL_STATUS_BITS_TERMINAL_S4_CLOSED;
  static const INPUT_TERMINAL_STATUS_BITS TERMINAL_S5_CLOSED =
    YaskawaV1000MonitorData_INPUT_TERMINAL_STATUS_BITS_TERMINAL_S5_CLOSED;
  static const INPUT_TERMINAL_STATUS_BITS TERMINAL_S6_CLOSED =
    YaskawaV1000MonitorData_INPUT_TERMINAL_STATUS_BITS_TERMINAL_S6_CLOSED;
  static const INPUT_TERMINAL_STATUS_BITS TERMINAL_S7_CLOSED =
    YaskawaV1000MonitorData_INPUT_TERMINAL_STATUS_BITS_TERMINAL_S7_CLOSED;
  static inline bool INPUT_TERMINAL_STATUS_BITS_IsValid(int value) {
    return YaskawaV1000MonitorData_INPUT_TERMINAL_STATUS_BITS_IsValid(value);
  }
  static const INPUT_TERMINAL_STATUS_BITS INPUT_TERMINAL_STATUS_BITS_MIN =
    YaskawaV1000MonitorData_INPUT_TERMINAL_STATUS_BITS_INPUT_TERMINAL_STATUS_BITS_MIN;
  static const INPUT_TERMINAL_STATUS_BITS INPUT_TERMINAL_STATUS_BITS_MAX =
    YaskawaV1000MonitorData_INPUT_TERMINAL_STATUS_BITS_INPUT_TERMINAL_STATUS_BITS_MAX;
  static const int INPUT_TERMINAL_STATUS_BITS_ARRAYSIZE =
    YaskawaV1000MonitorData_INPUT_TERMINAL_STATUS_BITS_INPUT_TERMINAL_STATUS_BITS_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  INPUT_TERMINAL_STATUS_BITS_descriptor() {
    return YaskawaV1000MonitorData_INPUT_TERMINAL_STATUS_BITS_descriptor();
  }
  static inline const ::std::string& INPUT_TERMINAL_STATUS_BITS_Name(INPUT_TERMINAL_STATUS_BITS value) {
    return YaskawaV1000MonitorData_INPUT_TERMINAL_STATUS_BITS_Name(value);
  }
  static inline bool INPUT_TERMINAL_STATUS_BITS_Parse(const ::std::string& name,
      INPUT_TERMINAL_STATUS_BITS* value) {
    return YaskawaV1000MonitorData_INPUT_TERMINAL_STATUS_BITS_Parse(name, value);
  }

  typedef YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS DRIVE_STATUS_2_BITS;
  static const DRIVE_STATUS_2_BITS NOT_USED_7 =
    YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS_NOT_USED_7;
  static const DRIVE_STATUS_2_BITS DURING_RUN_STATUS_2 =
    YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS_DURING_RUN_STATUS_2;
  static const DRIVE_STATUS_2_BITS ZERO_SPEED_STATUS_2 =
    YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS_ZERO_SPEED_STATUS_2;
  static const DRIVE_STATUS_2_BITS SPEED_AGREE_STATUS_2 =
    YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS_SPEED_AGREE_STATUS_2;
  static const DRIVE_STATUS_2_BITS USER_SPEED_AGREE_STATUS_2 =
    YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS_USER_SPEED_AGREE_STATUS_2;
  static const DRIVE_STATUS_2_BITS FREQ_DETECT_1_STATUS_2 =
    YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS_FREQ_DETECT_1_STATUS_2;
  static const DRIVE_STATUS_2_BITS FREQ_DETECT_2_STATUS_2 =
    YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS_FREQ_DETECT_2_STATUS_2;
  static const DRIVE_STATUS_2_BITS DRIVE_READY_STATUS_2 =
    YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS_DRIVE_READY_STATUS_2;
  static const DRIVE_STATUS_2_BITS DURING_UNDERVOLTAGE_STATUS_2 =
    YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS_DURING_UNDERVOLTAGE_STATUS_2;
  static const DRIVE_STATUS_2_BITS DURING_BASEBLOCK_STATUS_2 =
    YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS_DURING_BASEBLOCK_STATUS_2;
  static const DRIVE_STATUS_2_BITS FREQ_REF_FROM_KEYPAD_STATUS_2 =
    YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS_FREQ_REF_FROM_KEYPAD_STATUS_2;
  static const DRIVE_STATUS_2_BITS RUN_COMMAND_FROM_KEYPAD_STATUS_2 =
    YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS_RUN_COMMAND_FROM_KEYPAD_STATUS_2;
  static const DRIVE_STATUS_2_BITS UNDER_OVER_TORQUE_1_2_STATUS_2 =
    YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS_UNDER_OVER_TORQUE_1_2_STATUS_2;
  static const DRIVE_STATUS_2_BITS FREQ_REF_LOSS_STATUS_2 =
    YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS_FREQ_REF_LOSS_STATUS_2;
  static const DRIVE_STATUS_2_BITS DURING_FAULT_RESTART_STATUS_2 =
    YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS_DURING_FAULT_RESTART_STATUS_2;
  static const DRIVE_STATUS_2_BITS FAULT_STATUS_2 =
    YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS_FAULT_STATUS_2;
  static const DRIVE_STATUS_2_BITS COMM_TIMEOUT_STATUS_2 =
    YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS_COMM_TIMEOUT_STATUS_2;
  static inline bool DRIVE_STATUS_2_BITS_IsValid(int value) {
    return YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS_IsValid(value);
  }
  static const DRIVE_STATUS_2_BITS DRIVE_STATUS_2_BITS_MIN =
    YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS_DRIVE_STATUS_2_BITS_MIN;
  static const DRIVE_STATUS_2_BITS DRIVE_STATUS_2_BITS_MAX =
    YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS_DRIVE_STATUS_2_BITS_MAX;
  static const int DRIVE_STATUS_2_BITS_ARRAYSIZE =
    YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS_DRIVE_STATUS_2_BITS_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DRIVE_STATUS_2_BITS_descriptor() {
    return YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS_descriptor();
  }
  static inline const ::std::string& DRIVE_STATUS_2_BITS_Name(DRIVE_STATUS_2_BITS value) {
    return YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS_Name(value);
  }
  static inline bool DRIVE_STATUS_2_BITS_Parse(const ::std::string& name,
      DRIVE_STATUS_2_BITS* value) {
    return YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS_Parse(name, value);
  }

  typedef YaskawaV1000MonitorData_OUTPUT_TERMINAL_STATUS_BITS OUTPUT_TERMINAL_STATUS_BITS;
  static const OUTPUT_TERMINAL_STATUS_BITS NOT_USED_8 =
    YaskawaV1000MonitorData_OUTPUT_TERMINAL_STATUS_BITS_NOT_USED_8;
  static const OUTPUT_TERMINAL_STATUS_BITS MULTI_FUNC_CONTACT_OUTPUT =
    YaskawaV1000MonitorData_OUTPUT_TERMINAL_STATUS_BITS_MULTI_FUNC_CONTACT_OUTPUT;
  static const OUTPUT_TERMINAL_STATUS_BITS MULTI_FUNC_PHOTOCOUPLER_OUTPUT_1 =
    YaskawaV1000MonitorData_OUTPUT_TERMINAL_STATUS_BITS_MULTI_FUNC_PHOTOCOUPLER_OUTPUT_1;
  static const OUTPUT_TERMINAL_STATUS_BITS MULTI_FUNC_PHOTOCOUPLER_OUTPUT_2 =
    YaskawaV1000MonitorData_OUTPUT_TERMINAL_STATUS_BITS_MULTI_FUNC_PHOTOCOUPLER_OUTPUT_2;
  static inline bool OUTPUT_TERMINAL_STATUS_BITS_IsValid(int value) {
    return YaskawaV1000MonitorData_OUTPUT_TERMINAL_STATUS_BITS_IsValid(value);
  }
  static const OUTPUT_TERMINAL_STATUS_BITS OUTPUT_TERMINAL_STATUS_BITS_MIN =
    YaskawaV1000MonitorData_OUTPUT_TERMINAL_STATUS_BITS_OUTPUT_TERMINAL_STATUS_BITS_MIN;
  static const OUTPUT_TERMINAL_STATUS_BITS OUTPUT_TERMINAL_STATUS_BITS_MAX =
    YaskawaV1000MonitorData_OUTPUT_TERMINAL_STATUS_BITS_OUTPUT_TERMINAL_STATUS_BITS_MAX;
  static const int OUTPUT_TERMINAL_STATUS_BITS_ARRAYSIZE =
    YaskawaV1000MonitorData_OUTPUT_TERMINAL_STATUS_BITS_OUTPUT_TERMINAL_STATUS_BITS_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OUTPUT_TERMINAL_STATUS_BITS_descriptor() {
    return YaskawaV1000MonitorData_OUTPUT_TERMINAL_STATUS_BITS_descriptor();
  }
  static inline const ::std::string& OUTPUT_TERMINAL_STATUS_BITS_Name(OUTPUT_TERMINAL_STATUS_BITS value) {
    return YaskawaV1000MonitorData_OUTPUT_TERMINAL_STATUS_BITS_Name(value);
  }
  static inline bool OUTPUT_TERMINAL_STATUS_BITS_Parse(const ::std::string& name,
      OUTPUT_TERMINAL_STATUS_BITS* value) {
    return YaskawaV1000MonitorData_OUTPUT_TERMINAL_STATUS_BITS_Parse(name, value);
  }

  typedef YaskawaV1000MonitorData_COMM_ERROR_LOG_BITS COMM_ERROR_LOG_BITS;
  static const COMM_ERROR_LOG_BITS NOT_USED_9 =
    YaskawaV1000MonitorData_COMM_ERROR_LOG_BITS_NOT_USED_9;
  static const COMM_ERROR_LOG_BITS CRC_ERROR =
    YaskawaV1000MonitorData_COMM_ERROR_LOG_BITS_CRC_ERROR;
  static const COMM_ERROR_LOG_BITS DATA_LENGTH_ERROR =
    YaskawaV1000MonitorData_COMM_ERROR_LOG_BITS_DATA_LENGTH_ERROR;
  static const COMM_ERROR_LOG_BITS PARITY_ERROR =
    YaskawaV1000MonitorData_COMM_ERROR_LOG_BITS_PARITY_ERROR;
  static const COMM_ERROR_LOG_BITS OVERRUN_ERROR =
    YaskawaV1000MonitorData_COMM_ERROR_LOG_BITS_OVERRUN_ERROR;
  static const COMM_ERROR_LOG_BITS FRAMEING_ERROR =
    YaskawaV1000MonitorData_COMM_ERROR_LOG_BITS_FRAMEING_ERROR;
  static const COMM_ERROR_LOG_BITS TIMEOUT =
    YaskawaV1000MonitorData_COMM_ERROR_LOG_BITS_TIMEOUT;
  static inline bool COMM_ERROR_LOG_BITS_IsValid(int value) {
    return YaskawaV1000MonitorData_COMM_ERROR_LOG_BITS_IsValid(value);
  }
  static const COMM_ERROR_LOG_BITS COMM_ERROR_LOG_BITS_MIN =
    YaskawaV1000MonitorData_COMM_ERROR_LOG_BITS_COMM_ERROR_LOG_BITS_MIN;
  static const COMM_ERROR_LOG_BITS COMM_ERROR_LOG_BITS_MAX =
    YaskawaV1000MonitorData_COMM_ERROR_LOG_BITS_COMM_ERROR_LOG_BITS_MAX;
  static const int COMM_ERROR_LOG_BITS_ARRAYSIZE =
    YaskawaV1000MonitorData_COMM_ERROR_LOG_BITS_COMM_ERROR_LOG_BITS_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  COMM_ERROR_LOG_BITS_descriptor() {
    return YaskawaV1000MonitorData_COMM_ERROR_LOG_BITS_descriptor();
  }
  static inline const ::std::string& COMM_ERROR_LOG_BITS_Name(COMM_ERROR_LOG_BITS value) {
    return YaskawaV1000MonitorData_COMM_ERROR_LOG_BITS_Name(value);
  }
  static inline bool COMM_ERROR_LOG_BITS_Parse(const ::std::string& name,
      COMM_ERROR_LOG_BITS* value) {
    return YaskawaV1000MonitorData_COMM_ERROR_LOG_BITS_Parse(name, value);
  }

  typedef YaskawaV1000MonitorData_DRIVE_STATUS_BITS DRIVE_STATUS_BITS;
  static const DRIVE_STATUS_BITS NOT_USED_10 =
    YaskawaV1000MonitorData_DRIVE_STATUS_BITS_NOT_USED_10;
  static const DRIVE_STATUS_BITS DURING_RUN_STATUS =
    YaskawaV1000MonitorData_DRIVE_STATUS_BITS_DURING_RUN_STATUS;
  static const DRIVE_STATUS_BITS DURING_ZERO_SPEED_STATUS =
    YaskawaV1000MonitorData_DRIVE_STATUS_BITS_DURING_ZERO_SPEED_STATUS;
  static const DRIVE_STATUS_BITS DURING_REVERSE_RUN_STATUS =
    YaskawaV1000MonitorData_DRIVE_STATUS_BITS_DURING_REVERSE_RUN_STATUS;
  static const DRIVE_STATUS_BITS DURING_FAULT_RESET_STATUS =
    YaskawaV1000MonitorData_DRIVE_STATUS_BITS_DURING_FAULT_RESET_STATUS;
  static const DRIVE_STATUS_BITS DURING_SPEED_AGREE_STATUS =
    YaskawaV1000MonitorData_DRIVE_STATUS_BITS_DURING_SPEED_AGREE_STATUS;
  static const DRIVE_STATUS_BITS DRIVE_READY_STATUS =
    YaskawaV1000MonitorData_DRIVE_STATUS_BITS_DRIVE_READY_STATUS;
  static const DRIVE_STATUS_BITS ALARM_STATUS =
    YaskawaV1000MonitorData_DRIVE_STATUS_BITS_ALARM_STATUS;
  static const DRIVE_STATUS_BITS FAULT_STATUS =
    YaskawaV1000MonitorData_DRIVE_STATUS_BITS_FAULT_STATUS;
  static const DRIVE_STATUS_BITS DURING_OPERATION_ERROR_STATUS =
    YaskawaV1000MonitorData_DRIVE_STATUS_BITS_DURING_OPERATION_ERROR_STATUS;
  static const DRIVE_STATUS_BITS DURING_MOMENTARY_POWER_LOSS_STATUS =
    YaskawaV1000MonitorData_DRIVE_STATUS_BITS_DURING_MOMENTARY_POWER_LOSS_STATUS;
  static const DRIVE_STATUS_BITS MOTOR_2_SELECTED_STATUS =
    YaskawaV1000MonitorData_DRIVE_STATUS_BITS_MOTOR_2_SELECTED_STATUS;
  static const DRIVE_STATUS_BITS COM_REF_NET_REF_STATUS =
    YaskawaV1000MonitorData_DRIVE_STATUS_BITS_COM_REF_NET_REF_STATUS;
  static const DRIVE_STATUS_BITS COM_CTRL_NET_CTRL_STATUS =
    YaskawaV1000MonitorData_DRIVE_STATUS_BITS_COM_CTRL_NET_CTRL_STATUS;
  static inline bool DRIVE_STATUS_BITS_IsValid(int value) {
    return YaskawaV1000MonitorData_DRIVE_STATUS_BITS_IsValid(value);
  }
  static const DRIVE_STATUS_BITS DRIVE_STATUS_BITS_MIN =
    YaskawaV1000MonitorData_DRIVE_STATUS_BITS_DRIVE_STATUS_BITS_MIN;
  static const DRIVE_STATUS_BITS DRIVE_STATUS_BITS_MAX =
    YaskawaV1000MonitorData_DRIVE_STATUS_BITS_DRIVE_STATUS_BITS_MAX;
  static const int DRIVE_STATUS_BITS_ARRAYSIZE =
    YaskawaV1000MonitorData_DRIVE_STATUS_BITS_DRIVE_STATUS_BITS_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DRIVE_STATUS_BITS_descriptor() {
    return YaskawaV1000MonitorData_DRIVE_STATUS_BITS_descriptor();
  }
  static inline const ::std::string& DRIVE_STATUS_BITS_Name(DRIVE_STATUS_BITS value) {
    return YaskawaV1000MonitorData_DRIVE_STATUS_BITS_Name(value);
  }
  static inline bool DRIVE_STATUS_BITS_Parse(const ::std::string& name,
      DRIVE_STATUS_BITS* value) {
    return YaskawaV1000MonitorData_DRIVE_STATUS_BITS_Parse(name, value);
  }

  typedef YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS FAULT_CONTENTS_3_BITS;
  static const FAULT_CONTENTS_3_BITS NOT_USED_11 =
    YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS_NOT_USED_11;
  static const FAULT_CONTENTS_3_BITS UNDERVOLTAGE_FAULT_3 =
    YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS_UNDERVOLTAGE_FAULT_3;
  static const FAULT_CONTENTS_3_BITS CONTROL_POWER_SUPPLY_UNDERVOLTAGE_FAULT_3 =
    YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS_CONTROL_POWER_SUPPLY_UNDERVOLTAGE_FAULT_3;
  static const FAULT_CONTENTS_3_BITS SOFT_CHARGE_CIRCUIT_FAULT_3 =
    YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS_SOFT_CHARGE_CIRCUIT_FAULT_3;
  static const FAULT_CONTENTS_3_BITS IGBT_SHORT_CIRCUIT_OR_GROUND_FAULT_3 =
    YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS_IGBT_SHORT_CIRCUIT_OR_GROUND_FAULT_3;
  static const FAULT_CONTENTS_3_BITS GROUND_FAULT_3 =
    YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS_GROUND_FAULT_3;
  static const FAULT_CONTENTS_3_BITS OVERCURRENT_FAULT_3 =
    YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS_OVERCURRENT_FAULT_3;
  static const FAULT_CONTENTS_3_BITS OVERVOLTAGE_FAULT_3 =
    YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS_OVERVOLTAGE_FAULT_3;
  static const FAULT_CONTENTS_3_BITS HEATSINK_OVERHEAT_1_FAULT_3 =
    YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS_HEATSINK_OVERHEAT_1_FAULT_3;
  static const FAULT_CONTENTS_3_BITS HEATSINK_OVERHEAT_2_FAULT_3 =
    YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS_HEATSINK_OVERHEAT_2_FAULT_3;
  static const FAULT_CONTENTS_3_BITS MOTOR_OVERLOAD_FAULT_3 =
    YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS_MOTOR_OVERLOAD_FAULT_3;
  static const FAULT_CONTENTS_3_BITS DRIVE_OVERLOAD_FAULT_3 =
    YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS_DRIVE_OVERLOAD_FAULT_3;
  static const FAULT_CONTENTS_3_BITS OVERTORQUE_DETECTION_1_FAULT_3 =
    YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS_OVERTORQUE_DETECTION_1_FAULT_3;
  static const FAULT_CONTENTS_3_BITS OVERTORQUE_DETECTION_2_FAULT_3 =
    YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS_OVERTORQUE_DETECTION_2_FAULT_3;
  static const FAULT_CONTENTS_3_BITS DYNAMIC_BRAKING_TRANSISTOR_FAULT_3 =
    YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS_DYNAMIC_BRAKING_TRANSISTOR_FAULT_3;
  static const FAULT_CONTENTS_3_BITS BRAKING_RESISTOR_OVERHEAT_FAULT_3 =
    YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS_BRAKING_RESISTOR_OVERHEAT_FAULT_3;
  static inline bool FAULT_CONTENTS_3_BITS_IsValid(int value) {
    return YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS_IsValid(value);
  }
  static const FAULT_CONTENTS_3_BITS FAULT_CONTENTS_3_BITS_MIN =
    YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS_FAULT_CONTENTS_3_BITS_MIN;
  static const FAULT_CONTENTS_3_BITS FAULT_CONTENTS_3_BITS_MAX =
    YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS_FAULT_CONTENTS_3_BITS_MAX;
  static const int FAULT_CONTENTS_3_BITS_ARRAYSIZE =
    YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS_FAULT_CONTENTS_3_BITS_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FAULT_CONTENTS_3_BITS_descriptor() {
    return YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS_descriptor();
  }
  static inline const ::std::string& FAULT_CONTENTS_3_BITS_Name(FAULT_CONTENTS_3_BITS value) {
    return YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS_Name(value);
  }
  static inline bool FAULT_CONTENTS_3_BITS_Parse(const ::std::string& name,
      FAULT_CONTENTS_3_BITS* value) {
    return YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS_Parse(name, value);
  }

  typedef YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS FAULT_CONTENTS_4_BITS;
  static const FAULT_CONTENTS_4_BITS NOT_USED_12 =
    YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS_NOT_USED_12;
  static const FAULT_CONTENTS_4_BITS EXTERNAL_INPUT_S3_FAULT_4 =
    YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS_EXTERNAL_INPUT_S3_FAULT_4;
  static const FAULT_CONTENTS_4_BITS EXTERNAL_INPUT_S4_FAULT_4 =
    YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS_EXTERNAL_INPUT_S4_FAULT_4;
  static const FAULT_CONTENTS_4_BITS EXTERNAL_INPUT_S5_FAULT_4 =
    YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS_EXTERNAL_INPUT_S5_FAULT_4;
  static const FAULT_CONTENTS_4_BITS EXTERNAL_INPUT_S6_FAULT_4 =
    YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS_EXTERNAL_INPUT_S6_FAULT_4;
  static const FAULT_CONTENTS_4_BITS EXTERNAL_INPUT_S7_FAULT_4 =
    YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS_EXTERNAL_INPUT_S7_FAULT_4;
  static const FAULT_CONTENTS_4_BITS OVERSPEED_FAULT_4 =
    YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS_OVERSPEED_FAULT_4;
  static const FAULT_CONTENTS_4_BITS EXCESSIVE_SPEED_DEVIATION_FAULT_4 =
    YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS_EXCESSIVE_SPEED_DEVIATION_FAULT_4;
  static const FAULT_CONTENTS_4_BITS PG_DISCONNECTED_FAULT_4 =
    YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS_PG_DISCONNECTED_FAULT_4;
  static const FAULT_CONTENTS_4_BITS INPUT_PHASE_LOSS_FAULT_4 =
    YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS_INPUT_PHASE_LOSS_FAULT_4;
  static const FAULT_CONTENTS_4_BITS OUTPUT_PHASE_LOSS_FAULT_4 =
    YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS_OUTPUT_PHASE_LOSS_FAULT_4;
  static const FAULT_CONTENTS_4_BITS MOTOR_OVERHEAT_PTC_FAULT_4 =
    YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS_MOTOR_OVERHEAT_PTC_FAULT_4;
  static const FAULT_CONTENTS_4_BITS DIGITAL_OPERATON_CONNECTION_FAULT_4 =
    YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS_DIGITAL_OPERATON_CONNECTION_FAULT_4;
  static const FAULT_CONTENTS_4_BITS EEPROM_WRITE_ERROR_FAULT_4 =
    YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS_EEPROM_WRITE_ERROR_FAULT_4;
  static const FAULT_CONTENTS_4_BITS MOTOR_OVERHAT_PTC_FAULT_4 =
    YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS_MOTOR_OVERHAT_PTC_FAULT_4;
  static inline bool FAULT_CONTENTS_4_BITS_IsValid(int value) {
    return YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS_IsValid(value);
  }
  static const FAULT_CONTENTS_4_BITS FAULT_CONTENTS_4_BITS_MIN =
    YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS_FAULT_CONTENTS_4_BITS_MIN;
  static const FAULT_CONTENTS_4_BITS FAULT_CONTENTS_4_BITS_MAX =
    YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS_FAULT_CONTENTS_4_BITS_MAX;
  static const int FAULT_CONTENTS_4_BITS_ARRAYSIZE =
    YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS_FAULT_CONTENTS_4_BITS_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FAULT_CONTENTS_4_BITS_descriptor() {
    return YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS_descriptor();
  }
  static inline const ::std::string& FAULT_CONTENTS_4_BITS_Name(FAULT_CONTENTS_4_BITS value) {
    return YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS_Name(value);
  }
  static inline bool FAULT_CONTENTS_4_BITS_Parse(const ::std::string& name,
      FAULT_CONTENTS_4_BITS* value) {
    return YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS_Parse(name, value);
  }

  typedef YaskawaV1000MonitorData_FAULT_CONTENTS_5_BITS FAULT_CONTENTS_5_BITS;
  static const FAULT_CONTENTS_5_BITS NOT_USED_13 =
    YaskawaV1000MonitorData_FAULT_CONTENTS_5_BITS_NOT_USED_13;
  static const FAULT_CONTENTS_5_BITS BUS_COMMUNICATION_ERROR_FAULT_5 =
    YaskawaV1000MonitorData_FAULT_CONTENTS_5_BITS_BUS_COMMUNICATION_ERROR_FAULT_5;
  static const FAULT_CONTENTS_5_BITS OPTION_COMMUNICATIO_ERROR_FAULT_5 =
    YaskawaV1000MonitorData_FAULT_CONTENTS_5_BITS_OPTION_COMMUNICATIO_ERROR_FAULT_5;
  static const FAULT_CONTENTS_5_BITS CONTROL_FAULT_5 =
    YaskawaV1000MonitorData_FAULT_CONTENTS_5_BITS_CONTROL_FAULT_5;
  static const FAULT_CONTENTS_5_BITS OPTION_EXTERNAL_FAULT_5 =
    YaskawaV1000MonitorData_FAULT_CONTENTS_5_BITS_OPTION_EXTERNAL_FAULT_5;
  static const FAULT_CONTENTS_5_BITS PID_FEEDBACK_LOSS_FAULT_5 =
    YaskawaV1000MonitorData_FAULT_CONTENTS_5_BITS_PID_FEEDBACK_LOSS_FAULT_5;
  static const FAULT_CONTENTS_5_BITS UNDERTORQUE_DETECTION_1_FAULT_5 =
    YaskawaV1000MonitorData_FAULT_CONTENTS_5_BITS_UNDERTORQUE_DETECTION_1_FAULT_5;
  static const FAULT_CONTENTS_5_BITS UNDERTORQUE_DETECTION_2_FAULT_5 =
    YaskawaV1000MonitorData_FAULT_CONTENTS_5_BITS_UNDERTORQUE_DETECTION_2_FAULT_5;
  static const FAULT_CONTENTS_5_BITS HIGH_SLIP_BRAKING_OVERLOAD_FAULT_5 =
    YaskawaV1000MonitorData_FAULT_CONTENTS_5_BITS_HIGH_SLIP_BRAKING_OVERLOAD_FAULT_5;
  static const FAULT_CONTENTS_5_BITS HARDWARE_FAULT_5 =
    YaskawaV1000MonitorData_FAULT_CONTENTS_5_BITS_HARDWARE_FAULT_5;
  static inline bool FAULT_CONTENTS_5_BITS_IsValid(int value) {
    return YaskawaV1000MonitorData_FAULT_CONTENTS_5_BITS_IsValid(value);
  }
  static const FAULT_CONTENTS_5_BITS FAULT_CONTENTS_5_BITS_MIN =
    YaskawaV1000MonitorData_FAULT_CONTENTS_5_BITS_FAULT_CONTENTS_5_BITS_MIN;
  static const FAULT_CONTENTS_5_BITS FAULT_CONTENTS_5_BITS_MAX =
    YaskawaV1000MonitorData_FAULT_CONTENTS_5_BITS_FAULT_CONTENTS_5_BITS_MAX;
  static const int FAULT_CONTENTS_5_BITS_ARRAYSIZE =
    YaskawaV1000MonitorData_FAULT_CONTENTS_5_BITS_FAULT_CONTENTS_5_BITS_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FAULT_CONTENTS_5_BITS_descriptor() {
    return YaskawaV1000MonitorData_FAULT_CONTENTS_5_BITS_descriptor();
  }
  static inline const ::std::string& FAULT_CONTENTS_5_BITS_Name(FAULT_CONTENTS_5_BITS value) {
    return YaskawaV1000MonitorData_FAULT_CONTENTS_5_BITS_Name(value);
  }
  static inline bool FAULT_CONTENTS_5_BITS_Parse(const ::std::string& name,
      FAULT_CONTENTS_5_BITS* value) {
    return YaskawaV1000MonitorData_FAULT_CONTENTS_5_BITS_Parse(name, value);
  }

  typedef YaskawaV1000MonitorData_FAULT_CONTENTS_6_BITS FAULT_CONTENTS_6_BITS;
  static const FAULT_CONTENTS_6_BITS NOT_USED_14 =
    YaskawaV1000MonitorData_FAULT_CONTENTS_6_BITS_NOT_USED_14;
  static const FAULT_CONTENTS_6_BITS OUTPUT_CURRENT_IMBALANCE_FAULT_6 =
    YaskawaV1000MonitorData_FAULT_CONTENTS_6_BITS_OUTPUT_CURRENT_IMBALANCE_FAULT_6;
  static const FAULT_CONTENTS_6_BITS PULLOUT_DETECTION =
    YaskawaV1000MonitorData_FAULT_CONTENTS_6_BITS_PULLOUT_DETECTION;
  static const FAULT_CONTENTS_6_BITS PG_DISCONNECTED_FAULT_6 =
    YaskawaV1000MonitorData_FAULT_CONTENTS_6_BITS_PG_DISCONNECTED_FAULT_6;
  static const FAULT_CONTENTS_6_BITS WATCHDOG_TIMER_ERROR_FAULT_6 =
    YaskawaV1000MonitorData_FAULT_CONTENTS_6_BITS_WATCHDOG_TIMER_ERROR_FAULT_6;
  static const FAULT_CONTENTS_6_BITS TOO_MANY_SPEED_SEARCH_RESTARTS_FAULT_6 =
    YaskawaV1000MonitorData_FAULT_CONTENTS_6_BITS_TOO_MANY_SPEED_SEARCH_RESTARTS_FAULT_6;
  static inline bool FAULT_CONTENTS_6_BITS_IsValid(int value) {
    return YaskawaV1000MonitorData_FAULT_CONTENTS_6_BITS_IsValid(value);
  }
  static const FAULT_CONTENTS_6_BITS FAULT_CONTENTS_6_BITS_MIN =
    YaskawaV1000MonitorData_FAULT_CONTENTS_6_BITS_FAULT_CONTENTS_6_BITS_MIN;
  static const FAULT_CONTENTS_6_BITS FAULT_CONTENTS_6_BITS_MAX =
    YaskawaV1000MonitorData_FAULT_CONTENTS_6_BITS_FAULT_CONTENTS_6_BITS_MAX;
  static const int FAULT_CONTENTS_6_BITS_ARRAYSIZE =
    YaskawaV1000MonitorData_FAULT_CONTENTS_6_BITS_FAULT_CONTENTS_6_BITS_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FAULT_CONTENTS_6_BITS_descriptor() {
    return YaskawaV1000MonitorData_FAULT_CONTENTS_6_BITS_descriptor();
  }
  static inline const ::std::string& FAULT_CONTENTS_6_BITS_Name(FAULT_CONTENTS_6_BITS value) {
    return YaskawaV1000MonitorData_FAULT_CONTENTS_6_BITS_Name(value);
  }
  static inline bool FAULT_CONTENTS_6_BITS_Parse(const ::std::string& name,
      FAULT_CONTENTS_6_BITS* value) {
    return YaskawaV1000MonitorData_FAULT_CONTENTS_6_BITS_Parse(name, value);
  }

  typedef YaskawaV1000MonitorData_FAULT_CONTENTS_7_BITS FAULT_CONTENTS_7_BITS;
  static const FAULT_CONTENTS_7_BITS NOT_USED_15 =
    YaskawaV1000MonitorData_FAULT_CONTENTS_7_BITS_NOT_USED_15;
  static const FAULT_CONTENTS_7_BITS PID_FEEDBACK_LOSS_FAULT_7 =
    YaskawaV1000MonitorData_FAULT_CONTENTS_7_BITS_PID_FEEDBACK_LOSS_FAULT_7;
  static const FAULT_CONTENTS_7_BITS EXTERNAL_INPUT_S1_FAULT_7 =
    YaskawaV1000MonitorData_FAULT_CONTENTS_7_BITS_EXTERNAL_INPUT_S1_FAULT_7;
  static const FAULT_CONTENTS_7_BITS EXTERNAL_INPUT_S2_FAULT_7 =
    YaskawaV1000MonitorData_FAULT_CONTENTS_7_BITS_EXTERNAL_INPUT_S2_FAULT_7;
  static const FAULT_CONTENTS_7_BITS MECHANICAL_WEAKENING_1_FAULT_7 =
    YaskawaV1000MonitorData_FAULT_CONTENTS_7_BITS_MECHANICAL_WEAKENING_1_FAULT_7;
  static const FAULT_CONTENTS_7_BITS MECHANICAL_WEAKENING_2_FAULT_7 =
    YaskawaV1000MonitorData_FAULT_CONTENTS_7_BITS_MECHANICAL_WEAKENING_2_FAULT_7;
  static const FAULT_CONTENTS_7_BITS CURRENT_OFFSET_FAULT_7 =
    YaskawaV1000MonitorData_FAULT_CONTENTS_7_BITS_CURRENT_OFFSET_FAULT_7;
  static const FAULT_CONTENTS_7_BITS DRIVE_WORKS_EZ_FAULT_7 =
    YaskawaV1000MonitorData_FAULT_CONTENTS_7_BITS_DRIVE_WORKS_EZ_FAULT_7;
  static inline bool FAULT_CONTENTS_7_BITS_IsValid(int value) {
    return YaskawaV1000MonitorData_FAULT_CONTENTS_7_BITS_IsValid(value);
  }
  static const FAULT_CONTENTS_7_BITS FAULT_CONTENTS_7_BITS_MIN =
    YaskawaV1000MonitorData_FAULT_CONTENTS_7_BITS_FAULT_CONTENTS_7_BITS_MIN;
  static const FAULT_CONTENTS_7_BITS FAULT_CONTENTS_7_BITS_MAX =
    YaskawaV1000MonitorData_FAULT_CONTENTS_7_BITS_FAULT_CONTENTS_7_BITS_MAX;
  static const int FAULT_CONTENTS_7_BITS_ARRAYSIZE =
    YaskawaV1000MonitorData_FAULT_CONTENTS_7_BITS_FAULT_CONTENTS_7_BITS_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FAULT_CONTENTS_7_BITS_descriptor() {
    return YaskawaV1000MonitorData_FAULT_CONTENTS_7_BITS_descriptor();
  }
  static inline const ::std::string& FAULT_CONTENTS_7_BITS_Name(FAULT_CONTENTS_7_BITS value) {
    return YaskawaV1000MonitorData_FAULT_CONTENTS_7_BITS_Name(value);
  }
  static inline bool FAULT_CONTENTS_7_BITS_Parse(const ::std::string& name,
      FAULT_CONTENTS_7_BITS* value) {
    return YaskawaV1000MonitorData_FAULT_CONTENTS_7_BITS_Parse(name, value);
  }

  typedef YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS ALARM_CONTENTS_2_BITS;
  static const ALARM_CONTENTS_2_BITS NOT_USED_16 =
    YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS_NOT_USED_16;
  static const ALARM_CONTENTS_2_BITS UNDERVOLTAGE_ALARM_2 =
    YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS_UNDERVOLTAGE_ALARM_2;
  static const ALARM_CONTENTS_2_BITS OVERVOLTAGE_ALARM_2 =
    YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS_OVERVOLTAGE_ALARM_2;
  static const ALARM_CONTENTS_2_BITS HEATSINK_OVERHEAT_ALARM_2 =
    YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS_HEATSINK_OVERHEAT_ALARM_2;
  static const ALARM_CONTENTS_2_BITS DRIVE_OVERHEAT_ALARM_2 =
    YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS_DRIVE_OVERHEAT_ALARM_2;
  static const ALARM_CONTENTS_2_BITS OVERTORQUE_1_ALARM_2 =
    YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS_OVERTORQUE_1_ALARM_2;
  static const ALARM_CONTENTS_2_BITS OVERTORQUE_2_ALARM_2 =
    YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS_OVERTORQUE_2_ALARM_2;
  static const ALARM_CONTENTS_2_BITS RUN_COMMANDS_INPUT_ERROR_ALARM_2 =
    YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS_RUN_COMMANDS_INPUT_ERROR_ALARM_2;
  static const ALARM_CONTENTS_2_BITS DRIVE_BASEBLOCK_ALARM_2 =
    YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS_DRIVE_BASEBLOCK_ALARM_2;
  static const ALARM_CONTENTS_2_BITS EXTERNAL_FAULT_S3_ALARM_2 =
    YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS_EXTERNAL_FAULT_S3_ALARM_2;
  static const ALARM_CONTENTS_2_BITS EXTERNAL_FAULT_S4_ALARM_2 =
    YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS_EXTERNAL_FAULT_S4_ALARM_2;
  static const ALARM_CONTENTS_2_BITS EXTERNAL_FAULT_S5_ALARM_2 =
    YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS_EXTERNAL_FAULT_S5_ALARM_2;
  static const ALARM_CONTENTS_2_BITS EXTERNAL_FAULT_S6_ALARM_2 =
    YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS_EXTERNAL_FAULT_S6_ALARM_2;
  static const ALARM_CONTENTS_2_BITS EXTERNAL_FAULT_S7_ALARM_2 =
    YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS_EXTERNAL_FAULT_S7_ALARM_2;
  static const ALARM_CONTENTS_2_BITS OVERSPEED_ALARM_2 =
    YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS_OVERSPEED_ALARM_2;
  static inline bool ALARM_CONTENTS_2_BITS_IsValid(int value) {
    return YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS_IsValid(value);
  }
  static const ALARM_CONTENTS_2_BITS ALARM_CONTENTS_2_BITS_MIN =
    YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS_ALARM_CONTENTS_2_BITS_MIN;
  static const ALARM_CONTENTS_2_BITS ALARM_CONTENTS_2_BITS_MAX =
    YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS_ALARM_CONTENTS_2_BITS_MAX;
  static const int ALARM_CONTENTS_2_BITS_ARRAYSIZE =
    YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS_ALARM_CONTENTS_2_BITS_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ALARM_CONTENTS_2_BITS_descriptor() {
    return YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS_descriptor();
  }
  static inline const ::std::string& ALARM_CONTENTS_2_BITS_Name(ALARM_CONTENTS_2_BITS value) {
    return YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS_Name(value);
  }
  static inline bool ALARM_CONTENTS_2_BITS_Parse(const ::std::string& name,
      ALARM_CONTENTS_2_BITS* value) {
    return YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS_Parse(name, value);
  }

  typedef YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS ALARM_CONTENTS_3_BITS;
  static const ALARM_CONTENTS_3_BITS NOT_USED_17 =
    YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS_NOT_USED_17;
  static const ALARM_CONTENTS_3_BITS EXCESSIVE_SPEED_DEVIATION_ALARM_3 =
    YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS_EXCESSIVE_SPEED_DEVIATION_ALARM_3;
  static const ALARM_CONTENTS_3_BITS PG_DISCONNECTED_ALARM_3 =
    YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS_PG_DISCONNECTED_ALARM_3;
  static const ALARM_CONTENTS_3_BITS DIGITAL_OPERATOR_CONNECTION_FAULT_ALARM_3 =
    YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS_DIGITAL_OPERATOR_CONNECTION_FAULT_ALARM_3;
  static const ALARM_CONTENTS_3_BITS BUS_COMMUNICATION_ERROR_ALARM_3 =
    YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS_BUS_COMMUNICATION_ERROR_ALARM_3;
  static const ALARM_CONTENTS_3_BITS OPTION_COMMUNICATION_ERROR_ALARM_3 =
    YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS_OPTION_COMMUNICATION_ERROR_ALARM_3;
  static const ALARM_CONTENTS_3_BITS SERIAL_TRANSMISSION_ERRO_ALARM_3 =
    YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS_SERIAL_TRANSMISSION_ERRO_ALARM_3;
  static const ALARM_CONTENTS_3_BITS MOTOR_OVERLOAD_ALARM_3 =
    YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS_MOTOR_OVERLOAD_ALARM_3;
  static const ALARM_CONTENTS_3_BITS DRIVE_OVERLOAD_ALARM_3 =
    YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS_DRIVE_OVERLOAD_ALARM_3;
  static const ALARM_CONTENTS_3_BITS OPTION_CARD_EXTERNAL_FAULT_ALARM_3 =
    YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS_OPTION_CARD_EXTERNAL_FAULT_ALARM_3;
  static const ALARM_CONTENTS_3_BITS MOTOR_2_SWITHC_COMMAND_INPUT_DURING_RUN_ALARM_3 =
    YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS_MOTOR_2_SWITHC_COMMAND_INPUT_DURING_RUN_ALARM_3;
  static const ALARM_CONTENTS_3_BITS SERIAL_COMMUNICATION_TRANSMISSION_ERROR_ALARM_3 =
    YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS_SERIAL_COMMUNICATION_TRANSMISSION_ERROR_ALARM_3;
  static const ALARM_CONTENTS_3_BITS UNDERTORQUE_DETECTION_1_ALARM_3 =
    YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS_UNDERTORQUE_DETECTION_1_ALARM_3;
  static const ALARM_CONTENTS_3_BITS UNDERTORQUE_DETECTION_2_ALARM_3 =
    YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS_UNDERTORQUE_DETECTION_2_ALARM_3;
  static const ALARM_CONTENTS_3_BITS BUS_TEST_MODE_ALARM_3 =
    YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS_BUS_TEST_MODE_ALARM_3;
  static inline bool ALARM_CONTENTS_3_BITS_IsValid(int value) {
    return YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS_IsValid(value);
  }
  static const ALARM_CONTENTS_3_BITS ALARM_CONTENTS_3_BITS_MIN =
    YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS_ALARM_CONTENTS_3_BITS_MIN;
  static const ALARM_CONTENTS_3_BITS ALARM_CONTENTS_3_BITS_MAX =
    YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS_ALARM_CONTENTS_3_BITS_MAX;
  static const int ALARM_CONTENTS_3_BITS_ARRAYSIZE =
    YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS_ALARM_CONTENTS_3_BITS_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ALARM_CONTENTS_3_BITS_descriptor() {
    return YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS_descriptor();
  }
  static inline const ::std::string& ALARM_CONTENTS_3_BITS_Name(ALARM_CONTENTS_3_BITS value) {
    return YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS_Name(value);
  }
  static inline bool ALARM_CONTENTS_3_BITS_Parse(const ::std::string& name,
      ALARM_CONTENTS_3_BITS* value) {
    return YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS_Parse(name, value);
  }

  typedef YaskawaV1000MonitorData_ALARM_CONTENTS_4_BITS ALARM_CONTENTS_4_BITS;
  static const ALARM_CONTENTS_4_BITS NOT_USED_18 =
    YaskawaV1000MonitorData_ALARM_CONTENTS_4_BITS_NOT_USED_18;
  static const ALARM_CONTENTS_4_BITS MOTOR_OVERHEAT_1_ALARM_4 =
    YaskawaV1000MonitorData_ALARM_CONTENTS_4_BITS_MOTOR_OVERHEAT_1_ALARM_4;
  static const ALARM_CONTENTS_4_BITS PID_FEEDACK_LOSS_L_ALARM_4 =
    YaskawaV1000MonitorData_ALARM_CONTENTS_4_BITS_PID_FEEDACK_LOSS_L_ALARM_4;
  static const ALARM_CONTENTS_4_BITS PID_FEEDACK_LOSS_H_ALARM_4 =
    YaskawaV1000MonitorData_ALARM_CONTENTS_4_BITS_PID_FEEDACK_LOSS_H_ALARM_4;
  static const ALARM_CONTENTS_4_BITS DRIVE_DISABLED_ALARM_4 =
    YaskawaV1000MonitorData_ALARM_CONTENTS_4_BITS_DRIVE_DISABLED_ALARM_4;
  static inline bool ALARM_CONTENTS_4_BITS_IsValid(int value) {
    return YaskawaV1000MonitorData_ALARM_CONTENTS_4_BITS_IsValid(value);
  }
  static const ALARM_CONTENTS_4_BITS ALARM_CONTENTS_4_BITS_MIN =
    YaskawaV1000MonitorData_ALARM_CONTENTS_4_BITS_ALARM_CONTENTS_4_BITS_MIN;
  static const ALARM_CONTENTS_4_BITS ALARM_CONTENTS_4_BITS_MAX =
    YaskawaV1000MonitorData_ALARM_CONTENTS_4_BITS_ALARM_CONTENTS_4_BITS_MAX;
  static const int ALARM_CONTENTS_4_BITS_ARRAYSIZE =
    YaskawaV1000MonitorData_ALARM_CONTENTS_4_BITS_ALARM_CONTENTS_4_BITS_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ALARM_CONTENTS_4_BITS_descriptor() {
    return YaskawaV1000MonitorData_ALARM_CONTENTS_4_BITS_descriptor();
  }
  static inline const ::std::string& ALARM_CONTENTS_4_BITS_Name(ALARM_CONTENTS_4_BITS value) {
    return YaskawaV1000MonitorData_ALARM_CONTENTS_4_BITS_Name(value);
  }
  static inline bool ALARM_CONTENTS_4_BITS_Parse(const ::std::string& name,
      ALARM_CONTENTS_4_BITS* value) {
    return YaskawaV1000MonitorData_ALARM_CONTENTS_4_BITS_Parse(name, value);
  }

  typedef YaskawaV1000MonitorData_ALARM_CONTENTS_5_BITS ALARM_CONTENTS_5_BITS;
  static const ALARM_CONTENTS_5_BITS NOT_USED_19 =
    YaskawaV1000MonitorData_ALARM_CONTENTS_5_BITS_NOT_USED_19;
  static const ALARM_CONTENTS_5_BITS MECHATROLINK_WATCHDOG_TIMER_ERROR_ALARM_5 =
    YaskawaV1000MonitorData_ALARM_CONTENTS_5_BITS_MECHATROLINK_WATCHDOG_TIMER_ERROR_ALARM_5;
  static const ALARM_CONTENTS_5_BITS MECHATROLINK_COMM_CYCLE_SETTING_ERROR_ALARM_5 =
    YaskawaV1000MonitorData_ALARM_CONTENTS_5_BITS_MECHATROLINK_COMM_CYCLE_SETTING_ERROR_ALARM_5;
  static const ALARM_CONTENTS_5_BITS HIGH_CURRENT_ALARM_5 =
    YaskawaV1000MonitorData_ALARM_CONTENTS_5_BITS_HIGH_CURRENT_ALARM_5;
  static const ALARM_CONTENTS_5_BITS COOLING_FAN_MAINTENANCE_TIME_ALARM_5 =
    YaskawaV1000MonitorData_ALARM_CONTENTS_5_BITS_COOLING_FAN_MAINTENANCE_TIME_ALARM_5;
  static const ALARM_CONTENTS_5_BITS SOFT_CHAGE_BYPASS_RELAY_MAINTENANCE_TIME_ALARM_5 =
    YaskawaV1000MonitorData_ALARM_CONTENTS_5_BITS_SOFT_CHAGE_BYPASS_RELAY_MAINTENANCE_TIME_ALARM_5;
  static const ALARM_CONTENTS_5_BITS SI_SV_EERPOM_ERROR_ALARM_5 =
    YaskawaV1000MonitorData_ALARM_CONTENTS_5_BITS_SI_SV_EERPOM_ERROR_ALARM_5;
  static const ALARM_CONTENTS_5_BITS EXTERNAL_FAULT_S1_ALARM_5 =
    YaskawaV1000MonitorData_ALARM_CONTENTS_5_BITS_EXTERNAL_FAULT_S1_ALARM_5;
  static const ALARM_CONTENTS_5_BITS EXTERNAL_FAULT_S2_ALARM_5 =
    YaskawaV1000MonitorData_ALARM_CONTENTS_5_BITS_EXTERNAL_FAULT_S2_ALARM_5;
  static const ALARM_CONTENTS_5_BITS SAFE_DISABLE_INPUT_1_ALARM_5 =
    YaskawaV1000MonitorData_ALARM_CONTENTS_5_BITS_SAFE_DISABLE_INPUT_1_ALARM_5;
  static const ALARM_CONTENTS_5_BITS SAFE_DISABLE_INPUT_2_ALARM_5 =
    YaskawaV1000MonitorData_ALARM_CONTENTS_5_BITS_SAFE_DISABLE_INPUT_2_ALARM_5;
  static const ALARM_CONTENTS_5_BITS MECHANICAL_WEAKENING_DETECTION_1_ALARM_5 =
    YaskawaV1000MonitorData_ALARM_CONTENTS_5_BITS_MECHANICAL_WEAKENING_DETECTION_1_ALARM_5;
  static const ALARM_CONTENTS_5_BITS MECHANICAL_WEAKENING_DETECTION_2_ALARM_5 =
    YaskawaV1000MonitorData_ALARM_CONTENTS_5_BITS_MECHANICAL_WEAKENING_DETECTION_2_ALARM_5;
  static inline bool ALARM_CONTENTS_5_BITS_IsValid(int value) {
    return YaskawaV1000MonitorData_ALARM_CONTENTS_5_BITS_IsValid(value);
  }
  static const ALARM_CONTENTS_5_BITS ALARM_CONTENTS_5_BITS_MIN =
    YaskawaV1000MonitorData_ALARM_CONTENTS_5_BITS_ALARM_CONTENTS_5_BITS_MIN;
  static const ALARM_CONTENTS_5_BITS ALARM_CONTENTS_5_BITS_MAX =
    YaskawaV1000MonitorData_ALARM_CONTENTS_5_BITS_ALARM_CONTENTS_5_BITS_MAX;
  static const int ALARM_CONTENTS_5_BITS_ARRAYSIZE =
    YaskawaV1000MonitorData_ALARM_CONTENTS_5_BITS_ALARM_CONTENTS_5_BITS_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ALARM_CONTENTS_5_BITS_descriptor() {
    return YaskawaV1000MonitorData_ALARM_CONTENTS_5_BITS_descriptor();
  }
  static inline const ::std::string& ALARM_CONTENTS_5_BITS_Name(ALARM_CONTENTS_5_BITS value) {
    return YaskawaV1000MonitorData_ALARM_CONTENTS_5_BITS_Name(value);
  }
  static inline bool ALARM_CONTENTS_5_BITS_Parse(const ::std::string& name,
      ALARM_CONTENTS_5_BITS* value) {
    return YaskawaV1000MonitorData_ALARM_CONTENTS_5_BITS_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional fixed32 drive_status_1 = 1;
  void clear_drive_status_1();
  static const int kDriveStatus1FieldNumber = 1;
  ::google::protobuf::uint32 drive_status_1() const;
  void set_drive_status_1(::google::protobuf::uint32 value);

  // optional fixed32 fault_contents_1 = 2;
  void clear_fault_contents_1();
  static const int kFaultContents1FieldNumber = 2;
  ::google::protobuf::uint32 fault_contents_1() const;
  void set_fault_contents_1(::google::protobuf::uint32 value);

  // optional fixed32 data_link_status = 3;
  void clear_data_link_status();
  static const int kDataLinkStatusFieldNumber = 3;
  ::google::protobuf::uint32 data_link_status() const;
  void set_data_link_status(::google::protobuf::uint32 value);

  // optional uint32 freq_ref = 4;
  void clear_freq_ref();
  static const int kFreqRefFieldNumber = 4;
  ::google::protobuf::uint32 freq_ref() const;
  void set_freq_ref(::google::protobuf::uint32 value);

  // optional uint32 output_freq = 5;
  void clear_output_freq();
  static const int kOutputFreqFieldNumber = 5;
  ::google::protobuf::uint32 output_freq() const;
  void set_output_freq(::google::protobuf::uint32 value);

  // optional float output_voltage_ref = 6;
  void clear_output_voltage_ref();
  static const int kOutputVoltageRefFieldNumber = 6;
  float output_voltage_ref() const;
  void set_output_voltage_ref(float value);

  // optional uint32 output_current = 7;
  void clear_output_current();
  static const int kOutputCurrentFieldNumber = 7;
  ::google::protobuf::uint32 output_current() const;
  void set_output_current(::google::protobuf::uint32 value);

  // optional uint32 output_power = 8;
  void clear_output_power();
  static const int kOutputPowerFieldNumber = 8;
  ::google::protobuf::uint32 output_power() const;
  void set_output_power(::google::protobuf::uint32 value);

  // optional uint32 torque_ref = 9;
  void clear_torque_ref();
  static const int kTorqueRefFieldNumber = 9;
  ::google::protobuf::uint32 torque_ref() const;
  void set_torque_ref(::google::protobuf::uint32 value);

  // optional fixed32 fault_contents_2 = 10;
  void clear_fault_contents_2();
  static const int kFaultContents2FieldNumber = 10;
  ::google::protobuf::uint32 fault_contents_2() const;
  void set_fault_contents_2(::google::protobuf::uint32 value);

  // optional fixed32 alarm_contents_1 = 11;
  void clear_alarm_contents_1();
  static const int kAlarmContents1FieldNumber = 11;
  ::google::protobuf::uint32 alarm_contents_1() const;
  void set_alarm_contents_1(::google::protobuf::uint32 value);

  // optional fixed32 input_terminal_status = 12;
  void clear_input_terminal_status();
  static const int kInputTerminalStatusFieldNumber = 12;
  ::google::protobuf::uint32 input_terminal_status() const;
  void set_input_terminal_status(::google::protobuf::uint32 value);

  // optional fixed32 drive_status_2 = 13;
  void clear_drive_status_2();
  static const int kDriveStatus2FieldNumber = 13;
  ::google::protobuf::uint32 drive_status_2() const;
  void set_drive_status_2(::google::protobuf::uint32 value);

  // optional fixed32 output_terminal_status = 14;
  void clear_output_terminal_status();
  static const int kOutputTerminalStatusFieldNumber = 14;
  ::google::protobuf::uint32 output_terminal_status() const;
  void set_output_terminal_status(::google::protobuf::uint32 value);

  // optional float frequency_reference_bias = 15;
  void clear_frequency_reference_bias();
  static const int kFrequencyReferenceBiasFieldNumber = 15;
  float frequency_reference_bias() const;
  void set_frequency_reference_bias(float value);

  // optional uint32 dc_bus_voltage = 16;
  void clear_dc_bus_voltage();
  static const int kDcBusVoltageFieldNumber = 16;
  ::google::protobuf::uint32 dc_bus_voltage() const;
  void set_dc_bus_voltage(::google::protobuf::uint32 value);

  // optional uint32 torque_monitor = 17;
  void clear_torque_monitor();
  static const int kTorqueMonitorFieldNumber = 17;
  ::google::protobuf::uint32 torque_monitor() const;
  void set_torque_monitor(::google::protobuf::uint32 value);

  // optional uint32 product_code_1 = 18;
  void clear_product_code_1();
  static const int kProductCode1FieldNumber = 18;
  ::google::protobuf::uint32 product_code_1() const;
  void set_product_code_1(::google::protobuf::uint32 value);

  // optional uint32 product_code_2 = 19;
  void clear_product_code_2();
  static const int kProductCode2FieldNumber = 19;
  ::google::protobuf::uint32 product_code_2() const;
  void set_product_code_2(::google::protobuf::uint32 value);

  // optional uint32 pid_feedback = 20;
  void clear_pid_feedback();
  static const int kPidFeedbackFieldNumber = 20;
  ::google::protobuf::uint32 pid_feedback() const;
  void set_pid_feedback(::google::protobuf::uint32 value);

  // optional uint32 pid_input = 21;
  void clear_pid_input();
  static const int kPidInputFieldNumber = 21;
  ::google::protobuf::uint32 pid_input() const;
  void set_pid_input(::google::protobuf::uint32 value);

  // optional uint32 pid_output = 22;
  void clear_pid_output();
  static const int kPidOutputFieldNumber = 22;
  ::google::protobuf::uint32 pid_output() const;
  void set_pid_output(::google::protobuf::uint32 value);

  // optional fixed32 comm_error_log = 23;
  void clear_comm_error_log();
  static const int kCommErrorLogFieldNumber = 23;
  ::google::protobuf::uint32 comm_error_log() const;
  void set_comm_error_log(::google::protobuf::uint32 value);

  // optional uint32 output_freq_rpm = 24;
  void clear_output_freq_rpm();
  static const int kOutputFreqRpmFieldNumber = 24;
  ::google::protobuf::uint32 output_freq_rpm() const;
  void set_output_freq_rpm(::google::protobuf::uint32 value);

  // optional float output_freq_percent = 25;
  void clear_output_freq_percent();
  static const int kOutputFreqPercentFieldNumber = 25;
  float output_freq_percent() const;
  void set_output_freq_percent(float value);

  // optional fixed32 drive_status = 26;
  void clear_drive_status();
  static const int kDriveStatusFieldNumber = 26;
  ::google::protobuf::uint32 drive_status() const;
  void set_drive_status(::google::protobuf::uint32 value);

  // optional fixed32 alarm_code = 27;
  void clear_alarm_code();
  static const int kAlarmCodeFieldNumber = 27;
  ::google::protobuf::uint32 alarm_code() const;
  void set_alarm_code(::google::protobuf::uint32 value);

  // optional uint32 cumulative_op_time_upper_digits = 28;
  void clear_cumulative_op_time_upper_digits();
  static const int kCumulativeOpTimeUpperDigitsFieldNumber = 28;
  ::google::protobuf::uint32 cumulative_op_time_upper_digits() const;
  void set_cumulative_op_time_upper_digits(::google::protobuf::uint32 value);

  // optional uint32 cumulative_op_time_first_digit = 29;
  void clear_cumulative_op_time_first_digit();
  static const int kCumulativeOpTimeFirstDigitFieldNumber = 29;
  ::google::protobuf::uint32 cumulative_op_time_first_digit() const;
  void set_cumulative_op_time_first_digit(::google::protobuf::uint32 value);

  // optional uint32 cumulative_fan_op_time_upper_digits = 30;
  void clear_cumulative_fan_op_time_upper_digits();
  static const int kCumulativeFanOpTimeUpperDigitsFieldNumber = 30;
  ::google::protobuf::uint32 cumulative_fan_op_time_upper_digits() const;
  void set_cumulative_fan_op_time_upper_digits(::google::protobuf::uint32 value);

  // optional uint32 cumulative_fan_op_time_first_digit = 31;
  void clear_cumulative_fan_op_time_first_digit();
  static const int kCumulativeFanOpTimeFirstDigitFieldNumber = 31;
  ::google::protobuf::uint32 cumulative_fan_op_time_first_digit() const;
  void set_cumulative_fan_op_time_first_digit(::google::protobuf::uint32 value);

  // optional uint32 drive_rated_current = 32;
  void clear_drive_rated_current();
  static const int kDriveRatedCurrentFieldNumber = 32;
  ::google::protobuf::uint32 drive_rated_current() const;
  void set_drive_rated_current(::google::protobuf::uint32 value);

  // optional uint32 motor_speed_revs_minute = 33;
  void clear_motor_speed_revs_minute();
  static const int kMotorSpeedRevsMinuteFieldNumber = 33;
  ::google::protobuf::uint32 motor_speed_revs_minute() const;
  void set_motor_speed_revs_minute(::google::protobuf::uint32 value);

  // optional uint32 motor_speed_revs_percent = 34;
  void clear_motor_speed_revs_percent();
  static const int kMotorSpeedRevsPercentFieldNumber = 34;
  ::google::protobuf::uint32 motor_speed_revs_percent() const;
  void set_motor_speed_revs_percent(::google::protobuf::uint32 value);

  // optional uint32 option_code = 35;
  void clear_option_code();
  static const int kOptionCodeFieldNumber = 35;
  ::google::protobuf::uint32 option_code() const;
  void set_option_code(::google::protobuf::uint32 value);

  // optional uint32 ope_error_number = 36;
  void clear_ope_error_number();
  static const int kOpeErrorNumberFieldNumber = 36;
  ::google::protobuf::uint32 ope_error_number() const;
  void set_ope_error_number(::google::protobuf::uint32 value);

  // optional fixed32 fault_contents_3 = 37;
  void clear_fault_contents_3();
  static const int kFaultContents3FieldNumber = 37;
  ::google::protobuf::uint32 fault_contents_3() const;
  void set_fault_contents_3(::google::protobuf::uint32 value);

  // optional fixed32 fault_contents_4 = 38;
  void clear_fault_contents_4();
  static const int kFaultContents4FieldNumber = 38;
  ::google::protobuf::uint32 fault_contents_4() const;
  void set_fault_contents_4(::google::protobuf::uint32 value);

  // optional fixed32 fault_contents_5 = 39;
  void clear_fault_contents_5();
  static const int kFaultContents5FieldNumber = 39;
  ::google::protobuf::uint32 fault_contents_5() const;
  void set_fault_contents_5(::google::protobuf::uint32 value);

  // optional fixed32 fault_contents_6 = 40;
  void clear_fault_contents_6();
  static const int kFaultContents6FieldNumber = 40;
  ::google::protobuf::uint32 fault_contents_6() const;
  void set_fault_contents_6(::google::protobuf::uint32 value);

  // optional fixed32 fault_contents_7 = 41;
  void clear_fault_contents_7();
  static const int kFaultContents7FieldNumber = 41;
  ::google::protobuf::uint32 fault_contents_7() const;
  void set_fault_contents_7(::google::protobuf::uint32 value);

  // optional fixed32 alarm_contents_2 = 42;
  void clear_alarm_contents_2();
  static const int kAlarmContents2FieldNumber = 42;
  ::google::protobuf::uint32 alarm_contents_2() const;
  void set_alarm_contents_2(::google::protobuf::uint32 value);

  // optional fixed32 alarm_contents_3 = 43;
  void clear_alarm_contents_3();
  static const int kAlarmContents3FieldNumber = 43;
  ::google::protobuf::uint32 alarm_contents_3() const;
  void set_alarm_contents_3(::google::protobuf::uint32 value);

  // optional fixed32 alarm_contents_4 = 44;
  void clear_alarm_contents_4();
  static const int kAlarmContents4FieldNumber = 44;
  ::google::protobuf::uint32 alarm_contents_4() const;
  void set_alarm_contents_4(::google::protobuf::uint32 value);

  // optional fixed32 alarm_contents_5 = 45;
  void clear_alarm_contents_5();
  static const int kAlarmContents5FieldNumber = 45;
  ::google::protobuf::uint32 alarm_contents_5() const;
  void set_alarm_contents_5(::google::protobuf::uint32 value);

  // optional fixed32 cpf_contents_1 = 46;
  void clear_cpf_contents_1();
  static const int kCpfContents1FieldNumber = 46;
  ::google::protobuf::uint32 cpf_contents_1() const;
  void set_cpf_contents_1(::google::protobuf::uint32 value);

  // optional fixed32 cpf_contents_2 = 47;
  void clear_cpf_contents_2();
  static const int kCpfContents2FieldNumber = 47;
  ::google::protobuf::uint32 cpf_contents_2() const;
  void set_cpf_contents_2(::google::protobuf::uint32 value);

  // optional fixed32 cpf_contents_3 = 48;
  void clear_cpf_contents_3();
  static const int kCpfContents3FieldNumber = 48;
  ::google::protobuf::uint32 cpf_contents_3() const;
  void set_cpf_contents_3(::google::protobuf::uint32 value);

  // optional fixed32 option_card_fault_contents = 49;
  void clear_option_card_fault_contents();
  static const int kOptionCardFaultContentsFieldNumber = 49;
  ::google::protobuf::uint32 option_card_fault_contents() const;
  void set_option_card_fault_contents(::google::protobuf::uint32 value);

  // optional uint32 output_current_2 = 50;
  void clear_output_current_2();
  static const int kOutputCurrent2FieldNumber = 50;
  ::google::protobuf::uint32 output_current_2() const;
  void set_output_current_2(::google::protobuf::uint32 value);

  // optional float output_freq_hertz = 51;
  void clear_output_freq_hertz();
  static const int kOutputFreqHertzFieldNumber = 51;
  float output_freq_hertz() const;
  void set_output_freq_hertz(float value);

  // optional float output_current_amps = 52;
  void clear_output_current_amps();
  static const int kOutputCurrentAmpsFieldNumber = 52;
  float output_current_amps() const;
  void set_output_current_amps(float value);

  // @@protoc_insertion_point(class_scope:analogic.ancp00.YaskawaV1000MonitorData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint32 drive_status_1_;
  ::google::protobuf::uint32 fault_contents_1_;
  ::google::protobuf::uint32 data_link_status_;
  ::google::protobuf::uint32 freq_ref_;
  ::google::protobuf::uint32 output_freq_;
  float output_voltage_ref_;
  ::google::protobuf::uint32 output_current_;
  ::google::protobuf::uint32 output_power_;
  ::google::protobuf::uint32 torque_ref_;
  ::google::protobuf::uint32 fault_contents_2_;
  ::google::protobuf::uint32 alarm_contents_1_;
  ::google::protobuf::uint32 input_terminal_status_;
  ::google::protobuf::uint32 drive_status_2_;
  ::google::protobuf::uint32 output_terminal_status_;
  float frequency_reference_bias_;
  ::google::protobuf::uint32 dc_bus_voltage_;
  ::google::protobuf::uint32 torque_monitor_;
  ::google::protobuf::uint32 product_code_1_;
  ::google::protobuf::uint32 product_code_2_;
  ::google::protobuf::uint32 pid_feedback_;
  ::google::protobuf::uint32 pid_input_;
  ::google::protobuf::uint32 pid_output_;
  ::google::protobuf::uint32 comm_error_log_;
  ::google::protobuf::uint32 output_freq_rpm_;
  float output_freq_percent_;
  ::google::protobuf::uint32 drive_status_;
  ::google::protobuf::uint32 alarm_code_;
  ::google::protobuf::uint32 cumulative_op_time_upper_digits_;
  ::google::protobuf::uint32 cumulative_op_time_first_digit_;
  ::google::protobuf::uint32 cumulative_fan_op_time_upper_digits_;
  ::google::protobuf::uint32 cumulative_fan_op_time_first_digit_;
  ::google::protobuf::uint32 drive_rated_current_;
  ::google::protobuf::uint32 motor_speed_revs_minute_;
  ::google::protobuf::uint32 motor_speed_revs_percent_;
  ::google::protobuf::uint32 option_code_;
  ::google::protobuf::uint32 ope_error_number_;
  ::google::protobuf::uint32 fault_contents_3_;
  ::google::protobuf::uint32 fault_contents_4_;
  ::google::protobuf::uint32 fault_contents_5_;
  ::google::protobuf::uint32 fault_contents_6_;
  ::google::protobuf::uint32 fault_contents_7_;
  ::google::protobuf::uint32 alarm_contents_2_;
  ::google::protobuf::uint32 alarm_contents_3_;
  ::google::protobuf::uint32 alarm_contents_4_;
  ::google::protobuf::uint32 alarm_contents_5_;
  ::google::protobuf::uint32 cpf_contents_1_;
  ::google::protobuf::uint32 cpf_contents_2_;
  ::google::protobuf::uint32 cpf_contents_3_;
  ::google::protobuf::uint32 option_card_fault_contents_;
  ::google::protobuf::uint32 output_current_2_;
  float output_freq_hertz_;
  float output_current_amps_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_proto_2fYaskawaV1000_2eproto();
  friend void protobuf_AssignDesc_proto_2fYaskawaV1000_2eproto();
  friend void protobuf_ShutdownFile_proto_2fYaskawaV1000_2eproto();

  void InitAsDefaultInstance();
  static YaskawaV1000MonitorData* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// YaskawaV1000MonitorData

// optional fixed32 drive_status_1 = 1;
inline void YaskawaV1000MonitorData::clear_drive_status_1() {
  drive_status_1_ = 0u;
}
inline ::google::protobuf::uint32 YaskawaV1000MonitorData::drive_status_1() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.drive_status_1)
  return drive_status_1_;
}
inline void YaskawaV1000MonitorData::set_drive_status_1(::google::protobuf::uint32 value) {
  
  drive_status_1_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.drive_status_1)
}

// optional fixed32 fault_contents_1 = 2;
inline void YaskawaV1000MonitorData::clear_fault_contents_1() {
  fault_contents_1_ = 0u;
}
inline ::google::protobuf::uint32 YaskawaV1000MonitorData::fault_contents_1() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.fault_contents_1)
  return fault_contents_1_;
}
inline void YaskawaV1000MonitorData::set_fault_contents_1(::google::protobuf::uint32 value) {
  
  fault_contents_1_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.fault_contents_1)
}

// optional fixed32 data_link_status = 3;
inline void YaskawaV1000MonitorData::clear_data_link_status() {
  data_link_status_ = 0u;
}
inline ::google::protobuf::uint32 YaskawaV1000MonitorData::data_link_status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.data_link_status)
  return data_link_status_;
}
inline void YaskawaV1000MonitorData::set_data_link_status(::google::protobuf::uint32 value) {
  
  data_link_status_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.data_link_status)
}

// optional uint32 freq_ref = 4;
inline void YaskawaV1000MonitorData::clear_freq_ref() {
  freq_ref_ = 0u;
}
inline ::google::protobuf::uint32 YaskawaV1000MonitorData::freq_ref() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.freq_ref)
  return freq_ref_;
}
inline void YaskawaV1000MonitorData::set_freq_ref(::google::protobuf::uint32 value) {
  
  freq_ref_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.freq_ref)
}

// optional uint32 output_freq = 5;
inline void YaskawaV1000MonitorData::clear_output_freq() {
  output_freq_ = 0u;
}
inline ::google::protobuf::uint32 YaskawaV1000MonitorData::output_freq() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.output_freq)
  return output_freq_;
}
inline void YaskawaV1000MonitorData::set_output_freq(::google::protobuf::uint32 value) {
  
  output_freq_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.output_freq)
}

// optional float output_voltage_ref = 6;
inline void YaskawaV1000MonitorData::clear_output_voltage_ref() {
  output_voltage_ref_ = 0;
}
inline float YaskawaV1000MonitorData::output_voltage_ref() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.output_voltage_ref)
  return output_voltage_ref_;
}
inline void YaskawaV1000MonitorData::set_output_voltage_ref(float value) {
  
  output_voltage_ref_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.output_voltage_ref)
}

// optional uint32 output_current = 7;
inline void YaskawaV1000MonitorData::clear_output_current() {
  output_current_ = 0u;
}
inline ::google::protobuf::uint32 YaskawaV1000MonitorData::output_current() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.output_current)
  return output_current_;
}
inline void YaskawaV1000MonitorData::set_output_current(::google::protobuf::uint32 value) {
  
  output_current_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.output_current)
}

// optional uint32 output_power = 8;
inline void YaskawaV1000MonitorData::clear_output_power() {
  output_power_ = 0u;
}
inline ::google::protobuf::uint32 YaskawaV1000MonitorData::output_power() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.output_power)
  return output_power_;
}
inline void YaskawaV1000MonitorData::set_output_power(::google::protobuf::uint32 value) {
  
  output_power_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.output_power)
}

// optional uint32 torque_ref = 9;
inline void YaskawaV1000MonitorData::clear_torque_ref() {
  torque_ref_ = 0u;
}
inline ::google::protobuf::uint32 YaskawaV1000MonitorData::torque_ref() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.torque_ref)
  return torque_ref_;
}
inline void YaskawaV1000MonitorData::set_torque_ref(::google::protobuf::uint32 value) {
  
  torque_ref_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.torque_ref)
}

// optional fixed32 fault_contents_2 = 10;
inline void YaskawaV1000MonitorData::clear_fault_contents_2() {
  fault_contents_2_ = 0u;
}
inline ::google::protobuf::uint32 YaskawaV1000MonitorData::fault_contents_2() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.fault_contents_2)
  return fault_contents_2_;
}
inline void YaskawaV1000MonitorData::set_fault_contents_2(::google::protobuf::uint32 value) {
  
  fault_contents_2_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.fault_contents_2)
}

// optional fixed32 alarm_contents_1 = 11;
inline void YaskawaV1000MonitorData::clear_alarm_contents_1() {
  alarm_contents_1_ = 0u;
}
inline ::google::protobuf::uint32 YaskawaV1000MonitorData::alarm_contents_1() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.alarm_contents_1)
  return alarm_contents_1_;
}
inline void YaskawaV1000MonitorData::set_alarm_contents_1(::google::protobuf::uint32 value) {
  
  alarm_contents_1_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.alarm_contents_1)
}

// optional fixed32 input_terminal_status = 12;
inline void YaskawaV1000MonitorData::clear_input_terminal_status() {
  input_terminal_status_ = 0u;
}
inline ::google::protobuf::uint32 YaskawaV1000MonitorData::input_terminal_status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.input_terminal_status)
  return input_terminal_status_;
}
inline void YaskawaV1000MonitorData::set_input_terminal_status(::google::protobuf::uint32 value) {
  
  input_terminal_status_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.input_terminal_status)
}

// optional fixed32 drive_status_2 = 13;
inline void YaskawaV1000MonitorData::clear_drive_status_2() {
  drive_status_2_ = 0u;
}
inline ::google::protobuf::uint32 YaskawaV1000MonitorData::drive_status_2() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.drive_status_2)
  return drive_status_2_;
}
inline void YaskawaV1000MonitorData::set_drive_status_2(::google::protobuf::uint32 value) {
  
  drive_status_2_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.drive_status_2)
}

// optional fixed32 output_terminal_status = 14;
inline void YaskawaV1000MonitorData::clear_output_terminal_status() {
  output_terminal_status_ = 0u;
}
inline ::google::protobuf::uint32 YaskawaV1000MonitorData::output_terminal_status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.output_terminal_status)
  return output_terminal_status_;
}
inline void YaskawaV1000MonitorData::set_output_terminal_status(::google::protobuf::uint32 value) {
  
  output_terminal_status_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.output_terminal_status)
}

// optional float frequency_reference_bias = 15;
inline void YaskawaV1000MonitorData::clear_frequency_reference_bias() {
  frequency_reference_bias_ = 0;
}
inline float YaskawaV1000MonitorData::frequency_reference_bias() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.frequency_reference_bias)
  return frequency_reference_bias_;
}
inline void YaskawaV1000MonitorData::set_frequency_reference_bias(float value) {
  
  frequency_reference_bias_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.frequency_reference_bias)
}

// optional uint32 dc_bus_voltage = 16;
inline void YaskawaV1000MonitorData::clear_dc_bus_voltage() {
  dc_bus_voltage_ = 0u;
}
inline ::google::protobuf::uint32 YaskawaV1000MonitorData::dc_bus_voltage() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.dc_bus_voltage)
  return dc_bus_voltage_;
}
inline void YaskawaV1000MonitorData::set_dc_bus_voltage(::google::protobuf::uint32 value) {
  
  dc_bus_voltage_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.dc_bus_voltage)
}

// optional uint32 torque_monitor = 17;
inline void YaskawaV1000MonitorData::clear_torque_monitor() {
  torque_monitor_ = 0u;
}
inline ::google::protobuf::uint32 YaskawaV1000MonitorData::torque_monitor() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.torque_monitor)
  return torque_monitor_;
}
inline void YaskawaV1000MonitorData::set_torque_monitor(::google::protobuf::uint32 value) {
  
  torque_monitor_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.torque_monitor)
}

// optional uint32 product_code_1 = 18;
inline void YaskawaV1000MonitorData::clear_product_code_1() {
  product_code_1_ = 0u;
}
inline ::google::protobuf::uint32 YaskawaV1000MonitorData::product_code_1() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.product_code_1)
  return product_code_1_;
}
inline void YaskawaV1000MonitorData::set_product_code_1(::google::protobuf::uint32 value) {
  
  product_code_1_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.product_code_1)
}

// optional uint32 product_code_2 = 19;
inline void YaskawaV1000MonitorData::clear_product_code_2() {
  product_code_2_ = 0u;
}
inline ::google::protobuf::uint32 YaskawaV1000MonitorData::product_code_2() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.product_code_2)
  return product_code_2_;
}
inline void YaskawaV1000MonitorData::set_product_code_2(::google::protobuf::uint32 value) {
  
  product_code_2_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.product_code_2)
}

// optional uint32 pid_feedback = 20;
inline void YaskawaV1000MonitorData::clear_pid_feedback() {
  pid_feedback_ = 0u;
}
inline ::google::protobuf::uint32 YaskawaV1000MonitorData::pid_feedback() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.pid_feedback)
  return pid_feedback_;
}
inline void YaskawaV1000MonitorData::set_pid_feedback(::google::protobuf::uint32 value) {
  
  pid_feedback_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.pid_feedback)
}

// optional uint32 pid_input = 21;
inline void YaskawaV1000MonitorData::clear_pid_input() {
  pid_input_ = 0u;
}
inline ::google::protobuf::uint32 YaskawaV1000MonitorData::pid_input() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.pid_input)
  return pid_input_;
}
inline void YaskawaV1000MonitorData::set_pid_input(::google::protobuf::uint32 value) {
  
  pid_input_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.pid_input)
}

// optional uint32 pid_output = 22;
inline void YaskawaV1000MonitorData::clear_pid_output() {
  pid_output_ = 0u;
}
inline ::google::protobuf::uint32 YaskawaV1000MonitorData::pid_output() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.pid_output)
  return pid_output_;
}
inline void YaskawaV1000MonitorData::set_pid_output(::google::protobuf::uint32 value) {
  
  pid_output_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.pid_output)
}

// optional fixed32 comm_error_log = 23;
inline void YaskawaV1000MonitorData::clear_comm_error_log() {
  comm_error_log_ = 0u;
}
inline ::google::protobuf::uint32 YaskawaV1000MonitorData::comm_error_log() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.comm_error_log)
  return comm_error_log_;
}
inline void YaskawaV1000MonitorData::set_comm_error_log(::google::protobuf::uint32 value) {
  
  comm_error_log_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.comm_error_log)
}

// optional uint32 output_freq_rpm = 24;
inline void YaskawaV1000MonitorData::clear_output_freq_rpm() {
  output_freq_rpm_ = 0u;
}
inline ::google::protobuf::uint32 YaskawaV1000MonitorData::output_freq_rpm() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.output_freq_rpm)
  return output_freq_rpm_;
}
inline void YaskawaV1000MonitorData::set_output_freq_rpm(::google::protobuf::uint32 value) {
  
  output_freq_rpm_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.output_freq_rpm)
}

// optional float output_freq_percent = 25;
inline void YaskawaV1000MonitorData::clear_output_freq_percent() {
  output_freq_percent_ = 0;
}
inline float YaskawaV1000MonitorData::output_freq_percent() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.output_freq_percent)
  return output_freq_percent_;
}
inline void YaskawaV1000MonitorData::set_output_freq_percent(float value) {
  
  output_freq_percent_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.output_freq_percent)
}

// optional fixed32 drive_status = 26;
inline void YaskawaV1000MonitorData::clear_drive_status() {
  drive_status_ = 0u;
}
inline ::google::protobuf::uint32 YaskawaV1000MonitorData::drive_status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.drive_status)
  return drive_status_;
}
inline void YaskawaV1000MonitorData::set_drive_status(::google::protobuf::uint32 value) {
  
  drive_status_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.drive_status)
}

// optional fixed32 alarm_code = 27;
inline void YaskawaV1000MonitorData::clear_alarm_code() {
  alarm_code_ = 0u;
}
inline ::google::protobuf::uint32 YaskawaV1000MonitorData::alarm_code() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.alarm_code)
  return alarm_code_;
}
inline void YaskawaV1000MonitorData::set_alarm_code(::google::protobuf::uint32 value) {
  
  alarm_code_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.alarm_code)
}

// optional uint32 cumulative_op_time_upper_digits = 28;
inline void YaskawaV1000MonitorData::clear_cumulative_op_time_upper_digits() {
  cumulative_op_time_upper_digits_ = 0u;
}
inline ::google::protobuf::uint32 YaskawaV1000MonitorData::cumulative_op_time_upper_digits() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.cumulative_op_time_upper_digits)
  return cumulative_op_time_upper_digits_;
}
inline void YaskawaV1000MonitorData::set_cumulative_op_time_upper_digits(::google::protobuf::uint32 value) {
  
  cumulative_op_time_upper_digits_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.cumulative_op_time_upper_digits)
}

// optional uint32 cumulative_op_time_first_digit = 29;
inline void YaskawaV1000MonitorData::clear_cumulative_op_time_first_digit() {
  cumulative_op_time_first_digit_ = 0u;
}
inline ::google::protobuf::uint32 YaskawaV1000MonitorData::cumulative_op_time_first_digit() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.cumulative_op_time_first_digit)
  return cumulative_op_time_first_digit_;
}
inline void YaskawaV1000MonitorData::set_cumulative_op_time_first_digit(::google::protobuf::uint32 value) {
  
  cumulative_op_time_first_digit_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.cumulative_op_time_first_digit)
}

// optional uint32 cumulative_fan_op_time_upper_digits = 30;
inline void YaskawaV1000MonitorData::clear_cumulative_fan_op_time_upper_digits() {
  cumulative_fan_op_time_upper_digits_ = 0u;
}
inline ::google::protobuf::uint32 YaskawaV1000MonitorData::cumulative_fan_op_time_upper_digits() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.cumulative_fan_op_time_upper_digits)
  return cumulative_fan_op_time_upper_digits_;
}
inline void YaskawaV1000MonitorData::set_cumulative_fan_op_time_upper_digits(::google::protobuf::uint32 value) {
  
  cumulative_fan_op_time_upper_digits_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.cumulative_fan_op_time_upper_digits)
}

// optional uint32 cumulative_fan_op_time_first_digit = 31;
inline void YaskawaV1000MonitorData::clear_cumulative_fan_op_time_first_digit() {
  cumulative_fan_op_time_first_digit_ = 0u;
}
inline ::google::protobuf::uint32 YaskawaV1000MonitorData::cumulative_fan_op_time_first_digit() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.cumulative_fan_op_time_first_digit)
  return cumulative_fan_op_time_first_digit_;
}
inline void YaskawaV1000MonitorData::set_cumulative_fan_op_time_first_digit(::google::protobuf::uint32 value) {
  
  cumulative_fan_op_time_first_digit_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.cumulative_fan_op_time_first_digit)
}

// optional uint32 drive_rated_current = 32;
inline void YaskawaV1000MonitorData::clear_drive_rated_current() {
  drive_rated_current_ = 0u;
}
inline ::google::protobuf::uint32 YaskawaV1000MonitorData::drive_rated_current() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.drive_rated_current)
  return drive_rated_current_;
}
inline void YaskawaV1000MonitorData::set_drive_rated_current(::google::protobuf::uint32 value) {
  
  drive_rated_current_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.drive_rated_current)
}

// optional uint32 motor_speed_revs_minute = 33;
inline void YaskawaV1000MonitorData::clear_motor_speed_revs_minute() {
  motor_speed_revs_minute_ = 0u;
}
inline ::google::protobuf::uint32 YaskawaV1000MonitorData::motor_speed_revs_minute() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.motor_speed_revs_minute)
  return motor_speed_revs_minute_;
}
inline void YaskawaV1000MonitorData::set_motor_speed_revs_minute(::google::protobuf::uint32 value) {
  
  motor_speed_revs_minute_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.motor_speed_revs_minute)
}

// optional uint32 motor_speed_revs_percent = 34;
inline void YaskawaV1000MonitorData::clear_motor_speed_revs_percent() {
  motor_speed_revs_percent_ = 0u;
}
inline ::google::protobuf::uint32 YaskawaV1000MonitorData::motor_speed_revs_percent() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.motor_speed_revs_percent)
  return motor_speed_revs_percent_;
}
inline void YaskawaV1000MonitorData::set_motor_speed_revs_percent(::google::protobuf::uint32 value) {
  
  motor_speed_revs_percent_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.motor_speed_revs_percent)
}

// optional uint32 option_code = 35;
inline void YaskawaV1000MonitorData::clear_option_code() {
  option_code_ = 0u;
}
inline ::google::protobuf::uint32 YaskawaV1000MonitorData::option_code() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.option_code)
  return option_code_;
}
inline void YaskawaV1000MonitorData::set_option_code(::google::protobuf::uint32 value) {
  
  option_code_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.option_code)
}

// optional uint32 ope_error_number = 36;
inline void YaskawaV1000MonitorData::clear_ope_error_number() {
  ope_error_number_ = 0u;
}
inline ::google::protobuf::uint32 YaskawaV1000MonitorData::ope_error_number() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.ope_error_number)
  return ope_error_number_;
}
inline void YaskawaV1000MonitorData::set_ope_error_number(::google::protobuf::uint32 value) {
  
  ope_error_number_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.ope_error_number)
}

// optional fixed32 fault_contents_3 = 37;
inline void YaskawaV1000MonitorData::clear_fault_contents_3() {
  fault_contents_3_ = 0u;
}
inline ::google::protobuf::uint32 YaskawaV1000MonitorData::fault_contents_3() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.fault_contents_3)
  return fault_contents_3_;
}
inline void YaskawaV1000MonitorData::set_fault_contents_3(::google::protobuf::uint32 value) {
  
  fault_contents_3_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.fault_contents_3)
}

// optional fixed32 fault_contents_4 = 38;
inline void YaskawaV1000MonitorData::clear_fault_contents_4() {
  fault_contents_4_ = 0u;
}
inline ::google::protobuf::uint32 YaskawaV1000MonitorData::fault_contents_4() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.fault_contents_4)
  return fault_contents_4_;
}
inline void YaskawaV1000MonitorData::set_fault_contents_4(::google::protobuf::uint32 value) {
  
  fault_contents_4_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.fault_contents_4)
}

// optional fixed32 fault_contents_5 = 39;
inline void YaskawaV1000MonitorData::clear_fault_contents_5() {
  fault_contents_5_ = 0u;
}
inline ::google::protobuf::uint32 YaskawaV1000MonitorData::fault_contents_5() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.fault_contents_5)
  return fault_contents_5_;
}
inline void YaskawaV1000MonitorData::set_fault_contents_5(::google::protobuf::uint32 value) {
  
  fault_contents_5_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.fault_contents_5)
}

// optional fixed32 fault_contents_6 = 40;
inline void YaskawaV1000MonitorData::clear_fault_contents_6() {
  fault_contents_6_ = 0u;
}
inline ::google::protobuf::uint32 YaskawaV1000MonitorData::fault_contents_6() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.fault_contents_6)
  return fault_contents_6_;
}
inline void YaskawaV1000MonitorData::set_fault_contents_6(::google::protobuf::uint32 value) {
  
  fault_contents_6_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.fault_contents_6)
}

// optional fixed32 fault_contents_7 = 41;
inline void YaskawaV1000MonitorData::clear_fault_contents_7() {
  fault_contents_7_ = 0u;
}
inline ::google::protobuf::uint32 YaskawaV1000MonitorData::fault_contents_7() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.fault_contents_7)
  return fault_contents_7_;
}
inline void YaskawaV1000MonitorData::set_fault_contents_7(::google::protobuf::uint32 value) {
  
  fault_contents_7_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.fault_contents_7)
}

// optional fixed32 alarm_contents_2 = 42;
inline void YaskawaV1000MonitorData::clear_alarm_contents_2() {
  alarm_contents_2_ = 0u;
}
inline ::google::protobuf::uint32 YaskawaV1000MonitorData::alarm_contents_2() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.alarm_contents_2)
  return alarm_contents_2_;
}
inline void YaskawaV1000MonitorData::set_alarm_contents_2(::google::protobuf::uint32 value) {
  
  alarm_contents_2_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.alarm_contents_2)
}

// optional fixed32 alarm_contents_3 = 43;
inline void YaskawaV1000MonitorData::clear_alarm_contents_3() {
  alarm_contents_3_ = 0u;
}
inline ::google::protobuf::uint32 YaskawaV1000MonitorData::alarm_contents_3() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.alarm_contents_3)
  return alarm_contents_3_;
}
inline void YaskawaV1000MonitorData::set_alarm_contents_3(::google::protobuf::uint32 value) {
  
  alarm_contents_3_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.alarm_contents_3)
}

// optional fixed32 alarm_contents_4 = 44;
inline void YaskawaV1000MonitorData::clear_alarm_contents_4() {
  alarm_contents_4_ = 0u;
}
inline ::google::protobuf::uint32 YaskawaV1000MonitorData::alarm_contents_4() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.alarm_contents_4)
  return alarm_contents_4_;
}
inline void YaskawaV1000MonitorData::set_alarm_contents_4(::google::protobuf::uint32 value) {
  
  alarm_contents_4_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.alarm_contents_4)
}

// optional fixed32 alarm_contents_5 = 45;
inline void YaskawaV1000MonitorData::clear_alarm_contents_5() {
  alarm_contents_5_ = 0u;
}
inline ::google::protobuf::uint32 YaskawaV1000MonitorData::alarm_contents_5() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.alarm_contents_5)
  return alarm_contents_5_;
}
inline void YaskawaV1000MonitorData::set_alarm_contents_5(::google::protobuf::uint32 value) {
  
  alarm_contents_5_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.alarm_contents_5)
}

// optional fixed32 cpf_contents_1 = 46;
inline void YaskawaV1000MonitorData::clear_cpf_contents_1() {
  cpf_contents_1_ = 0u;
}
inline ::google::protobuf::uint32 YaskawaV1000MonitorData::cpf_contents_1() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.cpf_contents_1)
  return cpf_contents_1_;
}
inline void YaskawaV1000MonitorData::set_cpf_contents_1(::google::protobuf::uint32 value) {
  
  cpf_contents_1_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.cpf_contents_1)
}

// optional fixed32 cpf_contents_2 = 47;
inline void YaskawaV1000MonitorData::clear_cpf_contents_2() {
  cpf_contents_2_ = 0u;
}
inline ::google::protobuf::uint32 YaskawaV1000MonitorData::cpf_contents_2() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.cpf_contents_2)
  return cpf_contents_2_;
}
inline void YaskawaV1000MonitorData::set_cpf_contents_2(::google::protobuf::uint32 value) {
  
  cpf_contents_2_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.cpf_contents_2)
}

// optional fixed32 cpf_contents_3 = 48;
inline void YaskawaV1000MonitorData::clear_cpf_contents_3() {
  cpf_contents_3_ = 0u;
}
inline ::google::protobuf::uint32 YaskawaV1000MonitorData::cpf_contents_3() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.cpf_contents_3)
  return cpf_contents_3_;
}
inline void YaskawaV1000MonitorData::set_cpf_contents_3(::google::protobuf::uint32 value) {
  
  cpf_contents_3_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.cpf_contents_3)
}

// optional fixed32 option_card_fault_contents = 49;
inline void YaskawaV1000MonitorData::clear_option_card_fault_contents() {
  option_card_fault_contents_ = 0u;
}
inline ::google::protobuf::uint32 YaskawaV1000MonitorData::option_card_fault_contents() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.option_card_fault_contents)
  return option_card_fault_contents_;
}
inline void YaskawaV1000MonitorData::set_option_card_fault_contents(::google::protobuf::uint32 value) {
  
  option_card_fault_contents_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.option_card_fault_contents)
}

// optional uint32 output_current_2 = 50;
inline void YaskawaV1000MonitorData::clear_output_current_2() {
  output_current_2_ = 0u;
}
inline ::google::protobuf::uint32 YaskawaV1000MonitorData::output_current_2() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.output_current_2)
  return output_current_2_;
}
inline void YaskawaV1000MonitorData::set_output_current_2(::google::protobuf::uint32 value) {
  
  output_current_2_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.output_current_2)
}

// optional float output_freq_hertz = 51;
inline void YaskawaV1000MonitorData::clear_output_freq_hertz() {
  output_freq_hertz_ = 0;
}
inline float YaskawaV1000MonitorData::output_freq_hertz() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.output_freq_hertz)
  return output_freq_hertz_;
}
inline void YaskawaV1000MonitorData::set_output_freq_hertz(float value) {
  
  output_freq_hertz_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.output_freq_hertz)
}

// optional float output_current_amps = 52;
inline void YaskawaV1000MonitorData::clear_output_current_amps() {
  output_current_amps_ = 0;
}
inline float YaskawaV1000MonitorData::output_current_amps() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.YaskawaV1000MonitorData.output_current_amps)
  return output_current_amps_;
}
inline void YaskawaV1000MonitorData::set_output_current_amps(float value) {
  
  output_current_amps_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.YaskawaV1000MonitorData.output_current_amps)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ancp00
}  // namespace analogic

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::analogic::ancp00::YaskawaV1000MonitorData_DRIVE_STATUS_1_BITS> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::analogic::ancp00::YaskawaV1000MonitorData_DRIVE_STATUS_1_BITS>() {
  return ::analogic::ancp00::YaskawaV1000MonitorData_DRIVE_STATUS_1_BITS_descriptor();
}
template <> struct is_proto_enum< ::analogic::ancp00::YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::analogic::ancp00::YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS>() {
  return ::analogic::ancp00::YaskawaV1000MonitorData_FAULT_CONTENTS_1_BITS_descriptor();
}
template <> struct is_proto_enum< ::analogic::ancp00::YaskawaV1000MonitorData_DATA_LINK_STATUS_BITS> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::analogic::ancp00::YaskawaV1000MonitorData_DATA_LINK_STATUS_BITS>() {
  return ::analogic::ancp00::YaskawaV1000MonitorData_DATA_LINK_STATUS_BITS_descriptor();
}
template <> struct is_proto_enum< ::analogic::ancp00::YaskawaV1000MonitorData_FAULT_CONTENTS_2_BITS> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::analogic::ancp00::YaskawaV1000MonitorData_FAULT_CONTENTS_2_BITS>() {
  return ::analogic::ancp00::YaskawaV1000MonitorData_FAULT_CONTENTS_2_BITS_descriptor();
}
template <> struct is_proto_enum< ::analogic::ancp00::YaskawaV1000MonitorData_ALARM_CONTENTS_1_BITS> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::analogic::ancp00::YaskawaV1000MonitorData_ALARM_CONTENTS_1_BITS>() {
  return ::analogic::ancp00::YaskawaV1000MonitorData_ALARM_CONTENTS_1_BITS_descriptor();
}
template <> struct is_proto_enum< ::analogic::ancp00::YaskawaV1000MonitorData_INPUT_TERMINAL_STATUS_BITS> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::analogic::ancp00::YaskawaV1000MonitorData_INPUT_TERMINAL_STATUS_BITS>() {
  return ::analogic::ancp00::YaskawaV1000MonitorData_INPUT_TERMINAL_STATUS_BITS_descriptor();
}
template <> struct is_proto_enum< ::analogic::ancp00::YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::analogic::ancp00::YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS>() {
  return ::analogic::ancp00::YaskawaV1000MonitorData_DRIVE_STATUS_2_BITS_descriptor();
}
template <> struct is_proto_enum< ::analogic::ancp00::YaskawaV1000MonitorData_OUTPUT_TERMINAL_STATUS_BITS> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::analogic::ancp00::YaskawaV1000MonitorData_OUTPUT_TERMINAL_STATUS_BITS>() {
  return ::analogic::ancp00::YaskawaV1000MonitorData_OUTPUT_TERMINAL_STATUS_BITS_descriptor();
}
template <> struct is_proto_enum< ::analogic::ancp00::YaskawaV1000MonitorData_COMM_ERROR_LOG_BITS> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::analogic::ancp00::YaskawaV1000MonitorData_COMM_ERROR_LOG_BITS>() {
  return ::analogic::ancp00::YaskawaV1000MonitorData_COMM_ERROR_LOG_BITS_descriptor();
}
template <> struct is_proto_enum< ::analogic::ancp00::YaskawaV1000MonitorData_DRIVE_STATUS_BITS> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::analogic::ancp00::YaskawaV1000MonitorData_DRIVE_STATUS_BITS>() {
  return ::analogic::ancp00::YaskawaV1000MonitorData_DRIVE_STATUS_BITS_descriptor();
}
template <> struct is_proto_enum< ::analogic::ancp00::YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::analogic::ancp00::YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS>() {
  return ::analogic::ancp00::YaskawaV1000MonitorData_FAULT_CONTENTS_3_BITS_descriptor();
}
template <> struct is_proto_enum< ::analogic::ancp00::YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::analogic::ancp00::YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS>() {
  return ::analogic::ancp00::YaskawaV1000MonitorData_FAULT_CONTENTS_4_BITS_descriptor();
}
template <> struct is_proto_enum< ::analogic::ancp00::YaskawaV1000MonitorData_FAULT_CONTENTS_5_BITS> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::analogic::ancp00::YaskawaV1000MonitorData_FAULT_CONTENTS_5_BITS>() {
  return ::analogic::ancp00::YaskawaV1000MonitorData_FAULT_CONTENTS_5_BITS_descriptor();
}
template <> struct is_proto_enum< ::analogic::ancp00::YaskawaV1000MonitorData_FAULT_CONTENTS_6_BITS> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::analogic::ancp00::YaskawaV1000MonitorData_FAULT_CONTENTS_6_BITS>() {
  return ::analogic::ancp00::YaskawaV1000MonitorData_FAULT_CONTENTS_6_BITS_descriptor();
}
template <> struct is_proto_enum< ::analogic::ancp00::YaskawaV1000MonitorData_FAULT_CONTENTS_7_BITS> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::analogic::ancp00::YaskawaV1000MonitorData_FAULT_CONTENTS_7_BITS>() {
  return ::analogic::ancp00::YaskawaV1000MonitorData_FAULT_CONTENTS_7_BITS_descriptor();
}
template <> struct is_proto_enum< ::analogic::ancp00::YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::analogic::ancp00::YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS>() {
  return ::analogic::ancp00::YaskawaV1000MonitorData_ALARM_CONTENTS_2_BITS_descriptor();
}
template <> struct is_proto_enum< ::analogic::ancp00::YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::analogic::ancp00::YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS>() {
  return ::analogic::ancp00::YaskawaV1000MonitorData_ALARM_CONTENTS_3_BITS_descriptor();
}
template <> struct is_proto_enum< ::analogic::ancp00::YaskawaV1000MonitorData_ALARM_CONTENTS_4_BITS> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::analogic::ancp00::YaskawaV1000MonitorData_ALARM_CONTENTS_4_BITS>() {
  return ::analogic::ancp00::YaskawaV1000MonitorData_ALARM_CONTENTS_4_BITS_descriptor();
}
template <> struct is_proto_enum< ::analogic::ancp00::YaskawaV1000MonitorData_ALARM_CONTENTS_5_BITS> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::analogic::ancp00::YaskawaV1000MonitorData_ALARM_CONTENTS_5_BITS>() {
  return ::analogic::ancp00::YaskawaV1000MonitorData_ALARM_CONTENTS_5_BITS_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_2fYaskawaV1000_2eproto__INCLUDED
