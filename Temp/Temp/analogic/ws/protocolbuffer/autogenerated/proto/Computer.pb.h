// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/Computer.proto

#ifndef PROTOBUF_proto_2fComputer_2eproto__INCLUDED
#define PROTOBUF_proto_2fComputer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace analogic {
namespace ancp00 {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_proto_2fComputer_2eproto();
void protobuf_AssignDesc_proto_2fComputer_2eproto();
void protobuf_ShutdownFile_proto_2fComputer_2eproto();

class ComputerInfo;
class ComputerStatus;

// ===================================================================

class ComputerStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:analogic.ancp00.ComputerStatus) */ {
 public:
  ComputerStatus();
  virtual ~ComputerStatus();

  ComputerStatus(const ComputerStatus& from);

  inline ComputerStatus& operator=(const ComputerStatus& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ComputerStatus& default_instance();

  void Swap(ComputerStatus* other);

  // implements Message ----------------------------------------------

  inline ComputerStatus* New() const { return New(NULL); }

  ComputerStatus* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ComputerStatus& from);
  void MergeFrom(const ComputerStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ComputerStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string gpu_1 = 1;
  void clear_gpu_1();
  static const int kGpu1FieldNumber = 1;
  const ::std::string& gpu_1() const;
  void set_gpu_1(const ::std::string& value);
  void set_gpu_1(const char* value);
  void set_gpu_1(const char* value, size_t size);
  ::std::string* mutable_gpu_1();
  ::std::string* release_gpu_1();
  void set_allocated_gpu_1(::std::string* gpu_1);

  // optional string gpu_2 = 2;
  void clear_gpu_2();
  static const int kGpu2FieldNumber = 2;
  const ::std::string& gpu_2() const;
  void set_gpu_2(const ::std::string& value);
  void set_gpu_2(const char* value);
  void set_gpu_2(const char* value, size_t size);
  ::std::string* mutable_gpu_2();
  ::std::string* release_gpu_2();
  void set_allocated_gpu_2(::std::string* gpu_2);

  // optional float gpu_1_temp_C = 3;
  void clear_gpu_1_temp_c();
  static const int kGpu1TempCFieldNumber = 3;
  float gpu_1_temp_c() const;
  void set_gpu_1_temp_c(float value);

  // optional float gpu_2_temp_C = 4;
  void clear_gpu_2_temp_c();
  static const int kGpu2TempCFieldNumber = 4;
  float gpu_2_temp_c() const;
  void set_gpu_2_temp_c(float value);

  // optional float ssd_1_temp_C = 5;
  void clear_ssd_1_temp_c();
  static const int kSsd1TempCFieldNumber = 5;
  float ssd_1_temp_c() const;
  void set_ssd_1_temp_c(float value);

  // optional float hdd_1_temp_C = 6;
  void clear_hdd_1_temp_c();
  static const int kHdd1TempCFieldNumber = 6;
  float hdd_1_temp_c() const;
  void set_hdd_1_temp_c(float value);

  // optional float raid_1_temp_C = 20;
  void clear_raid_1_temp_c();
  static const int kRaid1TempCFieldNumber = 20;
  float raid_1_temp_c() const;
  void set_raid_1_temp_c(float value);

  // optional float raid_2_temp_C = 21;
  void clear_raid_2_temp_c();
  static const int kRaid2TempCFieldNumber = 21;
  float raid_2_temp_c() const;
  void set_raid_2_temp_c(float value);

  // optional float raid_3_temp_C = 22;
  void clear_raid_3_temp_c();
  static const int kRaid3TempCFieldNumber = 22;
  float raid_3_temp_c() const;
  void set_raid_3_temp_c(float value);

  // optional float raid_4_temp_C = 23;
  void clear_raid_4_temp_c();
  static const int kRaid4TempCFieldNumber = 23;
  float raid_4_temp_c() const;
  void set_raid_4_temp_c(float value);

  // optional string raid_status = 24;
  void clear_raid_status();
  static const int kRaidStatusFieldNumber = 24;
  const ::std::string& raid_status() const;
  void set_raid_status(const ::std::string& value);
  void set_raid_status(const char* value);
  void set_raid_status(const char* value, size_t size);
  ::std::string* mutable_raid_status();
  ::std::string* release_raid_status();
  void set_allocated_raid_status(::std::string* raid_status);

  // optional string raid_drive_1_status = 25;
  void clear_raid_drive_1_status();
  static const int kRaidDrive1StatusFieldNumber = 25;
  const ::std::string& raid_drive_1_status() const;
  void set_raid_drive_1_status(const ::std::string& value);
  void set_raid_drive_1_status(const char* value);
  void set_raid_drive_1_status(const char* value, size_t size);
  ::std::string* mutable_raid_drive_1_status();
  ::std::string* release_raid_drive_1_status();
  void set_allocated_raid_drive_1_status(::std::string* raid_drive_1_status);

  // optional string raid_drive_2_status = 26;
  void clear_raid_drive_2_status();
  static const int kRaidDrive2StatusFieldNumber = 26;
  const ::std::string& raid_drive_2_status() const;
  void set_raid_drive_2_status(const ::std::string& value);
  void set_raid_drive_2_status(const char* value);
  void set_raid_drive_2_status(const char* value, size_t size);
  ::std::string* mutable_raid_drive_2_status();
  ::std::string* release_raid_drive_2_status();
  void set_allocated_raid_drive_2_status(::std::string* raid_drive_2_status);

  // optional string raid_drive_3_status = 27;
  void clear_raid_drive_3_status();
  static const int kRaidDrive3StatusFieldNumber = 27;
  const ::std::string& raid_drive_3_status() const;
  void set_raid_drive_3_status(const ::std::string& value);
  void set_raid_drive_3_status(const char* value);
  void set_raid_drive_3_status(const char* value, size_t size);
  ::std::string* mutable_raid_drive_3_status();
  ::std::string* release_raid_drive_3_status();
  void set_allocated_raid_drive_3_status(::std::string* raid_drive_3_status);

  // optional string raid_drive_4_status = 28;
  void clear_raid_drive_4_status();
  static const int kRaidDrive4StatusFieldNumber = 28;
  const ::std::string& raid_drive_4_status() const;
  void set_raid_drive_4_status(const ::std::string& value);
  void set_raid_drive_4_status(const char* value);
  void set_raid_drive_4_status(const char* value, size_t size);
  ::std::string* mutable_raid_drive_4_status();
  ::std::string* release_raid_drive_4_status();
  void set_allocated_raid_drive_4_status(::std::string* raid_drive_4_status);

  // optional float memory_usage_percent = 40;
  void clear_memory_usage_percent();
  static const int kMemoryUsagePercentFieldNumber = 40;
  float memory_usage_percent() const;
  void set_memory_usage_percent(float value);

  // optional bool virtual_machine_status = 41;
  void clear_virtual_machine_status();
  static const int kVirtualMachineStatusFieldNumber = 41;
  bool virtual_machine_status() const;
  void set_virtual_machine_status(bool value);

  // optional bool web_server_status = 42;
  void clear_web_server_status();
  static const int kWebServerStatusFieldNumber = 42;
  bool web_server_status() const;
  void set_web_server_status(bool value);

  // optional bool hard_drive_space_status = 43;
  void clear_hard_drive_space_status();
  static const int kHardDriveSpaceStatusFieldNumber = 43;
  bool hard_drive_space_status() const;
  void set_hard_drive_space_status(bool value);

  // optional bool raid_mount_status = 44;
  void clear_raid_mount_status();
  static const int kRaidMountStatusFieldNumber = 44;
  bool raid_mount_status() const;
  void set_raid_mount_status(bool value);

  // optional bool network_speed_status = 45;
  void clear_network_speed_status();
  static const int kNetworkSpeedStatusFieldNumber = 45;
  bool network_speed_status() const;
  void set_network_speed_status(bool value);

  // optional float cpu_0_core_0_temp_C = 60;
  void clear_cpu_0_core_0_temp_c();
  static const int kCpu0Core0TempCFieldNumber = 60;
  float cpu_0_core_0_temp_c() const;
  void set_cpu_0_core_0_temp_c(float value);

  // optional float cpu_0_core_1_temp_C = 61;
  void clear_cpu_0_core_1_temp_c();
  static const int kCpu0Core1TempCFieldNumber = 61;
  float cpu_0_core_1_temp_c() const;
  void set_cpu_0_core_1_temp_c(float value);

  // optional float cpu_0_core_2_temp_C = 63;
  void clear_cpu_0_core_2_temp_c();
  static const int kCpu0Core2TempCFieldNumber = 63;
  float cpu_0_core_2_temp_c() const;
  void set_cpu_0_core_2_temp_c(float value);

  // optional float cpu_0_core_3_temp_C = 64;
  void clear_cpu_0_core_3_temp_c();
  static const int kCpu0Core3TempCFieldNumber = 64;
  float cpu_0_core_3_temp_c() const;
  void set_cpu_0_core_3_temp_c(float value);

  // optional float cpu_0_core_4_temp_C = 65;
  void clear_cpu_0_core_4_temp_c();
  static const int kCpu0Core4TempCFieldNumber = 65;
  float cpu_0_core_4_temp_c() const;
  void set_cpu_0_core_4_temp_c(float value);

  // optional float cpu_0_core_5_temp_C = 66;
  void clear_cpu_0_core_5_temp_c();
  static const int kCpu0Core5TempCFieldNumber = 66;
  float cpu_0_core_5_temp_c() const;
  void set_cpu_0_core_5_temp_c(float value);

  // optional float cpu_0_core_6_temp_C = 67;
  void clear_cpu_0_core_6_temp_c();
  static const int kCpu0Core6TempCFieldNumber = 67;
  float cpu_0_core_6_temp_c() const;
  void set_cpu_0_core_6_temp_c(float value);

  // optional float cpu_0_core_7_temp_C = 68;
  void clear_cpu_0_core_7_temp_c();
  static const int kCpu0Core7TempCFieldNumber = 68;
  float cpu_0_core_7_temp_c() const;
  void set_cpu_0_core_7_temp_c(float value);

  // optional float cpu_1_core_0_temp_C = 69;
  void clear_cpu_1_core_0_temp_c();
  static const int kCpu1Core0TempCFieldNumber = 69;
  float cpu_1_core_0_temp_c() const;
  void set_cpu_1_core_0_temp_c(float value);

  // optional float cpu_1_core_1_temp_C = 70;
  void clear_cpu_1_core_1_temp_c();
  static const int kCpu1Core1TempCFieldNumber = 70;
  float cpu_1_core_1_temp_c() const;
  void set_cpu_1_core_1_temp_c(float value);

  // optional float cpu_1_core_2_temp_C = 71;
  void clear_cpu_1_core_2_temp_c();
  static const int kCpu1Core2TempCFieldNumber = 71;
  float cpu_1_core_2_temp_c() const;
  void set_cpu_1_core_2_temp_c(float value);

  // optional float cpu_1_core_3_temp_C = 72;
  void clear_cpu_1_core_3_temp_c();
  static const int kCpu1Core3TempCFieldNumber = 72;
  float cpu_1_core_3_temp_c() const;
  void set_cpu_1_core_3_temp_c(float value);

  // optional float cpu_1_core_4_temp_C = 73;
  void clear_cpu_1_core_4_temp_c();
  static const int kCpu1Core4TempCFieldNumber = 73;
  float cpu_1_core_4_temp_c() const;
  void set_cpu_1_core_4_temp_c(float value);

  // optional float cpu_1_core_5_temp_C = 74;
  void clear_cpu_1_core_5_temp_c();
  static const int kCpu1Core5TempCFieldNumber = 74;
  float cpu_1_core_5_temp_c() const;
  void set_cpu_1_core_5_temp_c(float value);

  // optional float cpu_1_core_6_temp_C = 75;
  void clear_cpu_1_core_6_temp_c();
  static const int kCpu1Core6TempCFieldNumber = 75;
  float cpu_1_core_6_temp_c() const;
  void set_cpu_1_core_6_temp_c(float value);

  // optional float cpu_1_core_7_temp_C = 76;
  void clear_cpu_1_core_7_temp_c();
  static const int kCpu1Core7TempCFieldNumber = 76;
  float cpu_1_core_7_temp_c() const;
  void set_cpu_1_core_7_temp_c(float value);

  // optional float cpu_0_core_8_temp_C = 77;
  void clear_cpu_0_core_8_temp_c();
  static const int kCpu0Core8TempCFieldNumber = 77;
  float cpu_0_core_8_temp_c() const;
  void set_cpu_0_core_8_temp_c(float value);

  // optional float cpu_0_core_9_temp_C = 78;
  void clear_cpu_0_core_9_temp_c();
  static const int kCpu0Core9TempCFieldNumber = 78;
  float cpu_0_core_9_temp_c() const;
  void set_cpu_0_core_9_temp_c(float value);

  // optional float cpu_1_core_8_temp_C = 79;
  void clear_cpu_1_core_8_temp_c();
  static const int kCpu1Core8TempCFieldNumber = 79;
  float cpu_1_core_8_temp_c() const;
  void set_cpu_1_core_8_temp_c(float value);

  // optional float cpu_1_core_9_temp_C = 80;
  void clear_cpu_1_core_9_temp_c();
  static const int kCpu1Core9TempCFieldNumber = 80;
  float cpu_1_core_9_temp_c() const;
  void set_cpu_1_core_9_temp_c(float value);

  // optional string time = 100;
  void clear_time();
  static const int kTimeFieldNumber = 100;
  const ::std::string& time() const;
  void set_time(const ::std::string& value);
  void set_time(const char* value);
  void set_time(const char* value, size_t size);
  ::std::string* mutable_time();
  ::std::string* release_time();
  void set_allocated_time(::std::string* time);

  // optional string time_zone = 101;
  void clear_time_zone();
  static const int kTimeZoneFieldNumber = 101;
  const ::std::string& time_zone() const;
  void set_time_zone(const ::std::string& value);
  void set_time_zone(const char* value);
  void set_time_zone(const char* value, size_t size);
  ::std::string* mutable_time_zone();
  ::std::string* release_time_zone();
  void set_allocated_time_zone(::std::string* time_zone);

  // optional string ntp_server = 102;
  void clear_ntp_server();
  static const int kNtpServerFieldNumber = 102;
  const ::std::string& ntp_server() const;
  void set_ntp_server(const ::std::string& value);
  void set_ntp_server(const char* value);
  void set_ntp_server(const char* value, size_t size);
  ::std::string* mutable_ntp_server();
  ::std::string* release_ntp_server();
  void set_allocated_ntp_server(::std::string* ntp_server);

  // @@protoc_insertion_point(class_scope:analogic.ancp00.ComputerStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr gpu_1_;
  ::google::protobuf::internal::ArenaStringPtr gpu_2_;
  float gpu_1_temp_c_;
  float gpu_2_temp_c_;
  float ssd_1_temp_c_;
  float hdd_1_temp_c_;
  float raid_1_temp_c_;
  float raid_2_temp_c_;
  float raid_3_temp_c_;
  float raid_4_temp_c_;
  ::google::protobuf::internal::ArenaStringPtr raid_status_;
  ::google::protobuf::internal::ArenaStringPtr raid_drive_1_status_;
  ::google::protobuf::internal::ArenaStringPtr raid_drive_2_status_;
  ::google::protobuf::internal::ArenaStringPtr raid_drive_3_status_;
  ::google::protobuf::internal::ArenaStringPtr raid_drive_4_status_;
  float memory_usage_percent_;
  bool virtual_machine_status_;
  bool web_server_status_;
  bool hard_drive_space_status_;
  bool raid_mount_status_;
  bool network_speed_status_;
  float cpu_0_core_0_temp_c_;
  float cpu_0_core_1_temp_c_;
  float cpu_0_core_2_temp_c_;
  float cpu_0_core_3_temp_c_;
  float cpu_0_core_4_temp_c_;
  float cpu_0_core_5_temp_c_;
  float cpu_0_core_6_temp_c_;
  float cpu_0_core_7_temp_c_;
  float cpu_1_core_0_temp_c_;
  float cpu_1_core_1_temp_c_;
  float cpu_1_core_2_temp_c_;
  float cpu_1_core_3_temp_c_;
  float cpu_1_core_4_temp_c_;
  float cpu_1_core_5_temp_c_;
  float cpu_1_core_6_temp_c_;
  float cpu_1_core_7_temp_c_;
  float cpu_0_core_8_temp_c_;
  float cpu_0_core_9_temp_c_;
  float cpu_1_core_8_temp_c_;
  ::google::protobuf::internal::ArenaStringPtr time_;
  ::google::protobuf::internal::ArenaStringPtr time_zone_;
  ::google::protobuf::internal::ArenaStringPtr ntp_server_;
  float cpu_1_core_9_temp_c_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_proto_2fComputer_2eproto();
  friend void protobuf_AssignDesc_proto_2fComputer_2eproto();
  friend void protobuf_ShutdownFile_proto_2fComputer_2eproto();

  void InitAsDefaultInstance();
  static ComputerStatus* default_instance_;
};
// -------------------------------------------------------------------

class ComputerInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:analogic.ancp00.ComputerInfo) */ {
 public:
  ComputerInfo();
  virtual ~ComputerInfo();

  ComputerInfo(const ComputerInfo& from);

  inline ComputerInfo& operator=(const ComputerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ComputerInfo& default_instance();

  void Swap(ComputerInfo* other);

  // implements Message ----------------------------------------------

  inline ComputerInfo* New() const { return New(NULL); }

  ComputerInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ComputerInfo& from);
  void MergeFrom(const ComputerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ComputerInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string scanner_control_software_version = 1;
  void clear_scanner_control_software_version();
  static const int kScannerControlSoftwareVersionFieldNumber = 1;
  const ::std::string& scanner_control_software_version() const;
  void set_scanner_control_software_version(const ::std::string& value);
  void set_scanner_control_software_version(const char* value);
  void set_scanner_control_software_version(const char* value, size_t size);
  ::std::string* mutable_scanner_control_software_version();
  ::std::string* release_scanner_control_software_version();
  void set_allocated_scanner_control_software_version(::std::string* scanner_control_software_version);

  // optional string reconstruction_software_version = 2;
  void clear_reconstruction_software_version();
  static const int kReconstructionSoftwareVersionFieldNumber = 2;
  const ::std::string& reconstruction_software_version() const;
  void set_reconstruction_software_version(const ::std::string& value);
  void set_reconstruction_software_version(const char* value);
  void set_reconstruction_software_version(const char* value, size_t size);
  ::std::string* mutable_reconstruction_software_version();
  ::std::string* release_reconstruction_software_version();
  void set_allocated_reconstruction_software_version(::std::string* reconstruction_software_version);

  // optional string operating_system_version = 3;
  void clear_operating_system_version();
  static const int kOperatingSystemVersionFieldNumber = 3;
  const ::std::string& operating_system_version() const;
  void set_operating_system_version(const ::std::string& value);
  void set_operating_system_version(const char* value);
  void set_operating_system_version(const char* value, size_t size);
  ::std::string* mutable_operating_system_version();
  ::std::string* release_operating_system_version();
  void set_allocated_operating_system_version(::std::string* operating_system_version);

  // optional string detection_software_version = 4;
  void clear_detection_software_version();
  static const int kDetectionSoftwareVersionFieldNumber = 4;
  const ::std::string& detection_software_version() const;
  void set_detection_software_version(const ::std::string& value);
  void set_detection_software_version(const char* value);
  void set_detection_software_version(const char* value, size_t size);
  ::std::string* mutable_detection_software_version();
  ::std::string* release_detection_software_version();
  void set_allocated_detection_software_version(::std::string* detection_software_version);

  // optional string detection_library_1_version = 5;
  void clear_detection_library_1_version();
  static const int kDetectionLibrary1VersionFieldNumber = 5;
  const ::std::string& detection_library_1_version() const;
  void set_detection_library_1_version(const ::std::string& value);
  void set_detection_library_1_version(const char* value);
  void set_detection_library_1_version(const char* value, size_t size);
  ::std::string* mutable_detection_library_1_version();
  ::std::string* release_detection_library_1_version();
  void set_allocated_detection_library_1_version(::std::string* detection_library_1_version);

  // optional string detection_library_2_version = 6;
  void clear_detection_library_2_version();
  static const int kDetectionLibrary2VersionFieldNumber = 6;
  const ::std::string& detection_library_2_version() const;
  void set_detection_library_2_version(const ::std::string& value);
  void set_detection_library_2_version(const char* value);
  void set_detection_library_2_version(const char* value, size_t size);
  ::std::string* mutable_detection_library_2_version();
  ::std::string* release_detection_library_2_version();
  void set_allocated_detection_library_2_version(::std::string* detection_library_2_version);

  // optional string detection_library_3_version = 7;
  void clear_detection_library_3_version();
  static const int kDetectionLibrary3VersionFieldNumber = 7;
  const ::std::string& detection_library_3_version() const;
  void set_detection_library_3_version(const ::std::string& value);
  void set_detection_library_3_version(const char* value);
  void set_detection_library_3_version(const char* value, size_t size);
  ::std::string* mutable_detection_library_3_version();
  ::std::string* release_detection_library_3_version();
  void set_allocated_detection_library_3_version(::std::string* detection_library_3_version);

  // optional string detection_library_4_version = 8;
  void clear_detection_library_4_version();
  static const int kDetectionLibrary4VersionFieldNumber = 8;
  const ::std::string& detection_library_4_version() const;
  void set_detection_library_4_version(const ::std::string& value);
  void set_detection_library_4_version(const char* value);
  void set_detection_library_4_version(const char* value, size_t size);
  ::std::string* mutable_detection_library_4_version();
  ::std::string* release_detection_library_4_version();
  void set_allocated_detection_library_4_version(::std::string* detection_library_4_version);

  // optional string detection_library_5_version = 9;
  void clear_detection_library_5_version();
  static const int kDetectionLibrary5VersionFieldNumber = 9;
  const ::std::string& detection_library_5_version() const;
  void set_detection_library_5_version(const ::std::string& value);
  void set_detection_library_5_version(const char* value);
  void set_detection_library_5_version(const char* value, size_t size);
  ::std::string* mutable_detection_library_5_version();
  ::std::string* release_detection_library_5_version();
  void set_allocated_detection_library_5_version(::std::string* detection_library_5_version);

  // optional string das_receiver_board_version = 10;
  void clear_das_receiver_board_version();
  static const int kDasReceiverBoardVersionFieldNumber = 10;
  const ::std::string& das_receiver_board_version() const;
  void set_das_receiver_board_version(const ::std::string& value);
  void set_das_receiver_board_version(const char* value);
  void set_das_receiver_board_version(const char* value, size_t size);
  ::std::string* mutable_das_receiver_board_version();
  ::std::string* release_das_receiver_board_version();
  void set_allocated_das_receiver_board_version(::std::string* das_receiver_board_version);

  // optional string rotor_control_board_version = 11;
  void clear_rotor_control_board_version();
  static const int kRotorControlBoardVersionFieldNumber = 11;
  const ::std::string& rotor_control_board_version() const;
  void set_rotor_control_board_version(const ::std::string& value);
  void set_rotor_control_board_version(const char* value);
  void set_rotor_control_board_version(const char* value, size_t size);
  ::std::string* mutable_rotor_control_board_version();
  ::std::string* release_rotor_control_board_version();
  void set_allocated_rotor_control_board_version(::std::string* rotor_control_board_version);

  // optional string das_control_board_1_version = 12;
  void clear_das_control_board_1_version();
  static const int kDasControlBoard1VersionFieldNumber = 12;
  const ::std::string& das_control_board_1_version() const;
  void set_das_control_board_1_version(const ::std::string& value);
  void set_das_control_board_1_version(const char* value);
  void set_das_control_board_1_version(const char* value, size_t size);
  ::std::string* mutable_das_control_board_1_version();
  ::std::string* release_das_control_board_1_version();
  void set_allocated_das_control_board_1_version(::std::string* das_control_board_1_version);

  // optional string das_control_board_2_version = 13;
  void clear_das_control_board_2_version();
  static const int kDasControlBoard2VersionFieldNumber = 13;
  const ::std::string& das_control_board_2_version() const;
  void set_das_control_board_2_version(const ::std::string& value);
  void set_das_control_board_2_version(const char* value);
  void set_das_control_board_2_version(const char* value, size_t size);
  ::std::string* mutable_das_control_board_2_version();
  ::std::string* release_das_control_board_2_version();
  void set_allocated_das_control_board_2_version(::std::string* das_control_board_2_version);

  // optional string das_control_board_3_version = 14;
  void clear_das_control_board_3_version();
  static const int kDasControlBoard3VersionFieldNumber = 14;
  const ::std::string& das_control_board_3_version() const;
  void set_das_control_board_3_version(const ::std::string& value);
  void set_das_control_board_3_version(const char* value);
  void set_das_control_board_3_version(const char* value, size_t size);
  ::std::string* mutable_das_control_board_3_version();
  ::std::string* release_das_control_board_3_version();
  void set_allocated_das_control_board_3_version(::std::string* das_control_board_3_version);

  // optional string das_control_board_4_version = 15;
  void clear_das_control_board_4_version();
  static const int kDasControlBoard4VersionFieldNumber = 15;
  const ::std::string& das_control_board_4_version() const;
  void set_das_control_board_4_version(const ::std::string& value);
  void set_das_control_board_4_version(const char* value);
  void set_das_control_board_4_version(const char* value, size_t size);
  ::std::string* mutable_das_control_board_4_version();
  ::std::string* release_das_control_board_4_version();
  void set_allocated_das_control_board_4_version(::std::string* das_control_board_4_version);

  // optional string das_control_board_5_version = 16;
  void clear_das_control_board_5_version();
  static const int kDasControlBoard5VersionFieldNumber = 16;
  const ::std::string& das_control_board_5_version() const;
  void set_das_control_board_5_version(const ::std::string& value);
  void set_das_control_board_5_version(const char* value);
  void set_das_control_board_5_version(const char* value, size_t size);
  ::std::string* mutable_das_control_board_5_version();
  ::std::string* release_das_control_board_5_version();
  void set_allocated_das_control_board_5_version(::std::string* das_control_board_5_version);

  // optional string NTP_server = 17;
  void clear_ntp_server();
  static const int kNTPServerFieldNumber = 17;
  const ::std::string& ntp_server() const;
  void set_ntp_server(const ::std::string& value);
  void set_ntp_server(const char* value);
  void set_ntp_server(const char* value, size_t size);
  ::std::string* mutable_ntp_server();
  ::std::string* release_ntp_server();
  void set_allocated_ntp_server(::std::string* ntp_server);

  // optional string powerlink_version = 18;
  void clear_powerlink_version();
  static const int kPowerlinkVersionFieldNumber = 18;
  const ::std::string& powerlink_version() const;
  void set_powerlink_version(const ::std::string& value);
  void set_powerlink_version(const char* value);
  void set_powerlink_version(const char* value, size_t size);
  ::std::string* mutable_powerlink_version();
  ::std::string* release_powerlink_version();
  void set_allocated_powerlink_version(::std::string* powerlink_version);

  // optional string safety_io_version = 19;
  void clear_safety_io_version();
  static const int kSafetyIoVersionFieldNumber = 19;
  const ::std::string& safety_io_version() const;
  void set_safety_io_version(const ::std::string& value);
  void set_safety_io_version(const char* value);
  void set_safety_io_version(const char* value, size_t size);
  ::std::string* mutable_safety_io_version();
  ::std::string* release_safety_io_version();
  void set_allocated_safety_io_version(::std::string* safety_io_version);

  // optional string network_server_software = 20;
  void clear_network_server_software();
  static const int kNetworkServerSoftwareFieldNumber = 20;
  const ::std::string& network_server_software() const;
  void set_network_server_software(const ::std::string& value);
  void set_network_server_software(const char* value);
  void set_network_server_software(const char* value, size_t size);
  ::std::string* mutable_network_server_software();
  ::std::string* release_network_server_software();
  void set_allocated_network_server_software(::std::string* network_server_software);

  // optional string image_quality_test_software = 21;
  void clear_image_quality_test_software();
  static const int kImageQualityTestSoftwareFieldNumber = 21;
  const ::std::string& image_quality_test_software() const;
  void set_image_quality_test_software(const ::std::string& value);
  void set_image_quality_test_software(const char* value);
  void set_image_quality_test_software(const char* value, size_t size);
  ::std::string* mutable_image_quality_test_software();
  ::std::string* release_image_quality_test_software();
  void set_allocated_image_quality_test_software(::std::string* image_quality_test_software);

  // optional string service_diagnostic_services = 22;
  void clear_service_diagnostic_services();
  static const int kServiceDiagnosticServicesFieldNumber = 22;
  const ::std::string& service_diagnostic_services() const;
  void set_service_diagnostic_services(const ::std::string& value);
  void set_service_diagnostic_services(const char* value);
  void set_service_diagnostic_services(const char* value, size_t size);
  ::std::string* mutable_service_diagnostic_services();
  ::std::string* release_service_diagnostic_services();
  void set_allocated_service_diagnostic_services(::std::string* service_diagnostic_services);

  // optional string plc_firmware_version = 23;
  void clear_plc_firmware_version();
  static const int kPlcFirmwareVersionFieldNumber = 23;
  const ::std::string& plc_firmware_version() const;
  void set_plc_firmware_version(const ::std::string& value);
  void set_plc_firmware_version(const char* value);
  void set_plc_firmware_version(const char* value, size_t size);
  ::std::string* mutable_plc_firmware_version();
  ::std::string* release_plc_firmware_version();
  void set_allocated_plc_firmware_version(::std::string* plc_firmware_version);

  // optional string top_level_release = 24;
  void clear_top_level_release();
  static const int kTopLevelReleaseFieldNumber = 24;
  const ::std::string& top_level_release() const;
  void set_top_level_release(const ::std::string& value);
  void set_top_level_release(const char* value);
  void set_top_level_release(const char* value, size_t size);
  ::std::string* mutable_top_level_release();
  ::std::string* release_top_level_release();
  void set_allocated_top_level_release(::std::string* top_level_release);

  // optional string bhs_software_version = 25;
  void clear_bhs_software_version();
  static const int kBhsSoftwareVersionFieldNumber = 25;
  const ::std::string& bhs_software_version() const;
  void set_bhs_software_version(const ::std::string& value);
  void set_bhs_software_version(const char* value);
  void set_bhs_software_version(const char* value, size_t size);
  ::std::string* mutable_bhs_software_version();
  ::std::string* release_bhs_software_version();
  void set_allocated_bhs_software_version(::std::string* bhs_software_version);

  // @@protoc_insertion_point(class_scope:analogic.ancp00.ComputerInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr scanner_control_software_version_;
  ::google::protobuf::internal::ArenaStringPtr reconstruction_software_version_;
  ::google::protobuf::internal::ArenaStringPtr operating_system_version_;
  ::google::protobuf::internal::ArenaStringPtr detection_software_version_;
  ::google::protobuf::internal::ArenaStringPtr detection_library_1_version_;
  ::google::protobuf::internal::ArenaStringPtr detection_library_2_version_;
  ::google::protobuf::internal::ArenaStringPtr detection_library_3_version_;
  ::google::protobuf::internal::ArenaStringPtr detection_library_4_version_;
  ::google::protobuf::internal::ArenaStringPtr detection_library_5_version_;
  ::google::protobuf::internal::ArenaStringPtr das_receiver_board_version_;
  ::google::protobuf::internal::ArenaStringPtr rotor_control_board_version_;
  ::google::protobuf::internal::ArenaStringPtr das_control_board_1_version_;
  ::google::protobuf::internal::ArenaStringPtr das_control_board_2_version_;
  ::google::protobuf::internal::ArenaStringPtr das_control_board_3_version_;
  ::google::protobuf::internal::ArenaStringPtr das_control_board_4_version_;
  ::google::protobuf::internal::ArenaStringPtr das_control_board_5_version_;
  ::google::protobuf::internal::ArenaStringPtr ntp_server_;
  ::google::protobuf::internal::ArenaStringPtr powerlink_version_;
  ::google::protobuf::internal::ArenaStringPtr safety_io_version_;
  ::google::protobuf::internal::ArenaStringPtr network_server_software_;
  ::google::protobuf::internal::ArenaStringPtr image_quality_test_software_;
  ::google::protobuf::internal::ArenaStringPtr service_diagnostic_services_;
  ::google::protobuf::internal::ArenaStringPtr plc_firmware_version_;
  ::google::protobuf::internal::ArenaStringPtr top_level_release_;
  ::google::protobuf::internal::ArenaStringPtr bhs_software_version_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_proto_2fComputer_2eproto();
  friend void protobuf_AssignDesc_proto_2fComputer_2eproto();
  friend void protobuf_ShutdownFile_proto_2fComputer_2eproto();

  void InitAsDefaultInstance();
  static ComputerInfo* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ComputerStatus

// optional string gpu_1 = 1;
inline void ComputerStatus::clear_gpu_1() {
  gpu_1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ComputerStatus::gpu_1() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.gpu_1)
  return gpu_1_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ComputerStatus::set_gpu_1(const ::std::string& value) {
  
  gpu_1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.gpu_1)
}
inline void ComputerStatus::set_gpu_1(const char* value) {
  
  gpu_1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.ComputerStatus.gpu_1)
}
inline void ComputerStatus::set_gpu_1(const char* value, size_t size) {
  
  gpu_1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.ComputerStatus.gpu_1)
}
inline ::std::string* ComputerStatus::mutable_gpu_1() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.ComputerStatus.gpu_1)
  return gpu_1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ComputerStatus::release_gpu_1() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.ComputerStatus.gpu_1)
  
  return gpu_1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ComputerStatus::set_allocated_gpu_1(::std::string* gpu_1) {
  if (gpu_1 != NULL) {
    
  } else {
    
  }
  gpu_1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gpu_1);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.ComputerStatus.gpu_1)
}

// optional string gpu_2 = 2;
inline void ComputerStatus::clear_gpu_2() {
  gpu_2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ComputerStatus::gpu_2() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.gpu_2)
  return gpu_2_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ComputerStatus::set_gpu_2(const ::std::string& value) {
  
  gpu_2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.gpu_2)
}
inline void ComputerStatus::set_gpu_2(const char* value) {
  
  gpu_2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.ComputerStatus.gpu_2)
}
inline void ComputerStatus::set_gpu_2(const char* value, size_t size) {
  
  gpu_2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.ComputerStatus.gpu_2)
}
inline ::std::string* ComputerStatus::mutable_gpu_2() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.ComputerStatus.gpu_2)
  return gpu_2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ComputerStatus::release_gpu_2() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.ComputerStatus.gpu_2)
  
  return gpu_2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ComputerStatus::set_allocated_gpu_2(::std::string* gpu_2) {
  if (gpu_2 != NULL) {
    
  } else {
    
  }
  gpu_2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gpu_2);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.ComputerStatus.gpu_2)
}

// optional float gpu_1_temp_C = 3;
inline void ComputerStatus::clear_gpu_1_temp_c() {
  gpu_1_temp_c_ = 0;
}
inline float ComputerStatus::gpu_1_temp_c() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.gpu_1_temp_C)
  return gpu_1_temp_c_;
}
inline void ComputerStatus::set_gpu_1_temp_c(float value) {
  
  gpu_1_temp_c_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.gpu_1_temp_C)
}

// optional float gpu_2_temp_C = 4;
inline void ComputerStatus::clear_gpu_2_temp_c() {
  gpu_2_temp_c_ = 0;
}
inline float ComputerStatus::gpu_2_temp_c() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.gpu_2_temp_C)
  return gpu_2_temp_c_;
}
inline void ComputerStatus::set_gpu_2_temp_c(float value) {
  
  gpu_2_temp_c_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.gpu_2_temp_C)
}

// optional float ssd_1_temp_C = 5;
inline void ComputerStatus::clear_ssd_1_temp_c() {
  ssd_1_temp_c_ = 0;
}
inline float ComputerStatus::ssd_1_temp_c() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.ssd_1_temp_C)
  return ssd_1_temp_c_;
}
inline void ComputerStatus::set_ssd_1_temp_c(float value) {
  
  ssd_1_temp_c_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.ssd_1_temp_C)
}

// optional float hdd_1_temp_C = 6;
inline void ComputerStatus::clear_hdd_1_temp_c() {
  hdd_1_temp_c_ = 0;
}
inline float ComputerStatus::hdd_1_temp_c() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.hdd_1_temp_C)
  return hdd_1_temp_c_;
}
inline void ComputerStatus::set_hdd_1_temp_c(float value) {
  
  hdd_1_temp_c_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.hdd_1_temp_C)
}

// optional float raid_1_temp_C = 20;
inline void ComputerStatus::clear_raid_1_temp_c() {
  raid_1_temp_c_ = 0;
}
inline float ComputerStatus::raid_1_temp_c() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.raid_1_temp_C)
  return raid_1_temp_c_;
}
inline void ComputerStatus::set_raid_1_temp_c(float value) {
  
  raid_1_temp_c_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.raid_1_temp_C)
}

// optional float raid_2_temp_C = 21;
inline void ComputerStatus::clear_raid_2_temp_c() {
  raid_2_temp_c_ = 0;
}
inline float ComputerStatus::raid_2_temp_c() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.raid_2_temp_C)
  return raid_2_temp_c_;
}
inline void ComputerStatus::set_raid_2_temp_c(float value) {
  
  raid_2_temp_c_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.raid_2_temp_C)
}

// optional float raid_3_temp_C = 22;
inline void ComputerStatus::clear_raid_3_temp_c() {
  raid_3_temp_c_ = 0;
}
inline float ComputerStatus::raid_3_temp_c() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.raid_3_temp_C)
  return raid_3_temp_c_;
}
inline void ComputerStatus::set_raid_3_temp_c(float value) {
  
  raid_3_temp_c_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.raid_3_temp_C)
}

// optional float raid_4_temp_C = 23;
inline void ComputerStatus::clear_raid_4_temp_c() {
  raid_4_temp_c_ = 0;
}
inline float ComputerStatus::raid_4_temp_c() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.raid_4_temp_C)
  return raid_4_temp_c_;
}
inline void ComputerStatus::set_raid_4_temp_c(float value) {
  
  raid_4_temp_c_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.raid_4_temp_C)
}

// optional string raid_status = 24;
inline void ComputerStatus::clear_raid_status() {
  raid_status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ComputerStatus::raid_status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.raid_status)
  return raid_status_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ComputerStatus::set_raid_status(const ::std::string& value) {
  
  raid_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.raid_status)
}
inline void ComputerStatus::set_raid_status(const char* value) {
  
  raid_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.ComputerStatus.raid_status)
}
inline void ComputerStatus::set_raid_status(const char* value, size_t size) {
  
  raid_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.ComputerStatus.raid_status)
}
inline ::std::string* ComputerStatus::mutable_raid_status() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.ComputerStatus.raid_status)
  return raid_status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ComputerStatus::release_raid_status() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.ComputerStatus.raid_status)
  
  return raid_status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ComputerStatus::set_allocated_raid_status(::std::string* raid_status) {
  if (raid_status != NULL) {
    
  } else {
    
  }
  raid_status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), raid_status);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.ComputerStatus.raid_status)
}

// optional string raid_drive_1_status = 25;
inline void ComputerStatus::clear_raid_drive_1_status() {
  raid_drive_1_status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ComputerStatus::raid_drive_1_status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.raid_drive_1_status)
  return raid_drive_1_status_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ComputerStatus::set_raid_drive_1_status(const ::std::string& value) {
  
  raid_drive_1_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.raid_drive_1_status)
}
inline void ComputerStatus::set_raid_drive_1_status(const char* value) {
  
  raid_drive_1_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.ComputerStatus.raid_drive_1_status)
}
inline void ComputerStatus::set_raid_drive_1_status(const char* value, size_t size) {
  
  raid_drive_1_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.ComputerStatus.raid_drive_1_status)
}
inline ::std::string* ComputerStatus::mutable_raid_drive_1_status() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.ComputerStatus.raid_drive_1_status)
  return raid_drive_1_status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ComputerStatus::release_raid_drive_1_status() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.ComputerStatus.raid_drive_1_status)
  
  return raid_drive_1_status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ComputerStatus::set_allocated_raid_drive_1_status(::std::string* raid_drive_1_status) {
  if (raid_drive_1_status != NULL) {
    
  } else {
    
  }
  raid_drive_1_status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), raid_drive_1_status);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.ComputerStatus.raid_drive_1_status)
}

// optional string raid_drive_2_status = 26;
inline void ComputerStatus::clear_raid_drive_2_status() {
  raid_drive_2_status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ComputerStatus::raid_drive_2_status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.raid_drive_2_status)
  return raid_drive_2_status_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ComputerStatus::set_raid_drive_2_status(const ::std::string& value) {
  
  raid_drive_2_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.raid_drive_2_status)
}
inline void ComputerStatus::set_raid_drive_2_status(const char* value) {
  
  raid_drive_2_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.ComputerStatus.raid_drive_2_status)
}
inline void ComputerStatus::set_raid_drive_2_status(const char* value, size_t size) {
  
  raid_drive_2_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.ComputerStatus.raid_drive_2_status)
}
inline ::std::string* ComputerStatus::mutable_raid_drive_2_status() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.ComputerStatus.raid_drive_2_status)
  return raid_drive_2_status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ComputerStatus::release_raid_drive_2_status() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.ComputerStatus.raid_drive_2_status)
  
  return raid_drive_2_status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ComputerStatus::set_allocated_raid_drive_2_status(::std::string* raid_drive_2_status) {
  if (raid_drive_2_status != NULL) {
    
  } else {
    
  }
  raid_drive_2_status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), raid_drive_2_status);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.ComputerStatus.raid_drive_2_status)
}

// optional string raid_drive_3_status = 27;
inline void ComputerStatus::clear_raid_drive_3_status() {
  raid_drive_3_status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ComputerStatus::raid_drive_3_status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.raid_drive_3_status)
  return raid_drive_3_status_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ComputerStatus::set_raid_drive_3_status(const ::std::string& value) {
  
  raid_drive_3_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.raid_drive_3_status)
}
inline void ComputerStatus::set_raid_drive_3_status(const char* value) {
  
  raid_drive_3_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.ComputerStatus.raid_drive_3_status)
}
inline void ComputerStatus::set_raid_drive_3_status(const char* value, size_t size) {
  
  raid_drive_3_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.ComputerStatus.raid_drive_3_status)
}
inline ::std::string* ComputerStatus::mutable_raid_drive_3_status() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.ComputerStatus.raid_drive_3_status)
  return raid_drive_3_status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ComputerStatus::release_raid_drive_3_status() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.ComputerStatus.raid_drive_3_status)
  
  return raid_drive_3_status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ComputerStatus::set_allocated_raid_drive_3_status(::std::string* raid_drive_3_status) {
  if (raid_drive_3_status != NULL) {
    
  } else {
    
  }
  raid_drive_3_status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), raid_drive_3_status);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.ComputerStatus.raid_drive_3_status)
}

// optional string raid_drive_4_status = 28;
inline void ComputerStatus::clear_raid_drive_4_status() {
  raid_drive_4_status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ComputerStatus::raid_drive_4_status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.raid_drive_4_status)
  return raid_drive_4_status_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ComputerStatus::set_raid_drive_4_status(const ::std::string& value) {
  
  raid_drive_4_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.raid_drive_4_status)
}
inline void ComputerStatus::set_raid_drive_4_status(const char* value) {
  
  raid_drive_4_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.ComputerStatus.raid_drive_4_status)
}
inline void ComputerStatus::set_raid_drive_4_status(const char* value, size_t size) {
  
  raid_drive_4_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.ComputerStatus.raid_drive_4_status)
}
inline ::std::string* ComputerStatus::mutable_raid_drive_4_status() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.ComputerStatus.raid_drive_4_status)
  return raid_drive_4_status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ComputerStatus::release_raid_drive_4_status() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.ComputerStatus.raid_drive_4_status)
  
  return raid_drive_4_status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ComputerStatus::set_allocated_raid_drive_4_status(::std::string* raid_drive_4_status) {
  if (raid_drive_4_status != NULL) {
    
  } else {
    
  }
  raid_drive_4_status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), raid_drive_4_status);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.ComputerStatus.raid_drive_4_status)
}

// optional float memory_usage_percent = 40;
inline void ComputerStatus::clear_memory_usage_percent() {
  memory_usage_percent_ = 0;
}
inline float ComputerStatus::memory_usage_percent() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.memory_usage_percent)
  return memory_usage_percent_;
}
inline void ComputerStatus::set_memory_usage_percent(float value) {
  
  memory_usage_percent_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.memory_usage_percent)
}

// optional bool virtual_machine_status = 41;
inline void ComputerStatus::clear_virtual_machine_status() {
  virtual_machine_status_ = false;
}
inline bool ComputerStatus::virtual_machine_status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.virtual_machine_status)
  return virtual_machine_status_;
}
inline void ComputerStatus::set_virtual_machine_status(bool value) {
  
  virtual_machine_status_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.virtual_machine_status)
}

// optional bool web_server_status = 42;
inline void ComputerStatus::clear_web_server_status() {
  web_server_status_ = false;
}
inline bool ComputerStatus::web_server_status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.web_server_status)
  return web_server_status_;
}
inline void ComputerStatus::set_web_server_status(bool value) {
  
  web_server_status_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.web_server_status)
}

// optional bool hard_drive_space_status = 43;
inline void ComputerStatus::clear_hard_drive_space_status() {
  hard_drive_space_status_ = false;
}
inline bool ComputerStatus::hard_drive_space_status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.hard_drive_space_status)
  return hard_drive_space_status_;
}
inline void ComputerStatus::set_hard_drive_space_status(bool value) {
  
  hard_drive_space_status_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.hard_drive_space_status)
}

// optional bool raid_mount_status = 44;
inline void ComputerStatus::clear_raid_mount_status() {
  raid_mount_status_ = false;
}
inline bool ComputerStatus::raid_mount_status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.raid_mount_status)
  return raid_mount_status_;
}
inline void ComputerStatus::set_raid_mount_status(bool value) {
  
  raid_mount_status_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.raid_mount_status)
}

// optional bool network_speed_status = 45;
inline void ComputerStatus::clear_network_speed_status() {
  network_speed_status_ = false;
}
inline bool ComputerStatus::network_speed_status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.network_speed_status)
  return network_speed_status_;
}
inline void ComputerStatus::set_network_speed_status(bool value) {
  
  network_speed_status_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.network_speed_status)
}

// optional float cpu_0_core_0_temp_C = 60;
inline void ComputerStatus::clear_cpu_0_core_0_temp_c() {
  cpu_0_core_0_temp_c_ = 0;
}
inline float ComputerStatus::cpu_0_core_0_temp_c() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.cpu_0_core_0_temp_C)
  return cpu_0_core_0_temp_c_;
}
inline void ComputerStatus::set_cpu_0_core_0_temp_c(float value) {
  
  cpu_0_core_0_temp_c_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.cpu_0_core_0_temp_C)
}

// optional float cpu_0_core_1_temp_C = 61;
inline void ComputerStatus::clear_cpu_0_core_1_temp_c() {
  cpu_0_core_1_temp_c_ = 0;
}
inline float ComputerStatus::cpu_0_core_1_temp_c() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.cpu_0_core_1_temp_C)
  return cpu_0_core_1_temp_c_;
}
inline void ComputerStatus::set_cpu_0_core_1_temp_c(float value) {
  
  cpu_0_core_1_temp_c_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.cpu_0_core_1_temp_C)
}

// optional float cpu_0_core_2_temp_C = 63;
inline void ComputerStatus::clear_cpu_0_core_2_temp_c() {
  cpu_0_core_2_temp_c_ = 0;
}
inline float ComputerStatus::cpu_0_core_2_temp_c() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.cpu_0_core_2_temp_C)
  return cpu_0_core_2_temp_c_;
}
inline void ComputerStatus::set_cpu_0_core_2_temp_c(float value) {
  
  cpu_0_core_2_temp_c_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.cpu_0_core_2_temp_C)
}

// optional float cpu_0_core_3_temp_C = 64;
inline void ComputerStatus::clear_cpu_0_core_3_temp_c() {
  cpu_0_core_3_temp_c_ = 0;
}
inline float ComputerStatus::cpu_0_core_3_temp_c() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.cpu_0_core_3_temp_C)
  return cpu_0_core_3_temp_c_;
}
inline void ComputerStatus::set_cpu_0_core_3_temp_c(float value) {
  
  cpu_0_core_3_temp_c_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.cpu_0_core_3_temp_C)
}

// optional float cpu_0_core_4_temp_C = 65;
inline void ComputerStatus::clear_cpu_0_core_4_temp_c() {
  cpu_0_core_4_temp_c_ = 0;
}
inline float ComputerStatus::cpu_0_core_4_temp_c() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.cpu_0_core_4_temp_C)
  return cpu_0_core_4_temp_c_;
}
inline void ComputerStatus::set_cpu_0_core_4_temp_c(float value) {
  
  cpu_0_core_4_temp_c_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.cpu_0_core_4_temp_C)
}

// optional float cpu_0_core_5_temp_C = 66;
inline void ComputerStatus::clear_cpu_0_core_5_temp_c() {
  cpu_0_core_5_temp_c_ = 0;
}
inline float ComputerStatus::cpu_0_core_5_temp_c() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.cpu_0_core_5_temp_C)
  return cpu_0_core_5_temp_c_;
}
inline void ComputerStatus::set_cpu_0_core_5_temp_c(float value) {
  
  cpu_0_core_5_temp_c_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.cpu_0_core_5_temp_C)
}

// optional float cpu_0_core_6_temp_C = 67;
inline void ComputerStatus::clear_cpu_0_core_6_temp_c() {
  cpu_0_core_6_temp_c_ = 0;
}
inline float ComputerStatus::cpu_0_core_6_temp_c() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.cpu_0_core_6_temp_C)
  return cpu_0_core_6_temp_c_;
}
inline void ComputerStatus::set_cpu_0_core_6_temp_c(float value) {
  
  cpu_0_core_6_temp_c_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.cpu_0_core_6_temp_C)
}

// optional float cpu_0_core_7_temp_C = 68;
inline void ComputerStatus::clear_cpu_0_core_7_temp_c() {
  cpu_0_core_7_temp_c_ = 0;
}
inline float ComputerStatus::cpu_0_core_7_temp_c() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.cpu_0_core_7_temp_C)
  return cpu_0_core_7_temp_c_;
}
inline void ComputerStatus::set_cpu_0_core_7_temp_c(float value) {
  
  cpu_0_core_7_temp_c_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.cpu_0_core_7_temp_C)
}

// optional float cpu_1_core_0_temp_C = 69;
inline void ComputerStatus::clear_cpu_1_core_0_temp_c() {
  cpu_1_core_0_temp_c_ = 0;
}
inline float ComputerStatus::cpu_1_core_0_temp_c() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.cpu_1_core_0_temp_C)
  return cpu_1_core_0_temp_c_;
}
inline void ComputerStatus::set_cpu_1_core_0_temp_c(float value) {
  
  cpu_1_core_0_temp_c_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.cpu_1_core_0_temp_C)
}

// optional float cpu_1_core_1_temp_C = 70;
inline void ComputerStatus::clear_cpu_1_core_1_temp_c() {
  cpu_1_core_1_temp_c_ = 0;
}
inline float ComputerStatus::cpu_1_core_1_temp_c() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.cpu_1_core_1_temp_C)
  return cpu_1_core_1_temp_c_;
}
inline void ComputerStatus::set_cpu_1_core_1_temp_c(float value) {
  
  cpu_1_core_1_temp_c_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.cpu_1_core_1_temp_C)
}

// optional float cpu_1_core_2_temp_C = 71;
inline void ComputerStatus::clear_cpu_1_core_2_temp_c() {
  cpu_1_core_2_temp_c_ = 0;
}
inline float ComputerStatus::cpu_1_core_2_temp_c() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.cpu_1_core_2_temp_C)
  return cpu_1_core_2_temp_c_;
}
inline void ComputerStatus::set_cpu_1_core_2_temp_c(float value) {
  
  cpu_1_core_2_temp_c_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.cpu_1_core_2_temp_C)
}

// optional float cpu_1_core_3_temp_C = 72;
inline void ComputerStatus::clear_cpu_1_core_3_temp_c() {
  cpu_1_core_3_temp_c_ = 0;
}
inline float ComputerStatus::cpu_1_core_3_temp_c() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.cpu_1_core_3_temp_C)
  return cpu_1_core_3_temp_c_;
}
inline void ComputerStatus::set_cpu_1_core_3_temp_c(float value) {
  
  cpu_1_core_3_temp_c_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.cpu_1_core_3_temp_C)
}

// optional float cpu_1_core_4_temp_C = 73;
inline void ComputerStatus::clear_cpu_1_core_4_temp_c() {
  cpu_1_core_4_temp_c_ = 0;
}
inline float ComputerStatus::cpu_1_core_4_temp_c() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.cpu_1_core_4_temp_C)
  return cpu_1_core_4_temp_c_;
}
inline void ComputerStatus::set_cpu_1_core_4_temp_c(float value) {
  
  cpu_1_core_4_temp_c_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.cpu_1_core_4_temp_C)
}

// optional float cpu_1_core_5_temp_C = 74;
inline void ComputerStatus::clear_cpu_1_core_5_temp_c() {
  cpu_1_core_5_temp_c_ = 0;
}
inline float ComputerStatus::cpu_1_core_5_temp_c() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.cpu_1_core_5_temp_C)
  return cpu_1_core_5_temp_c_;
}
inline void ComputerStatus::set_cpu_1_core_5_temp_c(float value) {
  
  cpu_1_core_5_temp_c_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.cpu_1_core_5_temp_C)
}

// optional float cpu_1_core_6_temp_C = 75;
inline void ComputerStatus::clear_cpu_1_core_6_temp_c() {
  cpu_1_core_6_temp_c_ = 0;
}
inline float ComputerStatus::cpu_1_core_6_temp_c() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.cpu_1_core_6_temp_C)
  return cpu_1_core_6_temp_c_;
}
inline void ComputerStatus::set_cpu_1_core_6_temp_c(float value) {
  
  cpu_1_core_6_temp_c_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.cpu_1_core_6_temp_C)
}

// optional float cpu_1_core_7_temp_C = 76;
inline void ComputerStatus::clear_cpu_1_core_7_temp_c() {
  cpu_1_core_7_temp_c_ = 0;
}
inline float ComputerStatus::cpu_1_core_7_temp_c() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.cpu_1_core_7_temp_C)
  return cpu_1_core_7_temp_c_;
}
inline void ComputerStatus::set_cpu_1_core_7_temp_c(float value) {
  
  cpu_1_core_7_temp_c_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.cpu_1_core_7_temp_C)
}

// optional float cpu_0_core_8_temp_C = 77;
inline void ComputerStatus::clear_cpu_0_core_8_temp_c() {
  cpu_0_core_8_temp_c_ = 0;
}
inline float ComputerStatus::cpu_0_core_8_temp_c() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.cpu_0_core_8_temp_C)
  return cpu_0_core_8_temp_c_;
}
inline void ComputerStatus::set_cpu_0_core_8_temp_c(float value) {
  
  cpu_0_core_8_temp_c_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.cpu_0_core_8_temp_C)
}

// optional float cpu_0_core_9_temp_C = 78;
inline void ComputerStatus::clear_cpu_0_core_9_temp_c() {
  cpu_0_core_9_temp_c_ = 0;
}
inline float ComputerStatus::cpu_0_core_9_temp_c() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.cpu_0_core_9_temp_C)
  return cpu_0_core_9_temp_c_;
}
inline void ComputerStatus::set_cpu_0_core_9_temp_c(float value) {
  
  cpu_0_core_9_temp_c_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.cpu_0_core_9_temp_C)
}

// optional float cpu_1_core_8_temp_C = 79;
inline void ComputerStatus::clear_cpu_1_core_8_temp_c() {
  cpu_1_core_8_temp_c_ = 0;
}
inline float ComputerStatus::cpu_1_core_8_temp_c() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.cpu_1_core_8_temp_C)
  return cpu_1_core_8_temp_c_;
}
inline void ComputerStatus::set_cpu_1_core_8_temp_c(float value) {
  
  cpu_1_core_8_temp_c_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.cpu_1_core_8_temp_C)
}

// optional float cpu_1_core_9_temp_C = 80;
inline void ComputerStatus::clear_cpu_1_core_9_temp_c() {
  cpu_1_core_9_temp_c_ = 0;
}
inline float ComputerStatus::cpu_1_core_9_temp_c() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.cpu_1_core_9_temp_C)
  return cpu_1_core_9_temp_c_;
}
inline void ComputerStatus::set_cpu_1_core_9_temp_c(float value) {
  
  cpu_1_core_9_temp_c_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.cpu_1_core_9_temp_C)
}

// optional string time = 100;
inline void ComputerStatus::clear_time() {
  time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ComputerStatus::time() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.time)
  return time_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ComputerStatus::set_time(const ::std::string& value) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.time)
}
inline void ComputerStatus::set_time(const char* value) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.ComputerStatus.time)
}
inline void ComputerStatus::set_time(const char* value, size_t size) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.ComputerStatus.time)
}
inline ::std::string* ComputerStatus::mutable_time() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.ComputerStatus.time)
  return time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ComputerStatus::release_time() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.ComputerStatus.time)
  
  return time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ComputerStatus::set_allocated_time(::std::string* time) {
  if (time != NULL) {
    
  } else {
    
  }
  time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), time);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.ComputerStatus.time)
}

// optional string time_zone = 101;
inline void ComputerStatus::clear_time_zone() {
  time_zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ComputerStatus::time_zone() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.time_zone)
  return time_zone_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ComputerStatus::set_time_zone(const ::std::string& value) {
  
  time_zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.time_zone)
}
inline void ComputerStatus::set_time_zone(const char* value) {
  
  time_zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.ComputerStatus.time_zone)
}
inline void ComputerStatus::set_time_zone(const char* value, size_t size) {
  
  time_zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.ComputerStatus.time_zone)
}
inline ::std::string* ComputerStatus::mutable_time_zone() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.ComputerStatus.time_zone)
  return time_zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ComputerStatus::release_time_zone() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.ComputerStatus.time_zone)
  
  return time_zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ComputerStatus::set_allocated_time_zone(::std::string* time_zone) {
  if (time_zone != NULL) {
    
  } else {
    
  }
  time_zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), time_zone);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.ComputerStatus.time_zone)
}

// optional string ntp_server = 102;
inline void ComputerStatus::clear_ntp_server() {
  ntp_server_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ComputerStatus::ntp_server() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.ntp_server)
  return ntp_server_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ComputerStatus::set_ntp_server(const ::std::string& value) {
  
  ntp_server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.ntp_server)
}
inline void ComputerStatus::set_ntp_server(const char* value) {
  
  ntp_server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.ComputerStatus.ntp_server)
}
inline void ComputerStatus::set_ntp_server(const char* value, size_t size) {
  
  ntp_server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.ComputerStatus.ntp_server)
}
inline ::std::string* ComputerStatus::mutable_ntp_server() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.ComputerStatus.ntp_server)
  return ntp_server_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ComputerStatus::release_ntp_server() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.ComputerStatus.ntp_server)
  
  return ntp_server_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ComputerStatus::set_allocated_ntp_server(::std::string* ntp_server) {
  if (ntp_server != NULL) {
    
  } else {
    
  }
  ntp_server_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ntp_server);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.ComputerStatus.ntp_server)
}

// -------------------------------------------------------------------

// ComputerInfo

// optional string scanner_control_software_version = 1;
inline void ComputerInfo::clear_scanner_control_software_version() {
  scanner_control_software_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ComputerInfo::scanner_control_software_version() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerInfo.scanner_control_software_version)
  return scanner_control_software_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ComputerInfo::set_scanner_control_software_version(const ::std::string& value) {
  
  scanner_control_software_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerInfo.scanner_control_software_version)
}
inline void ComputerInfo::set_scanner_control_software_version(const char* value) {
  
  scanner_control_software_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.ComputerInfo.scanner_control_software_version)
}
inline void ComputerInfo::set_scanner_control_software_version(const char* value, size_t size) {
  
  scanner_control_software_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.ComputerInfo.scanner_control_software_version)
}
inline ::std::string* ComputerInfo::mutable_scanner_control_software_version() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.ComputerInfo.scanner_control_software_version)
  return scanner_control_software_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ComputerInfo::release_scanner_control_software_version() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.ComputerInfo.scanner_control_software_version)
  
  return scanner_control_software_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ComputerInfo::set_allocated_scanner_control_software_version(::std::string* scanner_control_software_version) {
  if (scanner_control_software_version != NULL) {
    
  } else {
    
  }
  scanner_control_software_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scanner_control_software_version);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.ComputerInfo.scanner_control_software_version)
}

// optional string reconstruction_software_version = 2;
inline void ComputerInfo::clear_reconstruction_software_version() {
  reconstruction_software_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ComputerInfo::reconstruction_software_version() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerInfo.reconstruction_software_version)
  return reconstruction_software_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ComputerInfo::set_reconstruction_software_version(const ::std::string& value) {
  
  reconstruction_software_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerInfo.reconstruction_software_version)
}
inline void ComputerInfo::set_reconstruction_software_version(const char* value) {
  
  reconstruction_software_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.ComputerInfo.reconstruction_software_version)
}
inline void ComputerInfo::set_reconstruction_software_version(const char* value, size_t size) {
  
  reconstruction_software_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.ComputerInfo.reconstruction_software_version)
}
inline ::std::string* ComputerInfo::mutable_reconstruction_software_version() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.ComputerInfo.reconstruction_software_version)
  return reconstruction_software_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ComputerInfo::release_reconstruction_software_version() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.ComputerInfo.reconstruction_software_version)
  
  return reconstruction_software_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ComputerInfo::set_allocated_reconstruction_software_version(::std::string* reconstruction_software_version) {
  if (reconstruction_software_version != NULL) {
    
  } else {
    
  }
  reconstruction_software_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reconstruction_software_version);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.ComputerInfo.reconstruction_software_version)
}

// optional string operating_system_version = 3;
inline void ComputerInfo::clear_operating_system_version() {
  operating_system_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ComputerInfo::operating_system_version() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerInfo.operating_system_version)
  return operating_system_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ComputerInfo::set_operating_system_version(const ::std::string& value) {
  
  operating_system_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerInfo.operating_system_version)
}
inline void ComputerInfo::set_operating_system_version(const char* value) {
  
  operating_system_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.ComputerInfo.operating_system_version)
}
inline void ComputerInfo::set_operating_system_version(const char* value, size_t size) {
  
  operating_system_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.ComputerInfo.operating_system_version)
}
inline ::std::string* ComputerInfo::mutable_operating_system_version() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.ComputerInfo.operating_system_version)
  return operating_system_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ComputerInfo::release_operating_system_version() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.ComputerInfo.operating_system_version)
  
  return operating_system_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ComputerInfo::set_allocated_operating_system_version(::std::string* operating_system_version) {
  if (operating_system_version != NULL) {
    
  } else {
    
  }
  operating_system_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), operating_system_version);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.ComputerInfo.operating_system_version)
}

// optional string detection_software_version = 4;
inline void ComputerInfo::clear_detection_software_version() {
  detection_software_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ComputerInfo::detection_software_version() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerInfo.detection_software_version)
  return detection_software_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ComputerInfo::set_detection_software_version(const ::std::string& value) {
  
  detection_software_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerInfo.detection_software_version)
}
inline void ComputerInfo::set_detection_software_version(const char* value) {
  
  detection_software_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.ComputerInfo.detection_software_version)
}
inline void ComputerInfo::set_detection_software_version(const char* value, size_t size) {
  
  detection_software_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.ComputerInfo.detection_software_version)
}
inline ::std::string* ComputerInfo::mutable_detection_software_version() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.ComputerInfo.detection_software_version)
  return detection_software_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ComputerInfo::release_detection_software_version() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.ComputerInfo.detection_software_version)
  
  return detection_software_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ComputerInfo::set_allocated_detection_software_version(::std::string* detection_software_version) {
  if (detection_software_version != NULL) {
    
  } else {
    
  }
  detection_software_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), detection_software_version);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.ComputerInfo.detection_software_version)
}

// optional string detection_library_1_version = 5;
inline void ComputerInfo::clear_detection_library_1_version() {
  detection_library_1_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ComputerInfo::detection_library_1_version() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerInfo.detection_library_1_version)
  return detection_library_1_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ComputerInfo::set_detection_library_1_version(const ::std::string& value) {
  
  detection_library_1_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerInfo.detection_library_1_version)
}
inline void ComputerInfo::set_detection_library_1_version(const char* value) {
  
  detection_library_1_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.ComputerInfo.detection_library_1_version)
}
inline void ComputerInfo::set_detection_library_1_version(const char* value, size_t size) {
  
  detection_library_1_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.ComputerInfo.detection_library_1_version)
}
inline ::std::string* ComputerInfo::mutable_detection_library_1_version() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.ComputerInfo.detection_library_1_version)
  return detection_library_1_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ComputerInfo::release_detection_library_1_version() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.ComputerInfo.detection_library_1_version)
  
  return detection_library_1_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ComputerInfo::set_allocated_detection_library_1_version(::std::string* detection_library_1_version) {
  if (detection_library_1_version != NULL) {
    
  } else {
    
  }
  detection_library_1_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), detection_library_1_version);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.ComputerInfo.detection_library_1_version)
}

// optional string detection_library_2_version = 6;
inline void ComputerInfo::clear_detection_library_2_version() {
  detection_library_2_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ComputerInfo::detection_library_2_version() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerInfo.detection_library_2_version)
  return detection_library_2_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ComputerInfo::set_detection_library_2_version(const ::std::string& value) {
  
  detection_library_2_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerInfo.detection_library_2_version)
}
inline void ComputerInfo::set_detection_library_2_version(const char* value) {
  
  detection_library_2_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.ComputerInfo.detection_library_2_version)
}
inline void ComputerInfo::set_detection_library_2_version(const char* value, size_t size) {
  
  detection_library_2_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.ComputerInfo.detection_library_2_version)
}
inline ::std::string* ComputerInfo::mutable_detection_library_2_version() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.ComputerInfo.detection_library_2_version)
  return detection_library_2_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ComputerInfo::release_detection_library_2_version() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.ComputerInfo.detection_library_2_version)
  
  return detection_library_2_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ComputerInfo::set_allocated_detection_library_2_version(::std::string* detection_library_2_version) {
  if (detection_library_2_version != NULL) {
    
  } else {
    
  }
  detection_library_2_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), detection_library_2_version);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.ComputerInfo.detection_library_2_version)
}

// optional string detection_library_3_version = 7;
inline void ComputerInfo::clear_detection_library_3_version() {
  detection_library_3_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ComputerInfo::detection_library_3_version() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerInfo.detection_library_3_version)
  return detection_library_3_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ComputerInfo::set_detection_library_3_version(const ::std::string& value) {
  
  detection_library_3_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerInfo.detection_library_3_version)
}
inline void ComputerInfo::set_detection_library_3_version(const char* value) {
  
  detection_library_3_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.ComputerInfo.detection_library_3_version)
}
inline void ComputerInfo::set_detection_library_3_version(const char* value, size_t size) {
  
  detection_library_3_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.ComputerInfo.detection_library_3_version)
}
inline ::std::string* ComputerInfo::mutable_detection_library_3_version() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.ComputerInfo.detection_library_3_version)
  return detection_library_3_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ComputerInfo::release_detection_library_3_version() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.ComputerInfo.detection_library_3_version)
  
  return detection_library_3_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ComputerInfo::set_allocated_detection_library_3_version(::std::string* detection_library_3_version) {
  if (detection_library_3_version != NULL) {
    
  } else {
    
  }
  detection_library_3_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), detection_library_3_version);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.ComputerInfo.detection_library_3_version)
}

// optional string detection_library_4_version = 8;
inline void ComputerInfo::clear_detection_library_4_version() {
  detection_library_4_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ComputerInfo::detection_library_4_version() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerInfo.detection_library_4_version)
  return detection_library_4_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ComputerInfo::set_detection_library_4_version(const ::std::string& value) {
  
  detection_library_4_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerInfo.detection_library_4_version)
}
inline void ComputerInfo::set_detection_library_4_version(const char* value) {
  
  detection_library_4_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.ComputerInfo.detection_library_4_version)
}
inline void ComputerInfo::set_detection_library_4_version(const char* value, size_t size) {
  
  detection_library_4_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.ComputerInfo.detection_library_4_version)
}
inline ::std::string* ComputerInfo::mutable_detection_library_4_version() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.ComputerInfo.detection_library_4_version)
  return detection_library_4_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ComputerInfo::release_detection_library_4_version() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.ComputerInfo.detection_library_4_version)
  
  return detection_library_4_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ComputerInfo::set_allocated_detection_library_4_version(::std::string* detection_library_4_version) {
  if (detection_library_4_version != NULL) {
    
  } else {
    
  }
  detection_library_4_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), detection_library_4_version);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.ComputerInfo.detection_library_4_version)
}

// optional string detection_library_5_version = 9;
inline void ComputerInfo::clear_detection_library_5_version() {
  detection_library_5_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ComputerInfo::detection_library_5_version() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerInfo.detection_library_5_version)
  return detection_library_5_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ComputerInfo::set_detection_library_5_version(const ::std::string& value) {
  
  detection_library_5_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerInfo.detection_library_5_version)
}
inline void ComputerInfo::set_detection_library_5_version(const char* value) {
  
  detection_library_5_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.ComputerInfo.detection_library_5_version)
}
inline void ComputerInfo::set_detection_library_5_version(const char* value, size_t size) {
  
  detection_library_5_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.ComputerInfo.detection_library_5_version)
}
inline ::std::string* ComputerInfo::mutable_detection_library_5_version() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.ComputerInfo.detection_library_5_version)
  return detection_library_5_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ComputerInfo::release_detection_library_5_version() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.ComputerInfo.detection_library_5_version)
  
  return detection_library_5_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ComputerInfo::set_allocated_detection_library_5_version(::std::string* detection_library_5_version) {
  if (detection_library_5_version != NULL) {
    
  } else {
    
  }
  detection_library_5_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), detection_library_5_version);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.ComputerInfo.detection_library_5_version)
}

// optional string das_receiver_board_version = 10;
inline void ComputerInfo::clear_das_receiver_board_version() {
  das_receiver_board_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ComputerInfo::das_receiver_board_version() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerInfo.das_receiver_board_version)
  return das_receiver_board_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ComputerInfo::set_das_receiver_board_version(const ::std::string& value) {
  
  das_receiver_board_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerInfo.das_receiver_board_version)
}
inline void ComputerInfo::set_das_receiver_board_version(const char* value) {
  
  das_receiver_board_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.ComputerInfo.das_receiver_board_version)
}
inline void ComputerInfo::set_das_receiver_board_version(const char* value, size_t size) {
  
  das_receiver_board_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.ComputerInfo.das_receiver_board_version)
}
inline ::std::string* ComputerInfo::mutable_das_receiver_board_version() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.ComputerInfo.das_receiver_board_version)
  return das_receiver_board_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ComputerInfo::release_das_receiver_board_version() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.ComputerInfo.das_receiver_board_version)
  
  return das_receiver_board_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ComputerInfo::set_allocated_das_receiver_board_version(::std::string* das_receiver_board_version) {
  if (das_receiver_board_version != NULL) {
    
  } else {
    
  }
  das_receiver_board_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), das_receiver_board_version);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.ComputerInfo.das_receiver_board_version)
}

// optional string rotor_control_board_version = 11;
inline void ComputerInfo::clear_rotor_control_board_version() {
  rotor_control_board_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ComputerInfo::rotor_control_board_version() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerInfo.rotor_control_board_version)
  return rotor_control_board_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ComputerInfo::set_rotor_control_board_version(const ::std::string& value) {
  
  rotor_control_board_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerInfo.rotor_control_board_version)
}
inline void ComputerInfo::set_rotor_control_board_version(const char* value) {
  
  rotor_control_board_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.ComputerInfo.rotor_control_board_version)
}
inline void ComputerInfo::set_rotor_control_board_version(const char* value, size_t size) {
  
  rotor_control_board_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.ComputerInfo.rotor_control_board_version)
}
inline ::std::string* ComputerInfo::mutable_rotor_control_board_version() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.ComputerInfo.rotor_control_board_version)
  return rotor_control_board_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ComputerInfo::release_rotor_control_board_version() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.ComputerInfo.rotor_control_board_version)
  
  return rotor_control_board_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ComputerInfo::set_allocated_rotor_control_board_version(::std::string* rotor_control_board_version) {
  if (rotor_control_board_version != NULL) {
    
  } else {
    
  }
  rotor_control_board_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rotor_control_board_version);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.ComputerInfo.rotor_control_board_version)
}

// optional string das_control_board_1_version = 12;
inline void ComputerInfo::clear_das_control_board_1_version() {
  das_control_board_1_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ComputerInfo::das_control_board_1_version() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerInfo.das_control_board_1_version)
  return das_control_board_1_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ComputerInfo::set_das_control_board_1_version(const ::std::string& value) {
  
  das_control_board_1_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerInfo.das_control_board_1_version)
}
inline void ComputerInfo::set_das_control_board_1_version(const char* value) {
  
  das_control_board_1_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.ComputerInfo.das_control_board_1_version)
}
inline void ComputerInfo::set_das_control_board_1_version(const char* value, size_t size) {
  
  das_control_board_1_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.ComputerInfo.das_control_board_1_version)
}
inline ::std::string* ComputerInfo::mutable_das_control_board_1_version() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.ComputerInfo.das_control_board_1_version)
  return das_control_board_1_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ComputerInfo::release_das_control_board_1_version() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.ComputerInfo.das_control_board_1_version)
  
  return das_control_board_1_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ComputerInfo::set_allocated_das_control_board_1_version(::std::string* das_control_board_1_version) {
  if (das_control_board_1_version != NULL) {
    
  } else {
    
  }
  das_control_board_1_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), das_control_board_1_version);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.ComputerInfo.das_control_board_1_version)
}

// optional string das_control_board_2_version = 13;
inline void ComputerInfo::clear_das_control_board_2_version() {
  das_control_board_2_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ComputerInfo::das_control_board_2_version() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerInfo.das_control_board_2_version)
  return das_control_board_2_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ComputerInfo::set_das_control_board_2_version(const ::std::string& value) {
  
  das_control_board_2_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerInfo.das_control_board_2_version)
}
inline void ComputerInfo::set_das_control_board_2_version(const char* value) {
  
  das_control_board_2_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.ComputerInfo.das_control_board_2_version)
}
inline void ComputerInfo::set_das_control_board_2_version(const char* value, size_t size) {
  
  das_control_board_2_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.ComputerInfo.das_control_board_2_version)
}
inline ::std::string* ComputerInfo::mutable_das_control_board_2_version() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.ComputerInfo.das_control_board_2_version)
  return das_control_board_2_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ComputerInfo::release_das_control_board_2_version() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.ComputerInfo.das_control_board_2_version)
  
  return das_control_board_2_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ComputerInfo::set_allocated_das_control_board_2_version(::std::string* das_control_board_2_version) {
  if (das_control_board_2_version != NULL) {
    
  } else {
    
  }
  das_control_board_2_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), das_control_board_2_version);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.ComputerInfo.das_control_board_2_version)
}

// optional string das_control_board_3_version = 14;
inline void ComputerInfo::clear_das_control_board_3_version() {
  das_control_board_3_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ComputerInfo::das_control_board_3_version() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerInfo.das_control_board_3_version)
  return das_control_board_3_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ComputerInfo::set_das_control_board_3_version(const ::std::string& value) {
  
  das_control_board_3_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerInfo.das_control_board_3_version)
}
inline void ComputerInfo::set_das_control_board_3_version(const char* value) {
  
  das_control_board_3_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.ComputerInfo.das_control_board_3_version)
}
inline void ComputerInfo::set_das_control_board_3_version(const char* value, size_t size) {
  
  das_control_board_3_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.ComputerInfo.das_control_board_3_version)
}
inline ::std::string* ComputerInfo::mutable_das_control_board_3_version() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.ComputerInfo.das_control_board_3_version)
  return das_control_board_3_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ComputerInfo::release_das_control_board_3_version() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.ComputerInfo.das_control_board_3_version)
  
  return das_control_board_3_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ComputerInfo::set_allocated_das_control_board_3_version(::std::string* das_control_board_3_version) {
  if (das_control_board_3_version != NULL) {
    
  } else {
    
  }
  das_control_board_3_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), das_control_board_3_version);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.ComputerInfo.das_control_board_3_version)
}

// optional string das_control_board_4_version = 15;
inline void ComputerInfo::clear_das_control_board_4_version() {
  das_control_board_4_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ComputerInfo::das_control_board_4_version() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerInfo.das_control_board_4_version)
  return das_control_board_4_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ComputerInfo::set_das_control_board_4_version(const ::std::string& value) {
  
  das_control_board_4_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerInfo.das_control_board_4_version)
}
inline void ComputerInfo::set_das_control_board_4_version(const char* value) {
  
  das_control_board_4_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.ComputerInfo.das_control_board_4_version)
}
inline void ComputerInfo::set_das_control_board_4_version(const char* value, size_t size) {
  
  das_control_board_4_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.ComputerInfo.das_control_board_4_version)
}
inline ::std::string* ComputerInfo::mutable_das_control_board_4_version() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.ComputerInfo.das_control_board_4_version)
  return das_control_board_4_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ComputerInfo::release_das_control_board_4_version() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.ComputerInfo.das_control_board_4_version)
  
  return das_control_board_4_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ComputerInfo::set_allocated_das_control_board_4_version(::std::string* das_control_board_4_version) {
  if (das_control_board_4_version != NULL) {
    
  } else {
    
  }
  das_control_board_4_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), das_control_board_4_version);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.ComputerInfo.das_control_board_4_version)
}

// optional string das_control_board_5_version = 16;
inline void ComputerInfo::clear_das_control_board_5_version() {
  das_control_board_5_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ComputerInfo::das_control_board_5_version() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerInfo.das_control_board_5_version)
  return das_control_board_5_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ComputerInfo::set_das_control_board_5_version(const ::std::string& value) {
  
  das_control_board_5_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerInfo.das_control_board_5_version)
}
inline void ComputerInfo::set_das_control_board_5_version(const char* value) {
  
  das_control_board_5_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.ComputerInfo.das_control_board_5_version)
}
inline void ComputerInfo::set_das_control_board_5_version(const char* value, size_t size) {
  
  das_control_board_5_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.ComputerInfo.das_control_board_5_version)
}
inline ::std::string* ComputerInfo::mutable_das_control_board_5_version() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.ComputerInfo.das_control_board_5_version)
  return das_control_board_5_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ComputerInfo::release_das_control_board_5_version() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.ComputerInfo.das_control_board_5_version)
  
  return das_control_board_5_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ComputerInfo::set_allocated_das_control_board_5_version(::std::string* das_control_board_5_version) {
  if (das_control_board_5_version != NULL) {
    
  } else {
    
  }
  das_control_board_5_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), das_control_board_5_version);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.ComputerInfo.das_control_board_5_version)
}

// optional string NTP_server = 17;
inline void ComputerInfo::clear_ntp_server() {
  ntp_server_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ComputerInfo::ntp_server() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerInfo.NTP_server)
  return ntp_server_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ComputerInfo::set_ntp_server(const ::std::string& value) {
  
  ntp_server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerInfo.NTP_server)
}
inline void ComputerInfo::set_ntp_server(const char* value) {
  
  ntp_server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.ComputerInfo.NTP_server)
}
inline void ComputerInfo::set_ntp_server(const char* value, size_t size) {
  
  ntp_server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.ComputerInfo.NTP_server)
}
inline ::std::string* ComputerInfo::mutable_ntp_server() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.ComputerInfo.NTP_server)
  return ntp_server_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ComputerInfo::release_ntp_server() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.ComputerInfo.NTP_server)
  
  return ntp_server_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ComputerInfo::set_allocated_ntp_server(::std::string* ntp_server) {
  if (ntp_server != NULL) {
    
  } else {
    
  }
  ntp_server_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ntp_server);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.ComputerInfo.NTP_server)
}

// optional string powerlink_version = 18;
inline void ComputerInfo::clear_powerlink_version() {
  powerlink_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ComputerInfo::powerlink_version() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerInfo.powerlink_version)
  return powerlink_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ComputerInfo::set_powerlink_version(const ::std::string& value) {
  
  powerlink_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerInfo.powerlink_version)
}
inline void ComputerInfo::set_powerlink_version(const char* value) {
  
  powerlink_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.ComputerInfo.powerlink_version)
}
inline void ComputerInfo::set_powerlink_version(const char* value, size_t size) {
  
  powerlink_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.ComputerInfo.powerlink_version)
}
inline ::std::string* ComputerInfo::mutable_powerlink_version() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.ComputerInfo.powerlink_version)
  return powerlink_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ComputerInfo::release_powerlink_version() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.ComputerInfo.powerlink_version)
  
  return powerlink_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ComputerInfo::set_allocated_powerlink_version(::std::string* powerlink_version) {
  if (powerlink_version != NULL) {
    
  } else {
    
  }
  powerlink_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), powerlink_version);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.ComputerInfo.powerlink_version)
}

// optional string safety_io_version = 19;
inline void ComputerInfo::clear_safety_io_version() {
  safety_io_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ComputerInfo::safety_io_version() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerInfo.safety_io_version)
  return safety_io_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ComputerInfo::set_safety_io_version(const ::std::string& value) {
  
  safety_io_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerInfo.safety_io_version)
}
inline void ComputerInfo::set_safety_io_version(const char* value) {
  
  safety_io_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.ComputerInfo.safety_io_version)
}
inline void ComputerInfo::set_safety_io_version(const char* value, size_t size) {
  
  safety_io_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.ComputerInfo.safety_io_version)
}
inline ::std::string* ComputerInfo::mutable_safety_io_version() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.ComputerInfo.safety_io_version)
  return safety_io_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ComputerInfo::release_safety_io_version() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.ComputerInfo.safety_io_version)
  
  return safety_io_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ComputerInfo::set_allocated_safety_io_version(::std::string* safety_io_version) {
  if (safety_io_version != NULL) {
    
  } else {
    
  }
  safety_io_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), safety_io_version);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.ComputerInfo.safety_io_version)
}

// optional string network_server_software = 20;
inline void ComputerInfo::clear_network_server_software() {
  network_server_software_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ComputerInfo::network_server_software() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerInfo.network_server_software)
  return network_server_software_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ComputerInfo::set_network_server_software(const ::std::string& value) {
  
  network_server_software_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerInfo.network_server_software)
}
inline void ComputerInfo::set_network_server_software(const char* value) {
  
  network_server_software_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.ComputerInfo.network_server_software)
}
inline void ComputerInfo::set_network_server_software(const char* value, size_t size) {
  
  network_server_software_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.ComputerInfo.network_server_software)
}
inline ::std::string* ComputerInfo::mutable_network_server_software() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.ComputerInfo.network_server_software)
  return network_server_software_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ComputerInfo::release_network_server_software() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.ComputerInfo.network_server_software)
  
  return network_server_software_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ComputerInfo::set_allocated_network_server_software(::std::string* network_server_software) {
  if (network_server_software != NULL) {
    
  } else {
    
  }
  network_server_software_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), network_server_software);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.ComputerInfo.network_server_software)
}

// optional string image_quality_test_software = 21;
inline void ComputerInfo::clear_image_quality_test_software() {
  image_quality_test_software_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ComputerInfo::image_quality_test_software() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerInfo.image_quality_test_software)
  return image_quality_test_software_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ComputerInfo::set_image_quality_test_software(const ::std::string& value) {
  
  image_quality_test_software_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerInfo.image_quality_test_software)
}
inline void ComputerInfo::set_image_quality_test_software(const char* value) {
  
  image_quality_test_software_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.ComputerInfo.image_quality_test_software)
}
inline void ComputerInfo::set_image_quality_test_software(const char* value, size_t size) {
  
  image_quality_test_software_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.ComputerInfo.image_quality_test_software)
}
inline ::std::string* ComputerInfo::mutable_image_quality_test_software() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.ComputerInfo.image_quality_test_software)
  return image_quality_test_software_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ComputerInfo::release_image_quality_test_software() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.ComputerInfo.image_quality_test_software)
  
  return image_quality_test_software_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ComputerInfo::set_allocated_image_quality_test_software(::std::string* image_quality_test_software) {
  if (image_quality_test_software != NULL) {
    
  } else {
    
  }
  image_quality_test_software_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image_quality_test_software);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.ComputerInfo.image_quality_test_software)
}

// optional string service_diagnostic_services = 22;
inline void ComputerInfo::clear_service_diagnostic_services() {
  service_diagnostic_services_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ComputerInfo::service_diagnostic_services() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerInfo.service_diagnostic_services)
  return service_diagnostic_services_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ComputerInfo::set_service_diagnostic_services(const ::std::string& value) {
  
  service_diagnostic_services_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerInfo.service_diagnostic_services)
}
inline void ComputerInfo::set_service_diagnostic_services(const char* value) {
  
  service_diagnostic_services_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.ComputerInfo.service_diagnostic_services)
}
inline void ComputerInfo::set_service_diagnostic_services(const char* value, size_t size) {
  
  service_diagnostic_services_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.ComputerInfo.service_diagnostic_services)
}
inline ::std::string* ComputerInfo::mutable_service_diagnostic_services() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.ComputerInfo.service_diagnostic_services)
  return service_diagnostic_services_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ComputerInfo::release_service_diagnostic_services() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.ComputerInfo.service_diagnostic_services)
  
  return service_diagnostic_services_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ComputerInfo::set_allocated_service_diagnostic_services(::std::string* service_diagnostic_services) {
  if (service_diagnostic_services != NULL) {
    
  } else {
    
  }
  service_diagnostic_services_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_diagnostic_services);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.ComputerInfo.service_diagnostic_services)
}

// optional string plc_firmware_version = 23;
inline void ComputerInfo::clear_plc_firmware_version() {
  plc_firmware_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ComputerInfo::plc_firmware_version() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerInfo.plc_firmware_version)
  return plc_firmware_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ComputerInfo::set_plc_firmware_version(const ::std::string& value) {
  
  plc_firmware_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerInfo.plc_firmware_version)
}
inline void ComputerInfo::set_plc_firmware_version(const char* value) {
  
  plc_firmware_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.ComputerInfo.plc_firmware_version)
}
inline void ComputerInfo::set_plc_firmware_version(const char* value, size_t size) {
  
  plc_firmware_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.ComputerInfo.plc_firmware_version)
}
inline ::std::string* ComputerInfo::mutable_plc_firmware_version() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.ComputerInfo.plc_firmware_version)
  return plc_firmware_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ComputerInfo::release_plc_firmware_version() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.ComputerInfo.plc_firmware_version)
  
  return plc_firmware_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ComputerInfo::set_allocated_plc_firmware_version(::std::string* plc_firmware_version) {
  if (plc_firmware_version != NULL) {
    
  } else {
    
  }
  plc_firmware_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), plc_firmware_version);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.ComputerInfo.plc_firmware_version)
}

// optional string top_level_release = 24;
inline void ComputerInfo::clear_top_level_release() {
  top_level_release_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ComputerInfo::top_level_release() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerInfo.top_level_release)
  return top_level_release_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ComputerInfo::set_top_level_release(const ::std::string& value) {
  
  top_level_release_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerInfo.top_level_release)
}
inline void ComputerInfo::set_top_level_release(const char* value) {
  
  top_level_release_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.ComputerInfo.top_level_release)
}
inline void ComputerInfo::set_top_level_release(const char* value, size_t size) {
  
  top_level_release_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.ComputerInfo.top_level_release)
}
inline ::std::string* ComputerInfo::mutable_top_level_release() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.ComputerInfo.top_level_release)
  return top_level_release_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ComputerInfo::release_top_level_release() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.ComputerInfo.top_level_release)
  
  return top_level_release_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ComputerInfo::set_allocated_top_level_release(::std::string* top_level_release) {
  if (top_level_release != NULL) {
    
  } else {
    
  }
  top_level_release_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), top_level_release);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.ComputerInfo.top_level_release)
}

// optional string bhs_software_version = 25;
inline void ComputerInfo::clear_bhs_software_version() {
  bhs_software_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ComputerInfo::bhs_software_version() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerInfo.bhs_software_version)
  return bhs_software_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ComputerInfo::set_bhs_software_version(const ::std::string& value) {
  
  bhs_software_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerInfo.bhs_software_version)
}
inline void ComputerInfo::set_bhs_software_version(const char* value) {
  
  bhs_software_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.ComputerInfo.bhs_software_version)
}
inline void ComputerInfo::set_bhs_software_version(const char* value, size_t size) {
  
  bhs_software_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.ComputerInfo.bhs_software_version)
}
inline ::std::string* ComputerInfo::mutable_bhs_software_version() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.ComputerInfo.bhs_software_version)
  return bhs_software_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ComputerInfo::release_bhs_software_version() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.ComputerInfo.bhs_software_version)
  
  return bhs_software_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ComputerInfo::set_allocated_bhs_software_version(::std::string* bhs_software_version) {
  if (bhs_software_version != NULL) {
    
  } else {
    
  }
  bhs_software_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bhs_software_version);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.ComputerInfo.bhs_software_version)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ancp00
}  // namespace analogic

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_2fComputer_2eproto__INCLUDED
