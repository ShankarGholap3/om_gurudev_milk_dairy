// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/NetworkInterfaceManager.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/NetworkInterfaceManager.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace analogic {
namespace ancp00 {

namespace {

const ::google::protobuf::Descriptor* NetworkInterfaceManagerStatusMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetworkInterfaceManagerStatusMsg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetworkInterfaceManagerStatusMsg_NimState_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_2fNetworkInterfaceManager_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_proto_2fNetworkInterfaceManager_2eproto() {
  protobuf_AddDesc_proto_2fNetworkInterfaceManager_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto/NetworkInterfaceManager.proto");
  GOOGLE_CHECK(file != NULL);
  NetworkInterfaceManagerStatusMsg_descriptor_ = file->message_type(0);
  static const int NetworkInterfaceManagerStatusMsg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkInterfaceManagerStatusMsg, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkInterfaceManagerStatusMsg, is_network_ready_to_receive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkInterfaceManagerStatusMsg, network_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkInterfaceManagerStatusMsg, is_network_chain_logged_in_),
  };
  NetworkInterfaceManagerStatusMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NetworkInterfaceManagerStatusMsg_descriptor_,
      NetworkInterfaceManagerStatusMsg::default_instance_,
      NetworkInterfaceManagerStatusMsg_offsets_,
      -1,
      -1,
      -1,
      sizeof(NetworkInterfaceManagerStatusMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkInterfaceManagerStatusMsg, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkInterfaceManagerStatusMsg, _is_default_instance_));
  NetworkInterfaceManagerStatusMsg_NimState_descriptor_ = NetworkInterfaceManagerStatusMsg_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_2fNetworkInterfaceManager_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NetworkInterfaceManagerStatusMsg_descriptor_, &NetworkInterfaceManagerStatusMsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_2fNetworkInterfaceManager_2eproto() {
  delete NetworkInterfaceManagerStatusMsg::default_instance_;
  delete NetworkInterfaceManagerStatusMsg_reflection_;
}

void protobuf_AddDesc_proto_2fNetworkInterfaceManager_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_proto_2fNetworkInterfaceManager_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n#proto/NetworkInterfaceManager.proto\022\017a"
    "nalogic.ancp00\"\220\002\n NetworkInterfaceManag"
    "erStatusMsg\022I\n\005state\030\001 \001(\0162:.analogic.an"
    "cp00.NetworkInterfaceManagerStatusMsg.Ni"
    "mState\022#\n\033is_network_ready_to_receive\030\002 "
    "\001(\010\022\027\n\017network_version\030\003 \001(\t\022\"\n\032is_netwo"
    "rk_chain_logged_in\030\004 \001(\010\"\?\n\010NimState\022\n\n\006"
    "UNINIT\020\000\022\021\n\rNIM_CONNECTED\020\001\022\024\n\020NIM_DISCO"
    "NNECTED\020\002b\006proto3", 337);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/NetworkInterfaceManager.proto", &protobuf_RegisterTypes);
  NetworkInterfaceManagerStatusMsg::default_instance_ = new NetworkInterfaceManagerStatusMsg();
  NetworkInterfaceManagerStatusMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2fNetworkInterfaceManager_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2fNetworkInterfaceManager_2eproto {
  StaticDescriptorInitializer_proto_2fNetworkInterfaceManager_2eproto() {
    protobuf_AddDesc_proto_2fNetworkInterfaceManager_2eproto();
  }
} static_descriptor_initializer_proto_2fNetworkInterfaceManager_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* NetworkInterfaceManagerStatusMsg_NimState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetworkInterfaceManagerStatusMsg_NimState_descriptor_;
}
bool NetworkInterfaceManagerStatusMsg_NimState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const NetworkInterfaceManagerStatusMsg_NimState NetworkInterfaceManagerStatusMsg::UNINIT;
const NetworkInterfaceManagerStatusMsg_NimState NetworkInterfaceManagerStatusMsg::NIM_CONNECTED;
const NetworkInterfaceManagerStatusMsg_NimState NetworkInterfaceManagerStatusMsg::NIM_DISCONNECTED;
const NetworkInterfaceManagerStatusMsg_NimState NetworkInterfaceManagerStatusMsg::NimState_MIN;
const NetworkInterfaceManagerStatusMsg_NimState NetworkInterfaceManagerStatusMsg::NimState_MAX;
const int NetworkInterfaceManagerStatusMsg::NimState_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetworkInterfaceManagerStatusMsg::kStateFieldNumber;
const int NetworkInterfaceManagerStatusMsg::kIsNetworkReadyToReceiveFieldNumber;
const int NetworkInterfaceManagerStatusMsg::kNetworkVersionFieldNumber;
const int NetworkInterfaceManagerStatusMsg::kIsNetworkChainLoggedInFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetworkInterfaceManagerStatusMsg::NetworkInterfaceManagerStatusMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analogic.ancp00.NetworkInterfaceManagerStatusMsg)
}

void NetworkInterfaceManagerStatusMsg::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

NetworkInterfaceManagerStatusMsg::NetworkInterfaceManagerStatusMsg(const NetworkInterfaceManagerStatusMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analogic.ancp00.NetworkInterfaceManagerStatusMsg)
}

void NetworkInterfaceManagerStatusMsg::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  state_ = 0;
  is_network_ready_to_receive_ = false;
  network_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_network_chain_logged_in_ = false;
}

NetworkInterfaceManagerStatusMsg::~NetworkInterfaceManagerStatusMsg() {
  // @@protoc_insertion_point(destructor:analogic.ancp00.NetworkInterfaceManagerStatusMsg)
  SharedDtor();
}

void NetworkInterfaceManagerStatusMsg::SharedDtor() {
  network_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void NetworkInterfaceManagerStatusMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetworkInterfaceManagerStatusMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetworkInterfaceManagerStatusMsg_descriptor_;
}

const NetworkInterfaceManagerStatusMsg& NetworkInterfaceManagerStatusMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fNetworkInterfaceManager_2eproto();
  return *default_instance_;
}

NetworkInterfaceManagerStatusMsg* NetworkInterfaceManagerStatusMsg::default_instance_ = NULL;

NetworkInterfaceManagerStatusMsg* NetworkInterfaceManagerStatusMsg::New(::google::protobuf::Arena* arena) const {
  NetworkInterfaceManagerStatusMsg* n = new NetworkInterfaceManagerStatusMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetworkInterfaceManagerStatusMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:analogic.ancp00.NetworkInterfaceManagerStatusMsg)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(NetworkInterfaceManagerStatusMsg, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<NetworkInterfaceManagerStatusMsg*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(state_, is_network_chain_logged_in_);
  network_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool NetworkInterfaceManagerStatusMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analogic.ancp00.NetworkInterfaceManagerStatusMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .analogic.ancp00.NetworkInterfaceManagerStatusMsg.NimState state = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::analogic::ancp00::NetworkInterfaceManagerStatusMsg_NimState >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_network_ready_to_receive;
        break;
      }

      // optional bool is_network_ready_to_receive = 2;
      case 2: {
        if (tag == 16) {
         parse_is_network_ready_to_receive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_network_ready_to_receive_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_network_version;
        break;
      }

      // optional string network_version = 3;
      case 3: {
        if (tag == 26) {
         parse_network_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_network_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->network_version().data(), this->network_version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.NetworkInterfaceManagerStatusMsg.network_version"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_is_network_chain_logged_in;
        break;
      }

      // optional bool is_network_chain_logged_in = 4;
      case 4: {
        if (tag == 32) {
         parse_is_network_chain_logged_in:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_network_chain_logged_in_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:analogic.ancp00.NetworkInterfaceManagerStatusMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analogic.ancp00.NetworkInterfaceManagerStatusMsg)
  return false;
#undef DO_
}

void NetworkInterfaceManagerStatusMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analogic.ancp00.NetworkInterfaceManagerStatusMsg)
  // optional .analogic.ancp00.NetworkInterfaceManagerStatusMsg.NimState state = 1;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  // optional bool is_network_ready_to_receive = 2;
  if (this->is_network_ready_to_receive() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_network_ready_to_receive(), output);
  }

  // optional string network_version = 3;
  if (this->network_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->network_version().data(), this->network_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.NetworkInterfaceManagerStatusMsg.network_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->network_version(), output);
  }

  // optional bool is_network_chain_logged_in = 4;
  if (this->is_network_chain_logged_in() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_network_chain_logged_in(), output);
  }

  // @@protoc_insertion_point(serialize_end:analogic.ancp00.NetworkInterfaceManagerStatusMsg)
}

::google::protobuf::uint8* NetworkInterfaceManagerStatusMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analogic.ancp00.NetworkInterfaceManagerStatusMsg)
  // optional .analogic.ancp00.NetworkInterfaceManagerStatusMsg.NimState state = 1;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }

  // optional bool is_network_ready_to_receive = 2;
  if (this->is_network_ready_to_receive() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_network_ready_to_receive(), target);
  }

  // optional string network_version = 3;
  if (this->network_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->network_version().data(), this->network_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.NetworkInterfaceManagerStatusMsg.network_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->network_version(), target);
  }

  // optional bool is_network_chain_logged_in = 4;
  if (this->is_network_chain_logged_in() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_network_chain_logged_in(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:analogic.ancp00.NetworkInterfaceManagerStatusMsg)
  return target;
}

int NetworkInterfaceManagerStatusMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:analogic.ancp00.NetworkInterfaceManagerStatusMsg)
  int total_size = 0;

  // optional .analogic.ancp00.NetworkInterfaceManagerStatusMsg.NimState state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  // optional bool is_network_ready_to_receive = 2;
  if (this->is_network_ready_to_receive() != 0) {
    total_size += 1 + 1;
  }

  // optional string network_version = 3;
  if (this->network_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->network_version());
  }

  // optional bool is_network_chain_logged_in = 4;
  if (this->is_network_chain_logged_in() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetworkInterfaceManagerStatusMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analogic.ancp00.NetworkInterfaceManagerStatusMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NetworkInterfaceManagerStatusMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NetworkInterfaceManagerStatusMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analogic.ancp00.NetworkInterfaceManagerStatusMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analogic.ancp00.NetworkInterfaceManagerStatusMsg)
    MergeFrom(*source);
  }
}

void NetworkInterfaceManagerStatusMsg::MergeFrom(const NetworkInterfaceManagerStatusMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analogic.ancp00.NetworkInterfaceManagerStatusMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
  if (from.is_network_ready_to_receive() != 0) {
    set_is_network_ready_to_receive(from.is_network_ready_to_receive());
  }
  if (from.network_version().size() > 0) {

    network_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.network_version_);
  }
  if (from.is_network_chain_logged_in() != 0) {
    set_is_network_chain_logged_in(from.is_network_chain_logged_in());
  }
}

void NetworkInterfaceManagerStatusMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analogic.ancp00.NetworkInterfaceManagerStatusMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkInterfaceManagerStatusMsg::CopyFrom(const NetworkInterfaceManagerStatusMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analogic.ancp00.NetworkInterfaceManagerStatusMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkInterfaceManagerStatusMsg::IsInitialized() const {

  return true;
}

void NetworkInterfaceManagerStatusMsg::Swap(NetworkInterfaceManagerStatusMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetworkInterfaceManagerStatusMsg::InternalSwap(NetworkInterfaceManagerStatusMsg* other) {
  std::swap(state_, other->state_);
  std::swap(is_network_ready_to_receive_, other->is_network_ready_to_receive_);
  network_version_.Swap(&other->network_version_);
  std::swap(is_network_chain_logged_in_, other->is_network_chain_logged_in_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NetworkInterfaceManagerStatusMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetworkInterfaceManagerStatusMsg_descriptor_;
  metadata.reflection = NetworkInterfaceManagerStatusMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetworkInterfaceManagerStatusMsg

// optional .analogic.ancp00.NetworkInterfaceManagerStatusMsg.NimState state = 1;
void NetworkInterfaceManagerStatusMsg::clear_state() {
  state_ = 0;
}
 ::analogic::ancp00::NetworkInterfaceManagerStatusMsg_NimState NetworkInterfaceManagerStatusMsg::state() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.NetworkInterfaceManagerStatusMsg.state)
  return static_cast< ::analogic::ancp00::NetworkInterfaceManagerStatusMsg_NimState >(state_);
}
 void NetworkInterfaceManagerStatusMsg::set_state(::analogic::ancp00::NetworkInterfaceManagerStatusMsg_NimState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.NetworkInterfaceManagerStatusMsg.state)
}

// optional bool is_network_ready_to_receive = 2;
void NetworkInterfaceManagerStatusMsg::clear_is_network_ready_to_receive() {
  is_network_ready_to_receive_ = false;
}
 bool NetworkInterfaceManagerStatusMsg::is_network_ready_to_receive() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.NetworkInterfaceManagerStatusMsg.is_network_ready_to_receive)
  return is_network_ready_to_receive_;
}
 void NetworkInterfaceManagerStatusMsg::set_is_network_ready_to_receive(bool value) {
  
  is_network_ready_to_receive_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.NetworkInterfaceManagerStatusMsg.is_network_ready_to_receive)
}

// optional string network_version = 3;
void NetworkInterfaceManagerStatusMsg::clear_network_version() {
  network_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& NetworkInterfaceManagerStatusMsg::network_version() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.NetworkInterfaceManagerStatusMsg.network_version)
  return network_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NetworkInterfaceManagerStatusMsg::set_network_version(const ::std::string& value) {
  
  network_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.NetworkInterfaceManagerStatusMsg.network_version)
}
 void NetworkInterfaceManagerStatusMsg::set_network_version(const char* value) {
  
  network_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.NetworkInterfaceManagerStatusMsg.network_version)
}
 void NetworkInterfaceManagerStatusMsg::set_network_version(const char* value, size_t size) {
  
  network_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.NetworkInterfaceManagerStatusMsg.network_version)
}
 ::std::string* NetworkInterfaceManagerStatusMsg::mutable_network_version() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.NetworkInterfaceManagerStatusMsg.network_version)
  return network_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NetworkInterfaceManagerStatusMsg::release_network_version() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.NetworkInterfaceManagerStatusMsg.network_version)
  
  return network_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NetworkInterfaceManagerStatusMsg::set_allocated_network_version(::std::string* network_version) {
  if (network_version != NULL) {
    
  } else {
    
  }
  network_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), network_version);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.NetworkInterfaceManagerStatusMsg.network_version)
}

// optional bool is_network_chain_logged_in = 4;
void NetworkInterfaceManagerStatusMsg::clear_is_network_chain_logged_in() {
  is_network_chain_logged_in_ = false;
}
 bool NetworkInterfaceManagerStatusMsg::is_network_chain_logged_in() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.NetworkInterfaceManagerStatusMsg.is_network_chain_logged_in)
  return is_network_chain_logged_in_;
}
 void NetworkInterfaceManagerStatusMsg::set_is_network_chain_logged_in(bool value) {
  
  is_network_chain_logged_in_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.NetworkInterfaceManagerStatusMsg.is_network_chain_logged_in)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ancp00
}  // namespace analogic

// @@protoc_insertion_point(global_scope)
