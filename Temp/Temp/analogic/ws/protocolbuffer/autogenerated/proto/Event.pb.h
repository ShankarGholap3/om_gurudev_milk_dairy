// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/Event.proto

#ifndef PROTOBUF_proto_2fEvent_2eproto__INCLUDED
#define PROTOBUF_proto_2fEvent_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "proto/SubsystemIds.pb.h"
// @@protoc_insertion_point(includes)

namespace analogic {
namespace ancp00 {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_proto_2fEvent_2eproto();
void protobuf_AssignDesc_proto_2fEvent_2eproto();
void protobuf_ShutdownFile_proto_2fEvent_2eproto();

class EventData;

enum EventData_EVENT_ID {
  EventData_EVENT_ID_ENTRANCE_BAG_SENSOR_BLOCKED = 0,
  EventData_EVENT_ID_ENTRANCE_BAG_SENSOR_CLEAR = 1,
  EventData_EVENT_ID_EXIT_BAG_SENSOR_BLOCKED = 2,
  EventData_EVENT_ID_EXIT_BAG_SENSOR_CLEAR = 3,
  EventData_EVENT_ID_XRAY_MINIMIZED = 4,
  EventData_EVENT_ID_XRAY_MAXIMIZED = 5,
  EventData_EVENT_ID_RAW_DATA_COLLECTED = 6,
  EventData_EVENT_ID_RADIATION_SURVEY_BAG_IN_POSITION = 7,
  EventData_EVENT_ID_IMAGE_QUALITY_BAG_COMPLETE = 8,
  EventData_EVENT_ID_IMAGE_QUALITY_ERROR = 9,
  EventData_EVENT_ID_AIR_CAL_DATA_ACQUIRED = 10,
  EventData_EVENT_ID_OFFSET_CAL_DATA_ACQUIRED = 11,
  EventData_EVENT_ID_AIR_CAL_ERROR = 12,
  EventData_EVENT_ID_OFFSET_CAL_ERROR = 13,
  EventData_EVENT_ID_BAG_START = 14,
  EventData_EVENT_ID_BAG_END = 15,
  EventData_EVENT_ID_OPERATOR_PRESENT = 16,
  EventData_EVENT_ID_OPERATOR_NOT_PRESENT = 17,
  EventData_EVENT_ID_TICK_MODE = 18,
  EventData_EVENT_ID_TIMING_MODE = 19,
  EventData_EVENT_ID_TEMPERATURE_CHANGE_EVENT = 20,
  EventData_EVENT_ID_ZIPPER_IN_BEAM = 21,
  EventData_EVENT_ID_ESTOP_ENTRANCE_PORT_ACTIVE = 22,
  EventData_EVENT_ID_ESTOP_ENTRANCE_PORT_INACTIVE = 23,
  EventData_EVENT_ID_ESTOP_EXIT_PORT_ACTIVE = 24,
  EventData_EVENT_ID_ESTOP_EXIT_PORT_INACTIVE = 25,
  EventData_EVENT_ID_ESTOP_CONSOLE_PORT_ACTIVE = 26,
  EventData_EVENT_ID_ESTOP_CONSOLE_PORT_INACTIVE = 27,
  EventData_EVENT_ID_ESTOP_BHS_PORT_ACTIVE = 28,
  EventData_EVENT_ID_ESTOP_BHS_PORT_INACTIVE = 29,
  EventData_EVENT_ID_POWERLINK_ENABLED = 30,
  EventData_EVENT_ID_POWERLINK_DISABLED = 31,
  EventData_EVENT_ID_BHS_EMERGENCY_REQUEST = 32,
  EventData_EVENT_ID_BHS_EMERGENCY_RELEASE = 33,
  EventData_EVENT_ID_RAISE_RTR = 34,
  EventData_EVENT_ID_LOWER_RTR = 35,
  EventData_EVENT_ID_SAFETY_RESET = 36,
  EventData_EVENT_ID_CAL_PLACEMENT_EVENT = 37,
  EventData_EVENT_ID_BLM_XRAYS_ON_STABLE = 38,
  EventData_EVENT_ID_BLM_VIEWS_BEING_DISCARDED = 39,
  EventData_EVENT_ID_SCANNER_PARAMETERS_UPDATED = 40,
  EventData_EVENT_ID_WORKSTATION_PARAMETERS_UPDATED = 41,
  EventData_EVENT_ID_PVS_DECISION = 42,
  EventData_EVENT_ID_XRAY_ATTENUATION = 43,
  EventData_EVENT_ID_BAG_START_IQ = 44,
  EventData_EVENT_ID_OPERATOR_NOT_PRESENT_TIMEOUT = 45,
  EventData_EVENT_ID_OPERATOR_NOT_PRESENT_CLEAR = 46,
  EventData_EVENT_ID_EventData_EVENT_ID_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EventData_EVENT_ID_EventData_EVENT_ID_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool EventData_EVENT_ID_IsValid(int value);
const EventData_EVENT_ID EventData_EVENT_ID_EVENT_ID_MIN = EventData_EVENT_ID_ENTRANCE_BAG_SENSOR_BLOCKED;
const EventData_EVENT_ID EventData_EVENT_ID_EVENT_ID_MAX = EventData_EVENT_ID_OPERATOR_NOT_PRESENT_CLEAR;
const int EventData_EVENT_ID_EVENT_ID_ARRAYSIZE = EventData_EVENT_ID_EVENT_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* EventData_EVENT_ID_descriptor();
inline const ::std::string& EventData_EVENT_ID_Name(EventData_EVENT_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    EventData_EVENT_ID_descriptor(), value);
}
inline bool EventData_EVENT_ID_Parse(
    const ::std::string& name, EventData_EVENT_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EventData_EVENT_ID>(
    EventData_EVENT_ID_descriptor(), name, value);
}
// ===================================================================

class EventData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:analogic.ancp00.EventData) */ {
 public:
  EventData();
  virtual ~EventData();

  EventData(const EventData& from);

  inline EventData& operator=(const EventData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EventData& default_instance();

  void Swap(EventData* other);

  // implements Message ----------------------------------------------

  inline EventData* New() const { return New(NULL); }

  EventData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EventData& from);
  void MergeFrom(const EventData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EventData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef EventData_EVENT_ID EVENT_ID;
  static const EVENT_ID ENTRANCE_BAG_SENSOR_BLOCKED =
    EventData_EVENT_ID_ENTRANCE_BAG_SENSOR_BLOCKED;
  static const EVENT_ID ENTRANCE_BAG_SENSOR_CLEAR =
    EventData_EVENT_ID_ENTRANCE_BAG_SENSOR_CLEAR;
  static const EVENT_ID EXIT_BAG_SENSOR_BLOCKED =
    EventData_EVENT_ID_EXIT_BAG_SENSOR_BLOCKED;
  static const EVENT_ID EXIT_BAG_SENSOR_CLEAR =
    EventData_EVENT_ID_EXIT_BAG_SENSOR_CLEAR;
  static const EVENT_ID XRAY_MINIMIZED =
    EventData_EVENT_ID_XRAY_MINIMIZED;
  static const EVENT_ID XRAY_MAXIMIZED =
    EventData_EVENT_ID_XRAY_MAXIMIZED;
  static const EVENT_ID RAW_DATA_COLLECTED =
    EventData_EVENT_ID_RAW_DATA_COLLECTED;
  static const EVENT_ID RADIATION_SURVEY_BAG_IN_POSITION =
    EventData_EVENT_ID_RADIATION_SURVEY_BAG_IN_POSITION;
  static const EVENT_ID IMAGE_QUALITY_BAG_COMPLETE =
    EventData_EVENT_ID_IMAGE_QUALITY_BAG_COMPLETE;
  static const EVENT_ID IMAGE_QUALITY_ERROR =
    EventData_EVENT_ID_IMAGE_QUALITY_ERROR;
  static const EVENT_ID AIR_CAL_DATA_ACQUIRED =
    EventData_EVENT_ID_AIR_CAL_DATA_ACQUIRED;
  static const EVENT_ID OFFSET_CAL_DATA_ACQUIRED =
    EventData_EVENT_ID_OFFSET_CAL_DATA_ACQUIRED;
  static const EVENT_ID AIR_CAL_ERROR =
    EventData_EVENT_ID_AIR_CAL_ERROR;
  static const EVENT_ID OFFSET_CAL_ERROR =
    EventData_EVENT_ID_OFFSET_CAL_ERROR;
  static const EVENT_ID BAG_START =
    EventData_EVENT_ID_BAG_START;
  static const EVENT_ID BAG_END =
    EventData_EVENT_ID_BAG_END;
  static const EVENT_ID OPERATOR_PRESENT =
    EventData_EVENT_ID_OPERATOR_PRESENT;
  static const EVENT_ID OPERATOR_NOT_PRESENT =
    EventData_EVENT_ID_OPERATOR_NOT_PRESENT;
  static const EVENT_ID TICK_MODE =
    EventData_EVENT_ID_TICK_MODE;
  static const EVENT_ID TIMING_MODE =
    EventData_EVENT_ID_TIMING_MODE;
  static const EVENT_ID TEMPERATURE_CHANGE_EVENT =
    EventData_EVENT_ID_TEMPERATURE_CHANGE_EVENT;
  static const EVENT_ID ZIPPER_IN_BEAM =
    EventData_EVENT_ID_ZIPPER_IN_BEAM;
  static const EVENT_ID ESTOP_ENTRANCE_PORT_ACTIVE =
    EventData_EVENT_ID_ESTOP_ENTRANCE_PORT_ACTIVE;
  static const EVENT_ID ESTOP_ENTRANCE_PORT_INACTIVE =
    EventData_EVENT_ID_ESTOP_ENTRANCE_PORT_INACTIVE;
  static const EVENT_ID ESTOP_EXIT_PORT_ACTIVE =
    EventData_EVENT_ID_ESTOP_EXIT_PORT_ACTIVE;
  static const EVENT_ID ESTOP_EXIT_PORT_INACTIVE =
    EventData_EVENT_ID_ESTOP_EXIT_PORT_INACTIVE;
  static const EVENT_ID ESTOP_CONSOLE_PORT_ACTIVE =
    EventData_EVENT_ID_ESTOP_CONSOLE_PORT_ACTIVE;
  static const EVENT_ID ESTOP_CONSOLE_PORT_INACTIVE =
    EventData_EVENT_ID_ESTOP_CONSOLE_PORT_INACTIVE;
  static const EVENT_ID ESTOP_BHS_PORT_ACTIVE =
    EventData_EVENT_ID_ESTOP_BHS_PORT_ACTIVE;
  static const EVENT_ID ESTOP_BHS_PORT_INACTIVE =
    EventData_EVENT_ID_ESTOP_BHS_PORT_INACTIVE;
  static const EVENT_ID POWERLINK_ENABLED =
    EventData_EVENT_ID_POWERLINK_ENABLED;
  static const EVENT_ID POWERLINK_DISABLED =
    EventData_EVENT_ID_POWERLINK_DISABLED;
  static const EVENT_ID BHS_EMERGENCY_REQUEST =
    EventData_EVENT_ID_BHS_EMERGENCY_REQUEST;
  static const EVENT_ID BHS_EMERGENCY_RELEASE =
    EventData_EVENT_ID_BHS_EMERGENCY_RELEASE;
  static const EVENT_ID RAISE_RTR =
    EventData_EVENT_ID_RAISE_RTR;
  static const EVENT_ID LOWER_RTR =
    EventData_EVENT_ID_LOWER_RTR;
  static const EVENT_ID SAFETY_RESET =
    EventData_EVENT_ID_SAFETY_RESET;
  static const EVENT_ID CAL_PLACEMENT_EVENT =
    EventData_EVENT_ID_CAL_PLACEMENT_EVENT;
  static const EVENT_ID BLM_XRAYS_ON_STABLE =
    EventData_EVENT_ID_BLM_XRAYS_ON_STABLE;
  static const EVENT_ID BLM_VIEWS_BEING_DISCARDED =
    EventData_EVENT_ID_BLM_VIEWS_BEING_DISCARDED;
  static const EVENT_ID SCANNER_PARAMETERS_UPDATED =
    EventData_EVENT_ID_SCANNER_PARAMETERS_UPDATED;
  static const EVENT_ID WORKSTATION_PARAMETERS_UPDATED =
    EventData_EVENT_ID_WORKSTATION_PARAMETERS_UPDATED;
  static const EVENT_ID PVS_DECISION =
    EventData_EVENT_ID_PVS_DECISION;
  static const EVENT_ID XRAY_ATTENUATION =
    EventData_EVENT_ID_XRAY_ATTENUATION;
  static const EVENT_ID BAG_START_IQ =
    EventData_EVENT_ID_BAG_START_IQ;
  static const EVENT_ID OPERATOR_NOT_PRESENT_TIMEOUT =
    EventData_EVENT_ID_OPERATOR_NOT_PRESENT_TIMEOUT;
  static const EVENT_ID OPERATOR_NOT_PRESENT_CLEAR =
    EventData_EVENT_ID_OPERATOR_NOT_PRESENT_CLEAR;
  static inline bool EVENT_ID_IsValid(int value) {
    return EventData_EVENT_ID_IsValid(value);
  }
  static const EVENT_ID EVENT_ID_MIN =
    EventData_EVENT_ID_EVENT_ID_MIN;
  static const EVENT_ID EVENT_ID_MAX =
    EventData_EVENT_ID_EVENT_ID_MAX;
  static const int EVENT_ID_ARRAYSIZE =
    EventData_EVENT_ID_EVENT_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EVENT_ID_descriptor() {
    return EventData_EVENT_ID_descriptor();
  }
  static inline const ::std::string& EVENT_ID_Name(EVENT_ID value) {
    return EventData_EVENT_ID_Name(value);
  }
  static inline bool EVENT_ID_Parse(const ::std::string& name,
      EVENT_ID* value) {
    return EventData_EVENT_ID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .analogic.ancp00.SUBSYSTEM_ID subsys_id = 1;
  void clear_subsys_id();
  static const int kSubsysIdFieldNumber = 1;
  ::analogic::ancp00::SUBSYSTEM_ID subsys_id() const;
  void set_subsys_id(::analogic::ancp00::SUBSYSTEM_ID value);

  // optional .analogic.ancp00.EventData.EVENT_ID id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::analogic::ancp00::EventData_EVENT_ID id() const;
  void set_id(::analogic::ancp00::EventData_EVENT_ID value);

  // optional string text = 3;
  void clear_text();
  static const int kTextFieldNumber = 3;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // optional string data = 4;
  void clear_data();
  static const int kDataFieldNumber = 4;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:analogic.ancp00.EventData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  int subsys_id_;
  int id_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_proto_2fEvent_2eproto();
  friend void protobuf_AssignDesc_proto_2fEvent_2eproto();
  friend void protobuf_ShutdownFile_proto_2fEvent_2eproto();

  void InitAsDefaultInstance();
  static EventData* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// EventData

// optional .analogic.ancp00.SUBSYSTEM_ID subsys_id = 1;
inline void EventData::clear_subsys_id() {
  subsys_id_ = 0;
}
inline ::analogic::ancp00::SUBSYSTEM_ID EventData::subsys_id() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.EventData.subsys_id)
  return static_cast< ::analogic::ancp00::SUBSYSTEM_ID >(subsys_id_);
}
inline void EventData::set_subsys_id(::analogic::ancp00::SUBSYSTEM_ID value) {
  
  subsys_id_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.EventData.subsys_id)
}

// optional .analogic.ancp00.EventData.EVENT_ID id = 2;
inline void EventData::clear_id() {
  id_ = 0;
}
inline ::analogic::ancp00::EventData_EVENT_ID EventData::id() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.EventData.id)
  return static_cast< ::analogic::ancp00::EventData_EVENT_ID >(id_);
}
inline void EventData::set_id(::analogic::ancp00::EventData_EVENT_ID value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.EventData.id)
}

// optional string text = 3;
inline void EventData::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EventData::text() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.EventData.text)
  return text_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EventData::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.EventData.text)
}
inline void EventData::set_text(const char* value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.EventData.text)
}
inline void EventData::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.EventData.text)
}
inline ::std::string* EventData::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.EventData.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EventData::release_text() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.EventData.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EventData::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.EventData.text)
}

// optional string data = 4;
inline void EventData::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EventData::data() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.EventData.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EventData::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.EventData.data)
}
inline void EventData::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.EventData.data)
}
inline void EventData::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.EventData.data)
}
inline ::std::string* EventData::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.EventData.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EventData::release_data() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.EventData.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EventData::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.EventData.data)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ancp00
}  // namespace analogic

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::analogic::ancp00::EventData_EVENT_ID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::analogic::ancp00::EventData_EVENT_ID>() {
  return ::analogic::ancp00::EventData_EVENT_ID_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_2fEvent_2eproto__INCLUDED
