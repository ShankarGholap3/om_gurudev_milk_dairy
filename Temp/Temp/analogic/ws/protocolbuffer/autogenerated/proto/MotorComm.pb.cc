// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/MotorComm.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/MotorComm.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace analogic {
namespace ancp00 {

namespace {

const ::google::protobuf::Descriptor* MotorCommMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MotorCommMsg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MotorCommMsg_MotorCommMsgId_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_2fMotorComm_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_proto_2fMotorComm_2eproto() {
  protobuf_AddDesc_proto_2fMotorComm_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto/MotorComm.proto");
  GOOGLE_CHECK(file != NULL);
  MotorCommMsg_descriptor_ = file->message_type(0);
  static const int MotorCommMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotorCommMsg, msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotorCommMsg, freq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotorCommMsg, adjustment_),
  };
  MotorCommMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MotorCommMsg_descriptor_,
      MotorCommMsg::default_instance_,
      MotorCommMsg_offsets_,
      -1,
      -1,
      -1,
      sizeof(MotorCommMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotorCommMsg, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotorCommMsg, _is_default_instance_));
  MotorCommMsg_MotorCommMsgId_descriptor_ = MotorCommMsg_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_2fMotorComm_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MotorCommMsg_descriptor_, &MotorCommMsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_2fMotorComm_2eproto() {
  delete MotorCommMsg::default_instance_;
  delete MotorCommMsg_reflection_;
}

void protobuf_AddDesc_proto_2fMotorComm_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_proto_2fMotorComm_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025proto/MotorComm.proto\022\017analogic.ancp00"
    "\"\352\001\n\014MotorCommMsg\022<\n\006msg_id\030\001 \001(\0162,.anal"
    "ogic.ancp00.MotorCommMsg.MotorCommMsgId\022"
    "\014\n\004freq\030\002 \001(\005\022\022\n\nadjustment\030\003 \001(\002\"z\n\016Mot"
    "orCommMsgId\022\t\n\005RESET\020\000\022\010\n\004STOP\020\001\022\013\n\007FORW"
    "ARD\020\002\022\013\n\007REVERSE\020\003\022\013\n\007SETFREQ\020\004\022\014\n\010ADJSP"
    "EED\020\005\022\016\n\nFORWARD_2X\020\006\022\016\n\nFORWARD_3X\020\007b\006p"
    "roto3", 285);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/MotorComm.proto", &protobuf_RegisterTypes);
  MotorCommMsg::default_instance_ = new MotorCommMsg();
  MotorCommMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2fMotorComm_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2fMotorComm_2eproto {
  StaticDescriptorInitializer_proto_2fMotorComm_2eproto() {
    protobuf_AddDesc_proto_2fMotorComm_2eproto();
  }
} static_descriptor_initializer_proto_2fMotorComm_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* MotorCommMsg_MotorCommMsgId_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MotorCommMsg_MotorCommMsgId_descriptor_;
}
bool MotorCommMsg_MotorCommMsgId_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MotorCommMsg_MotorCommMsgId MotorCommMsg::RESET;
const MotorCommMsg_MotorCommMsgId MotorCommMsg::STOP;
const MotorCommMsg_MotorCommMsgId MotorCommMsg::FORWARD;
const MotorCommMsg_MotorCommMsgId MotorCommMsg::REVERSE;
const MotorCommMsg_MotorCommMsgId MotorCommMsg::SETFREQ;
const MotorCommMsg_MotorCommMsgId MotorCommMsg::ADJSPEED;
const MotorCommMsg_MotorCommMsgId MotorCommMsg::FORWARD_2X;
const MotorCommMsg_MotorCommMsgId MotorCommMsg::FORWARD_3X;
const MotorCommMsg_MotorCommMsgId MotorCommMsg::MotorCommMsgId_MIN;
const MotorCommMsg_MotorCommMsgId MotorCommMsg::MotorCommMsgId_MAX;
const int MotorCommMsg::MotorCommMsgId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MotorCommMsg::kMsgIdFieldNumber;
const int MotorCommMsg::kFreqFieldNumber;
const int MotorCommMsg::kAdjustmentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MotorCommMsg::MotorCommMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analogic.ancp00.MotorCommMsg)
}

void MotorCommMsg::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MotorCommMsg::MotorCommMsg(const MotorCommMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analogic.ancp00.MotorCommMsg)
}

void MotorCommMsg::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  msg_id_ = 0;
  freq_ = 0;
  adjustment_ = 0;
}

MotorCommMsg::~MotorCommMsg() {
  // @@protoc_insertion_point(destructor:analogic.ancp00.MotorCommMsg)
  SharedDtor();
}

void MotorCommMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MotorCommMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MotorCommMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MotorCommMsg_descriptor_;
}

const MotorCommMsg& MotorCommMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fMotorComm_2eproto();
  return *default_instance_;
}

MotorCommMsg* MotorCommMsg::default_instance_ = NULL;

MotorCommMsg* MotorCommMsg::New(::google::protobuf::Arena* arena) const {
  MotorCommMsg* n = new MotorCommMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MotorCommMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:analogic.ancp00.MotorCommMsg)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MotorCommMsg, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MotorCommMsg*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(msg_id_, adjustment_);

#undef ZR_HELPER_
#undef ZR_

}

bool MotorCommMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analogic.ancp00.MotorCommMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .analogic.ancp00.MotorCommMsg.MotorCommMsgId msg_id = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_msg_id(static_cast< ::analogic::ancp00::MotorCommMsg_MotorCommMsgId >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_freq;
        break;
      }

      // optional int32 freq = 2;
      case 2: {
        if (tag == 16) {
         parse_freq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &freq_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_adjustment;
        break;
      }

      // optional float adjustment = 3;
      case 3: {
        if (tag == 29) {
         parse_adjustment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &adjustment_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:analogic.ancp00.MotorCommMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analogic.ancp00.MotorCommMsg)
  return false;
#undef DO_
}

void MotorCommMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analogic.ancp00.MotorCommMsg)
  // optional .analogic.ancp00.MotorCommMsg.MotorCommMsgId msg_id = 1;
  if (this->msg_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msg_id(), output);
  }

  // optional int32 freq = 2;
  if (this->freq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->freq(), output);
  }

  // optional float adjustment = 3;
  if (this->adjustment() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->adjustment(), output);
  }

  // @@protoc_insertion_point(serialize_end:analogic.ancp00.MotorCommMsg)
}

::google::protobuf::uint8* MotorCommMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analogic.ancp00.MotorCommMsg)
  // optional .analogic.ancp00.MotorCommMsg.MotorCommMsgId msg_id = 1;
  if (this->msg_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msg_id(), target);
  }

  // optional int32 freq = 2;
  if (this->freq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->freq(), target);
  }

  // optional float adjustment = 3;
  if (this->adjustment() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->adjustment(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:analogic.ancp00.MotorCommMsg)
  return target;
}

int MotorCommMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:analogic.ancp00.MotorCommMsg)
  int total_size = 0;

  // optional .analogic.ancp00.MotorCommMsg.MotorCommMsgId msg_id = 1;
  if (this->msg_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_id());
  }

  // optional int32 freq = 2;
  if (this->freq() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->freq());
  }

  // optional float adjustment = 3;
  if (this->adjustment() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MotorCommMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analogic.ancp00.MotorCommMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MotorCommMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MotorCommMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analogic.ancp00.MotorCommMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analogic.ancp00.MotorCommMsg)
    MergeFrom(*source);
  }
}

void MotorCommMsg::MergeFrom(const MotorCommMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analogic.ancp00.MotorCommMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.msg_id() != 0) {
    set_msg_id(from.msg_id());
  }
  if (from.freq() != 0) {
    set_freq(from.freq());
  }
  if (from.adjustment() != 0) {
    set_adjustment(from.adjustment());
  }
}

void MotorCommMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analogic.ancp00.MotorCommMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MotorCommMsg::CopyFrom(const MotorCommMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analogic.ancp00.MotorCommMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MotorCommMsg::IsInitialized() const {

  return true;
}

void MotorCommMsg::Swap(MotorCommMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MotorCommMsg::InternalSwap(MotorCommMsg* other) {
  std::swap(msg_id_, other->msg_id_);
  std::swap(freq_, other->freq_);
  std::swap(adjustment_, other->adjustment_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MotorCommMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MotorCommMsg_descriptor_;
  metadata.reflection = MotorCommMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MotorCommMsg

// optional .analogic.ancp00.MotorCommMsg.MotorCommMsgId msg_id = 1;
void MotorCommMsg::clear_msg_id() {
  msg_id_ = 0;
}
 ::analogic::ancp00::MotorCommMsg_MotorCommMsgId MotorCommMsg::msg_id() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.MotorCommMsg.msg_id)
  return static_cast< ::analogic::ancp00::MotorCommMsg_MotorCommMsgId >(msg_id_);
}
 void MotorCommMsg::set_msg_id(::analogic::ancp00::MotorCommMsg_MotorCommMsgId value) {
  
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.MotorCommMsg.msg_id)
}

// optional int32 freq = 2;
void MotorCommMsg::clear_freq() {
  freq_ = 0;
}
 ::google::protobuf::int32 MotorCommMsg::freq() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.MotorCommMsg.freq)
  return freq_;
}
 void MotorCommMsg::set_freq(::google::protobuf::int32 value) {
  
  freq_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.MotorCommMsg.freq)
}

// optional float adjustment = 3;
void MotorCommMsg::clear_adjustment() {
  adjustment_ = 0;
}
 float MotorCommMsg::adjustment() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.MotorCommMsg.adjustment)
  return adjustment_;
}
 void MotorCommMsg::set_adjustment(float value) {
  
  adjustment_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.MotorCommMsg.adjustment)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ancp00
}  // namespace analogic

// @@protoc_insertion_point(global_scope)
