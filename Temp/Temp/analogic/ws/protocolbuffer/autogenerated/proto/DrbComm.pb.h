// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/DrbComm.proto

#ifndef PROTOBUF_proto_2fDrbComm_2eproto__INCLUDED
#define PROTOBUF_proto_2fDrbComm_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace analogic {
namespace ancp00 {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_proto_2fDrbComm_2eproto();
void protobuf_AssignDesc_proto_2fDrbComm_2eproto();
void protobuf_ShutdownFile_proto_2fDrbComm_2eproto();

class DrbCommMsg;
class DrbCommStatusMsg;
class DrbIoData;

enum DrbCommStatusMsg_DRB_STATUS {
  DrbCommStatusMsg_DRB_STATUS_OFFLINE = 0,
  DrbCommStatusMsg_DRB_STATUS_PAUSED = 1,
  DrbCommStatusMsg_DRB_STATUS_RUNNING = 2,
  DrbCommStatusMsg_DRB_STATUS_DrbCommStatusMsg_DRB_STATUS_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DrbCommStatusMsg_DRB_STATUS_DrbCommStatusMsg_DRB_STATUS_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DrbCommStatusMsg_DRB_STATUS_IsValid(int value);
const DrbCommStatusMsg_DRB_STATUS DrbCommStatusMsg_DRB_STATUS_DRB_STATUS_MIN = DrbCommStatusMsg_DRB_STATUS_OFFLINE;
const DrbCommStatusMsg_DRB_STATUS DrbCommStatusMsg_DRB_STATUS_DRB_STATUS_MAX = DrbCommStatusMsg_DRB_STATUS_RUNNING;
const int DrbCommStatusMsg_DRB_STATUS_DRB_STATUS_ARRAYSIZE = DrbCommStatusMsg_DRB_STATUS_DRB_STATUS_MAX + 1;

const ::google::protobuf::EnumDescriptor* DrbCommStatusMsg_DRB_STATUS_descriptor();
inline const ::std::string& DrbCommStatusMsg_DRB_STATUS_Name(DrbCommStatusMsg_DRB_STATUS value) {
  return ::google::protobuf::internal::NameOfEnum(
    DrbCommStatusMsg_DRB_STATUS_descriptor(), value);
}
inline bool DrbCommStatusMsg_DRB_STATUS_Parse(
    const ::std::string& name, DrbCommStatusMsg_DRB_STATUS* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DrbCommStatusMsg_DRB_STATUS>(
    DrbCommStatusMsg_DRB_STATUS_descriptor(), name, value);
}
enum DrbIoData_FaultStatusBits {
  DrbIoData_FaultStatusBits_NOT_USED_0 = 0,
  DrbIoData_FaultStatusBits_REGULATION_FAULT = 1,
  DrbIoData_FaultStatusBits_INTERLOCK_OPEN_FAULT = 2,
  DrbIoData_FaultStatusBits_CATHODE_OVER_KV_FAULT = 4,
  DrbIoData_FaultStatusBits_ANODE_OVER_KV_FAULT = 8,
  DrbIoData_FaultStatusBits_OVERTEMP_FAULT = 16,
  DrbIoData_FaultStatusBits_ARC_FAULT = 32,
  DrbIoData_FaultStatusBits_OVER_CURRENT_FAULT = 64,
  DrbIoData_FaultStatusBits_POWER_LIMIT_FAULT = 128,
  DrbIoData_FaultStatusBits_OVER_VOLTAGE_FAULT = 256,
  DrbIoData_FaultStatusBits_DUTY_CYCLE_MODE = 512,
  DrbIoData_FaultStatusBits_XRAY_MINIMIZATION = 1024,
  DrbIoData_FaultStatusBits_XRAY_SEASONING_IN_PROGRESS = 2048,
  DrbIoData_FaultStatusBits_WATCHDOG_STATUS = 8192,
  DrbIoData_FaultStatusBits_XRAY_ENABLE = 16384,
  DrbIoData_FaultStatusBits_HV_STATUS_XRAY_ON = 32768,
  DrbIoData_FaultStatusBits_XRAY_FAULT_MASK = 511,
  DrbIoData_FaultStatusBits_DrbIoData_FaultStatusBits_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DrbIoData_FaultStatusBits_DrbIoData_FaultStatusBits_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DrbIoData_FaultStatusBits_IsValid(int value);
const DrbIoData_FaultStatusBits DrbIoData_FaultStatusBits_FaultStatusBits_MIN = DrbIoData_FaultStatusBits_NOT_USED_0;
const DrbIoData_FaultStatusBits DrbIoData_FaultStatusBits_FaultStatusBits_MAX = DrbIoData_FaultStatusBits_HV_STATUS_XRAY_ON;
const int DrbIoData_FaultStatusBits_FaultStatusBits_ARRAYSIZE = DrbIoData_FaultStatusBits_FaultStatusBits_MAX + 1;

const ::google::protobuf::EnumDescriptor* DrbIoData_FaultStatusBits_descriptor();
inline const ::std::string& DrbIoData_FaultStatusBits_Name(DrbIoData_FaultStatusBits value) {
  return ::google::protobuf::internal::NameOfEnum(
    DrbIoData_FaultStatusBits_descriptor(), value);
}
inline bool DrbIoData_FaultStatusBits_Parse(
    const ::std::string& name, DrbIoData_FaultStatusBits* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DrbIoData_FaultStatusBits>(
    DrbIoData_FaultStatusBits_descriptor(), name, value);
}
enum DrbIoData_SourceDiscreteBits {
  DrbIoData_SourceDiscreteBits_NOT_USED_1 = 0,
  DrbIoData_SourceDiscreteBits_XRAY_INTERLOCK = 1,
  DrbIoData_SourceDiscreteBits_XRAY_ON = 2,
  DrbIoData_SourceDiscreteBits_DrbIoData_SourceDiscreteBits_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DrbIoData_SourceDiscreteBits_DrbIoData_SourceDiscreteBits_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DrbIoData_SourceDiscreteBits_IsValid(int value);
const DrbIoData_SourceDiscreteBits DrbIoData_SourceDiscreteBits_SourceDiscreteBits_MIN = DrbIoData_SourceDiscreteBits_NOT_USED_1;
const DrbIoData_SourceDiscreteBits DrbIoData_SourceDiscreteBits_SourceDiscreteBits_MAX = DrbIoData_SourceDiscreteBits_XRAY_ON;
const int DrbIoData_SourceDiscreteBits_SourceDiscreteBits_ARRAYSIZE = DrbIoData_SourceDiscreteBits_SourceDiscreteBits_MAX + 1;

const ::google::protobuf::EnumDescriptor* DrbIoData_SourceDiscreteBits_descriptor();
inline const ::std::string& DrbIoData_SourceDiscreteBits_Name(DrbIoData_SourceDiscreteBits value) {
  return ::google::protobuf::internal::NameOfEnum(
    DrbIoData_SourceDiscreteBits_descriptor(), value);
}
inline bool DrbIoData_SourceDiscreteBits_Parse(
    const ::std::string& name, DrbIoData_SourceDiscreteBits* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DrbIoData_SourceDiscreteBits>(
    DrbIoData_SourceDiscreteBits_descriptor(), name, value);
}
enum DrbIoData_RcbControlRegisterBits {
  DrbIoData_RcbControlRegisterBits_NOT_USED_3 = 0,
  DrbIoData_RcbControlRegisterBits_DrbIoData_RcbControlRegisterBits_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DrbIoData_RcbControlRegisterBits_DrbIoData_RcbControlRegisterBits_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DrbIoData_RcbControlRegisterBits_IsValid(int value);
const DrbIoData_RcbControlRegisterBits DrbIoData_RcbControlRegisterBits_RcbControlRegisterBits_MIN = DrbIoData_RcbControlRegisterBits_NOT_USED_3;
const DrbIoData_RcbControlRegisterBits DrbIoData_RcbControlRegisterBits_RcbControlRegisterBits_MAX = DrbIoData_RcbControlRegisterBits_NOT_USED_3;
const int DrbIoData_RcbControlRegisterBits_RcbControlRegisterBits_ARRAYSIZE = DrbIoData_RcbControlRegisterBits_RcbControlRegisterBits_MAX + 1;

const ::google::protobuf::EnumDescriptor* DrbIoData_RcbControlRegisterBits_descriptor();
inline const ::std::string& DrbIoData_RcbControlRegisterBits_Name(DrbIoData_RcbControlRegisterBits value) {
  return ::google::protobuf::internal::NameOfEnum(
    DrbIoData_RcbControlRegisterBits_descriptor(), value);
}
inline bool DrbIoData_RcbControlRegisterBits_Parse(
    const ::std::string& name, DrbIoData_RcbControlRegisterBits* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DrbIoData_RcbControlRegisterBits>(
    DrbIoData_RcbControlRegisterBits_descriptor(), name, value);
}
enum DrbIoData_RcbStatusRegisterBits {
  DrbIoData_RcbStatusRegisterBits_NOT_USED_4 = 0,
  DrbIoData_RcbStatusRegisterBits_DrbIoData_RcbStatusRegisterBits_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DrbIoData_RcbStatusRegisterBits_DrbIoData_RcbStatusRegisterBits_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DrbIoData_RcbStatusRegisterBits_IsValid(int value);
const DrbIoData_RcbStatusRegisterBits DrbIoData_RcbStatusRegisterBits_RcbStatusRegisterBits_MIN = DrbIoData_RcbStatusRegisterBits_NOT_USED_4;
const DrbIoData_RcbStatusRegisterBits DrbIoData_RcbStatusRegisterBits_RcbStatusRegisterBits_MAX = DrbIoData_RcbStatusRegisterBits_NOT_USED_4;
const int DrbIoData_RcbStatusRegisterBits_RcbStatusRegisterBits_ARRAYSIZE = DrbIoData_RcbStatusRegisterBits_RcbStatusRegisterBits_MAX + 1;

const ::google::protobuf::EnumDescriptor* DrbIoData_RcbStatusRegisterBits_descriptor();
inline const ::std::string& DrbIoData_RcbStatusRegisterBits_Name(DrbIoData_RcbStatusRegisterBits value) {
  return ::google::protobuf::internal::NameOfEnum(
    DrbIoData_RcbStatusRegisterBits_descriptor(), value);
}
inline bool DrbIoData_RcbStatusRegisterBits_Parse(
    const ::std::string& name, DrbIoData_RcbStatusRegisterBits* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DrbIoData_RcbStatusRegisterBits>(
    DrbIoData_RcbStatusRegisterBits_descriptor(), name, value);
}
enum DrbIoData_RcbFaultRegisterBits {
  DrbIoData_RcbFaultRegisterBits_NOT_USED_5 = 0,
  DrbIoData_RcbFaultRegisterBits_DrbIoData_RcbFaultRegisterBits_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DrbIoData_RcbFaultRegisterBits_DrbIoData_RcbFaultRegisterBits_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DrbIoData_RcbFaultRegisterBits_IsValid(int value);
const DrbIoData_RcbFaultRegisterBits DrbIoData_RcbFaultRegisterBits_RcbFaultRegisterBits_MIN = DrbIoData_RcbFaultRegisterBits_NOT_USED_5;
const DrbIoData_RcbFaultRegisterBits DrbIoData_RcbFaultRegisterBits_RcbFaultRegisterBits_MAX = DrbIoData_RcbFaultRegisterBits_NOT_USED_5;
const int DrbIoData_RcbFaultRegisterBits_RcbFaultRegisterBits_ARRAYSIZE = DrbIoData_RcbFaultRegisterBits_RcbFaultRegisterBits_MAX + 1;

const ::google::protobuf::EnumDescriptor* DrbIoData_RcbFaultRegisterBits_descriptor();
inline const ::std::string& DrbIoData_RcbFaultRegisterBits_Name(DrbIoData_RcbFaultRegisterBits value) {
  return ::google::protobuf::internal::NameOfEnum(
    DrbIoData_RcbFaultRegisterBits_descriptor(), value);
}
inline bool DrbIoData_RcbFaultRegisterBits_Parse(
    const ::std::string& name, DrbIoData_RcbFaultRegisterBits* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DrbIoData_RcbFaultRegisterBits>(
    DrbIoData_RcbFaultRegisterBits_descriptor(), name, value);
}
enum DrbIoData_RcbTriggerOptoStatusBits {
  DrbIoData_RcbTriggerOptoStatusBits_NOT_USED_6 = 0,
  DrbIoData_RcbTriggerOptoStatusBits_OPTO_1_0_DEGREES = 1,
  DrbIoData_RcbTriggerOptoStatusBits_OPTO_2_90_DEGREES = 2,
  DrbIoData_RcbTriggerOptoStatusBits_OPTO_3_180_DEGREES = 4,
  DrbIoData_RcbTriggerOptoStatusBits_OPTO_4_270_DEGREES = 8,
  DrbIoData_RcbTriggerOptoStatusBits_OPTO_1_0_DEGREES_RAW = 16,
  DrbIoData_RcbTriggerOptoStatusBits_OPTO_2_90_DEGREES_RAW = 32,
  DrbIoData_RcbTriggerOptoStatusBits_OPTO_3_180_DEGREES_RAW = 64,
  DrbIoData_RcbTriggerOptoStatusBits_OPTO_4_270_DEGREES_RAW = 128,
  DrbIoData_RcbTriggerOptoStatusBits_DIO_0_LATCHED = 256,
  DrbIoData_RcbTriggerOptoStatusBits_DIO_1_LATCHED = 512,
  DrbIoData_RcbTriggerOptoStatusBits_DIO_2_LATCHED = 1024,
  DrbIoData_RcbTriggerOptoStatusBits_DIO_0 = 4096,
  DrbIoData_RcbTriggerOptoStatusBits_DIO_1 = 8192,
  DrbIoData_RcbTriggerOptoStatusBits_DIO_2 = 16384,
  DrbIoData_RcbTriggerOptoStatusBits_DrbIoData_RcbTriggerOptoStatusBits_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DrbIoData_RcbTriggerOptoStatusBits_DrbIoData_RcbTriggerOptoStatusBits_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DrbIoData_RcbTriggerOptoStatusBits_IsValid(int value);
const DrbIoData_RcbTriggerOptoStatusBits DrbIoData_RcbTriggerOptoStatusBits_RcbTriggerOptoStatusBits_MIN = DrbIoData_RcbTriggerOptoStatusBits_NOT_USED_6;
const DrbIoData_RcbTriggerOptoStatusBits DrbIoData_RcbTriggerOptoStatusBits_RcbTriggerOptoStatusBits_MAX = DrbIoData_RcbTriggerOptoStatusBits_DIO_2;
const int DrbIoData_RcbTriggerOptoStatusBits_RcbTriggerOptoStatusBits_ARRAYSIZE = DrbIoData_RcbTriggerOptoStatusBits_RcbTriggerOptoStatusBits_MAX + 1;

const ::google::protobuf::EnumDescriptor* DrbIoData_RcbTriggerOptoStatusBits_descriptor();
inline const ::std::string& DrbIoData_RcbTriggerOptoStatusBits_Name(DrbIoData_RcbTriggerOptoStatusBits value) {
  return ::google::protobuf::internal::NameOfEnum(
    DrbIoData_RcbTriggerOptoStatusBits_descriptor(), value);
}
inline bool DrbIoData_RcbTriggerOptoStatusBits_Parse(
    const ::std::string& name, DrbIoData_RcbTriggerOptoStatusBits* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DrbIoData_RcbTriggerOptoStatusBits>(
    DrbIoData_RcbTriggerOptoStatusBits_descriptor(), name, value);
}
enum DrbCommMsg_CmdId {
  DrbCommMsg_CmdId_BOGUS_PLACE_HOLDER = 0,
  DrbCommMsg_CmdId_RESET_DRB_VIEW_PROCESSOR_FAULT = 1,
  DrbCommMsg_CmdId_FORCE_RESET_DRB_VIEW_PROCESSOR_FAULT = 2,
  DrbCommMsg_CmdId_RESET_CONVEYOR_POSITION = 3,
  DrbCommMsg_CmdId_RESET_BAD_VIEW_COUNT = 4,
  DrbCommMsg_CmdId_DrbCommMsg_CmdId_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DrbCommMsg_CmdId_DrbCommMsg_CmdId_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DrbCommMsg_CmdId_IsValid(int value);
const DrbCommMsg_CmdId DrbCommMsg_CmdId_CmdId_MIN = DrbCommMsg_CmdId_BOGUS_PLACE_HOLDER;
const DrbCommMsg_CmdId DrbCommMsg_CmdId_CmdId_MAX = DrbCommMsg_CmdId_RESET_BAD_VIEW_COUNT;
const int DrbCommMsg_CmdId_CmdId_ARRAYSIZE = DrbCommMsg_CmdId_CmdId_MAX + 1;

const ::google::protobuf::EnumDescriptor* DrbCommMsg_CmdId_descriptor();
inline const ::std::string& DrbCommMsg_CmdId_Name(DrbCommMsg_CmdId value) {
  return ::google::protobuf::internal::NameOfEnum(
    DrbCommMsg_CmdId_descriptor(), value);
}
inline bool DrbCommMsg_CmdId_Parse(
    const ::std::string& name, DrbCommMsg_CmdId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DrbCommMsg_CmdId>(
    DrbCommMsg_CmdId_descriptor(), name, value);
}
enum DRB_FAULT_CODE {
  DRB_FAULT_NOT_USED = 0,
  DRB_UNKNOWN_FAULT = 1,
  DRB_VIEW_MISSING_FAULT = 2,
  DRB_RUNNING_OUT_OF_BUFFER_POOL_FAULT = 4,
  DRB_VIEW_DATA_HANDLING_FAILURE_FAULT = 8,
  DRB_FAULT_CODE_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DRB_FAULT_CODE_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DRB_FAULT_CODE_IsValid(int value);
const DRB_FAULT_CODE DRB_FAULT_CODE_MIN = DRB_FAULT_NOT_USED;
const DRB_FAULT_CODE DRB_FAULT_CODE_MAX = DRB_VIEW_DATA_HANDLING_FAILURE_FAULT;
const int DRB_FAULT_CODE_ARRAYSIZE = DRB_FAULT_CODE_MAX + 1;

const ::google::protobuf::EnumDescriptor* DRB_FAULT_CODE_descriptor();
inline const ::std::string& DRB_FAULT_CODE_Name(DRB_FAULT_CODE value) {
  return ::google::protobuf::internal::NameOfEnum(
    DRB_FAULT_CODE_descriptor(), value);
}
inline bool DRB_FAULT_CODE_Parse(
    const ::std::string& name, DRB_FAULT_CODE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DRB_FAULT_CODE>(
    DRB_FAULT_CODE_descriptor(), name, value);
}
// ===================================================================

class DrbCommStatusMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:analogic.ancp00.DrbCommStatusMsg) */ {
 public:
  DrbCommStatusMsg();
  virtual ~DrbCommStatusMsg();

  DrbCommStatusMsg(const DrbCommStatusMsg& from);

  inline DrbCommStatusMsg& operator=(const DrbCommStatusMsg& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DrbCommStatusMsg& default_instance();

  void Swap(DrbCommStatusMsg* other);

  // implements Message ----------------------------------------------

  inline DrbCommStatusMsg* New() const { return New(NULL); }

  DrbCommStatusMsg* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DrbCommStatusMsg& from);
  void MergeFrom(const DrbCommStatusMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DrbCommStatusMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef DrbCommStatusMsg_DRB_STATUS DRB_STATUS;
  static const DRB_STATUS OFFLINE =
    DrbCommStatusMsg_DRB_STATUS_OFFLINE;
  static const DRB_STATUS PAUSED =
    DrbCommStatusMsg_DRB_STATUS_PAUSED;
  static const DRB_STATUS RUNNING =
    DrbCommStatusMsg_DRB_STATUS_RUNNING;
  static inline bool DRB_STATUS_IsValid(int value) {
    return DrbCommStatusMsg_DRB_STATUS_IsValid(value);
  }
  static const DRB_STATUS DRB_STATUS_MIN =
    DrbCommStatusMsg_DRB_STATUS_DRB_STATUS_MIN;
  static const DRB_STATUS DRB_STATUS_MAX =
    DrbCommStatusMsg_DRB_STATUS_DRB_STATUS_MAX;
  static const int DRB_STATUS_ARRAYSIZE =
    DrbCommStatusMsg_DRB_STATUS_DRB_STATUS_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DRB_STATUS_descriptor() {
    return DrbCommStatusMsg_DRB_STATUS_descriptor();
  }
  static inline const ::std::string& DRB_STATUS_Name(DRB_STATUS value) {
    return DrbCommStatusMsg_DRB_STATUS_Name(value);
  }
  static inline bool DRB_STATUS_Parse(const ::std::string& name,
      DRB_STATUS* value) {
    return DrbCommStatusMsg_DRB_STATUS_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .analogic.ancp00.DrbCommStatusMsg.DRB_STATUS state = 1;
  void clear_state();
  static const int kStateFieldNumber = 1;
  ::analogic::ancp00::DrbCommStatusMsg_DRB_STATUS state() const;
  void set_state(::analogic::ancp00::DrbCommStatusMsg_DRB_STATUS value);

  // @@protoc_insertion_point(class_scope:analogic.ancp00.DrbCommStatusMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  int state_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_proto_2fDrbComm_2eproto();
  friend void protobuf_AssignDesc_proto_2fDrbComm_2eproto();
  friend void protobuf_ShutdownFile_proto_2fDrbComm_2eproto();

  void InitAsDefaultInstance();
  static DrbCommStatusMsg* default_instance_;
};
// -------------------------------------------------------------------

class DrbIoData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:analogic.ancp00.DrbIoData) */ {
 public:
  DrbIoData();
  virtual ~DrbIoData();

  DrbIoData(const DrbIoData& from);

  inline DrbIoData& operator=(const DrbIoData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DrbIoData& default_instance();

  void Swap(DrbIoData* other);

  // implements Message ----------------------------------------------

  inline DrbIoData* New() const { return New(NULL); }

  DrbIoData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DrbIoData& from);
  void MergeFrom(const DrbIoData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DrbIoData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef DrbIoData_FaultStatusBits FaultStatusBits;
  static const FaultStatusBits NOT_USED_0 =
    DrbIoData_FaultStatusBits_NOT_USED_0;
  static const FaultStatusBits REGULATION_FAULT =
    DrbIoData_FaultStatusBits_REGULATION_FAULT;
  static const FaultStatusBits INTERLOCK_OPEN_FAULT =
    DrbIoData_FaultStatusBits_INTERLOCK_OPEN_FAULT;
  static const FaultStatusBits CATHODE_OVER_KV_FAULT =
    DrbIoData_FaultStatusBits_CATHODE_OVER_KV_FAULT;
  static const FaultStatusBits ANODE_OVER_KV_FAULT =
    DrbIoData_FaultStatusBits_ANODE_OVER_KV_FAULT;
  static const FaultStatusBits OVERTEMP_FAULT =
    DrbIoData_FaultStatusBits_OVERTEMP_FAULT;
  static const FaultStatusBits ARC_FAULT =
    DrbIoData_FaultStatusBits_ARC_FAULT;
  static const FaultStatusBits OVER_CURRENT_FAULT =
    DrbIoData_FaultStatusBits_OVER_CURRENT_FAULT;
  static const FaultStatusBits POWER_LIMIT_FAULT =
    DrbIoData_FaultStatusBits_POWER_LIMIT_FAULT;
  static const FaultStatusBits OVER_VOLTAGE_FAULT =
    DrbIoData_FaultStatusBits_OVER_VOLTAGE_FAULT;
  static const FaultStatusBits DUTY_CYCLE_MODE =
    DrbIoData_FaultStatusBits_DUTY_CYCLE_MODE;
  static const FaultStatusBits XRAY_MINIMIZATION =
    DrbIoData_FaultStatusBits_XRAY_MINIMIZATION;
  static const FaultStatusBits XRAY_SEASONING_IN_PROGRESS =
    DrbIoData_FaultStatusBits_XRAY_SEASONING_IN_PROGRESS;
  static const FaultStatusBits WATCHDOG_STATUS =
    DrbIoData_FaultStatusBits_WATCHDOG_STATUS;
  static const FaultStatusBits XRAY_ENABLE =
    DrbIoData_FaultStatusBits_XRAY_ENABLE;
  static const FaultStatusBits HV_STATUS_XRAY_ON =
    DrbIoData_FaultStatusBits_HV_STATUS_XRAY_ON;
  static const FaultStatusBits XRAY_FAULT_MASK =
    DrbIoData_FaultStatusBits_XRAY_FAULT_MASK;
  static inline bool FaultStatusBits_IsValid(int value) {
    return DrbIoData_FaultStatusBits_IsValid(value);
  }
  static const FaultStatusBits FaultStatusBits_MIN =
    DrbIoData_FaultStatusBits_FaultStatusBits_MIN;
  static const FaultStatusBits FaultStatusBits_MAX =
    DrbIoData_FaultStatusBits_FaultStatusBits_MAX;
  static const int FaultStatusBits_ARRAYSIZE =
    DrbIoData_FaultStatusBits_FaultStatusBits_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FaultStatusBits_descriptor() {
    return DrbIoData_FaultStatusBits_descriptor();
  }
  static inline const ::std::string& FaultStatusBits_Name(FaultStatusBits value) {
    return DrbIoData_FaultStatusBits_Name(value);
  }
  static inline bool FaultStatusBits_Parse(const ::std::string& name,
      FaultStatusBits* value) {
    return DrbIoData_FaultStatusBits_Parse(name, value);
  }

  typedef DrbIoData_SourceDiscreteBits SourceDiscreteBits;
  static const SourceDiscreteBits NOT_USED_1 =
    DrbIoData_SourceDiscreteBits_NOT_USED_1;
  static const SourceDiscreteBits XRAY_INTERLOCK =
    DrbIoData_SourceDiscreteBits_XRAY_INTERLOCK;
  static const SourceDiscreteBits XRAY_ON =
    DrbIoData_SourceDiscreteBits_XRAY_ON;
  static inline bool SourceDiscreteBits_IsValid(int value) {
    return DrbIoData_SourceDiscreteBits_IsValid(value);
  }
  static const SourceDiscreteBits SourceDiscreteBits_MIN =
    DrbIoData_SourceDiscreteBits_SourceDiscreteBits_MIN;
  static const SourceDiscreteBits SourceDiscreteBits_MAX =
    DrbIoData_SourceDiscreteBits_SourceDiscreteBits_MAX;
  static const int SourceDiscreteBits_ARRAYSIZE =
    DrbIoData_SourceDiscreteBits_SourceDiscreteBits_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SourceDiscreteBits_descriptor() {
    return DrbIoData_SourceDiscreteBits_descriptor();
  }
  static inline const ::std::string& SourceDiscreteBits_Name(SourceDiscreteBits value) {
    return DrbIoData_SourceDiscreteBits_Name(value);
  }
  static inline bool SourceDiscreteBits_Parse(const ::std::string& name,
      SourceDiscreteBits* value) {
    return DrbIoData_SourceDiscreteBits_Parse(name, value);
  }

  typedef DrbIoData_RcbControlRegisterBits RcbControlRegisterBits;
  static const RcbControlRegisterBits NOT_USED_3 =
    DrbIoData_RcbControlRegisterBits_NOT_USED_3;
  static inline bool RcbControlRegisterBits_IsValid(int value) {
    return DrbIoData_RcbControlRegisterBits_IsValid(value);
  }
  static const RcbControlRegisterBits RcbControlRegisterBits_MIN =
    DrbIoData_RcbControlRegisterBits_RcbControlRegisterBits_MIN;
  static const RcbControlRegisterBits RcbControlRegisterBits_MAX =
    DrbIoData_RcbControlRegisterBits_RcbControlRegisterBits_MAX;
  static const int RcbControlRegisterBits_ARRAYSIZE =
    DrbIoData_RcbControlRegisterBits_RcbControlRegisterBits_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RcbControlRegisterBits_descriptor() {
    return DrbIoData_RcbControlRegisterBits_descriptor();
  }
  static inline const ::std::string& RcbControlRegisterBits_Name(RcbControlRegisterBits value) {
    return DrbIoData_RcbControlRegisterBits_Name(value);
  }
  static inline bool RcbControlRegisterBits_Parse(const ::std::string& name,
      RcbControlRegisterBits* value) {
    return DrbIoData_RcbControlRegisterBits_Parse(name, value);
  }

  typedef DrbIoData_RcbStatusRegisterBits RcbStatusRegisterBits;
  static const RcbStatusRegisterBits NOT_USED_4 =
    DrbIoData_RcbStatusRegisterBits_NOT_USED_4;
  static inline bool RcbStatusRegisterBits_IsValid(int value) {
    return DrbIoData_RcbStatusRegisterBits_IsValid(value);
  }
  static const RcbStatusRegisterBits RcbStatusRegisterBits_MIN =
    DrbIoData_RcbStatusRegisterBits_RcbStatusRegisterBits_MIN;
  static const RcbStatusRegisterBits RcbStatusRegisterBits_MAX =
    DrbIoData_RcbStatusRegisterBits_RcbStatusRegisterBits_MAX;
  static const int RcbStatusRegisterBits_ARRAYSIZE =
    DrbIoData_RcbStatusRegisterBits_RcbStatusRegisterBits_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RcbStatusRegisterBits_descriptor() {
    return DrbIoData_RcbStatusRegisterBits_descriptor();
  }
  static inline const ::std::string& RcbStatusRegisterBits_Name(RcbStatusRegisterBits value) {
    return DrbIoData_RcbStatusRegisterBits_Name(value);
  }
  static inline bool RcbStatusRegisterBits_Parse(const ::std::string& name,
      RcbStatusRegisterBits* value) {
    return DrbIoData_RcbStatusRegisterBits_Parse(name, value);
  }

  typedef DrbIoData_RcbFaultRegisterBits RcbFaultRegisterBits;
  static const RcbFaultRegisterBits NOT_USED_5 =
    DrbIoData_RcbFaultRegisterBits_NOT_USED_5;
  static inline bool RcbFaultRegisterBits_IsValid(int value) {
    return DrbIoData_RcbFaultRegisterBits_IsValid(value);
  }
  static const RcbFaultRegisterBits RcbFaultRegisterBits_MIN =
    DrbIoData_RcbFaultRegisterBits_RcbFaultRegisterBits_MIN;
  static const RcbFaultRegisterBits RcbFaultRegisterBits_MAX =
    DrbIoData_RcbFaultRegisterBits_RcbFaultRegisterBits_MAX;
  static const int RcbFaultRegisterBits_ARRAYSIZE =
    DrbIoData_RcbFaultRegisterBits_RcbFaultRegisterBits_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RcbFaultRegisterBits_descriptor() {
    return DrbIoData_RcbFaultRegisterBits_descriptor();
  }
  static inline const ::std::string& RcbFaultRegisterBits_Name(RcbFaultRegisterBits value) {
    return DrbIoData_RcbFaultRegisterBits_Name(value);
  }
  static inline bool RcbFaultRegisterBits_Parse(const ::std::string& name,
      RcbFaultRegisterBits* value) {
    return DrbIoData_RcbFaultRegisterBits_Parse(name, value);
  }

  typedef DrbIoData_RcbTriggerOptoStatusBits RcbTriggerOptoStatusBits;
  static const RcbTriggerOptoStatusBits NOT_USED_6 =
    DrbIoData_RcbTriggerOptoStatusBits_NOT_USED_6;
  static const RcbTriggerOptoStatusBits OPTO_1_0_DEGREES =
    DrbIoData_RcbTriggerOptoStatusBits_OPTO_1_0_DEGREES;
  static const RcbTriggerOptoStatusBits OPTO_2_90_DEGREES =
    DrbIoData_RcbTriggerOptoStatusBits_OPTO_2_90_DEGREES;
  static const RcbTriggerOptoStatusBits OPTO_3_180_DEGREES =
    DrbIoData_RcbTriggerOptoStatusBits_OPTO_3_180_DEGREES;
  static const RcbTriggerOptoStatusBits OPTO_4_270_DEGREES =
    DrbIoData_RcbTriggerOptoStatusBits_OPTO_4_270_DEGREES;
  static const RcbTriggerOptoStatusBits OPTO_1_0_DEGREES_RAW =
    DrbIoData_RcbTriggerOptoStatusBits_OPTO_1_0_DEGREES_RAW;
  static const RcbTriggerOptoStatusBits OPTO_2_90_DEGREES_RAW =
    DrbIoData_RcbTriggerOptoStatusBits_OPTO_2_90_DEGREES_RAW;
  static const RcbTriggerOptoStatusBits OPTO_3_180_DEGREES_RAW =
    DrbIoData_RcbTriggerOptoStatusBits_OPTO_3_180_DEGREES_RAW;
  static const RcbTriggerOptoStatusBits OPTO_4_270_DEGREES_RAW =
    DrbIoData_RcbTriggerOptoStatusBits_OPTO_4_270_DEGREES_RAW;
  static const RcbTriggerOptoStatusBits DIO_0_LATCHED =
    DrbIoData_RcbTriggerOptoStatusBits_DIO_0_LATCHED;
  static const RcbTriggerOptoStatusBits DIO_1_LATCHED =
    DrbIoData_RcbTriggerOptoStatusBits_DIO_1_LATCHED;
  static const RcbTriggerOptoStatusBits DIO_2_LATCHED =
    DrbIoData_RcbTriggerOptoStatusBits_DIO_2_LATCHED;
  static const RcbTriggerOptoStatusBits DIO_0 =
    DrbIoData_RcbTriggerOptoStatusBits_DIO_0;
  static const RcbTriggerOptoStatusBits DIO_1 =
    DrbIoData_RcbTriggerOptoStatusBits_DIO_1;
  static const RcbTriggerOptoStatusBits DIO_2 =
    DrbIoData_RcbTriggerOptoStatusBits_DIO_2;
  static inline bool RcbTriggerOptoStatusBits_IsValid(int value) {
    return DrbIoData_RcbTriggerOptoStatusBits_IsValid(value);
  }
  static const RcbTriggerOptoStatusBits RcbTriggerOptoStatusBits_MIN =
    DrbIoData_RcbTriggerOptoStatusBits_RcbTriggerOptoStatusBits_MIN;
  static const RcbTriggerOptoStatusBits RcbTriggerOptoStatusBits_MAX =
    DrbIoData_RcbTriggerOptoStatusBits_RcbTriggerOptoStatusBits_MAX;
  static const int RcbTriggerOptoStatusBits_ARRAYSIZE =
    DrbIoData_RcbTriggerOptoStatusBits_RcbTriggerOptoStatusBits_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RcbTriggerOptoStatusBits_descriptor() {
    return DrbIoData_RcbTriggerOptoStatusBits_descriptor();
  }
  static inline const ::std::string& RcbTriggerOptoStatusBits_Name(RcbTriggerOptoStatusBits value) {
    return DrbIoData_RcbTriggerOptoStatusBits_Name(value);
  }
  static inline bool RcbTriggerOptoStatusBits_Parse(const ::std::string& name,
      RcbTriggerOptoStatusBits* value) {
    return DrbIoData_RcbTriggerOptoStatusBits_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string xray_source_serial_num = 1;
  void clear_xray_source_serial_num();
  static const int kXraySourceSerialNumFieldNumber = 1;
  const ::std::string& xray_source_serial_num() const;
  void set_xray_source_serial_num(const ::std::string& value);
  void set_xray_source_serial_num(const char* value);
  void set_xray_source_serial_num(const char* value, size_t size);
  ::std::string* mutable_xray_source_serial_num();
  ::std::string* release_xray_source_serial_num();
  void set_allocated_xray_source_serial_num(::std::string* xray_source_serial_num);

  // optional string xray_source_model_num = 2;
  void clear_xray_source_model_num();
  static const int kXraySourceModelNumFieldNumber = 2;
  const ::std::string& xray_source_model_num() const;
  void set_xray_source_model_num(const ::std::string& value);
  void set_xray_source_model_num(const char* value);
  void set_xray_source_model_num(const char* value, size_t size);
  ::std::string* mutable_xray_source_model_num();
  ::std::string* release_xray_source_model_num();
  void set_allocated_xray_source_model_num(::std::string* xray_source_model_num);

  // optional string rcb_firmware_version = 3;
  void clear_rcb_firmware_version();
  static const int kRcbFirmwareVersionFieldNumber = 3;
  const ::std::string& rcb_firmware_version() const;
  void set_rcb_firmware_version(const ::std::string& value);
  void set_rcb_firmware_version(const char* value);
  void set_rcb_firmware_version(const char* value, size_t size);
  ::std::string* mutable_rcb_firmware_version();
  ::std::string* release_rcb_firmware_version();
  void set_allocated_rcb_firmware_version(::std::string* rcb_firmware_version);

  // optional string dcb_1_fw_revision = 4;
  void clear_dcb_1_fw_revision();
  static const int kDcb1FwRevisionFieldNumber = 4;
  const ::std::string& dcb_1_fw_revision() const;
  void set_dcb_1_fw_revision(const ::std::string& value);
  void set_dcb_1_fw_revision(const char* value);
  void set_dcb_1_fw_revision(const char* value, size_t size);
  ::std::string* mutable_dcb_1_fw_revision();
  ::std::string* release_dcb_1_fw_revision();
  void set_allocated_dcb_1_fw_revision(::std::string* dcb_1_fw_revision);

  // optional string dcb_2_fw_revision = 5;
  void clear_dcb_2_fw_revision();
  static const int kDcb2FwRevisionFieldNumber = 5;
  const ::std::string& dcb_2_fw_revision() const;
  void set_dcb_2_fw_revision(const ::std::string& value);
  void set_dcb_2_fw_revision(const char* value);
  void set_dcb_2_fw_revision(const char* value, size_t size);
  ::std::string* mutable_dcb_2_fw_revision();
  ::std::string* release_dcb_2_fw_revision();
  void set_allocated_dcb_2_fw_revision(::std::string* dcb_2_fw_revision);

  // optional string dcb_3_fw_revision = 6;
  void clear_dcb_3_fw_revision();
  static const int kDcb3FwRevisionFieldNumber = 6;
  const ::std::string& dcb_3_fw_revision() const;
  void set_dcb_3_fw_revision(const ::std::string& value);
  void set_dcb_3_fw_revision(const char* value);
  void set_dcb_3_fw_revision(const char* value, size_t size);
  ::std::string* mutable_dcb_3_fw_revision();
  ::std::string* release_dcb_3_fw_revision();
  void set_allocated_dcb_3_fw_revision(::std::string* dcb_3_fw_revision);

  // optional string dcb_4_fw_revision = 7;
  void clear_dcb_4_fw_revision();
  static const int kDcb4FwRevisionFieldNumber = 7;
  const ::std::string& dcb_4_fw_revision() const;
  void set_dcb_4_fw_revision(const ::std::string& value);
  void set_dcb_4_fw_revision(const char* value);
  void set_dcb_4_fw_revision(const char* value, size_t size);
  ::std::string* mutable_dcb_4_fw_revision();
  ::std::string* release_dcb_4_fw_revision();
  void set_allocated_dcb_4_fw_revision(::std::string* dcb_4_fw_revision);

  // optional string dcb_5_fw_revision = 8;
  void clear_dcb_5_fw_revision();
  static const int kDcb5FwRevisionFieldNumber = 8;
  const ::std::string& dcb_5_fw_revision() const;
  void set_dcb_5_fw_revision(const ::std::string& value);
  void set_dcb_5_fw_revision(const char* value);
  void set_dcb_5_fw_revision(const char* value, size_t size);
  ::std::string* mutable_dcb_5_fw_revision();
  ::std::string* release_dcb_5_fw_revision();
  void set_allocated_dcb_5_fw_revision(::std::string* dcb_5_fw_revision);

  // optional string dcb_xdmm_fw_revision_not_used = 9;
  void clear_dcb_xdmm_fw_revision_not_used();
  static const int kDcbXdmmFwRevisionNotUsedFieldNumber = 9;
  const ::std::string& dcb_xdmm_fw_revision_not_used() const;
  void set_dcb_xdmm_fw_revision_not_used(const ::std::string& value);
  void set_dcb_xdmm_fw_revision_not_used(const char* value);
  void set_dcb_xdmm_fw_revision_not_used(const char* value, size_t size);
  ::std::string* mutable_dcb_xdmm_fw_revision_not_used();
  ::std::string* release_dcb_xdmm_fw_revision_not_used();
  void set_allocated_dcb_xdmm_fw_revision_not_used(::std::string* dcb_xdmm_fw_revision_not_used);

  // optional string xray_seasoning_time_remaining_str = 10;
  void clear_xray_seasoning_time_remaining_str();
  static const int kXraySeasoningTimeRemainingStrFieldNumber = 10;
  const ::std::string& xray_seasoning_time_remaining_str() const;
  void set_xray_seasoning_time_remaining_str(const ::std::string& value);
  void set_xray_seasoning_time_remaining_str(const char* value);
  void set_xray_seasoning_time_remaining_str(const char* value, size_t size);
  ::std::string* mutable_xray_seasoning_time_remaining_str();
  ::std::string* release_xray_seasoning_time_remaining_str();
  void set_allocated_xray_seasoning_time_remaining_str(::std::string* xray_seasoning_time_remaining_str);

  // optional float xray_voltage_setpoint_kv = 20;
  void clear_xray_voltage_setpoint_kv();
  static const int kXrayVoltageSetpointKvFieldNumber = 20;
  float xray_voltage_setpoint_kv() const;
  void set_xray_voltage_setpoint_kv(float value);

  // optional float xray_current_setpoint_ma = 21;
  void clear_xray_current_setpoint_ma();
  static const int kXrayCurrentSetpointMaFieldNumber = 21;
  float xray_current_setpoint_ma() const;
  void set_xray_current_setpoint_ma(float value);

  // optional float xray_voltage_kv = 22;
  void clear_xray_voltage_kv();
  static const int kXrayVoltageKvFieldNumber = 22;
  float xray_voltage_kv() const;
  void set_xray_voltage_kv(float value);

  // optional float xray_current_ma = 23;
  void clear_xray_current_ma();
  static const int kXrayCurrentMaFieldNumber = 23;
  float xray_current_ma() const;
  void set_xray_current_ma(float value);

  // optional float xray_source_temp = 24;
  void clear_xray_source_temp();
  static const int kXraySourceTempFieldNumber = 24;
  float xray_source_temp() const;
  void set_xray_source_temp(float value);

  // optional float xray_source_filament_current = 25;
  void clear_xray_source_filament_current();
  static const int kXraySourceFilamentCurrentFieldNumber = 25;
  float xray_source_filament_current() const;
  void set_xray_source_filament_current(float value);

  // optional float rcb_gantry_rpm = 26;
  void clear_rcb_gantry_rpm();
  static const int kRcbGantryRpmFieldNumber = 26;
  float rcb_gantry_rpm() const;
  void set_rcb_gantry_rpm(float value);

  // optional float rcb_gantry_angle_degrees = 27;
  void clear_rcb_gantry_angle_degrees();
  static const int kRcbGantryAngleDegreesFieldNumber = 27;
  float rcb_gantry_angle_degrees() const;
  void set_rcb_gantry_angle_degrees(float value);

  // optional float rcb_temp_sensor_1 = 28;
  void clear_rcb_temp_sensor_1();
  static const int kRcbTempSensor1FieldNumber = 28;
  float rcb_temp_sensor_1() const;
  void set_rcb_temp_sensor_1(float value);

  // optional float rcb_temp_sensor_2 = 29;
  void clear_rcb_temp_sensor_2();
  static const int kRcbTempSensor2FieldNumber = 29;
  float rcb_temp_sensor_2() const;
  void set_rcb_temp_sensor_2(float value);

  // optional float dcb_1_ambient_temp = 30;
  void clear_dcb_1_ambient_temp();
  static const int kDcb1AmbientTempFieldNumber = 30;
  float dcb_1_ambient_temp() const;
  void set_dcb_1_ambient_temp(float value);

  // optional float dcb_2_ambient_temp = 31;
  void clear_dcb_2_ambient_temp();
  static const int kDcb2AmbientTempFieldNumber = 31;
  float dcb_2_ambient_temp() const;
  void set_dcb_2_ambient_temp(float value);

  // optional float dcb_3_ambient_temp = 32;
  void clear_dcb_3_ambient_temp();
  static const int kDcb3AmbientTempFieldNumber = 32;
  float dcb_3_ambient_temp() const;
  void set_dcb_3_ambient_temp(float value);

  // optional float dcb_4_ambient_temp = 33;
  void clear_dcb_4_ambient_temp();
  static const int kDcb4AmbientTempFieldNumber = 33;
  float dcb_4_ambient_temp() const;
  void set_dcb_4_ambient_temp(float value);

  // optional float dcb_5_ambient_temp = 34;
  void clear_dcb_5_ambient_temp();
  static const int kDcb5AmbientTempFieldNumber = 34;
  float dcb_5_ambient_temp() const;
  void set_dcb_5_ambient_temp(float value);

  // optional float conveyor_speed_cm_sec = 35;
  void clear_conveyor_speed_cm_sec();
  static const int kConveyorSpeedCmSecFieldNumber = 35;
  float conveyor_speed_cm_sec() const;
  void set_conveyor_speed_cm_sec(float value);

  // optional double current_conveyor_pos_cm = 36;
  void clear_current_conveyor_pos_cm();
  static const int kCurrentConveyorPosCmFieldNumber = 36;
  double current_conveyor_pos_cm() const;
  void set_current_conveyor_pos_cm(double value);

  // optional double current_gantry_rot_count = 37;
  void clear_current_gantry_rot_count();
  static const int kCurrentGantryRotCountFieldNumber = 37;
  double current_gantry_rot_count() const;
  void set_current_gantry_rot_count(double value);

  // optional fixed32 xray_fault_status = 50;
  void clear_xray_fault_status();
  static const int kXrayFaultStatusFieldNumber = 50;
  ::google::protobuf::uint32 xray_fault_status() const;
  void set_xray_fault_status(::google::protobuf::uint32 value);

  // optional fixed32 xray_source_discrete_status = 51;
  void clear_xray_source_discrete_status();
  static const int kXraySourceDiscreteStatusFieldNumber = 51;
  ::google::protobuf::uint32 xray_source_discrete_status() const;
  void set_xray_source_discrete_status(::google::protobuf::uint32 value);

  // optional uint32 xray_seasoning_step = 52;
  void clear_xray_seasoning_step();
  static const int kXraySeasoningStepFieldNumber = 52;
  ::google::protobuf::uint32 xray_seasoning_step() const;
  void set_xray_seasoning_step(::google::protobuf::uint32 value);

  // optional uint32 xray_seasoning_time_remaining = 53;
  void clear_xray_seasoning_time_remaining();
  static const int kXraySeasoningTimeRemainingFieldNumber = 53;
  ::google::protobuf::uint32 xray_seasoning_time_remaining() const;
  void set_xray_seasoning_time_remaining(::google::protobuf::uint32 value);

  // optional fixed32 rcb_control_register = 54;
  void clear_rcb_control_register();
  static const int kRcbControlRegisterFieldNumber = 54;
  ::google::protobuf::uint32 rcb_control_register() const;
  void set_rcb_control_register(::google::protobuf::uint32 value);

  // optional fixed32 rcb_status_register = 55;
  void clear_rcb_status_register();
  static const int kRcbStatusRegisterFieldNumber = 55;
  ::google::protobuf::uint32 rcb_status_register() const;
  void set_rcb_status_register(::google::protobuf::uint32 value);

  // optional fixed32 rcb_fault_register = 56;
  void clear_rcb_fault_register();
  static const int kRcbFaultRegisterFieldNumber = 56;
  ::google::protobuf::uint32 rcb_fault_register() const;
  void set_rcb_fault_register(::google::protobuf::uint32 value);

  // optional fixed32 rcb_trigger_opto_status = 57;
  void clear_rcb_trigger_opto_status();
  static const int kRcbTriggerOptoStatusFieldNumber = 57;
  ::google::protobuf::uint32 rcb_trigger_opto_status() const;
  void set_rcb_trigger_opto_status(::google::protobuf::uint32 value);

  // optional uint32 rcb_serial_number = 58;
  void clear_rcb_serial_number();
  static const int kRcbSerialNumberFieldNumber = 58;
  ::google::protobuf::uint32 rcb_serial_number() const;
  void set_rcb_serial_number(::google::protobuf::uint32 value);

  // optional fixed32 dcb_1_status_register = 59;
  void clear_dcb_1_status_register();
  static const int kDcb1StatusRegisterFieldNumber = 59;
  ::google::protobuf::uint32 dcb_1_status_register() const;
  void set_dcb_1_status_register(::google::protobuf::uint32 value);

  // optional fixed32 dcb_2_status_register = 60;
  void clear_dcb_2_status_register();
  static const int kDcb2StatusRegisterFieldNumber = 60;
  ::google::protobuf::uint32 dcb_2_status_register() const;
  void set_dcb_2_status_register(::google::protobuf::uint32 value);

  // optional fixed32 dcb_3_status_register = 61;
  void clear_dcb_3_status_register();
  static const int kDcb3StatusRegisterFieldNumber = 61;
  ::google::protobuf::uint32 dcb_3_status_register() const;
  void set_dcb_3_status_register(::google::protobuf::uint32 value);

  // optional fixed32 dcb_4_status_register = 62;
  void clear_dcb_4_status_register();
  static const int kDcb4StatusRegisterFieldNumber = 62;
  ::google::protobuf::uint32 dcb_4_status_register() const;
  void set_dcb_4_status_register(::google::protobuf::uint32 value);

  // optional fixed32 dcb_5_status_register = 63;
  void clear_dcb_5_status_register();
  static const int kDcb5StatusRegisterFieldNumber = 63;
  ::google::protobuf::uint32 dcb_5_status_register() const;
  void set_dcb_5_status_register(::google::protobuf::uint32 value);

  // optional uint32 rcb_gantry_rotation_period_ms = 64;
  void clear_rcb_gantry_rotation_period_ms();
  static const int kRcbGantryRotationPeriodMsFieldNumber = 64;
  ::google::protobuf::uint32 rcb_gantry_rotation_period_ms() const;
  void set_rcb_gantry_rotation_period_ms(::google::protobuf::uint32 value);

  // optional bool xray_regulation_fault = 100;
  void clear_xray_regulation_fault();
  static const int kXrayRegulationFaultFieldNumber = 100;
  bool xray_regulation_fault() const;
  void set_xray_regulation_fault(bool value);

  // optional bool xray_interlock_open = 101;
  void clear_xray_interlock_open();
  static const int kXrayInterlockOpenFieldNumber = 101;
  bool xray_interlock_open() const;
  void set_xray_interlock_open(bool value);

  // optional bool xray_cathode_over_voltage = 102;
  void clear_xray_cathode_over_voltage();
  static const int kXrayCathodeOverVoltageFieldNumber = 102;
  bool xray_cathode_over_voltage() const;
  void set_xray_cathode_over_voltage(bool value);

  // optional bool xray_anode_over_voltage = 103;
  void clear_xray_anode_over_voltage();
  static const int kXrayAnodeOverVoltageFieldNumber = 103;
  bool xray_anode_over_voltage() const;
  void set_xray_anode_over_voltage(bool value);

  // optional bool xray_over_temperature = 104;
  void clear_xray_over_temperature();
  static const int kXrayOverTemperatureFieldNumber = 104;
  bool xray_over_temperature() const;
  void set_xray_over_temperature(bool value);

  // optional bool xray_arc_fault = 105;
  void clear_xray_arc_fault();
  static const int kXrayArcFaultFieldNumber = 105;
  bool xray_arc_fault() const;
  void set_xray_arc_fault(bool value);

  // optional bool xray_over_current = 106;
  void clear_xray_over_current();
  static const int kXrayOverCurrentFieldNumber = 106;
  bool xray_over_current() const;
  void set_xray_over_current(bool value);

  // optional bool xray_power_limit_fault = 107;
  void clear_xray_power_limit_fault();
  static const int kXrayPowerLimitFaultFieldNumber = 107;
  bool xray_power_limit_fault() const;
  void set_xray_power_limit_fault(bool value);

  // optional bool xray_over_voltage = 108;
  void clear_xray_over_voltage();
  static const int kXrayOverVoltageFieldNumber = 108;
  bool xray_over_voltage() const;
  void set_xray_over_voltage(bool value);

  // optional bool duty_cycle_mode = 109;
  void clear_duty_cycle_mode();
  static const int kDutyCycleModeFieldNumber = 109;
  bool duty_cycle_mode() const;
  void set_duty_cycle_mode(bool value);

  // optional bool xray_minimization = 110;
  void clear_xray_minimization();
  static const int kXrayMinimizationFieldNumber = 110;
  bool xray_minimization() const;
  void set_xray_minimization(bool value);

  // optional bool xray_seasoning_in_progress = 111;
  void clear_xray_seasoning_in_progress();
  static const int kXraySeasoningInProgressFieldNumber = 111;
  bool xray_seasoning_in_progress() const;
  void set_xray_seasoning_in_progress(bool value);

  // optional bool xray_watchdog_status = 112;
  void clear_xray_watchdog_status();
  static const int kXrayWatchdogStatusFieldNumber = 112;
  bool xray_watchdog_status() const;
  void set_xray_watchdog_status(bool value);

  // optional bool xray_enable = 113;
  void clear_xray_enable();
  static const int kXrayEnableFieldNumber = 113;
  bool xray_enable() const;
  void set_xray_enable(bool value);

  // optional bool xray_high_voltage_on = 114;
  void clear_xray_high_voltage_on();
  static const int kXrayHighVoltageOnFieldNumber = 114;
  bool xray_high_voltage_on() const;
  void set_xray_high_voltage_on(bool value);

  // optional bool xray_interlock = 115;
  void clear_xray_interlock();
  static const int kXrayInterlockFieldNumber = 115;
  bool xray_interlock() const;
  void set_xray_interlock(bool value);

  // optional bool xray_on = 116;
  void clear_xray_on();
  static const int kXrayOnFieldNumber = 116;
  bool xray_on() const;
  void set_xray_on(bool value);

  // optional bool opto_trigger_1_home = 117;
  void clear_opto_trigger_1_home();
  static const int kOptoTrigger1HomeFieldNumber = 117;
  bool opto_trigger_1_home() const;
  void set_opto_trigger_1_home(bool value);

  // optional bool opto_trigger_2 = 118;
  void clear_opto_trigger_2();
  static const int kOptoTrigger2FieldNumber = 118;
  bool opto_trigger_2() const;
  void set_opto_trigger_2(bool value);

  // optional bool opto_trigger_3 = 119;
  void clear_opto_trigger_3();
  static const int kOptoTrigger3FieldNumber = 119;
  bool opto_trigger_3() const;
  void set_opto_trigger_3(bool value);

  // optional bool opto_trigger_4 = 120;
  void clear_opto_trigger_4();
  static const int kOptoTrigger4FieldNumber = 120;
  bool opto_trigger_4() const;
  void set_opto_trigger_4(bool value);

  // optional bool rectifier_temperature = 121;
  void clear_rectifier_temperature();
  static const int kRectifierTemperatureFieldNumber = 121;
  bool rectifier_temperature() const;
  void set_rectifier_temperature(bool value);

  // optional bool rectifier_under_voltage = 122;
  void clear_rectifier_under_voltage();
  static const int kRectifierUnderVoltageFieldNumber = 122;
  bool rectifier_under_voltage() const;
  void set_rectifier_under_voltage(bool value);

  // optional bool rectifier_over_voltage = 123;
  void clear_rectifier_over_voltage();
  static const int kRectifierOverVoltageFieldNumber = 123;
  bool rectifier_over_voltage() const;
  void set_rectifier_over_voltage(bool value);

  // optional bool rectifier_fan_load = 124;
  void clear_rectifier_fan_load();
  static const int kRectifierFanLoadFieldNumber = 124;
  bool rectifier_fan_load() const;
  void set_rectifier_fan_load(bool value);

  // optional bool rectifier_das_load = 125;
  void clear_rectifier_das_load();
  static const int kRectifierDasLoadFieldNumber = 125;
  bool rectifier_das_load() const;
  void set_rectifier_das_load(bool value);

  // optional bool rectifier_rcb_load = 126;
  void clear_rectifier_rcb_load();
  static const int kRectifierRcbLoadFieldNumber = 126;
  bool rectifier_rcb_load() const;
  void set_rectifier_rcb_load(bool value);

  // optional bool rectifier_xray_cooler = 127;
  void clear_rectifier_xray_cooler();
  static const int kRectifierXrayCoolerFieldNumber = 127;
  bool rectifier_xray_cooler() const;
  void set_rectifier_xray_cooler(bool value);

  // optional bool rectifier_xray_gen_controller = 128;
  void clear_rectifier_xray_gen_controller();
  static const int kRectifierXrayGenControllerFieldNumber = 128;
  bool rectifier_xray_gen_controller() const;
  void set_rectifier_xray_gen_controller(bool value);

  // optional bool rectifier_xray_controller_fan = 129;
  void clear_rectifier_xray_controller_fan();
  static const int kRectifierXrayControllerFanFieldNumber = 129;
  bool rectifier_xray_controller_fan() const;
  void set_rectifier_xray_controller_fan(bool value);

  // optional bool rectifier_ok = 130;
  void clear_rectifier_ok();
  static const int kRectifierOkFieldNumber = 130;
  bool rectifier_ok() const;
  void set_rectifier_ok(bool value);

  // optional string drb_firmware_version = 131;
  void clear_drb_firmware_version();
  static const int kDrbFirmwareVersionFieldNumber = 131;
  const ::std::string& drb_firmware_version() const;
  void set_drb_firmware_version(const ::std::string& value);
  void set_drb_firmware_version(const char* value);
  void set_drb_firmware_version(const char* value, size_t size);
  ::std::string* mutable_drb_firmware_version();
  ::std::string* release_drb_firmware_version();
  void set_allocated_drb_firmware_version(::std::string* drb_firmware_version);

  // optional bool drb_ready = 132;
  void clear_drb_ready();
  static const int kDrbReadyFieldNumber = 132;
  bool drb_ready() const;
  void set_drb_ready(bool value);

  // optional bool rcb_comm_loss = 133;
  void clear_rcb_comm_loss();
  static const int kRcbCommLossFieldNumber = 133;
  bool rcb_comm_loss() const;
  void set_rcb_comm_loss(bool value);

  // optional bool watch_dog_detection_time_error = 134;
  void clear_watch_dog_detection_time_error();
  static const int kWatchDogDetectionTimeErrorFieldNumber = 134;
  bool watch_dog_detection_time_error() const;
  void set_watch_dog_detection_time_error(bool value);

  // optional bool rcb_control_packet_fifo_full_error = 135;
  void clear_rcb_control_packet_fifo_full_error();
  static const int kRcbControlPacketFifoFullErrorFieldNumber = 135;
  bool rcb_control_packet_fifo_full_error() const;
  void set_rcb_control_packet_fifo_full_error(bool value);

  // optional bool conveyor_belt_quad_encoder_error = 136;
  void clear_conveyor_belt_quad_encoder_error();
  static const int kConveyorBeltQuadEncoderErrorFieldNumber = 136;
  bool conveyor_belt_quad_encoder_error() const;
  void set_conveyor_belt_quad_encoder_error(bool value);

  // optional bool uplink_cmd_bit_0 = 137;
  void clear_uplink_cmd_bit_0();
  static const int kUplinkCmdBit0FieldNumber = 137;
  bool uplink_cmd_bit_0() const;
  void set_uplink_cmd_bit_0(bool value);

  // optional bool uplink_cmd_bit_1 = 138;
  void clear_uplink_cmd_bit_1();
  static const int kUplinkCmdBit1FieldNumber = 138;
  bool uplink_cmd_bit_1() const;
  void set_uplink_cmd_bit_1(bool value);

  // optional bool uplink_cmd_bit_2 = 139;
  void clear_uplink_cmd_bit_2();
  static const int kUplinkCmdBit2FieldNumber = 139;
  bool uplink_cmd_bit_2() const;
  void set_uplink_cmd_bit_2(bool value);

  // optional fixed32 dcb1_xdmms_present = 140;
  void clear_dcb1_xdmms_present();
  static const int kDcb1XdmmsPresentFieldNumber = 140;
  ::google::protobuf::uint32 dcb1_xdmms_present() const;
  void set_dcb1_xdmms_present(::google::protobuf::uint32 value);

  // optional fixed32 dcb2_xdmms_present = 141;
  void clear_dcb2_xdmms_present();
  static const int kDcb2XdmmsPresentFieldNumber = 141;
  ::google::protobuf::uint32 dcb2_xdmms_present() const;
  void set_dcb2_xdmms_present(::google::protobuf::uint32 value);

  // optional fixed32 dcb3_xdmms_present = 142;
  void clear_dcb3_xdmms_present();
  static const int kDcb3XdmmsPresentFieldNumber = 142;
  ::google::protobuf::uint32 dcb3_xdmms_present() const;
  void set_dcb3_xdmms_present(::google::protobuf::uint32 value);

  // optional fixed32 dcb4_xdmms_present = 143;
  void clear_dcb4_xdmms_present();
  static const int kDcb4XdmmsPresentFieldNumber = 143;
  ::google::protobuf::uint32 dcb4_xdmms_present() const;
  void set_dcb4_xdmms_present(::google::protobuf::uint32 value);

  // optional fixed32 dcb5_xdmms_present = 144;
  void clear_dcb5_xdmms_present();
  static const int kDcb5XdmmsPresentFieldNumber = 144;
  ::google::protobuf::uint32 dcb5_xdmms_present() const;
  void set_dcb5_xdmms_present(::google::protobuf::uint32 value);

  // optional fixed64 number_of_bad_views = 160;
  void clear_number_of_bad_views();
  static const int kNumberOfBadViewsFieldNumber = 160;
  ::google::protobuf::uint64 number_of_bad_views() const;
  void set_number_of_bad_views(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:analogic.ancp00.DrbIoData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr xray_source_serial_num_;
  ::google::protobuf::internal::ArenaStringPtr xray_source_model_num_;
  ::google::protobuf::internal::ArenaStringPtr rcb_firmware_version_;
  ::google::protobuf::internal::ArenaStringPtr dcb_1_fw_revision_;
  ::google::protobuf::internal::ArenaStringPtr dcb_2_fw_revision_;
  ::google::protobuf::internal::ArenaStringPtr dcb_3_fw_revision_;
  ::google::protobuf::internal::ArenaStringPtr dcb_4_fw_revision_;
  ::google::protobuf::internal::ArenaStringPtr dcb_5_fw_revision_;
  ::google::protobuf::internal::ArenaStringPtr dcb_xdmm_fw_revision_not_used_;
  ::google::protobuf::internal::ArenaStringPtr xray_seasoning_time_remaining_str_;
  float xray_voltage_setpoint_kv_;
  float xray_current_setpoint_ma_;
  float xray_voltage_kv_;
  float xray_current_ma_;
  float xray_source_temp_;
  float xray_source_filament_current_;
  float rcb_gantry_rpm_;
  float rcb_gantry_angle_degrees_;
  float rcb_temp_sensor_1_;
  float rcb_temp_sensor_2_;
  float dcb_1_ambient_temp_;
  float dcb_2_ambient_temp_;
  float dcb_3_ambient_temp_;
  float dcb_4_ambient_temp_;
  float dcb_5_ambient_temp_;
  float conveyor_speed_cm_sec_;
  double current_conveyor_pos_cm_;
  double current_gantry_rot_count_;
  ::google::protobuf::uint32 xray_fault_status_;
  ::google::protobuf::uint32 xray_source_discrete_status_;
  ::google::protobuf::uint32 xray_seasoning_step_;
  ::google::protobuf::uint32 xray_seasoning_time_remaining_;
  ::google::protobuf::uint32 rcb_control_register_;
  ::google::protobuf::uint32 rcb_status_register_;
  ::google::protobuf::uint32 rcb_fault_register_;
  ::google::protobuf::uint32 rcb_trigger_opto_status_;
  ::google::protobuf::uint32 rcb_serial_number_;
  ::google::protobuf::uint32 dcb_1_status_register_;
  ::google::protobuf::uint32 dcb_2_status_register_;
  ::google::protobuf::uint32 dcb_3_status_register_;
  ::google::protobuf::uint32 dcb_4_status_register_;
  ::google::protobuf::uint32 dcb_5_status_register_;
  ::google::protobuf::uint32 rcb_gantry_rotation_period_ms_;
  bool xray_regulation_fault_;
  bool xray_interlock_open_;
  bool xray_cathode_over_voltage_;
  bool xray_anode_over_voltage_;
  bool xray_over_temperature_;
  bool xray_arc_fault_;
  bool xray_over_current_;
  bool xray_power_limit_fault_;
  bool xray_over_voltage_;
  bool duty_cycle_mode_;
  bool xray_minimization_;
  bool xray_seasoning_in_progress_;
  bool xray_watchdog_status_;
  bool xray_enable_;
  bool xray_high_voltage_on_;
  bool xray_interlock_;
  bool xray_on_;
  bool opto_trigger_1_home_;
  bool opto_trigger_2_;
  bool opto_trigger_3_;
  bool opto_trigger_4_;
  bool rectifier_temperature_;
  bool rectifier_under_voltage_;
  bool rectifier_over_voltage_;
  bool rectifier_fan_load_;
  bool rectifier_das_load_;
  bool rectifier_rcb_load_;
  bool rectifier_xray_cooler_;
  ::google::protobuf::internal::ArenaStringPtr drb_firmware_version_;
  bool rectifier_xray_gen_controller_;
  bool rectifier_xray_controller_fan_;
  bool rectifier_ok_;
  bool drb_ready_;
  bool rcb_comm_loss_;
  bool watch_dog_detection_time_error_;
  bool rcb_control_packet_fifo_full_error_;
  bool conveyor_belt_quad_encoder_error_;
  bool uplink_cmd_bit_0_;
  bool uplink_cmd_bit_1_;
  bool uplink_cmd_bit_2_;
  ::google::protobuf::uint32 dcb1_xdmms_present_;
  ::google::protobuf::uint32 dcb2_xdmms_present_;
  ::google::protobuf::uint32 dcb3_xdmms_present_;
  ::google::protobuf::uint32 dcb4_xdmms_present_;
  ::google::protobuf::uint32 dcb5_xdmms_present_;
  ::google::protobuf::uint64 number_of_bad_views_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_proto_2fDrbComm_2eproto();
  friend void protobuf_AssignDesc_proto_2fDrbComm_2eproto();
  friend void protobuf_ShutdownFile_proto_2fDrbComm_2eproto();

  void InitAsDefaultInstance();
  static DrbIoData* default_instance_;
};
// -------------------------------------------------------------------

class DrbCommMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:analogic.ancp00.DrbCommMsg) */ {
 public:
  DrbCommMsg();
  virtual ~DrbCommMsg();

  DrbCommMsg(const DrbCommMsg& from);

  inline DrbCommMsg& operator=(const DrbCommMsg& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DrbCommMsg& default_instance();

  void Swap(DrbCommMsg* other);

  // implements Message ----------------------------------------------

  inline DrbCommMsg* New() const { return New(NULL); }

  DrbCommMsg* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DrbCommMsg& from);
  void MergeFrom(const DrbCommMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DrbCommMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef DrbCommMsg_CmdId CmdId;
  static const CmdId BOGUS_PLACE_HOLDER =
    DrbCommMsg_CmdId_BOGUS_PLACE_HOLDER;
  static const CmdId RESET_DRB_VIEW_PROCESSOR_FAULT =
    DrbCommMsg_CmdId_RESET_DRB_VIEW_PROCESSOR_FAULT;
  static const CmdId FORCE_RESET_DRB_VIEW_PROCESSOR_FAULT =
    DrbCommMsg_CmdId_FORCE_RESET_DRB_VIEW_PROCESSOR_FAULT;
  static const CmdId RESET_CONVEYOR_POSITION =
    DrbCommMsg_CmdId_RESET_CONVEYOR_POSITION;
  static const CmdId RESET_BAD_VIEW_COUNT =
    DrbCommMsg_CmdId_RESET_BAD_VIEW_COUNT;
  static inline bool CmdId_IsValid(int value) {
    return DrbCommMsg_CmdId_IsValid(value);
  }
  static const CmdId CmdId_MIN =
    DrbCommMsg_CmdId_CmdId_MIN;
  static const CmdId CmdId_MAX =
    DrbCommMsg_CmdId_CmdId_MAX;
  static const int CmdId_ARRAYSIZE =
    DrbCommMsg_CmdId_CmdId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CmdId_descriptor() {
    return DrbCommMsg_CmdId_descriptor();
  }
  static inline const ::std::string& CmdId_Name(CmdId value) {
    return DrbCommMsg_CmdId_Name(value);
  }
  static inline bool CmdId_Parse(const ::std::string& name,
      CmdId* value) {
    return DrbCommMsg_CmdId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .analogic.ancp00.DrbCommMsg.CmdId id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::analogic::ancp00::DrbCommMsg_CmdId id() const;
  void set_id(::analogic::ancp00::DrbCommMsg_CmdId value);

  // @@protoc_insertion_point(class_scope:analogic.ancp00.DrbCommMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  int id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_proto_2fDrbComm_2eproto();
  friend void protobuf_AssignDesc_proto_2fDrbComm_2eproto();
  friend void protobuf_ShutdownFile_proto_2fDrbComm_2eproto();

  void InitAsDefaultInstance();
  static DrbCommMsg* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// DrbCommStatusMsg

// optional .analogic.ancp00.DrbCommStatusMsg.DRB_STATUS state = 1;
inline void DrbCommStatusMsg::clear_state() {
  state_ = 0;
}
inline ::analogic::ancp00::DrbCommStatusMsg_DRB_STATUS DrbCommStatusMsg::state() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbCommStatusMsg.state)
  return static_cast< ::analogic::ancp00::DrbCommStatusMsg_DRB_STATUS >(state_);
}
inline void DrbCommStatusMsg::set_state(::analogic::ancp00::DrbCommStatusMsg_DRB_STATUS value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbCommStatusMsg.state)
}

// -------------------------------------------------------------------

// DrbIoData

// optional string xray_source_serial_num = 1;
inline void DrbIoData::clear_xray_source_serial_num() {
  xray_source_serial_num_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DrbIoData::xray_source_serial_num() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.xray_source_serial_num)
  return xray_source_serial_num_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DrbIoData::set_xray_source_serial_num(const ::std::string& value) {
  
  xray_source_serial_num_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.xray_source_serial_num)
}
inline void DrbIoData::set_xray_source_serial_num(const char* value) {
  
  xray_source_serial_num_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.DrbIoData.xray_source_serial_num)
}
inline void DrbIoData::set_xray_source_serial_num(const char* value, size_t size) {
  
  xray_source_serial_num_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.DrbIoData.xray_source_serial_num)
}
inline ::std::string* DrbIoData::mutable_xray_source_serial_num() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.DrbIoData.xray_source_serial_num)
  return xray_source_serial_num_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DrbIoData::release_xray_source_serial_num() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.DrbIoData.xray_source_serial_num)
  
  return xray_source_serial_num_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DrbIoData::set_allocated_xray_source_serial_num(::std::string* xray_source_serial_num) {
  if (xray_source_serial_num != NULL) {
    
  } else {
    
  }
  xray_source_serial_num_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), xray_source_serial_num);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.DrbIoData.xray_source_serial_num)
}

// optional string xray_source_model_num = 2;
inline void DrbIoData::clear_xray_source_model_num() {
  xray_source_model_num_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DrbIoData::xray_source_model_num() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.xray_source_model_num)
  return xray_source_model_num_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DrbIoData::set_xray_source_model_num(const ::std::string& value) {
  
  xray_source_model_num_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.xray_source_model_num)
}
inline void DrbIoData::set_xray_source_model_num(const char* value) {
  
  xray_source_model_num_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.DrbIoData.xray_source_model_num)
}
inline void DrbIoData::set_xray_source_model_num(const char* value, size_t size) {
  
  xray_source_model_num_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.DrbIoData.xray_source_model_num)
}
inline ::std::string* DrbIoData::mutable_xray_source_model_num() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.DrbIoData.xray_source_model_num)
  return xray_source_model_num_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DrbIoData::release_xray_source_model_num() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.DrbIoData.xray_source_model_num)
  
  return xray_source_model_num_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DrbIoData::set_allocated_xray_source_model_num(::std::string* xray_source_model_num) {
  if (xray_source_model_num != NULL) {
    
  } else {
    
  }
  xray_source_model_num_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), xray_source_model_num);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.DrbIoData.xray_source_model_num)
}

// optional string rcb_firmware_version = 3;
inline void DrbIoData::clear_rcb_firmware_version() {
  rcb_firmware_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DrbIoData::rcb_firmware_version() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.rcb_firmware_version)
  return rcb_firmware_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DrbIoData::set_rcb_firmware_version(const ::std::string& value) {
  
  rcb_firmware_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.rcb_firmware_version)
}
inline void DrbIoData::set_rcb_firmware_version(const char* value) {
  
  rcb_firmware_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.DrbIoData.rcb_firmware_version)
}
inline void DrbIoData::set_rcb_firmware_version(const char* value, size_t size) {
  
  rcb_firmware_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.DrbIoData.rcb_firmware_version)
}
inline ::std::string* DrbIoData::mutable_rcb_firmware_version() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.DrbIoData.rcb_firmware_version)
  return rcb_firmware_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DrbIoData::release_rcb_firmware_version() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.DrbIoData.rcb_firmware_version)
  
  return rcb_firmware_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DrbIoData::set_allocated_rcb_firmware_version(::std::string* rcb_firmware_version) {
  if (rcb_firmware_version != NULL) {
    
  } else {
    
  }
  rcb_firmware_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rcb_firmware_version);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.DrbIoData.rcb_firmware_version)
}

// optional string dcb_1_fw_revision = 4;
inline void DrbIoData::clear_dcb_1_fw_revision() {
  dcb_1_fw_revision_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DrbIoData::dcb_1_fw_revision() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.dcb_1_fw_revision)
  return dcb_1_fw_revision_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DrbIoData::set_dcb_1_fw_revision(const ::std::string& value) {
  
  dcb_1_fw_revision_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.dcb_1_fw_revision)
}
inline void DrbIoData::set_dcb_1_fw_revision(const char* value) {
  
  dcb_1_fw_revision_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.DrbIoData.dcb_1_fw_revision)
}
inline void DrbIoData::set_dcb_1_fw_revision(const char* value, size_t size) {
  
  dcb_1_fw_revision_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.DrbIoData.dcb_1_fw_revision)
}
inline ::std::string* DrbIoData::mutable_dcb_1_fw_revision() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.DrbIoData.dcb_1_fw_revision)
  return dcb_1_fw_revision_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DrbIoData::release_dcb_1_fw_revision() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.DrbIoData.dcb_1_fw_revision)
  
  return dcb_1_fw_revision_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DrbIoData::set_allocated_dcb_1_fw_revision(::std::string* dcb_1_fw_revision) {
  if (dcb_1_fw_revision != NULL) {
    
  } else {
    
  }
  dcb_1_fw_revision_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dcb_1_fw_revision);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.DrbIoData.dcb_1_fw_revision)
}

// optional string dcb_2_fw_revision = 5;
inline void DrbIoData::clear_dcb_2_fw_revision() {
  dcb_2_fw_revision_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DrbIoData::dcb_2_fw_revision() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.dcb_2_fw_revision)
  return dcb_2_fw_revision_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DrbIoData::set_dcb_2_fw_revision(const ::std::string& value) {
  
  dcb_2_fw_revision_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.dcb_2_fw_revision)
}
inline void DrbIoData::set_dcb_2_fw_revision(const char* value) {
  
  dcb_2_fw_revision_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.DrbIoData.dcb_2_fw_revision)
}
inline void DrbIoData::set_dcb_2_fw_revision(const char* value, size_t size) {
  
  dcb_2_fw_revision_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.DrbIoData.dcb_2_fw_revision)
}
inline ::std::string* DrbIoData::mutable_dcb_2_fw_revision() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.DrbIoData.dcb_2_fw_revision)
  return dcb_2_fw_revision_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DrbIoData::release_dcb_2_fw_revision() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.DrbIoData.dcb_2_fw_revision)
  
  return dcb_2_fw_revision_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DrbIoData::set_allocated_dcb_2_fw_revision(::std::string* dcb_2_fw_revision) {
  if (dcb_2_fw_revision != NULL) {
    
  } else {
    
  }
  dcb_2_fw_revision_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dcb_2_fw_revision);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.DrbIoData.dcb_2_fw_revision)
}

// optional string dcb_3_fw_revision = 6;
inline void DrbIoData::clear_dcb_3_fw_revision() {
  dcb_3_fw_revision_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DrbIoData::dcb_3_fw_revision() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.dcb_3_fw_revision)
  return dcb_3_fw_revision_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DrbIoData::set_dcb_3_fw_revision(const ::std::string& value) {
  
  dcb_3_fw_revision_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.dcb_3_fw_revision)
}
inline void DrbIoData::set_dcb_3_fw_revision(const char* value) {
  
  dcb_3_fw_revision_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.DrbIoData.dcb_3_fw_revision)
}
inline void DrbIoData::set_dcb_3_fw_revision(const char* value, size_t size) {
  
  dcb_3_fw_revision_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.DrbIoData.dcb_3_fw_revision)
}
inline ::std::string* DrbIoData::mutable_dcb_3_fw_revision() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.DrbIoData.dcb_3_fw_revision)
  return dcb_3_fw_revision_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DrbIoData::release_dcb_3_fw_revision() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.DrbIoData.dcb_3_fw_revision)
  
  return dcb_3_fw_revision_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DrbIoData::set_allocated_dcb_3_fw_revision(::std::string* dcb_3_fw_revision) {
  if (dcb_3_fw_revision != NULL) {
    
  } else {
    
  }
  dcb_3_fw_revision_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dcb_3_fw_revision);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.DrbIoData.dcb_3_fw_revision)
}

// optional string dcb_4_fw_revision = 7;
inline void DrbIoData::clear_dcb_4_fw_revision() {
  dcb_4_fw_revision_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DrbIoData::dcb_4_fw_revision() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.dcb_4_fw_revision)
  return dcb_4_fw_revision_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DrbIoData::set_dcb_4_fw_revision(const ::std::string& value) {
  
  dcb_4_fw_revision_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.dcb_4_fw_revision)
}
inline void DrbIoData::set_dcb_4_fw_revision(const char* value) {
  
  dcb_4_fw_revision_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.DrbIoData.dcb_4_fw_revision)
}
inline void DrbIoData::set_dcb_4_fw_revision(const char* value, size_t size) {
  
  dcb_4_fw_revision_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.DrbIoData.dcb_4_fw_revision)
}
inline ::std::string* DrbIoData::mutable_dcb_4_fw_revision() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.DrbIoData.dcb_4_fw_revision)
  return dcb_4_fw_revision_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DrbIoData::release_dcb_4_fw_revision() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.DrbIoData.dcb_4_fw_revision)
  
  return dcb_4_fw_revision_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DrbIoData::set_allocated_dcb_4_fw_revision(::std::string* dcb_4_fw_revision) {
  if (dcb_4_fw_revision != NULL) {
    
  } else {
    
  }
  dcb_4_fw_revision_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dcb_4_fw_revision);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.DrbIoData.dcb_4_fw_revision)
}

// optional string dcb_5_fw_revision = 8;
inline void DrbIoData::clear_dcb_5_fw_revision() {
  dcb_5_fw_revision_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DrbIoData::dcb_5_fw_revision() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.dcb_5_fw_revision)
  return dcb_5_fw_revision_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DrbIoData::set_dcb_5_fw_revision(const ::std::string& value) {
  
  dcb_5_fw_revision_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.dcb_5_fw_revision)
}
inline void DrbIoData::set_dcb_5_fw_revision(const char* value) {
  
  dcb_5_fw_revision_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.DrbIoData.dcb_5_fw_revision)
}
inline void DrbIoData::set_dcb_5_fw_revision(const char* value, size_t size) {
  
  dcb_5_fw_revision_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.DrbIoData.dcb_5_fw_revision)
}
inline ::std::string* DrbIoData::mutable_dcb_5_fw_revision() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.DrbIoData.dcb_5_fw_revision)
  return dcb_5_fw_revision_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DrbIoData::release_dcb_5_fw_revision() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.DrbIoData.dcb_5_fw_revision)
  
  return dcb_5_fw_revision_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DrbIoData::set_allocated_dcb_5_fw_revision(::std::string* dcb_5_fw_revision) {
  if (dcb_5_fw_revision != NULL) {
    
  } else {
    
  }
  dcb_5_fw_revision_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dcb_5_fw_revision);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.DrbIoData.dcb_5_fw_revision)
}

// optional string dcb_xdmm_fw_revision_not_used = 9;
inline void DrbIoData::clear_dcb_xdmm_fw_revision_not_used() {
  dcb_xdmm_fw_revision_not_used_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DrbIoData::dcb_xdmm_fw_revision_not_used() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.dcb_xdmm_fw_revision_not_used)
  return dcb_xdmm_fw_revision_not_used_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DrbIoData::set_dcb_xdmm_fw_revision_not_used(const ::std::string& value) {
  
  dcb_xdmm_fw_revision_not_used_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.dcb_xdmm_fw_revision_not_used)
}
inline void DrbIoData::set_dcb_xdmm_fw_revision_not_used(const char* value) {
  
  dcb_xdmm_fw_revision_not_used_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.DrbIoData.dcb_xdmm_fw_revision_not_used)
}
inline void DrbIoData::set_dcb_xdmm_fw_revision_not_used(const char* value, size_t size) {
  
  dcb_xdmm_fw_revision_not_used_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.DrbIoData.dcb_xdmm_fw_revision_not_used)
}
inline ::std::string* DrbIoData::mutable_dcb_xdmm_fw_revision_not_used() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.DrbIoData.dcb_xdmm_fw_revision_not_used)
  return dcb_xdmm_fw_revision_not_used_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DrbIoData::release_dcb_xdmm_fw_revision_not_used() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.DrbIoData.dcb_xdmm_fw_revision_not_used)
  
  return dcb_xdmm_fw_revision_not_used_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DrbIoData::set_allocated_dcb_xdmm_fw_revision_not_used(::std::string* dcb_xdmm_fw_revision_not_used) {
  if (dcb_xdmm_fw_revision_not_used != NULL) {
    
  } else {
    
  }
  dcb_xdmm_fw_revision_not_used_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dcb_xdmm_fw_revision_not_used);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.DrbIoData.dcb_xdmm_fw_revision_not_used)
}

// optional string xray_seasoning_time_remaining_str = 10;
inline void DrbIoData::clear_xray_seasoning_time_remaining_str() {
  xray_seasoning_time_remaining_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DrbIoData::xray_seasoning_time_remaining_str() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.xray_seasoning_time_remaining_str)
  return xray_seasoning_time_remaining_str_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DrbIoData::set_xray_seasoning_time_remaining_str(const ::std::string& value) {
  
  xray_seasoning_time_remaining_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.xray_seasoning_time_remaining_str)
}
inline void DrbIoData::set_xray_seasoning_time_remaining_str(const char* value) {
  
  xray_seasoning_time_remaining_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.DrbIoData.xray_seasoning_time_remaining_str)
}
inline void DrbIoData::set_xray_seasoning_time_remaining_str(const char* value, size_t size) {
  
  xray_seasoning_time_remaining_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.DrbIoData.xray_seasoning_time_remaining_str)
}
inline ::std::string* DrbIoData::mutable_xray_seasoning_time_remaining_str() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.DrbIoData.xray_seasoning_time_remaining_str)
  return xray_seasoning_time_remaining_str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DrbIoData::release_xray_seasoning_time_remaining_str() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.DrbIoData.xray_seasoning_time_remaining_str)
  
  return xray_seasoning_time_remaining_str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DrbIoData::set_allocated_xray_seasoning_time_remaining_str(::std::string* xray_seasoning_time_remaining_str) {
  if (xray_seasoning_time_remaining_str != NULL) {
    
  } else {
    
  }
  xray_seasoning_time_remaining_str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), xray_seasoning_time_remaining_str);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.DrbIoData.xray_seasoning_time_remaining_str)
}

// optional float xray_voltage_setpoint_kv = 20;
inline void DrbIoData::clear_xray_voltage_setpoint_kv() {
  xray_voltage_setpoint_kv_ = 0;
}
inline float DrbIoData::xray_voltage_setpoint_kv() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.xray_voltage_setpoint_kv)
  return xray_voltage_setpoint_kv_;
}
inline void DrbIoData::set_xray_voltage_setpoint_kv(float value) {
  
  xray_voltage_setpoint_kv_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.xray_voltage_setpoint_kv)
}

// optional float xray_current_setpoint_ma = 21;
inline void DrbIoData::clear_xray_current_setpoint_ma() {
  xray_current_setpoint_ma_ = 0;
}
inline float DrbIoData::xray_current_setpoint_ma() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.xray_current_setpoint_ma)
  return xray_current_setpoint_ma_;
}
inline void DrbIoData::set_xray_current_setpoint_ma(float value) {
  
  xray_current_setpoint_ma_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.xray_current_setpoint_ma)
}

// optional float xray_voltage_kv = 22;
inline void DrbIoData::clear_xray_voltage_kv() {
  xray_voltage_kv_ = 0;
}
inline float DrbIoData::xray_voltage_kv() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.xray_voltage_kv)
  return xray_voltage_kv_;
}
inline void DrbIoData::set_xray_voltage_kv(float value) {
  
  xray_voltage_kv_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.xray_voltage_kv)
}

// optional float xray_current_ma = 23;
inline void DrbIoData::clear_xray_current_ma() {
  xray_current_ma_ = 0;
}
inline float DrbIoData::xray_current_ma() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.xray_current_ma)
  return xray_current_ma_;
}
inline void DrbIoData::set_xray_current_ma(float value) {
  
  xray_current_ma_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.xray_current_ma)
}

// optional float xray_source_temp = 24;
inline void DrbIoData::clear_xray_source_temp() {
  xray_source_temp_ = 0;
}
inline float DrbIoData::xray_source_temp() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.xray_source_temp)
  return xray_source_temp_;
}
inline void DrbIoData::set_xray_source_temp(float value) {
  
  xray_source_temp_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.xray_source_temp)
}

// optional float xray_source_filament_current = 25;
inline void DrbIoData::clear_xray_source_filament_current() {
  xray_source_filament_current_ = 0;
}
inline float DrbIoData::xray_source_filament_current() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.xray_source_filament_current)
  return xray_source_filament_current_;
}
inline void DrbIoData::set_xray_source_filament_current(float value) {
  
  xray_source_filament_current_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.xray_source_filament_current)
}

// optional float rcb_gantry_rpm = 26;
inline void DrbIoData::clear_rcb_gantry_rpm() {
  rcb_gantry_rpm_ = 0;
}
inline float DrbIoData::rcb_gantry_rpm() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.rcb_gantry_rpm)
  return rcb_gantry_rpm_;
}
inline void DrbIoData::set_rcb_gantry_rpm(float value) {
  
  rcb_gantry_rpm_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.rcb_gantry_rpm)
}

// optional float rcb_gantry_angle_degrees = 27;
inline void DrbIoData::clear_rcb_gantry_angle_degrees() {
  rcb_gantry_angle_degrees_ = 0;
}
inline float DrbIoData::rcb_gantry_angle_degrees() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.rcb_gantry_angle_degrees)
  return rcb_gantry_angle_degrees_;
}
inline void DrbIoData::set_rcb_gantry_angle_degrees(float value) {
  
  rcb_gantry_angle_degrees_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.rcb_gantry_angle_degrees)
}

// optional float rcb_temp_sensor_1 = 28;
inline void DrbIoData::clear_rcb_temp_sensor_1() {
  rcb_temp_sensor_1_ = 0;
}
inline float DrbIoData::rcb_temp_sensor_1() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.rcb_temp_sensor_1)
  return rcb_temp_sensor_1_;
}
inline void DrbIoData::set_rcb_temp_sensor_1(float value) {
  
  rcb_temp_sensor_1_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.rcb_temp_sensor_1)
}

// optional float rcb_temp_sensor_2 = 29;
inline void DrbIoData::clear_rcb_temp_sensor_2() {
  rcb_temp_sensor_2_ = 0;
}
inline float DrbIoData::rcb_temp_sensor_2() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.rcb_temp_sensor_2)
  return rcb_temp_sensor_2_;
}
inline void DrbIoData::set_rcb_temp_sensor_2(float value) {
  
  rcb_temp_sensor_2_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.rcb_temp_sensor_2)
}

// optional float dcb_1_ambient_temp = 30;
inline void DrbIoData::clear_dcb_1_ambient_temp() {
  dcb_1_ambient_temp_ = 0;
}
inline float DrbIoData::dcb_1_ambient_temp() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.dcb_1_ambient_temp)
  return dcb_1_ambient_temp_;
}
inline void DrbIoData::set_dcb_1_ambient_temp(float value) {
  
  dcb_1_ambient_temp_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.dcb_1_ambient_temp)
}

// optional float dcb_2_ambient_temp = 31;
inline void DrbIoData::clear_dcb_2_ambient_temp() {
  dcb_2_ambient_temp_ = 0;
}
inline float DrbIoData::dcb_2_ambient_temp() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.dcb_2_ambient_temp)
  return dcb_2_ambient_temp_;
}
inline void DrbIoData::set_dcb_2_ambient_temp(float value) {
  
  dcb_2_ambient_temp_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.dcb_2_ambient_temp)
}

// optional float dcb_3_ambient_temp = 32;
inline void DrbIoData::clear_dcb_3_ambient_temp() {
  dcb_3_ambient_temp_ = 0;
}
inline float DrbIoData::dcb_3_ambient_temp() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.dcb_3_ambient_temp)
  return dcb_3_ambient_temp_;
}
inline void DrbIoData::set_dcb_3_ambient_temp(float value) {
  
  dcb_3_ambient_temp_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.dcb_3_ambient_temp)
}

// optional float dcb_4_ambient_temp = 33;
inline void DrbIoData::clear_dcb_4_ambient_temp() {
  dcb_4_ambient_temp_ = 0;
}
inline float DrbIoData::dcb_4_ambient_temp() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.dcb_4_ambient_temp)
  return dcb_4_ambient_temp_;
}
inline void DrbIoData::set_dcb_4_ambient_temp(float value) {
  
  dcb_4_ambient_temp_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.dcb_4_ambient_temp)
}

// optional float dcb_5_ambient_temp = 34;
inline void DrbIoData::clear_dcb_5_ambient_temp() {
  dcb_5_ambient_temp_ = 0;
}
inline float DrbIoData::dcb_5_ambient_temp() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.dcb_5_ambient_temp)
  return dcb_5_ambient_temp_;
}
inline void DrbIoData::set_dcb_5_ambient_temp(float value) {
  
  dcb_5_ambient_temp_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.dcb_5_ambient_temp)
}

// optional float conveyor_speed_cm_sec = 35;
inline void DrbIoData::clear_conveyor_speed_cm_sec() {
  conveyor_speed_cm_sec_ = 0;
}
inline float DrbIoData::conveyor_speed_cm_sec() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.conveyor_speed_cm_sec)
  return conveyor_speed_cm_sec_;
}
inline void DrbIoData::set_conveyor_speed_cm_sec(float value) {
  
  conveyor_speed_cm_sec_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.conveyor_speed_cm_sec)
}

// optional double current_conveyor_pos_cm = 36;
inline void DrbIoData::clear_current_conveyor_pos_cm() {
  current_conveyor_pos_cm_ = 0;
}
inline double DrbIoData::current_conveyor_pos_cm() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.current_conveyor_pos_cm)
  return current_conveyor_pos_cm_;
}
inline void DrbIoData::set_current_conveyor_pos_cm(double value) {
  
  current_conveyor_pos_cm_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.current_conveyor_pos_cm)
}

// optional double current_gantry_rot_count = 37;
inline void DrbIoData::clear_current_gantry_rot_count() {
  current_gantry_rot_count_ = 0;
}
inline double DrbIoData::current_gantry_rot_count() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.current_gantry_rot_count)
  return current_gantry_rot_count_;
}
inline void DrbIoData::set_current_gantry_rot_count(double value) {
  
  current_gantry_rot_count_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.current_gantry_rot_count)
}

// optional fixed32 xray_fault_status = 50;
inline void DrbIoData::clear_xray_fault_status() {
  xray_fault_status_ = 0u;
}
inline ::google::protobuf::uint32 DrbIoData::xray_fault_status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.xray_fault_status)
  return xray_fault_status_;
}
inline void DrbIoData::set_xray_fault_status(::google::protobuf::uint32 value) {
  
  xray_fault_status_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.xray_fault_status)
}

// optional fixed32 xray_source_discrete_status = 51;
inline void DrbIoData::clear_xray_source_discrete_status() {
  xray_source_discrete_status_ = 0u;
}
inline ::google::protobuf::uint32 DrbIoData::xray_source_discrete_status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.xray_source_discrete_status)
  return xray_source_discrete_status_;
}
inline void DrbIoData::set_xray_source_discrete_status(::google::protobuf::uint32 value) {
  
  xray_source_discrete_status_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.xray_source_discrete_status)
}

// optional uint32 xray_seasoning_step = 52;
inline void DrbIoData::clear_xray_seasoning_step() {
  xray_seasoning_step_ = 0u;
}
inline ::google::protobuf::uint32 DrbIoData::xray_seasoning_step() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.xray_seasoning_step)
  return xray_seasoning_step_;
}
inline void DrbIoData::set_xray_seasoning_step(::google::protobuf::uint32 value) {
  
  xray_seasoning_step_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.xray_seasoning_step)
}

// optional uint32 xray_seasoning_time_remaining = 53;
inline void DrbIoData::clear_xray_seasoning_time_remaining() {
  xray_seasoning_time_remaining_ = 0u;
}
inline ::google::protobuf::uint32 DrbIoData::xray_seasoning_time_remaining() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.xray_seasoning_time_remaining)
  return xray_seasoning_time_remaining_;
}
inline void DrbIoData::set_xray_seasoning_time_remaining(::google::protobuf::uint32 value) {
  
  xray_seasoning_time_remaining_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.xray_seasoning_time_remaining)
}

// optional fixed32 rcb_control_register = 54;
inline void DrbIoData::clear_rcb_control_register() {
  rcb_control_register_ = 0u;
}
inline ::google::protobuf::uint32 DrbIoData::rcb_control_register() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.rcb_control_register)
  return rcb_control_register_;
}
inline void DrbIoData::set_rcb_control_register(::google::protobuf::uint32 value) {
  
  rcb_control_register_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.rcb_control_register)
}

// optional fixed32 rcb_status_register = 55;
inline void DrbIoData::clear_rcb_status_register() {
  rcb_status_register_ = 0u;
}
inline ::google::protobuf::uint32 DrbIoData::rcb_status_register() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.rcb_status_register)
  return rcb_status_register_;
}
inline void DrbIoData::set_rcb_status_register(::google::protobuf::uint32 value) {
  
  rcb_status_register_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.rcb_status_register)
}

// optional fixed32 rcb_fault_register = 56;
inline void DrbIoData::clear_rcb_fault_register() {
  rcb_fault_register_ = 0u;
}
inline ::google::protobuf::uint32 DrbIoData::rcb_fault_register() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.rcb_fault_register)
  return rcb_fault_register_;
}
inline void DrbIoData::set_rcb_fault_register(::google::protobuf::uint32 value) {
  
  rcb_fault_register_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.rcb_fault_register)
}

// optional fixed32 rcb_trigger_opto_status = 57;
inline void DrbIoData::clear_rcb_trigger_opto_status() {
  rcb_trigger_opto_status_ = 0u;
}
inline ::google::protobuf::uint32 DrbIoData::rcb_trigger_opto_status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.rcb_trigger_opto_status)
  return rcb_trigger_opto_status_;
}
inline void DrbIoData::set_rcb_trigger_opto_status(::google::protobuf::uint32 value) {
  
  rcb_trigger_opto_status_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.rcb_trigger_opto_status)
}

// optional uint32 rcb_serial_number = 58;
inline void DrbIoData::clear_rcb_serial_number() {
  rcb_serial_number_ = 0u;
}
inline ::google::protobuf::uint32 DrbIoData::rcb_serial_number() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.rcb_serial_number)
  return rcb_serial_number_;
}
inline void DrbIoData::set_rcb_serial_number(::google::protobuf::uint32 value) {
  
  rcb_serial_number_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.rcb_serial_number)
}

// optional fixed32 dcb_1_status_register = 59;
inline void DrbIoData::clear_dcb_1_status_register() {
  dcb_1_status_register_ = 0u;
}
inline ::google::protobuf::uint32 DrbIoData::dcb_1_status_register() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.dcb_1_status_register)
  return dcb_1_status_register_;
}
inline void DrbIoData::set_dcb_1_status_register(::google::protobuf::uint32 value) {
  
  dcb_1_status_register_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.dcb_1_status_register)
}

// optional fixed32 dcb_2_status_register = 60;
inline void DrbIoData::clear_dcb_2_status_register() {
  dcb_2_status_register_ = 0u;
}
inline ::google::protobuf::uint32 DrbIoData::dcb_2_status_register() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.dcb_2_status_register)
  return dcb_2_status_register_;
}
inline void DrbIoData::set_dcb_2_status_register(::google::protobuf::uint32 value) {
  
  dcb_2_status_register_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.dcb_2_status_register)
}

// optional fixed32 dcb_3_status_register = 61;
inline void DrbIoData::clear_dcb_3_status_register() {
  dcb_3_status_register_ = 0u;
}
inline ::google::protobuf::uint32 DrbIoData::dcb_3_status_register() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.dcb_3_status_register)
  return dcb_3_status_register_;
}
inline void DrbIoData::set_dcb_3_status_register(::google::protobuf::uint32 value) {
  
  dcb_3_status_register_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.dcb_3_status_register)
}

// optional fixed32 dcb_4_status_register = 62;
inline void DrbIoData::clear_dcb_4_status_register() {
  dcb_4_status_register_ = 0u;
}
inline ::google::protobuf::uint32 DrbIoData::dcb_4_status_register() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.dcb_4_status_register)
  return dcb_4_status_register_;
}
inline void DrbIoData::set_dcb_4_status_register(::google::protobuf::uint32 value) {
  
  dcb_4_status_register_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.dcb_4_status_register)
}

// optional fixed32 dcb_5_status_register = 63;
inline void DrbIoData::clear_dcb_5_status_register() {
  dcb_5_status_register_ = 0u;
}
inline ::google::protobuf::uint32 DrbIoData::dcb_5_status_register() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.dcb_5_status_register)
  return dcb_5_status_register_;
}
inline void DrbIoData::set_dcb_5_status_register(::google::protobuf::uint32 value) {
  
  dcb_5_status_register_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.dcb_5_status_register)
}

// optional uint32 rcb_gantry_rotation_period_ms = 64;
inline void DrbIoData::clear_rcb_gantry_rotation_period_ms() {
  rcb_gantry_rotation_period_ms_ = 0u;
}
inline ::google::protobuf::uint32 DrbIoData::rcb_gantry_rotation_period_ms() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.rcb_gantry_rotation_period_ms)
  return rcb_gantry_rotation_period_ms_;
}
inline void DrbIoData::set_rcb_gantry_rotation_period_ms(::google::protobuf::uint32 value) {
  
  rcb_gantry_rotation_period_ms_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.rcb_gantry_rotation_period_ms)
}

// optional bool xray_regulation_fault = 100;
inline void DrbIoData::clear_xray_regulation_fault() {
  xray_regulation_fault_ = false;
}
inline bool DrbIoData::xray_regulation_fault() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.xray_regulation_fault)
  return xray_regulation_fault_;
}
inline void DrbIoData::set_xray_regulation_fault(bool value) {
  
  xray_regulation_fault_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.xray_regulation_fault)
}

// optional bool xray_interlock_open = 101;
inline void DrbIoData::clear_xray_interlock_open() {
  xray_interlock_open_ = false;
}
inline bool DrbIoData::xray_interlock_open() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.xray_interlock_open)
  return xray_interlock_open_;
}
inline void DrbIoData::set_xray_interlock_open(bool value) {
  
  xray_interlock_open_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.xray_interlock_open)
}

// optional bool xray_cathode_over_voltage = 102;
inline void DrbIoData::clear_xray_cathode_over_voltage() {
  xray_cathode_over_voltage_ = false;
}
inline bool DrbIoData::xray_cathode_over_voltage() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.xray_cathode_over_voltage)
  return xray_cathode_over_voltage_;
}
inline void DrbIoData::set_xray_cathode_over_voltage(bool value) {
  
  xray_cathode_over_voltage_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.xray_cathode_over_voltage)
}

// optional bool xray_anode_over_voltage = 103;
inline void DrbIoData::clear_xray_anode_over_voltage() {
  xray_anode_over_voltage_ = false;
}
inline bool DrbIoData::xray_anode_over_voltage() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.xray_anode_over_voltage)
  return xray_anode_over_voltage_;
}
inline void DrbIoData::set_xray_anode_over_voltage(bool value) {
  
  xray_anode_over_voltage_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.xray_anode_over_voltage)
}

// optional bool xray_over_temperature = 104;
inline void DrbIoData::clear_xray_over_temperature() {
  xray_over_temperature_ = false;
}
inline bool DrbIoData::xray_over_temperature() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.xray_over_temperature)
  return xray_over_temperature_;
}
inline void DrbIoData::set_xray_over_temperature(bool value) {
  
  xray_over_temperature_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.xray_over_temperature)
}

// optional bool xray_arc_fault = 105;
inline void DrbIoData::clear_xray_arc_fault() {
  xray_arc_fault_ = false;
}
inline bool DrbIoData::xray_arc_fault() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.xray_arc_fault)
  return xray_arc_fault_;
}
inline void DrbIoData::set_xray_arc_fault(bool value) {
  
  xray_arc_fault_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.xray_arc_fault)
}

// optional bool xray_over_current = 106;
inline void DrbIoData::clear_xray_over_current() {
  xray_over_current_ = false;
}
inline bool DrbIoData::xray_over_current() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.xray_over_current)
  return xray_over_current_;
}
inline void DrbIoData::set_xray_over_current(bool value) {
  
  xray_over_current_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.xray_over_current)
}

// optional bool xray_power_limit_fault = 107;
inline void DrbIoData::clear_xray_power_limit_fault() {
  xray_power_limit_fault_ = false;
}
inline bool DrbIoData::xray_power_limit_fault() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.xray_power_limit_fault)
  return xray_power_limit_fault_;
}
inline void DrbIoData::set_xray_power_limit_fault(bool value) {
  
  xray_power_limit_fault_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.xray_power_limit_fault)
}

// optional bool xray_over_voltage = 108;
inline void DrbIoData::clear_xray_over_voltage() {
  xray_over_voltage_ = false;
}
inline bool DrbIoData::xray_over_voltage() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.xray_over_voltage)
  return xray_over_voltage_;
}
inline void DrbIoData::set_xray_over_voltage(bool value) {
  
  xray_over_voltage_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.xray_over_voltage)
}

// optional bool duty_cycle_mode = 109;
inline void DrbIoData::clear_duty_cycle_mode() {
  duty_cycle_mode_ = false;
}
inline bool DrbIoData::duty_cycle_mode() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.duty_cycle_mode)
  return duty_cycle_mode_;
}
inline void DrbIoData::set_duty_cycle_mode(bool value) {
  
  duty_cycle_mode_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.duty_cycle_mode)
}

// optional bool xray_minimization = 110;
inline void DrbIoData::clear_xray_minimization() {
  xray_minimization_ = false;
}
inline bool DrbIoData::xray_minimization() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.xray_minimization)
  return xray_minimization_;
}
inline void DrbIoData::set_xray_minimization(bool value) {
  
  xray_minimization_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.xray_minimization)
}

// optional bool xray_seasoning_in_progress = 111;
inline void DrbIoData::clear_xray_seasoning_in_progress() {
  xray_seasoning_in_progress_ = false;
}
inline bool DrbIoData::xray_seasoning_in_progress() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.xray_seasoning_in_progress)
  return xray_seasoning_in_progress_;
}
inline void DrbIoData::set_xray_seasoning_in_progress(bool value) {
  
  xray_seasoning_in_progress_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.xray_seasoning_in_progress)
}

// optional bool xray_watchdog_status = 112;
inline void DrbIoData::clear_xray_watchdog_status() {
  xray_watchdog_status_ = false;
}
inline bool DrbIoData::xray_watchdog_status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.xray_watchdog_status)
  return xray_watchdog_status_;
}
inline void DrbIoData::set_xray_watchdog_status(bool value) {
  
  xray_watchdog_status_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.xray_watchdog_status)
}

// optional bool xray_enable = 113;
inline void DrbIoData::clear_xray_enable() {
  xray_enable_ = false;
}
inline bool DrbIoData::xray_enable() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.xray_enable)
  return xray_enable_;
}
inline void DrbIoData::set_xray_enable(bool value) {
  
  xray_enable_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.xray_enable)
}

// optional bool xray_high_voltage_on = 114;
inline void DrbIoData::clear_xray_high_voltage_on() {
  xray_high_voltage_on_ = false;
}
inline bool DrbIoData::xray_high_voltage_on() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.xray_high_voltage_on)
  return xray_high_voltage_on_;
}
inline void DrbIoData::set_xray_high_voltage_on(bool value) {
  
  xray_high_voltage_on_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.xray_high_voltage_on)
}

// optional bool xray_interlock = 115;
inline void DrbIoData::clear_xray_interlock() {
  xray_interlock_ = false;
}
inline bool DrbIoData::xray_interlock() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.xray_interlock)
  return xray_interlock_;
}
inline void DrbIoData::set_xray_interlock(bool value) {
  
  xray_interlock_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.xray_interlock)
}

// optional bool xray_on = 116;
inline void DrbIoData::clear_xray_on() {
  xray_on_ = false;
}
inline bool DrbIoData::xray_on() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.xray_on)
  return xray_on_;
}
inline void DrbIoData::set_xray_on(bool value) {
  
  xray_on_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.xray_on)
}

// optional bool opto_trigger_1_home = 117;
inline void DrbIoData::clear_opto_trigger_1_home() {
  opto_trigger_1_home_ = false;
}
inline bool DrbIoData::opto_trigger_1_home() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.opto_trigger_1_home)
  return opto_trigger_1_home_;
}
inline void DrbIoData::set_opto_trigger_1_home(bool value) {
  
  opto_trigger_1_home_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.opto_trigger_1_home)
}

// optional bool opto_trigger_2 = 118;
inline void DrbIoData::clear_opto_trigger_2() {
  opto_trigger_2_ = false;
}
inline bool DrbIoData::opto_trigger_2() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.opto_trigger_2)
  return opto_trigger_2_;
}
inline void DrbIoData::set_opto_trigger_2(bool value) {
  
  opto_trigger_2_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.opto_trigger_2)
}

// optional bool opto_trigger_3 = 119;
inline void DrbIoData::clear_opto_trigger_3() {
  opto_trigger_3_ = false;
}
inline bool DrbIoData::opto_trigger_3() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.opto_trigger_3)
  return opto_trigger_3_;
}
inline void DrbIoData::set_opto_trigger_3(bool value) {
  
  opto_trigger_3_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.opto_trigger_3)
}

// optional bool opto_trigger_4 = 120;
inline void DrbIoData::clear_opto_trigger_4() {
  opto_trigger_4_ = false;
}
inline bool DrbIoData::opto_trigger_4() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.opto_trigger_4)
  return opto_trigger_4_;
}
inline void DrbIoData::set_opto_trigger_4(bool value) {
  
  opto_trigger_4_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.opto_trigger_4)
}

// optional bool rectifier_temperature = 121;
inline void DrbIoData::clear_rectifier_temperature() {
  rectifier_temperature_ = false;
}
inline bool DrbIoData::rectifier_temperature() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.rectifier_temperature)
  return rectifier_temperature_;
}
inline void DrbIoData::set_rectifier_temperature(bool value) {
  
  rectifier_temperature_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.rectifier_temperature)
}

// optional bool rectifier_under_voltage = 122;
inline void DrbIoData::clear_rectifier_under_voltage() {
  rectifier_under_voltage_ = false;
}
inline bool DrbIoData::rectifier_under_voltage() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.rectifier_under_voltage)
  return rectifier_under_voltage_;
}
inline void DrbIoData::set_rectifier_under_voltage(bool value) {
  
  rectifier_under_voltage_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.rectifier_under_voltage)
}

// optional bool rectifier_over_voltage = 123;
inline void DrbIoData::clear_rectifier_over_voltage() {
  rectifier_over_voltage_ = false;
}
inline bool DrbIoData::rectifier_over_voltage() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.rectifier_over_voltage)
  return rectifier_over_voltage_;
}
inline void DrbIoData::set_rectifier_over_voltage(bool value) {
  
  rectifier_over_voltage_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.rectifier_over_voltage)
}

// optional bool rectifier_fan_load = 124;
inline void DrbIoData::clear_rectifier_fan_load() {
  rectifier_fan_load_ = false;
}
inline bool DrbIoData::rectifier_fan_load() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.rectifier_fan_load)
  return rectifier_fan_load_;
}
inline void DrbIoData::set_rectifier_fan_load(bool value) {
  
  rectifier_fan_load_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.rectifier_fan_load)
}

// optional bool rectifier_das_load = 125;
inline void DrbIoData::clear_rectifier_das_load() {
  rectifier_das_load_ = false;
}
inline bool DrbIoData::rectifier_das_load() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.rectifier_das_load)
  return rectifier_das_load_;
}
inline void DrbIoData::set_rectifier_das_load(bool value) {
  
  rectifier_das_load_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.rectifier_das_load)
}

// optional bool rectifier_rcb_load = 126;
inline void DrbIoData::clear_rectifier_rcb_load() {
  rectifier_rcb_load_ = false;
}
inline bool DrbIoData::rectifier_rcb_load() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.rectifier_rcb_load)
  return rectifier_rcb_load_;
}
inline void DrbIoData::set_rectifier_rcb_load(bool value) {
  
  rectifier_rcb_load_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.rectifier_rcb_load)
}

// optional bool rectifier_xray_cooler = 127;
inline void DrbIoData::clear_rectifier_xray_cooler() {
  rectifier_xray_cooler_ = false;
}
inline bool DrbIoData::rectifier_xray_cooler() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.rectifier_xray_cooler)
  return rectifier_xray_cooler_;
}
inline void DrbIoData::set_rectifier_xray_cooler(bool value) {
  
  rectifier_xray_cooler_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.rectifier_xray_cooler)
}

// optional bool rectifier_xray_gen_controller = 128;
inline void DrbIoData::clear_rectifier_xray_gen_controller() {
  rectifier_xray_gen_controller_ = false;
}
inline bool DrbIoData::rectifier_xray_gen_controller() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.rectifier_xray_gen_controller)
  return rectifier_xray_gen_controller_;
}
inline void DrbIoData::set_rectifier_xray_gen_controller(bool value) {
  
  rectifier_xray_gen_controller_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.rectifier_xray_gen_controller)
}

// optional bool rectifier_xray_controller_fan = 129;
inline void DrbIoData::clear_rectifier_xray_controller_fan() {
  rectifier_xray_controller_fan_ = false;
}
inline bool DrbIoData::rectifier_xray_controller_fan() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.rectifier_xray_controller_fan)
  return rectifier_xray_controller_fan_;
}
inline void DrbIoData::set_rectifier_xray_controller_fan(bool value) {
  
  rectifier_xray_controller_fan_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.rectifier_xray_controller_fan)
}

// optional bool rectifier_ok = 130;
inline void DrbIoData::clear_rectifier_ok() {
  rectifier_ok_ = false;
}
inline bool DrbIoData::rectifier_ok() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.rectifier_ok)
  return rectifier_ok_;
}
inline void DrbIoData::set_rectifier_ok(bool value) {
  
  rectifier_ok_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.rectifier_ok)
}

// optional string drb_firmware_version = 131;
inline void DrbIoData::clear_drb_firmware_version() {
  drb_firmware_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DrbIoData::drb_firmware_version() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.drb_firmware_version)
  return drb_firmware_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DrbIoData::set_drb_firmware_version(const ::std::string& value) {
  
  drb_firmware_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.drb_firmware_version)
}
inline void DrbIoData::set_drb_firmware_version(const char* value) {
  
  drb_firmware_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.DrbIoData.drb_firmware_version)
}
inline void DrbIoData::set_drb_firmware_version(const char* value, size_t size) {
  
  drb_firmware_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.DrbIoData.drb_firmware_version)
}
inline ::std::string* DrbIoData::mutable_drb_firmware_version() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.DrbIoData.drb_firmware_version)
  return drb_firmware_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DrbIoData::release_drb_firmware_version() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.DrbIoData.drb_firmware_version)
  
  return drb_firmware_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DrbIoData::set_allocated_drb_firmware_version(::std::string* drb_firmware_version) {
  if (drb_firmware_version != NULL) {
    
  } else {
    
  }
  drb_firmware_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), drb_firmware_version);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.DrbIoData.drb_firmware_version)
}

// optional bool drb_ready = 132;
inline void DrbIoData::clear_drb_ready() {
  drb_ready_ = false;
}
inline bool DrbIoData::drb_ready() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.drb_ready)
  return drb_ready_;
}
inline void DrbIoData::set_drb_ready(bool value) {
  
  drb_ready_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.drb_ready)
}

// optional bool rcb_comm_loss = 133;
inline void DrbIoData::clear_rcb_comm_loss() {
  rcb_comm_loss_ = false;
}
inline bool DrbIoData::rcb_comm_loss() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.rcb_comm_loss)
  return rcb_comm_loss_;
}
inline void DrbIoData::set_rcb_comm_loss(bool value) {
  
  rcb_comm_loss_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.rcb_comm_loss)
}

// optional bool watch_dog_detection_time_error = 134;
inline void DrbIoData::clear_watch_dog_detection_time_error() {
  watch_dog_detection_time_error_ = false;
}
inline bool DrbIoData::watch_dog_detection_time_error() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.watch_dog_detection_time_error)
  return watch_dog_detection_time_error_;
}
inline void DrbIoData::set_watch_dog_detection_time_error(bool value) {
  
  watch_dog_detection_time_error_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.watch_dog_detection_time_error)
}

// optional bool rcb_control_packet_fifo_full_error = 135;
inline void DrbIoData::clear_rcb_control_packet_fifo_full_error() {
  rcb_control_packet_fifo_full_error_ = false;
}
inline bool DrbIoData::rcb_control_packet_fifo_full_error() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.rcb_control_packet_fifo_full_error)
  return rcb_control_packet_fifo_full_error_;
}
inline void DrbIoData::set_rcb_control_packet_fifo_full_error(bool value) {
  
  rcb_control_packet_fifo_full_error_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.rcb_control_packet_fifo_full_error)
}

// optional bool conveyor_belt_quad_encoder_error = 136;
inline void DrbIoData::clear_conveyor_belt_quad_encoder_error() {
  conveyor_belt_quad_encoder_error_ = false;
}
inline bool DrbIoData::conveyor_belt_quad_encoder_error() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.conveyor_belt_quad_encoder_error)
  return conveyor_belt_quad_encoder_error_;
}
inline void DrbIoData::set_conveyor_belt_quad_encoder_error(bool value) {
  
  conveyor_belt_quad_encoder_error_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.conveyor_belt_quad_encoder_error)
}

// optional bool uplink_cmd_bit_0 = 137;
inline void DrbIoData::clear_uplink_cmd_bit_0() {
  uplink_cmd_bit_0_ = false;
}
inline bool DrbIoData::uplink_cmd_bit_0() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.uplink_cmd_bit_0)
  return uplink_cmd_bit_0_;
}
inline void DrbIoData::set_uplink_cmd_bit_0(bool value) {
  
  uplink_cmd_bit_0_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.uplink_cmd_bit_0)
}

// optional bool uplink_cmd_bit_1 = 138;
inline void DrbIoData::clear_uplink_cmd_bit_1() {
  uplink_cmd_bit_1_ = false;
}
inline bool DrbIoData::uplink_cmd_bit_1() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.uplink_cmd_bit_1)
  return uplink_cmd_bit_1_;
}
inline void DrbIoData::set_uplink_cmd_bit_1(bool value) {
  
  uplink_cmd_bit_1_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.uplink_cmd_bit_1)
}

// optional bool uplink_cmd_bit_2 = 139;
inline void DrbIoData::clear_uplink_cmd_bit_2() {
  uplink_cmd_bit_2_ = false;
}
inline bool DrbIoData::uplink_cmd_bit_2() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.uplink_cmd_bit_2)
  return uplink_cmd_bit_2_;
}
inline void DrbIoData::set_uplink_cmd_bit_2(bool value) {
  
  uplink_cmd_bit_2_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.uplink_cmd_bit_2)
}

// optional fixed32 dcb1_xdmms_present = 140;
inline void DrbIoData::clear_dcb1_xdmms_present() {
  dcb1_xdmms_present_ = 0u;
}
inline ::google::protobuf::uint32 DrbIoData::dcb1_xdmms_present() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.dcb1_xdmms_present)
  return dcb1_xdmms_present_;
}
inline void DrbIoData::set_dcb1_xdmms_present(::google::protobuf::uint32 value) {
  
  dcb1_xdmms_present_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.dcb1_xdmms_present)
}

// optional fixed32 dcb2_xdmms_present = 141;
inline void DrbIoData::clear_dcb2_xdmms_present() {
  dcb2_xdmms_present_ = 0u;
}
inline ::google::protobuf::uint32 DrbIoData::dcb2_xdmms_present() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.dcb2_xdmms_present)
  return dcb2_xdmms_present_;
}
inline void DrbIoData::set_dcb2_xdmms_present(::google::protobuf::uint32 value) {
  
  dcb2_xdmms_present_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.dcb2_xdmms_present)
}

// optional fixed32 dcb3_xdmms_present = 142;
inline void DrbIoData::clear_dcb3_xdmms_present() {
  dcb3_xdmms_present_ = 0u;
}
inline ::google::protobuf::uint32 DrbIoData::dcb3_xdmms_present() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.dcb3_xdmms_present)
  return dcb3_xdmms_present_;
}
inline void DrbIoData::set_dcb3_xdmms_present(::google::protobuf::uint32 value) {
  
  dcb3_xdmms_present_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.dcb3_xdmms_present)
}

// optional fixed32 dcb4_xdmms_present = 143;
inline void DrbIoData::clear_dcb4_xdmms_present() {
  dcb4_xdmms_present_ = 0u;
}
inline ::google::protobuf::uint32 DrbIoData::dcb4_xdmms_present() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.dcb4_xdmms_present)
  return dcb4_xdmms_present_;
}
inline void DrbIoData::set_dcb4_xdmms_present(::google::protobuf::uint32 value) {
  
  dcb4_xdmms_present_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.dcb4_xdmms_present)
}

// optional fixed32 dcb5_xdmms_present = 144;
inline void DrbIoData::clear_dcb5_xdmms_present() {
  dcb5_xdmms_present_ = 0u;
}
inline ::google::protobuf::uint32 DrbIoData::dcb5_xdmms_present() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.dcb5_xdmms_present)
  return dcb5_xdmms_present_;
}
inline void DrbIoData::set_dcb5_xdmms_present(::google::protobuf::uint32 value) {
  
  dcb5_xdmms_present_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.dcb5_xdmms_present)
}

// optional fixed64 number_of_bad_views = 160;
inline void DrbIoData::clear_number_of_bad_views() {
  number_of_bad_views_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 DrbIoData::number_of_bad_views() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbIoData.number_of_bad_views)
  return number_of_bad_views_;
}
inline void DrbIoData::set_number_of_bad_views(::google::protobuf::uint64 value) {
  
  number_of_bad_views_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbIoData.number_of_bad_views)
}

// -------------------------------------------------------------------

// DrbCommMsg

// optional .analogic.ancp00.DrbCommMsg.CmdId id = 1;
inline void DrbCommMsg::clear_id() {
  id_ = 0;
}
inline ::analogic::ancp00::DrbCommMsg_CmdId DrbCommMsg::id() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.DrbCommMsg.id)
  return static_cast< ::analogic::ancp00::DrbCommMsg_CmdId >(id_);
}
inline void DrbCommMsg::set_id(::analogic::ancp00::DrbCommMsg_CmdId value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.DrbCommMsg.id)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ancp00
}  // namespace analogic

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::analogic::ancp00::DrbCommStatusMsg_DRB_STATUS> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::analogic::ancp00::DrbCommStatusMsg_DRB_STATUS>() {
  return ::analogic::ancp00::DrbCommStatusMsg_DRB_STATUS_descriptor();
}
template <> struct is_proto_enum< ::analogic::ancp00::DrbIoData_FaultStatusBits> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::analogic::ancp00::DrbIoData_FaultStatusBits>() {
  return ::analogic::ancp00::DrbIoData_FaultStatusBits_descriptor();
}
template <> struct is_proto_enum< ::analogic::ancp00::DrbIoData_SourceDiscreteBits> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::analogic::ancp00::DrbIoData_SourceDiscreteBits>() {
  return ::analogic::ancp00::DrbIoData_SourceDiscreteBits_descriptor();
}
template <> struct is_proto_enum< ::analogic::ancp00::DrbIoData_RcbControlRegisterBits> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::analogic::ancp00::DrbIoData_RcbControlRegisterBits>() {
  return ::analogic::ancp00::DrbIoData_RcbControlRegisterBits_descriptor();
}
template <> struct is_proto_enum< ::analogic::ancp00::DrbIoData_RcbStatusRegisterBits> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::analogic::ancp00::DrbIoData_RcbStatusRegisterBits>() {
  return ::analogic::ancp00::DrbIoData_RcbStatusRegisterBits_descriptor();
}
template <> struct is_proto_enum< ::analogic::ancp00::DrbIoData_RcbFaultRegisterBits> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::analogic::ancp00::DrbIoData_RcbFaultRegisterBits>() {
  return ::analogic::ancp00::DrbIoData_RcbFaultRegisterBits_descriptor();
}
template <> struct is_proto_enum< ::analogic::ancp00::DrbIoData_RcbTriggerOptoStatusBits> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::analogic::ancp00::DrbIoData_RcbTriggerOptoStatusBits>() {
  return ::analogic::ancp00::DrbIoData_RcbTriggerOptoStatusBits_descriptor();
}
template <> struct is_proto_enum< ::analogic::ancp00::DrbCommMsg_CmdId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::analogic::ancp00::DrbCommMsg_CmdId>() {
  return ::analogic::ancp00::DrbCommMsg_CmdId_descriptor();
}
template <> struct is_proto_enum< ::analogic::ancp00::DRB_FAULT_CODE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::analogic::ancp00::DRB_FAULT_CODE>() {
  return ::analogic::ancp00::DRB_FAULT_CODE_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_2fDrbComm_2eproto__INCLUDED
