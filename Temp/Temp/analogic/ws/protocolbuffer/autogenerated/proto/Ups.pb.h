// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/Ups.proto

#ifndef PROTOBUF_proto_2fUps_2eproto__INCLUDED
#define PROTOBUF_proto_2fUps_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace analogic {
namespace ancp00 {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_proto_2fUps_2eproto();
void protobuf_AssignDesc_proto_2fUps_2eproto();
void protobuf_ShutdownFile_proto_2fUps_2eproto();

class UpsStatus;

// ===================================================================

class UpsStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:analogic.ancp00.UpsStatus) */ {
 public:
  UpsStatus();
  virtual ~UpsStatus();

  UpsStatus(const UpsStatus& from);

  inline UpsStatus& operator=(const UpsStatus& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpsStatus& default_instance();

  void Swap(UpsStatus* other);

  // implements Message ----------------------------------------------

  inline UpsStatus* New() const { return New(NULL); }

  UpsStatus* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpsStatus& from);
  void MergeFrom(const UpsStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UpsStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string input_voltage = 1;
  void clear_input_voltage();
  static const int kInputVoltageFieldNumber = 1;
  const ::std::string& input_voltage() const;
  void set_input_voltage(const ::std::string& value);
  void set_input_voltage(const char* value);
  void set_input_voltage(const char* value, size_t size);
  ::std::string* mutable_input_voltage();
  ::std::string* release_input_voltage();
  void set_allocated_input_voltage(::std::string* input_voltage);

  // optional string input_frequency = 2;
  void clear_input_frequency();
  static const int kInputFrequencyFieldNumber = 2;
  const ::std::string& input_frequency() const;
  void set_input_frequency(const ::std::string& value);
  void set_input_frequency(const char* value);
  void set_input_frequency(const char* value, size_t size);
  ::std::string* mutable_input_frequency();
  ::std::string* release_input_frequency();
  void set_allocated_input_frequency(::std::string* input_frequency);

  // optional string output_voltage = 3;
  void clear_output_voltage();
  static const int kOutputVoltageFieldNumber = 3;
  const ::std::string& output_voltage() const;
  void set_output_voltage(const ::std::string& value);
  void set_output_voltage(const char* value);
  void set_output_voltage(const char* value, size_t size);
  ::std::string* mutable_output_voltage();
  ::std::string* release_output_voltage();
  void set_allocated_output_voltage(::std::string* output_voltage);

  // optional string output_frequency = 4;
  void clear_output_frequency();
  static const int kOutputFrequencyFieldNumber = 4;
  const ::std::string& output_frequency() const;
  void set_output_frequency(const ::std::string& value);
  void set_output_frequency(const char* value);
  void set_output_frequency(const char* value, size_t size);
  ::std::string* mutable_output_frequency();
  ::std::string* release_output_frequency();
  void set_allocated_output_frequency(::std::string* output_frequency);

  // optional string output_current = 5;
  void clear_output_current();
  static const int kOutputCurrentFieldNumber = 5;
  const ::std::string& output_current() const;
  void set_output_current(const ::std::string& value);
  void set_output_current(const char* value);
  void set_output_current(const char* value, size_t size);
  ::std::string* mutable_output_current();
  ::std::string* release_output_current();
  void set_allocated_output_current(::std::string* output_current);

  // optional string battery_runtime = 6;
  void clear_battery_runtime();
  static const int kBatteryRuntimeFieldNumber = 6;
  const ::std::string& battery_runtime() const;
  void set_battery_runtime(const ::std::string& value);
  void set_battery_runtime(const char* value);
  void set_battery_runtime(const char* value, size_t size);
  ::std::string* mutable_battery_runtime();
  ::std::string* release_battery_runtime();
  void set_allocated_battery_runtime(::std::string* battery_runtime);

  // optional string battery_charge = 7;
  void clear_battery_charge();
  static const int kBatteryChargeFieldNumber = 7;
  const ::std::string& battery_charge() const;
  void set_battery_charge(const ::std::string& value);
  void set_battery_charge(const char* value);
  void set_battery_charge(const char* value, size_t size);
  ::std::string* mutable_battery_charge();
  ::std::string* release_battery_charge();
  void set_allocated_battery_charge(::std::string* battery_charge);

  // optional string battery_capacity = 8;
  void clear_battery_capacity();
  static const int kBatteryCapacityFieldNumber = 8;
  const ::std::string& battery_capacity() const;
  void set_battery_capacity(const ::std::string& value);
  void set_battery_capacity(const char* value);
  void set_battery_capacity(const char* value, size_t size);
  ::std::string* mutable_battery_capacity();
  ::std::string* release_battery_capacity();
  void set_allocated_battery_capacity(::std::string* battery_capacity);

  // optional string status = 9;
  void clear_status();
  static const int kStatusFieldNumber = 9;
  const ::std::string& status() const;
  void set_status(const ::std::string& value);
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  ::std::string* mutable_status();
  ::std::string* release_status();
  void set_allocated_status(::std::string* status);

  // optional string test_result = 10;
  void clear_test_result();
  static const int kTestResultFieldNumber = 10;
  const ::std::string& test_result() const;
  void set_test_result(const ::std::string& value);
  void set_test_result(const char* value);
  void set_test_result(const char* value, size_t size);
  ::std::string* mutable_test_result();
  ::std::string* release_test_result();
  void set_allocated_test_result(::std::string* test_result);

  // optional string model = 11;
  void clear_model();
  static const int kModelFieldNumber = 11;
  const ::std::string& model() const;
  void set_model(const ::std::string& value);
  void set_model(const char* value);
  void set_model(const char* value, size_t size);
  ::std::string* mutable_model();
  ::std::string* release_model();
  void set_allocated_model(::std::string* model);

  // optional string serial_number = 12;
  void clear_serial_number();
  static const int kSerialNumberFieldNumber = 12;
  const ::std::string& serial_number() const;
  void set_serial_number(const ::std::string& value);
  void set_serial_number(const char* value);
  void set_serial_number(const char* value, size_t size);
  ::std::string* mutable_serial_number();
  ::std::string* release_serial_number();
  void set_allocated_serial_number(::std::string* serial_number);

  // optional string firmware_version = 13;
  void clear_firmware_version();
  static const int kFirmwareVersionFieldNumber = 13;
  const ::std::string& firmware_version() const;
  void set_firmware_version(const ::std::string& value);
  void set_firmware_version(const char* value);
  void set_firmware_version(const char* value, size_t size);
  ::std::string* mutable_firmware_version();
  ::std::string* release_firmware_version();
  void set_allocated_firmware_version(::std::string* firmware_version);

  // @@protoc_insertion_point(class_scope:analogic.ancp00.UpsStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr input_voltage_;
  ::google::protobuf::internal::ArenaStringPtr input_frequency_;
  ::google::protobuf::internal::ArenaStringPtr output_voltage_;
  ::google::protobuf::internal::ArenaStringPtr output_frequency_;
  ::google::protobuf::internal::ArenaStringPtr output_current_;
  ::google::protobuf::internal::ArenaStringPtr battery_runtime_;
  ::google::protobuf::internal::ArenaStringPtr battery_charge_;
  ::google::protobuf::internal::ArenaStringPtr battery_capacity_;
  ::google::protobuf::internal::ArenaStringPtr status_;
  ::google::protobuf::internal::ArenaStringPtr test_result_;
  ::google::protobuf::internal::ArenaStringPtr model_;
  ::google::protobuf::internal::ArenaStringPtr serial_number_;
  ::google::protobuf::internal::ArenaStringPtr firmware_version_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_proto_2fUps_2eproto();
  friend void protobuf_AssignDesc_proto_2fUps_2eproto();
  friend void protobuf_ShutdownFile_proto_2fUps_2eproto();

  void InitAsDefaultInstance();
  static UpsStatus* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// UpsStatus

// optional string input_voltage = 1;
inline void UpsStatus::clear_input_voltage() {
  input_voltage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpsStatus::input_voltage() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.UpsStatus.input_voltage)
  return input_voltage_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpsStatus::set_input_voltage(const ::std::string& value) {
  
  input_voltage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.UpsStatus.input_voltage)
}
inline void UpsStatus::set_input_voltage(const char* value) {
  
  input_voltage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.UpsStatus.input_voltage)
}
inline void UpsStatus::set_input_voltage(const char* value, size_t size) {
  
  input_voltage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.UpsStatus.input_voltage)
}
inline ::std::string* UpsStatus::mutable_input_voltage() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.UpsStatus.input_voltage)
  return input_voltage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpsStatus::release_input_voltage() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.UpsStatus.input_voltage)
  
  return input_voltage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpsStatus::set_allocated_input_voltage(::std::string* input_voltage) {
  if (input_voltage != NULL) {
    
  } else {
    
  }
  input_voltage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), input_voltage);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.UpsStatus.input_voltage)
}

// optional string input_frequency = 2;
inline void UpsStatus::clear_input_frequency() {
  input_frequency_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpsStatus::input_frequency() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.UpsStatus.input_frequency)
  return input_frequency_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpsStatus::set_input_frequency(const ::std::string& value) {
  
  input_frequency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.UpsStatus.input_frequency)
}
inline void UpsStatus::set_input_frequency(const char* value) {
  
  input_frequency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.UpsStatus.input_frequency)
}
inline void UpsStatus::set_input_frequency(const char* value, size_t size) {
  
  input_frequency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.UpsStatus.input_frequency)
}
inline ::std::string* UpsStatus::mutable_input_frequency() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.UpsStatus.input_frequency)
  return input_frequency_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpsStatus::release_input_frequency() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.UpsStatus.input_frequency)
  
  return input_frequency_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpsStatus::set_allocated_input_frequency(::std::string* input_frequency) {
  if (input_frequency != NULL) {
    
  } else {
    
  }
  input_frequency_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), input_frequency);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.UpsStatus.input_frequency)
}

// optional string output_voltage = 3;
inline void UpsStatus::clear_output_voltage() {
  output_voltage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpsStatus::output_voltage() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.UpsStatus.output_voltage)
  return output_voltage_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpsStatus::set_output_voltage(const ::std::string& value) {
  
  output_voltage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.UpsStatus.output_voltage)
}
inline void UpsStatus::set_output_voltage(const char* value) {
  
  output_voltage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.UpsStatus.output_voltage)
}
inline void UpsStatus::set_output_voltage(const char* value, size_t size) {
  
  output_voltage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.UpsStatus.output_voltage)
}
inline ::std::string* UpsStatus::mutable_output_voltage() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.UpsStatus.output_voltage)
  return output_voltage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpsStatus::release_output_voltage() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.UpsStatus.output_voltage)
  
  return output_voltage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpsStatus::set_allocated_output_voltage(::std::string* output_voltage) {
  if (output_voltage != NULL) {
    
  } else {
    
  }
  output_voltage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), output_voltage);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.UpsStatus.output_voltage)
}

// optional string output_frequency = 4;
inline void UpsStatus::clear_output_frequency() {
  output_frequency_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpsStatus::output_frequency() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.UpsStatus.output_frequency)
  return output_frequency_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpsStatus::set_output_frequency(const ::std::string& value) {
  
  output_frequency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.UpsStatus.output_frequency)
}
inline void UpsStatus::set_output_frequency(const char* value) {
  
  output_frequency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.UpsStatus.output_frequency)
}
inline void UpsStatus::set_output_frequency(const char* value, size_t size) {
  
  output_frequency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.UpsStatus.output_frequency)
}
inline ::std::string* UpsStatus::mutable_output_frequency() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.UpsStatus.output_frequency)
  return output_frequency_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpsStatus::release_output_frequency() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.UpsStatus.output_frequency)
  
  return output_frequency_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpsStatus::set_allocated_output_frequency(::std::string* output_frequency) {
  if (output_frequency != NULL) {
    
  } else {
    
  }
  output_frequency_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), output_frequency);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.UpsStatus.output_frequency)
}

// optional string output_current = 5;
inline void UpsStatus::clear_output_current() {
  output_current_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpsStatus::output_current() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.UpsStatus.output_current)
  return output_current_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpsStatus::set_output_current(const ::std::string& value) {
  
  output_current_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.UpsStatus.output_current)
}
inline void UpsStatus::set_output_current(const char* value) {
  
  output_current_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.UpsStatus.output_current)
}
inline void UpsStatus::set_output_current(const char* value, size_t size) {
  
  output_current_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.UpsStatus.output_current)
}
inline ::std::string* UpsStatus::mutable_output_current() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.UpsStatus.output_current)
  return output_current_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpsStatus::release_output_current() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.UpsStatus.output_current)
  
  return output_current_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpsStatus::set_allocated_output_current(::std::string* output_current) {
  if (output_current != NULL) {
    
  } else {
    
  }
  output_current_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), output_current);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.UpsStatus.output_current)
}

// optional string battery_runtime = 6;
inline void UpsStatus::clear_battery_runtime() {
  battery_runtime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpsStatus::battery_runtime() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.UpsStatus.battery_runtime)
  return battery_runtime_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpsStatus::set_battery_runtime(const ::std::string& value) {
  
  battery_runtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.UpsStatus.battery_runtime)
}
inline void UpsStatus::set_battery_runtime(const char* value) {
  
  battery_runtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.UpsStatus.battery_runtime)
}
inline void UpsStatus::set_battery_runtime(const char* value, size_t size) {
  
  battery_runtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.UpsStatus.battery_runtime)
}
inline ::std::string* UpsStatus::mutable_battery_runtime() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.UpsStatus.battery_runtime)
  return battery_runtime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpsStatus::release_battery_runtime() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.UpsStatus.battery_runtime)
  
  return battery_runtime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpsStatus::set_allocated_battery_runtime(::std::string* battery_runtime) {
  if (battery_runtime != NULL) {
    
  } else {
    
  }
  battery_runtime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), battery_runtime);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.UpsStatus.battery_runtime)
}

// optional string battery_charge = 7;
inline void UpsStatus::clear_battery_charge() {
  battery_charge_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpsStatus::battery_charge() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.UpsStatus.battery_charge)
  return battery_charge_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpsStatus::set_battery_charge(const ::std::string& value) {
  
  battery_charge_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.UpsStatus.battery_charge)
}
inline void UpsStatus::set_battery_charge(const char* value) {
  
  battery_charge_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.UpsStatus.battery_charge)
}
inline void UpsStatus::set_battery_charge(const char* value, size_t size) {
  
  battery_charge_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.UpsStatus.battery_charge)
}
inline ::std::string* UpsStatus::mutable_battery_charge() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.UpsStatus.battery_charge)
  return battery_charge_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpsStatus::release_battery_charge() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.UpsStatus.battery_charge)
  
  return battery_charge_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpsStatus::set_allocated_battery_charge(::std::string* battery_charge) {
  if (battery_charge != NULL) {
    
  } else {
    
  }
  battery_charge_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), battery_charge);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.UpsStatus.battery_charge)
}

// optional string battery_capacity = 8;
inline void UpsStatus::clear_battery_capacity() {
  battery_capacity_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpsStatus::battery_capacity() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.UpsStatus.battery_capacity)
  return battery_capacity_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpsStatus::set_battery_capacity(const ::std::string& value) {
  
  battery_capacity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.UpsStatus.battery_capacity)
}
inline void UpsStatus::set_battery_capacity(const char* value) {
  
  battery_capacity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.UpsStatus.battery_capacity)
}
inline void UpsStatus::set_battery_capacity(const char* value, size_t size) {
  
  battery_capacity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.UpsStatus.battery_capacity)
}
inline ::std::string* UpsStatus::mutable_battery_capacity() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.UpsStatus.battery_capacity)
  return battery_capacity_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpsStatus::release_battery_capacity() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.UpsStatus.battery_capacity)
  
  return battery_capacity_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpsStatus::set_allocated_battery_capacity(::std::string* battery_capacity) {
  if (battery_capacity != NULL) {
    
  } else {
    
  }
  battery_capacity_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), battery_capacity);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.UpsStatus.battery_capacity)
}

// optional string status = 9;
inline void UpsStatus::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpsStatus::status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.UpsStatus.status)
  return status_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpsStatus::set_status(const ::std::string& value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.UpsStatus.status)
}
inline void UpsStatus::set_status(const char* value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.UpsStatus.status)
}
inline void UpsStatus::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.UpsStatus.status)
}
inline ::std::string* UpsStatus::mutable_status() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.UpsStatus.status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpsStatus::release_status() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.UpsStatus.status)
  
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpsStatus::set_allocated_status(::std::string* status) {
  if (status != NULL) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.UpsStatus.status)
}

// optional string test_result = 10;
inline void UpsStatus::clear_test_result() {
  test_result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpsStatus::test_result() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.UpsStatus.test_result)
  return test_result_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpsStatus::set_test_result(const ::std::string& value) {
  
  test_result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.UpsStatus.test_result)
}
inline void UpsStatus::set_test_result(const char* value) {
  
  test_result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.UpsStatus.test_result)
}
inline void UpsStatus::set_test_result(const char* value, size_t size) {
  
  test_result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.UpsStatus.test_result)
}
inline ::std::string* UpsStatus::mutable_test_result() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.UpsStatus.test_result)
  return test_result_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpsStatus::release_test_result() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.UpsStatus.test_result)
  
  return test_result_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpsStatus::set_allocated_test_result(::std::string* test_result) {
  if (test_result != NULL) {
    
  } else {
    
  }
  test_result_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), test_result);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.UpsStatus.test_result)
}

// optional string model = 11;
inline void UpsStatus::clear_model() {
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpsStatus::model() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.UpsStatus.model)
  return model_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpsStatus::set_model(const ::std::string& value) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.UpsStatus.model)
}
inline void UpsStatus::set_model(const char* value) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.UpsStatus.model)
}
inline void UpsStatus::set_model(const char* value, size_t size) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.UpsStatus.model)
}
inline ::std::string* UpsStatus::mutable_model() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.UpsStatus.model)
  return model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpsStatus::release_model() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.UpsStatus.model)
  
  return model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpsStatus::set_allocated_model(::std::string* model) {
  if (model != NULL) {
    
  } else {
    
  }
  model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.UpsStatus.model)
}

// optional string serial_number = 12;
inline void UpsStatus::clear_serial_number() {
  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpsStatus::serial_number() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.UpsStatus.serial_number)
  return serial_number_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpsStatus::set_serial_number(const ::std::string& value) {
  
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.UpsStatus.serial_number)
}
inline void UpsStatus::set_serial_number(const char* value) {
  
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.UpsStatus.serial_number)
}
inline void UpsStatus::set_serial_number(const char* value, size_t size) {
  
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.UpsStatus.serial_number)
}
inline ::std::string* UpsStatus::mutable_serial_number() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.UpsStatus.serial_number)
  return serial_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpsStatus::release_serial_number() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.UpsStatus.serial_number)
  
  return serial_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpsStatus::set_allocated_serial_number(::std::string* serial_number) {
  if (serial_number != NULL) {
    
  } else {
    
  }
  serial_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serial_number);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.UpsStatus.serial_number)
}

// optional string firmware_version = 13;
inline void UpsStatus::clear_firmware_version() {
  firmware_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpsStatus::firmware_version() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.UpsStatus.firmware_version)
  return firmware_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpsStatus::set_firmware_version(const ::std::string& value) {
  
  firmware_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.UpsStatus.firmware_version)
}
inline void UpsStatus::set_firmware_version(const char* value) {
  
  firmware_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.UpsStatus.firmware_version)
}
inline void UpsStatus::set_firmware_version(const char* value, size_t size) {
  
  firmware_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.UpsStatus.firmware_version)
}
inline ::std::string* UpsStatus::mutable_firmware_version() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.UpsStatus.firmware_version)
  return firmware_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpsStatus::release_firmware_version() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.UpsStatus.firmware_version)
  
  return firmware_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpsStatus::set_allocated_firmware_version(::std::string* firmware_version) {
  if (firmware_version != NULL) {
    
  } else {
    
  }
  firmware_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), firmware_version);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.UpsStatus.firmware_version)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ancp00
}  // namespace analogic

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_2fUps_2eproto__INCLUDED
