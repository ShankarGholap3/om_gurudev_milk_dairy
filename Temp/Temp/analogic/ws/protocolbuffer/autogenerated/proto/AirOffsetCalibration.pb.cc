// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/AirOffsetCalibration.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/AirOffsetCalibration.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace analogic {
namespace ancp00 {

namespace {

const ::google::protobuf::Descriptor* AirOffsetCalExtReqMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AirOffsetCalExtReqMsg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* AirOffsetCalExtReqMsg_AIR_OFFSET_CAL_REQ_MSG_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* AirOffsetCalServerMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AirOffsetCalServerMsg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* AirOffsetCalServerMsg_CAL_SERVER_MSG_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* AirOffsetDynCalStatusMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AirOffsetDynCalStatusMsg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* AirOffsetDynCalStatusMsg_DYN_CAL_STATUS_ID_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_2fAirOffsetCalibration_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_proto_2fAirOffsetCalibration_2eproto() {
  protobuf_AddDesc_proto_2fAirOffsetCalibration_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto/AirOffsetCalibration.proto");
  GOOGLE_CHECK(file != NULL);
  AirOffsetCalExtReqMsg_descriptor_ = file->message_type(0);
  static const int AirOffsetCalExtReqMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AirOffsetCalExtReqMsg, msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AirOffsetCalExtReqMsg, msg_data_),
  };
  AirOffsetCalExtReqMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AirOffsetCalExtReqMsg_descriptor_,
      AirOffsetCalExtReqMsg::default_instance_,
      AirOffsetCalExtReqMsg_offsets_,
      -1,
      -1,
      -1,
      sizeof(AirOffsetCalExtReqMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AirOffsetCalExtReqMsg, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AirOffsetCalExtReqMsg, _is_default_instance_));
  AirOffsetCalExtReqMsg_AIR_OFFSET_CAL_REQ_MSG_ID_descriptor_ = AirOffsetCalExtReqMsg_descriptor_->enum_type(0);
  AirOffsetCalServerMsg_descriptor_ = file->message_type(1);
  static const int AirOffsetCalServerMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AirOffsetCalServerMsg, msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AirOffsetCalServerMsg, msg_data_),
  };
  AirOffsetCalServerMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AirOffsetCalServerMsg_descriptor_,
      AirOffsetCalServerMsg::default_instance_,
      AirOffsetCalServerMsg_offsets_,
      -1,
      -1,
      -1,
      sizeof(AirOffsetCalServerMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AirOffsetCalServerMsg, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AirOffsetCalServerMsg, _is_default_instance_));
  AirOffsetCalServerMsg_CAL_SERVER_MSG_ID_descriptor_ = AirOffsetCalServerMsg_descriptor_->enum_type(0);
  AirOffsetDynCalStatusMsg_descriptor_ = file->message_type(2);
  static const int AirOffsetDynCalStatusMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AirOffsetDynCalStatusMsg, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AirOffsetDynCalStatusMsg, data_),
  };
  AirOffsetDynCalStatusMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AirOffsetDynCalStatusMsg_descriptor_,
      AirOffsetDynCalStatusMsg::default_instance_,
      AirOffsetDynCalStatusMsg_offsets_,
      -1,
      -1,
      -1,
      sizeof(AirOffsetDynCalStatusMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AirOffsetDynCalStatusMsg, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AirOffsetDynCalStatusMsg, _is_default_instance_));
  AirOffsetDynCalStatusMsg_DYN_CAL_STATUS_ID_descriptor_ = AirOffsetDynCalStatusMsg_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_2fAirOffsetCalibration_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AirOffsetCalExtReqMsg_descriptor_, &AirOffsetCalExtReqMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AirOffsetCalServerMsg_descriptor_, &AirOffsetCalServerMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AirOffsetDynCalStatusMsg_descriptor_, &AirOffsetDynCalStatusMsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_2fAirOffsetCalibration_2eproto() {
  delete AirOffsetCalExtReqMsg::default_instance_;
  delete AirOffsetCalExtReqMsg_reflection_;
  delete AirOffsetCalServerMsg::default_instance_;
  delete AirOffsetCalServerMsg_reflection_;
  delete AirOffsetDynCalStatusMsg::default_instance_;
  delete AirOffsetDynCalStatusMsg_reflection_;
}

void protobuf_AddDesc_proto_2fAirOffsetCalibration_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_proto_2fAirOffsetCalibration_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n proto/AirOffsetCalibration.proto\022\017anal"
    "ogic.ancp00\"\342\002\n\025AirOffsetCalExtReqMsg\022P\n"
    "\006msg_id\030\001 \001(\0162@.analogic.ancp00.AirOffse"
    "tCalExtReqMsg.AIR_OFFSET_CAL_REQ_MSG_ID\022"
    "\020\n\010msg_data\030\002 \001(\t\"\344\001\n\031AIR_OFFSET_CAL_REQ"
    "_MSG_ID\022\014\n\010NOT_USED\020\000\022\034\n\030DYNAMIC_CAL_WAN"
    "T_AIR_REQ\020\001\022\033\n\027DYNAMIC_CAL_ASK_AIR_REQ\020\002"
    "\022\034\n\030DYNAMIC_CAL_NEED_AIR_REQ\020\003\022\037\n\033DYNAMI"
    "C_CAL_WANT_OFFSET_REQ\020\004\022\036\n\032DYNAMIC_CAL_A"
    "SK_OFFSET_REQ\020\005\022\037\n\033DYNAMIC_CAL_NEED_OFFS"
    "ET_REQ\020\006\"\336\002\n\025AirOffsetCalServerMsg\022H\n\006ms"
    "g_id\030\001 \001(\01628.analogic.ancp00.AirOffsetCa"
    "lServerMsg.CAL_SERVER_MSG_ID\022\020\n\010msg_data"
    "\030\002 \001(\t\"\350\001\n\021CAL_SERVER_MSG_ID\022\017\n\013AIR_CAL_"
    "REQ\020\000\022\022\n\016OFFSET_CAL_REQ\020\001\022\023\n\017AIR_CAL_NZC"
    "_REQ\020\002\022\014\n\010SCANNING\020\003\022\020\n\014NOT_SCANNING\020\004\022\027"
    "\n\023DYNAMIC_AIR_CAL_REQ\020\005\022\032\n\026DYNAMIC_OFFSE"
    "T_CAL_REQ\020\006\022\033\n\027DYNAMIC_AIR_CAL_NZC_REQ\020\007"
    "\022\021\n\rAIR_CAL_RESET\020\010\022\024\n\020OFFSET_CAL_RESET\020"
    "\t\"\260\002\n\030AirOffsetDynCalStatusMsg\022G\n\002id\030\001 \001"
    "(\0162;.analogic.ancp00.AirOffsetDynCalStat"
    "usMsg.DYN_CAL_STATUS_ID\022\014\n\004data\030\002 \001(\t\"\274\001"
    "\n\021DYN_CAL_STATUS_ID\022\023\n\017AIR_CAL_SUCCESS\020\000"
    "\022\026\n\022AIR_CAL_INCOMPLETE\020\001\022\023\n\017AIR_CAL_FAIL"
    "URE\020\002\022\032\n\026AIR_CAL_ZIPPER_IN_BEAM\020\003\022\026\n\022OFF"
    "SET_CAL_SUCCESS\020\004\022\031\n\025OFFSET_CAL_INCOMPLE"
    "TE\020\005\022\026\n\022OFFSET_CAL_FAILURE\020\006b\006proto3", 1076);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/AirOffsetCalibration.proto", &protobuf_RegisterTypes);
  AirOffsetCalExtReqMsg::default_instance_ = new AirOffsetCalExtReqMsg();
  AirOffsetCalServerMsg::default_instance_ = new AirOffsetCalServerMsg();
  AirOffsetDynCalStatusMsg::default_instance_ = new AirOffsetDynCalStatusMsg();
  AirOffsetCalExtReqMsg::default_instance_->InitAsDefaultInstance();
  AirOffsetCalServerMsg::default_instance_->InitAsDefaultInstance();
  AirOffsetDynCalStatusMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2fAirOffsetCalibration_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2fAirOffsetCalibration_2eproto {
  StaticDescriptorInitializer_proto_2fAirOffsetCalibration_2eproto() {
    protobuf_AddDesc_proto_2fAirOffsetCalibration_2eproto();
  }
} static_descriptor_initializer_proto_2fAirOffsetCalibration_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* AirOffsetCalExtReqMsg_AIR_OFFSET_CAL_REQ_MSG_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AirOffsetCalExtReqMsg_AIR_OFFSET_CAL_REQ_MSG_ID_descriptor_;
}
bool AirOffsetCalExtReqMsg_AIR_OFFSET_CAL_REQ_MSG_ID_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AirOffsetCalExtReqMsg_AIR_OFFSET_CAL_REQ_MSG_ID AirOffsetCalExtReqMsg::NOT_USED;
const AirOffsetCalExtReqMsg_AIR_OFFSET_CAL_REQ_MSG_ID AirOffsetCalExtReqMsg::DYNAMIC_CAL_WANT_AIR_REQ;
const AirOffsetCalExtReqMsg_AIR_OFFSET_CAL_REQ_MSG_ID AirOffsetCalExtReqMsg::DYNAMIC_CAL_ASK_AIR_REQ;
const AirOffsetCalExtReqMsg_AIR_OFFSET_CAL_REQ_MSG_ID AirOffsetCalExtReqMsg::DYNAMIC_CAL_NEED_AIR_REQ;
const AirOffsetCalExtReqMsg_AIR_OFFSET_CAL_REQ_MSG_ID AirOffsetCalExtReqMsg::DYNAMIC_CAL_WANT_OFFSET_REQ;
const AirOffsetCalExtReqMsg_AIR_OFFSET_CAL_REQ_MSG_ID AirOffsetCalExtReqMsg::DYNAMIC_CAL_ASK_OFFSET_REQ;
const AirOffsetCalExtReqMsg_AIR_OFFSET_CAL_REQ_MSG_ID AirOffsetCalExtReqMsg::DYNAMIC_CAL_NEED_OFFSET_REQ;
const AirOffsetCalExtReqMsg_AIR_OFFSET_CAL_REQ_MSG_ID AirOffsetCalExtReqMsg::AIR_OFFSET_CAL_REQ_MSG_ID_MIN;
const AirOffsetCalExtReqMsg_AIR_OFFSET_CAL_REQ_MSG_ID AirOffsetCalExtReqMsg::AIR_OFFSET_CAL_REQ_MSG_ID_MAX;
const int AirOffsetCalExtReqMsg::AIR_OFFSET_CAL_REQ_MSG_ID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AirOffsetCalExtReqMsg::kMsgIdFieldNumber;
const int AirOffsetCalExtReqMsg::kMsgDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AirOffsetCalExtReqMsg::AirOffsetCalExtReqMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analogic.ancp00.AirOffsetCalExtReqMsg)
}

void AirOffsetCalExtReqMsg::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

AirOffsetCalExtReqMsg::AirOffsetCalExtReqMsg(const AirOffsetCalExtReqMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analogic.ancp00.AirOffsetCalExtReqMsg)
}

void AirOffsetCalExtReqMsg::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msg_id_ = 0;
  msg_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

AirOffsetCalExtReqMsg::~AirOffsetCalExtReqMsg() {
  // @@protoc_insertion_point(destructor:analogic.ancp00.AirOffsetCalExtReqMsg)
  SharedDtor();
}

void AirOffsetCalExtReqMsg::SharedDtor() {
  msg_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void AirOffsetCalExtReqMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AirOffsetCalExtReqMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AirOffsetCalExtReqMsg_descriptor_;
}

const AirOffsetCalExtReqMsg& AirOffsetCalExtReqMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fAirOffsetCalibration_2eproto();
  return *default_instance_;
}

AirOffsetCalExtReqMsg* AirOffsetCalExtReqMsg::default_instance_ = NULL;

AirOffsetCalExtReqMsg* AirOffsetCalExtReqMsg::New(::google::protobuf::Arena* arena) const {
  AirOffsetCalExtReqMsg* n = new AirOffsetCalExtReqMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AirOffsetCalExtReqMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:analogic.ancp00.AirOffsetCalExtReqMsg)
  msg_id_ = 0;
  msg_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AirOffsetCalExtReqMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analogic.ancp00.AirOffsetCalExtReqMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .analogic.ancp00.AirOffsetCalExtReqMsg.AIR_OFFSET_CAL_REQ_MSG_ID msg_id = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_msg_id(static_cast< ::analogic::ancp00::AirOffsetCalExtReqMsg_AIR_OFFSET_CAL_REQ_MSG_ID >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_msg_data;
        break;
      }

      // optional string msg_data = 2;
      case 2: {
        if (tag == 18) {
         parse_msg_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg_data()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msg_data().data(), this->msg_data().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.AirOffsetCalExtReqMsg.msg_data"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:analogic.ancp00.AirOffsetCalExtReqMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analogic.ancp00.AirOffsetCalExtReqMsg)
  return false;
#undef DO_
}

void AirOffsetCalExtReqMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analogic.ancp00.AirOffsetCalExtReqMsg)
  // optional .analogic.ancp00.AirOffsetCalExtReqMsg.AIR_OFFSET_CAL_REQ_MSG_ID msg_id = 1;
  if (this->msg_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msg_id(), output);
  }

  // optional string msg_data = 2;
  if (this->msg_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg_data().data(), this->msg_data().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.AirOffsetCalExtReqMsg.msg_data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->msg_data(), output);
  }

  // @@protoc_insertion_point(serialize_end:analogic.ancp00.AirOffsetCalExtReqMsg)
}

::google::protobuf::uint8* AirOffsetCalExtReqMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analogic.ancp00.AirOffsetCalExtReqMsg)
  // optional .analogic.ancp00.AirOffsetCalExtReqMsg.AIR_OFFSET_CAL_REQ_MSG_ID msg_id = 1;
  if (this->msg_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msg_id(), target);
  }

  // optional string msg_data = 2;
  if (this->msg_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg_data().data(), this->msg_data().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.AirOffsetCalExtReqMsg.msg_data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg_data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:analogic.ancp00.AirOffsetCalExtReqMsg)
  return target;
}

int AirOffsetCalExtReqMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:analogic.ancp00.AirOffsetCalExtReqMsg)
  int total_size = 0;

  // optional .analogic.ancp00.AirOffsetCalExtReqMsg.AIR_OFFSET_CAL_REQ_MSG_ID msg_id = 1;
  if (this->msg_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_id());
  }

  // optional string msg_data = 2;
  if (this->msg_data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg_data());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AirOffsetCalExtReqMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analogic.ancp00.AirOffsetCalExtReqMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AirOffsetCalExtReqMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AirOffsetCalExtReqMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analogic.ancp00.AirOffsetCalExtReqMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analogic.ancp00.AirOffsetCalExtReqMsg)
    MergeFrom(*source);
  }
}

void AirOffsetCalExtReqMsg::MergeFrom(const AirOffsetCalExtReqMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analogic.ancp00.AirOffsetCalExtReqMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.msg_id() != 0) {
    set_msg_id(from.msg_id());
  }
  if (from.msg_data().size() > 0) {

    msg_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_data_);
  }
}

void AirOffsetCalExtReqMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analogic.ancp00.AirOffsetCalExtReqMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AirOffsetCalExtReqMsg::CopyFrom(const AirOffsetCalExtReqMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analogic.ancp00.AirOffsetCalExtReqMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AirOffsetCalExtReqMsg::IsInitialized() const {

  return true;
}

void AirOffsetCalExtReqMsg::Swap(AirOffsetCalExtReqMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AirOffsetCalExtReqMsg::InternalSwap(AirOffsetCalExtReqMsg* other) {
  std::swap(msg_id_, other->msg_id_);
  msg_data_.Swap(&other->msg_data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AirOffsetCalExtReqMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AirOffsetCalExtReqMsg_descriptor_;
  metadata.reflection = AirOffsetCalExtReqMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AirOffsetCalExtReqMsg

// optional .analogic.ancp00.AirOffsetCalExtReqMsg.AIR_OFFSET_CAL_REQ_MSG_ID msg_id = 1;
void AirOffsetCalExtReqMsg::clear_msg_id() {
  msg_id_ = 0;
}
 ::analogic::ancp00::AirOffsetCalExtReqMsg_AIR_OFFSET_CAL_REQ_MSG_ID AirOffsetCalExtReqMsg::msg_id() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.AirOffsetCalExtReqMsg.msg_id)
  return static_cast< ::analogic::ancp00::AirOffsetCalExtReqMsg_AIR_OFFSET_CAL_REQ_MSG_ID >(msg_id_);
}
 void AirOffsetCalExtReqMsg::set_msg_id(::analogic::ancp00::AirOffsetCalExtReqMsg_AIR_OFFSET_CAL_REQ_MSG_ID value) {
  
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.AirOffsetCalExtReqMsg.msg_id)
}

// optional string msg_data = 2;
void AirOffsetCalExtReqMsg::clear_msg_data() {
  msg_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& AirOffsetCalExtReqMsg::msg_data() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.AirOffsetCalExtReqMsg.msg_data)
  return msg_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AirOffsetCalExtReqMsg::set_msg_data(const ::std::string& value) {
  
  msg_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.AirOffsetCalExtReqMsg.msg_data)
}
 void AirOffsetCalExtReqMsg::set_msg_data(const char* value) {
  
  msg_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.AirOffsetCalExtReqMsg.msg_data)
}
 void AirOffsetCalExtReqMsg::set_msg_data(const char* value, size_t size) {
  
  msg_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.AirOffsetCalExtReqMsg.msg_data)
}
 ::std::string* AirOffsetCalExtReqMsg::mutable_msg_data() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.AirOffsetCalExtReqMsg.msg_data)
  return msg_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AirOffsetCalExtReqMsg::release_msg_data() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.AirOffsetCalExtReqMsg.msg_data)
  
  return msg_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AirOffsetCalExtReqMsg::set_allocated_msg_data(::std::string* msg_data) {
  if (msg_data != NULL) {
    
  } else {
    
  }
  msg_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_data);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.AirOffsetCalExtReqMsg.msg_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* AirOffsetCalServerMsg_CAL_SERVER_MSG_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AirOffsetCalServerMsg_CAL_SERVER_MSG_ID_descriptor_;
}
bool AirOffsetCalServerMsg_CAL_SERVER_MSG_ID_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AirOffsetCalServerMsg_CAL_SERVER_MSG_ID AirOffsetCalServerMsg::AIR_CAL_REQ;
const AirOffsetCalServerMsg_CAL_SERVER_MSG_ID AirOffsetCalServerMsg::OFFSET_CAL_REQ;
const AirOffsetCalServerMsg_CAL_SERVER_MSG_ID AirOffsetCalServerMsg::AIR_CAL_NZC_REQ;
const AirOffsetCalServerMsg_CAL_SERVER_MSG_ID AirOffsetCalServerMsg::SCANNING;
const AirOffsetCalServerMsg_CAL_SERVER_MSG_ID AirOffsetCalServerMsg::NOT_SCANNING;
const AirOffsetCalServerMsg_CAL_SERVER_MSG_ID AirOffsetCalServerMsg::DYNAMIC_AIR_CAL_REQ;
const AirOffsetCalServerMsg_CAL_SERVER_MSG_ID AirOffsetCalServerMsg::DYNAMIC_OFFSET_CAL_REQ;
const AirOffsetCalServerMsg_CAL_SERVER_MSG_ID AirOffsetCalServerMsg::DYNAMIC_AIR_CAL_NZC_REQ;
const AirOffsetCalServerMsg_CAL_SERVER_MSG_ID AirOffsetCalServerMsg::AIR_CAL_RESET;
const AirOffsetCalServerMsg_CAL_SERVER_MSG_ID AirOffsetCalServerMsg::OFFSET_CAL_RESET;
const AirOffsetCalServerMsg_CAL_SERVER_MSG_ID AirOffsetCalServerMsg::CAL_SERVER_MSG_ID_MIN;
const AirOffsetCalServerMsg_CAL_SERVER_MSG_ID AirOffsetCalServerMsg::CAL_SERVER_MSG_ID_MAX;
const int AirOffsetCalServerMsg::CAL_SERVER_MSG_ID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AirOffsetCalServerMsg::kMsgIdFieldNumber;
const int AirOffsetCalServerMsg::kMsgDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AirOffsetCalServerMsg::AirOffsetCalServerMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analogic.ancp00.AirOffsetCalServerMsg)
}

void AirOffsetCalServerMsg::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

AirOffsetCalServerMsg::AirOffsetCalServerMsg(const AirOffsetCalServerMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analogic.ancp00.AirOffsetCalServerMsg)
}

void AirOffsetCalServerMsg::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msg_id_ = 0;
  msg_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

AirOffsetCalServerMsg::~AirOffsetCalServerMsg() {
  // @@protoc_insertion_point(destructor:analogic.ancp00.AirOffsetCalServerMsg)
  SharedDtor();
}

void AirOffsetCalServerMsg::SharedDtor() {
  msg_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void AirOffsetCalServerMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AirOffsetCalServerMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AirOffsetCalServerMsg_descriptor_;
}

const AirOffsetCalServerMsg& AirOffsetCalServerMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fAirOffsetCalibration_2eproto();
  return *default_instance_;
}

AirOffsetCalServerMsg* AirOffsetCalServerMsg::default_instance_ = NULL;

AirOffsetCalServerMsg* AirOffsetCalServerMsg::New(::google::protobuf::Arena* arena) const {
  AirOffsetCalServerMsg* n = new AirOffsetCalServerMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AirOffsetCalServerMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:analogic.ancp00.AirOffsetCalServerMsg)
  msg_id_ = 0;
  msg_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AirOffsetCalServerMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analogic.ancp00.AirOffsetCalServerMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .analogic.ancp00.AirOffsetCalServerMsg.CAL_SERVER_MSG_ID msg_id = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_msg_id(static_cast< ::analogic::ancp00::AirOffsetCalServerMsg_CAL_SERVER_MSG_ID >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_msg_data;
        break;
      }

      // optional string msg_data = 2;
      case 2: {
        if (tag == 18) {
         parse_msg_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg_data()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msg_data().data(), this->msg_data().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.AirOffsetCalServerMsg.msg_data"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:analogic.ancp00.AirOffsetCalServerMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analogic.ancp00.AirOffsetCalServerMsg)
  return false;
#undef DO_
}

void AirOffsetCalServerMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analogic.ancp00.AirOffsetCalServerMsg)
  // optional .analogic.ancp00.AirOffsetCalServerMsg.CAL_SERVER_MSG_ID msg_id = 1;
  if (this->msg_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msg_id(), output);
  }

  // optional string msg_data = 2;
  if (this->msg_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg_data().data(), this->msg_data().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.AirOffsetCalServerMsg.msg_data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->msg_data(), output);
  }

  // @@protoc_insertion_point(serialize_end:analogic.ancp00.AirOffsetCalServerMsg)
}

::google::protobuf::uint8* AirOffsetCalServerMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analogic.ancp00.AirOffsetCalServerMsg)
  // optional .analogic.ancp00.AirOffsetCalServerMsg.CAL_SERVER_MSG_ID msg_id = 1;
  if (this->msg_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msg_id(), target);
  }

  // optional string msg_data = 2;
  if (this->msg_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg_data().data(), this->msg_data().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.AirOffsetCalServerMsg.msg_data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg_data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:analogic.ancp00.AirOffsetCalServerMsg)
  return target;
}

int AirOffsetCalServerMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:analogic.ancp00.AirOffsetCalServerMsg)
  int total_size = 0;

  // optional .analogic.ancp00.AirOffsetCalServerMsg.CAL_SERVER_MSG_ID msg_id = 1;
  if (this->msg_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_id());
  }

  // optional string msg_data = 2;
  if (this->msg_data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg_data());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AirOffsetCalServerMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analogic.ancp00.AirOffsetCalServerMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AirOffsetCalServerMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AirOffsetCalServerMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analogic.ancp00.AirOffsetCalServerMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analogic.ancp00.AirOffsetCalServerMsg)
    MergeFrom(*source);
  }
}

void AirOffsetCalServerMsg::MergeFrom(const AirOffsetCalServerMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analogic.ancp00.AirOffsetCalServerMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.msg_id() != 0) {
    set_msg_id(from.msg_id());
  }
  if (from.msg_data().size() > 0) {

    msg_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_data_);
  }
}

void AirOffsetCalServerMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analogic.ancp00.AirOffsetCalServerMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AirOffsetCalServerMsg::CopyFrom(const AirOffsetCalServerMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analogic.ancp00.AirOffsetCalServerMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AirOffsetCalServerMsg::IsInitialized() const {

  return true;
}

void AirOffsetCalServerMsg::Swap(AirOffsetCalServerMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AirOffsetCalServerMsg::InternalSwap(AirOffsetCalServerMsg* other) {
  std::swap(msg_id_, other->msg_id_);
  msg_data_.Swap(&other->msg_data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AirOffsetCalServerMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AirOffsetCalServerMsg_descriptor_;
  metadata.reflection = AirOffsetCalServerMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AirOffsetCalServerMsg

// optional .analogic.ancp00.AirOffsetCalServerMsg.CAL_SERVER_MSG_ID msg_id = 1;
void AirOffsetCalServerMsg::clear_msg_id() {
  msg_id_ = 0;
}
 ::analogic::ancp00::AirOffsetCalServerMsg_CAL_SERVER_MSG_ID AirOffsetCalServerMsg::msg_id() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.AirOffsetCalServerMsg.msg_id)
  return static_cast< ::analogic::ancp00::AirOffsetCalServerMsg_CAL_SERVER_MSG_ID >(msg_id_);
}
 void AirOffsetCalServerMsg::set_msg_id(::analogic::ancp00::AirOffsetCalServerMsg_CAL_SERVER_MSG_ID value) {
  
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.AirOffsetCalServerMsg.msg_id)
}

// optional string msg_data = 2;
void AirOffsetCalServerMsg::clear_msg_data() {
  msg_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& AirOffsetCalServerMsg::msg_data() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.AirOffsetCalServerMsg.msg_data)
  return msg_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AirOffsetCalServerMsg::set_msg_data(const ::std::string& value) {
  
  msg_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.AirOffsetCalServerMsg.msg_data)
}
 void AirOffsetCalServerMsg::set_msg_data(const char* value) {
  
  msg_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.AirOffsetCalServerMsg.msg_data)
}
 void AirOffsetCalServerMsg::set_msg_data(const char* value, size_t size) {
  
  msg_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.AirOffsetCalServerMsg.msg_data)
}
 ::std::string* AirOffsetCalServerMsg::mutable_msg_data() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.AirOffsetCalServerMsg.msg_data)
  return msg_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AirOffsetCalServerMsg::release_msg_data() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.AirOffsetCalServerMsg.msg_data)
  
  return msg_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AirOffsetCalServerMsg::set_allocated_msg_data(::std::string* msg_data) {
  if (msg_data != NULL) {
    
  } else {
    
  }
  msg_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_data);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.AirOffsetCalServerMsg.msg_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* AirOffsetDynCalStatusMsg_DYN_CAL_STATUS_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AirOffsetDynCalStatusMsg_DYN_CAL_STATUS_ID_descriptor_;
}
bool AirOffsetDynCalStatusMsg_DYN_CAL_STATUS_ID_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AirOffsetDynCalStatusMsg_DYN_CAL_STATUS_ID AirOffsetDynCalStatusMsg::AIR_CAL_SUCCESS;
const AirOffsetDynCalStatusMsg_DYN_CAL_STATUS_ID AirOffsetDynCalStatusMsg::AIR_CAL_INCOMPLETE;
const AirOffsetDynCalStatusMsg_DYN_CAL_STATUS_ID AirOffsetDynCalStatusMsg::AIR_CAL_FAILURE;
const AirOffsetDynCalStatusMsg_DYN_CAL_STATUS_ID AirOffsetDynCalStatusMsg::AIR_CAL_ZIPPER_IN_BEAM;
const AirOffsetDynCalStatusMsg_DYN_CAL_STATUS_ID AirOffsetDynCalStatusMsg::OFFSET_CAL_SUCCESS;
const AirOffsetDynCalStatusMsg_DYN_CAL_STATUS_ID AirOffsetDynCalStatusMsg::OFFSET_CAL_INCOMPLETE;
const AirOffsetDynCalStatusMsg_DYN_CAL_STATUS_ID AirOffsetDynCalStatusMsg::OFFSET_CAL_FAILURE;
const AirOffsetDynCalStatusMsg_DYN_CAL_STATUS_ID AirOffsetDynCalStatusMsg::DYN_CAL_STATUS_ID_MIN;
const AirOffsetDynCalStatusMsg_DYN_CAL_STATUS_ID AirOffsetDynCalStatusMsg::DYN_CAL_STATUS_ID_MAX;
const int AirOffsetDynCalStatusMsg::DYN_CAL_STATUS_ID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AirOffsetDynCalStatusMsg::kIdFieldNumber;
const int AirOffsetDynCalStatusMsg::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AirOffsetDynCalStatusMsg::AirOffsetDynCalStatusMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analogic.ancp00.AirOffsetDynCalStatusMsg)
}

void AirOffsetDynCalStatusMsg::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

AirOffsetDynCalStatusMsg::AirOffsetDynCalStatusMsg(const AirOffsetDynCalStatusMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analogic.ancp00.AirOffsetDynCalStatusMsg)
}

void AirOffsetDynCalStatusMsg::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

AirOffsetDynCalStatusMsg::~AirOffsetDynCalStatusMsg() {
  // @@protoc_insertion_point(destructor:analogic.ancp00.AirOffsetDynCalStatusMsg)
  SharedDtor();
}

void AirOffsetDynCalStatusMsg::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void AirOffsetDynCalStatusMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AirOffsetDynCalStatusMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AirOffsetDynCalStatusMsg_descriptor_;
}

const AirOffsetDynCalStatusMsg& AirOffsetDynCalStatusMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fAirOffsetCalibration_2eproto();
  return *default_instance_;
}

AirOffsetDynCalStatusMsg* AirOffsetDynCalStatusMsg::default_instance_ = NULL;

AirOffsetDynCalStatusMsg* AirOffsetDynCalStatusMsg::New(::google::protobuf::Arena* arena) const {
  AirOffsetDynCalStatusMsg* n = new AirOffsetDynCalStatusMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AirOffsetDynCalStatusMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:analogic.ancp00.AirOffsetDynCalStatusMsg)
  id_ = 0;
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AirOffsetDynCalStatusMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analogic.ancp00.AirOffsetDynCalStatusMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .analogic.ancp00.AirOffsetDynCalStatusMsg.DYN_CAL_STATUS_ID id = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_id(static_cast< ::analogic::ancp00::AirOffsetDynCalStatusMsg_DYN_CAL_STATUS_ID >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional string data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.AirOffsetDynCalStatusMsg.data"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:analogic.ancp00.AirOffsetDynCalStatusMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analogic.ancp00.AirOffsetDynCalStatusMsg)
  return false;
#undef DO_
}

void AirOffsetDynCalStatusMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analogic.ancp00.AirOffsetDynCalStatusMsg)
  // optional .analogic.ancp00.AirOffsetDynCalStatusMsg.DYN_CAL_STATUS_ID id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->id(), output);
  }

  // optional string data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.AirOffsetDynCalStatusMsg.data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:analogic.ancp00.AirOffsetDynCalStatusMsg)
}

::google::protobuf::uint8* AirOffsetDynCalStatusMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analogic.ancp00.AirOffsetDynCalStatusMsg)
  // optional .analogic.ancp00.AirOffsetDynCalStatusMsg.DYN_CAL_STATUS_ID id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->id(), target);
  }

  // optional string data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.AirOffsetDynCalStatusMsg.data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:analogic.ancp00.AirOffsetDynCalStatusMsg)
  return target;
}

int AirOffsetDynCalStatusMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:analogic.ancp00.AirOffsetDynCalStatusMsg)
  int total_size = 0;

  // optional .analogic.ancp00.AirOffsetDynCalStatusMsg.DYN_CAL_STATUS_ID id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->id());
  }

  // optional string data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AirOffsetDynCalStatusMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analogic.ancp00.AirOffsetDynCalStatusMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AirOffsetDynCalStatusMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AirOffsetDynCalStatusMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analogic.ancp00.AirOffsetDynCalStatusMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analogic.ancp00.AirOffsetDynCalStatusMsg)
    MergeFrom(*source);
  }
}

void AirOffsetDynCalStatusMsg::MergeFrom(const AirOffsetDynCalStatusMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analogic.ancp00.AirOffsetDynCalStatusMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void AirOffsetDynCalStatusMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analogic.ancp00.AirOffsetDynCalStatusMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AirOffsetDynCalStatusMsg::CopyFrom(const AirOffsetDynCalStatusMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analogic.ancp00.AirOffsetDynCalStatusMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AirOffsetDynCalStatusMsg::IsInitialized() const {

  return true;
}

void AirOffsetDynCalStatusMsg::Swap(AirOffsetDynCalStatusMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AirOffsetDynCalStatusMsg::InternalSwap(AirOffsetDynCalStatusMsg* other) {
  std::swap(id_, other->id_);
  data_.Swap(&other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AirOffsetDynCalStatusMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AirOffsetDynCalStatusMsg_descriptor_;
  metadata.reflection = AirOffsetDynCalStatusMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AirOffsetDynCalStatusMsg

// optional .analogic.ancp00.AirOffsetDynCalStatusMsg.DYN_CAL_STATUS_ID id = 1;
void AirOffsetDynCalStatusMsg::clear_id() {
  id_ = 0;
}
 ::analogic::ancp00::AirOffsetDynCalStatusMsg_DYN_CAL_STATUS_ID AirOffsetDynCalStatusMsg::id() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.AirOffsetDynCalStatusMsg.id)
  return static_cast< ::analogic::ancp00::AirOffsetDynCalStatusMsg_DYN_CAL_STATUS_ID >(id_);
}
 void AirOffsetDynCalStatusMsg::set_id(::analogic::ancp00::AirOffsetDynCalStatusMsg_DYN_CAL_STATUS_ID value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.AirOffsetDynCalStatusMsg.id)
}

// optional string data = 2;
void AirOffsetDynCalStatusMsg::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& AirOffsetDynCalStatusMsg::data() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.AirOffsetDynCalStatusMsg.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AirOffsetDynCalStatusMsg::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.AirOffsetDynCalStatusMsg.data)
}
 void AirOffsetDynCalStatusMsg::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.AirOffsetDynCalStatusMsg.data)
}
 void AirOffsetDynCalStatusMsg::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.AirOffsetDynCalStatusMsg.data)
}
 ::std::string* AirOffsetDynCalStatusMsg::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.AirOffsetDynCalStatusMsg.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AirOffsetDynCalStatusMsg::release_data() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.AirOffsetDynCalStatusMsg.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AirOffsetDynCalStatusMsg::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.AirOffsetDynCalStatusMsg.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ancp00
}  // namespace analogic

// @@protoc_insertion_point(global_scope)
