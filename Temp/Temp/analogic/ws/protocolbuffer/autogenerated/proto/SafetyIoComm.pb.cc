// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/SafetyIoComm.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/SafetyIoComm.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace analogic {
namespace ancp00 {

namespace {

const ::google::protobuf::Descriptor* SafetyIoCommMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SafetyIoCommMsg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SafetyIoCommMsg_CmdId_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SafetyIoCommMsg_XrayCmdBits_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SafetyIoCommData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SafetyIoCommData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SafetyIoCommData_REG_ADDRESS_0_BITS_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SafetyIoCommData_REG_ADDRESS_1_BITS_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SafetyIoCommData_REG_ADDRESS_2_BITS_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SafetyIoCommData_REG_ADDRESS_3_BITS_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SafetyIoCommData_REG_ADDRESS_4_BITS_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SafetyIoCommData_REG_ADDRESS_5_BITS_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SafetyIoCommData_REG_ADDRESS_6_BITS_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SafetyIoCommData_REG_ADDRESS_7_BITS_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SafetyIoCommData_REG_ADDRESS_255_BITS_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SafetyIoCommData_REG_ADDRESS_512_BITS_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SafetyIoCommData_REG_ADDRESS_513_BITS_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_2fSafetyIoComm_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_proto_2fSafetyIoComm_2eproto() {
  protobuf_AddDesc_proto_2fSafetyIoComm_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto/SafetyIoComm.proto");
  GOOGLE_CHECK(file != NULL);
  SafetyIoCommMsg_descriptor_ = file->message_type(0);
  static const int SafetyIoCommMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoCommMsg, id_),
  };
  SafetyIoCommMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SafetyIoCommMsg_descriptor_,
      SafetyIoCommMsg::default_instance_,
      SafetyIoCommMsg_offsets_,
      -1,
      -1,
      -1,
      sizeof(SafetyIoCommMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoCommMsg, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoCommMsg, _is_default_instance_));
  SafetyIoCommMsg_CmdId_descriptor_ = SafetyIoCommMsg_descriptor_->enum_type(0);
  SafetyIoCommMsg_XrayCmdBits_descriptor_ = SafetyIoCommMsg_descriptor_->enum_type(1);
  SafetyIoCommData_descriptor_ = file->message_type(1);
  static const int SafetyIoCommData_offsets_[76] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoCommData, read_reg_0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoCommData, read_reg_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoCommData, read_reg_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoCommData, read_reg_3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoCommData, read_reg_4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoCommData, read_reg_5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoCommData, read_reg_6_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoCommData, read_reg_7_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoCommData, write_reg_0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoCommData, write_reg_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoCommData, watchdog_reg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoCommData, left_access_panel_ch1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoCommData, left_access_panel_ch2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoCommData, left_access_solenoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoCommData, left_access_solenoid_locked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoCommData, right_access_panel_ch1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoCommData, right_access_panel_ch2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoCommData, right_access_solenoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoCommData, right_access_solenoid_locked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoCommData, access_solenoid_override_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoCommData, entrance_port_estop_ch1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoCommData, entrance_port_estop_ch2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoCommData, exit_port_estop_ch1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoCommData, exit_port_estop_ch2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoCommData, console_port_estop_ch1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoCommData, consol_port_estop_ch2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoCommData, bhs_estop_ch1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoCommData, bhs_estop_ch2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoCommData, inverter_contactors_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoCommData, inverter_enable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoCommData, inverter_xray_on_sense_ch1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoCommData, inverter_xray_on_sense_ch2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoCommData, inverter_line_in_fault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoCommData, inverter_internal_fault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoCommData, inverter_load_fault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoCommData, inverter_powerlink_ok_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoCommData, motion_contactors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoCommData, gantry_interference_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoCommData, bag_sensor_entrance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoCommData, bag_sensor_exit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoCommData, conveyor_restart_lamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoCommData, conveyor_restart_button_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoCommData, operator_present_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoCommData, xray_lamp1_pli_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoCommData, xray_lamp2_sw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoCommData, xray_lamp_test_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoCommData, xray_cmd_off_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoCommData, xray_cmd_fault_reset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoCommData, xray_cmd_minimization_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoCommData, xray_cmd_reserved_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoCommData, xray_cmd_seasoning_short_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoCommData, xray_cmd_seasoning_medium_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoCommData, xray_cmd_seasoning_long_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoCommData, xray_cmd_on_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoCommData, xray_motion_enable_ch1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoCommData, xray_motion_enable_ch2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoCommData, safety_reset_required_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoCommData, safety_reset_button_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoCommData, panels_unlocked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoCommData, entrance_estop_fault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoCommData, exit_estop_fault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoCommData, console_estop_fault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoCommData, bhs_estop_fault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoCommData, access_panel_left_magnetic_interlock_fault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoCommData, access_panel_right_magnetic_interlock_fault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoCommData, motion_contactors_status_fault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoCommData, powerlink_contactors_status_fault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoCommData, rotational_envelope_violation_sensor_fault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoCommData, standstill_monitor_fault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoCommData, overspeed_fault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoCommData, access_panels_locking_fault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoCommData, xray_motion_keyswitch_fault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoCommData, encoder_fault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoCommData, speed_monitor_reset_required_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoCommData, standstill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoCommData, standstill_monitor_enabled_),
  };
  SafetyIoCommData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SafetyIoCommData_descriptor_,
      SafetyIoCommData::default_instance_,
      SafetyIoCommData_offsets_,
      -1,
      -1,
      -1,
      sizeof(SafetyIoCommData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoCommData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoCommData, _is_default_instance_));
  SafetyIoCommData_REG_ADDRESS_0_BITS_descriptor_ = SafetyIoCommData_descriptor_->enum_type(0);
  SafetyIoCommData_REG_ADDRESS_1_BITS_descriptor_ = SafetyIoCommData_descriptor_->enum_type(1);
  SafetyIoCommData_REG_ADDRESS_2_BITS_descriptor_ = SafetyIoCommData_descriptor_->enum_type(2);
  SafetyIoCommData_REG_ADDRESS_3_BITS_descriptor_ = SafetyIoCommData_descriptor_->enum_type(3);
  SafetyIoCommData_REG_ADDRESS_4_BITS_descriptor_ = SafetyIoCommData_descriptor_->enum_type(4);
  SafetyIoCommData_REG_ADDRESS_5_BITS_descriptor_ = SafetyIoCommData_descriptor_->enum_type(5);
  SafetyIoCommData_REG_ADDRESS_6_BITS_descriptor_ = SafetyIoCommData_descriptor_->enum_type(6);
  SafetyIoCommData_REG_ADDRESS_7_BITS_descriptor_ = SafetyIoCommData_descriptor_->enum_type(7);
  SafetyIoCommData_REG_ADDRESS_255_BITS_descriptor_ = SafetyIoCommData_descriptor_->enum_type(8);
  SafetyIoCommData_REG_ADDRESS_512_BITS_descriptor_ = SafetyIoCommData_descriptor_->enum_type(9);
  SafetyIoCommData_REG_ADDRESS_513_BITS_descriptor_ = SafetyIoCommData_descriptor_->enum_type(10);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_2fSafetyIoComm_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SafetyIoCommMsg_descriptor_, &SafetyIoCommMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SafetyIoCommData_descriptor_, &SafetyIoCommData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_2fSafetyIoComm_2eproto() {
  delete SafetyIoCommMsg::default_instance_;
  delete SafetyIoCommMsg_reflection_;
  delete SafetyIoCommData::default_instance_;
  delete SafetyIoCommData_reflection_;
}

void protobuf_AddDesc_proto_2fSafetyIoComm_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_proto_2fSafetyIoComm_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030proto/SafetyIoComm.proto\022\017analogic.anc"
    "p00\"\250\005\n\017SafetyIoCommMsg\0222\n\002id\030\001 \001(\0162&.an"
    "alogic.ancp00.SafetyIoCommMsg.CmdId\"\300\002\n\005"
    "CmdId\022\024\n\020POWERLINK_ENABLE\020\000\022\025\n\021POWERLINK"
    "_DISABLE\020\001\022\035\n\031CONVEYOR_RESTART_LIGHT_ON\020"
    "\002\022\036\n\032CONVEYOR_RESTART_LIGHT_OFF\020\003\022\014\n\010XRA"
    "Y_OFF\020\004\022\024\n\020XRAY_FAULT_RESET\020\005\022\021\n\rXRAY_MI"
    "NIMIZE\020\006\022\021\n\rXRAY_RESERVED\020\007\022\031\n\025XRAY_SEAS"
    "ON_SHORT_SEQ\020\010\022\032\n\026XRAY_SEASON_MEDIUM_SEQ"
    "\020\t\022\030\n\024XRAY_SEASON_LONG_SEQ\020\n\022\013\n\007XRAY_ON\020"
    "\013\022\020\n\014XRAY_LAMP_ON\020\014\022\021\n\rXRAY_LAMP_OFF\020\r\"\235"
    "\002\n\013XrayCmdBits\022\025\n\021XRAY_CMD_OFF_BITS\020\000\022\036\n"
    "\031XRAY_CMD_FAULT_RESET_BITS\020\200\002\022\033\n\026XRAY_CM"
    "D_MINIMIZE_BITS\020\200\004\022#\n\036XRAY_CMD_SEASON_SH"
    "ORT_SEQ_BITS\020\200\006\022\033\n\026XRAY_CMD_RESERVED_BIT"
    "S\020\200\010\022$\n\037XRAY_CMD_SEASON_MEDIUM_SEQ_BITS\020"
    "\200\n\022\"\n\035XRAY_CMD_SEASON_LONG_SEQ_BITS\020\200\014\022\025"
    "\n\020XRAY_CMD_ON_BITS\020\200\016\022\027\n\021XRAY_CMD_BIT_MA"
    "SK\020\200\376\003\"\332,\n\020SafetyIoCommData\022\022\n\nread_reg_"
    "0\030\001 \001(\007\022\022\n\nread_reg_1\030\002 \001(\007\022\022\n\nread_reg_"
    "2\030\003 \001(\007\022\022\n\nread_reg_3\030\004 \001(\007\022\022\n\nread_reg_"
    "4\030\005 \001(\007\022\022\n\nread_reg_5\030\006 \001(\007\022\022\n\nread_reg_"
    "6\030\007 \001(\007\022\022\n\nread_reg_7\030\010 \001(\007\022\023\n\013write_reg"
    "_0\030\t \001(\007\022\023\n\013write_reg_1\030\n \001(\007\022\024\n\014watchdo"
    "g_reg\030\013 \001(\007\022\035\n\025left_access_panel_ch1\030\024 \001"
    "(\010\022\035\n\025left_access_panel_ch2\030\025 \001(\010\022\034\n\024lef"
    "t_access_solenoid\030\026 \001(\010\022#\n\033left_access_s"
    "olenoid_locked\030\027 \001(\010\022\036\n\026right_access_pan"
    "el_ch1\030\030 \001(\010\022\036\n\026right_access_panel_ch2\030\031"
    " \001(\010\022\035\n\025right_access_solenoid\030\032 \001(\010\022$\n\034r"
    "ight_access_solenoid_locked\030\033 \001(\010\022 \n\030acc"
    "ess_solenoid_override\030\035 \001(\010\022\037\n\027entrance_"
    "port_estop_ch1\030( \001(\010\022\037\n\027entrance_port_es"
    "top_ch2\030) \001(\010\022\033\n\023exit_port_estop_ch1\030* \001"
    "(\010\022\033\n\023exit_port_estop_ch2\030+ \001(\010\022\036\n\026conso"
    "le_port_estop_ch1\030, \001(\010\022\035\n\025consol_port_e"
    "stop_ch2\030- \001(\010\022\025\n\rbhs_estop_ch1\030. \001(\010\022\025\n"
    "\rbhs_estop_ch2\030/ \001(\010\022\"\n\032inverter_contact"
    "ors_status\030< \001(\010\022\027\n\017inverter_enable\030= \001("
    "\010\022\"\n\032inverter_xray_on_sense_ch1\030> \001(\010\022\"\n"
    "\032inverter_xray_on_sense_ch2\030\? \001(\010\022\036\n\026inv"
    "erter_line_in_fault\030@ \001(\010\022\037\n\027inverter_in"
    "ternal_fault\030A \001(\010\022\033\n\023inverter_load_faul"
    "t\030B \001(\010\022\035\n\025inverter_powerlink_ok\030C \001(\010\022\031"
    "\n\021motion_contactors\030P \001(\010\022\033\n\023gantry_inte"
    "rference\030Q \001(\010\022\033\n\023bag_sensor_entrance\030R "
    "\001(\010\022\027\n\017bag_sensor_exit\030S \001(\010\022\035\n\025conveyor"
    "_restart_lamp\030U \001(\010\022\037\n\027conveyor_restart_"
    "button\030V \001(\010\022\030\n\020operator_present\030W \001(\010\022\026"
    "\n\016xray_lamp1_pli\030d \001(\010\022\025\n\rxray_lamp2_sw\030"
    "e \001(\010\022\026\n\016xray_lamp_test\030f \001(\010\022\024\n\014xray_cm"
    "d_off\030g \001(\010\022\034\n\024xray_cmd_fault_reset\030h \001("
    "\010\022\035\n\025xray_cmd_minimization\030i \001(\010\022\031\n\021xray"
    "_cmd_reserved\030j \001(\010\022 \n\030xray_cmd_seasonin"
    "g_short\030k \001(\010\022!\n\031xray_cmd_seasoning_medi"
    "um\030l \001(\010\022\037\n\027xray_cmd_seasoning_long\030m \001("
    "\010\022\023\n\013xray_cmd_on\030n \001(\010\022\036\n\026xray_motion_en"
    "able_ch1\030x \001(\010\022\036\n\026xray_motion_enable_ch2"
    "\030y \001(\010\022\035\n\025safety_reset_required\030z \001(\010\022\033\n"
    "\023safety_reset_button\030{ \001(\010\022\027\n\017panels_unl"
    "ocked\030| \001(\010\022\035\n\024entrance_estop_fault\030\214\001 \001"
    "(\010\022\031\n\020exit_estop_fault\030\215\001 \001(\010\022\034\n\023console"
    "_estop_fault\030\216\001 \001(\010\022\030\n\017bhs_estop_fault\030\217"
    "\001 \001(\010\0223\n*access_panel_left_magnetic_inte"
    "rlock_fault\030\220\001 \001(\010\0224\n+access_panel_right"
    "_magnetic_interlock_fault\030\221\001 \001(\010\022\'\n\036moti"
    "on_contactors_status_fault\030\222\001 \001(\010\022*\n!pow"
    "erlink_contactors_status_fault\030\223\001 \001(\010\0223\n"
    "*rotational_envelope_violation_sensor_fa"
    "ult\030\224\001 \001(\010\022!\n\030standstill_monitor_fault\030\225"
    "\001 \001(\010\022\030\n\017overspeed_fault\030\226\001 \001(\010\022$\n\033acces"
    "s_panels_locking_fault\030\227\001 \001(\010\022$\n\033xray_mo"
    "tion_keyswitch_fault\030\230\001 \001(\010\022\026\n\rencoder_f"
    "ault\030\231\001 \001(\010\022%\n\034speed_monitor_reset_requi"
    "red\030\240\001 \001(\010\022\023\n\nstandstill\030\241\001 \001(\010\022#\n\032stand"
    "still_monitor_enabled\030\242\001 \001(\010\"\263\004\n\022REG_ADD"
    "RESS_0_BITS\022\016\n\nNOT_USED_0\020\000\022\033\n\027ESTOP_ENT"
    "RANCE_PORT_CH1\020\001\022\033\n\027ESTOP_ENTRANCE_PORT_"
    "CH2\020\002\022\027\n\023ESTOP_EXIT_PORT_CH1\020\004\022\027\n\023ESTOP_"
    "EXIT_PORT_CH2\020\010\022\025\n\021ESTOP_CONSOLE_CH1\020\020\022\025"
    "\n\021ESTOP_CONSOLE_CH2\020 \022\020\n\014STOP_BHS_CH1\020@\022"
    "\021\n\014STOP_BHS_CH2\020\200\001\022%\n ACCESS_PANEL_LEFT_"
    "INTERLOCKS_CH1\020\200\002\022%\n ACCESS_PANEL_LEFT_I"
    "NTERLOCKS_CH2\020\200\004\022&\n!ACCESS_PANEL_RIGHT_I"
    "NTERLOCKS_CH1\020\200\010\022&\n!ACCESS_PANEL_RIGHT_I"
    "NTERLOCKS_CH2\020\200\020\022&\n!ACCESS_PANEL_LEFT_SO"
    "LENOID_STATUS\020\200 \022-\n(ACCESS_PANEL_LEFT_SO"
    "LENOID_LOCKED_STATUS\020\200@\022(\n\"ACCESS_PANEL_"
    "RIGHT_SOLENOID_STATUS\020\200\200\001\022/\n)ACCESS_PANE"
    "L_RIGHT_SOLENOID_LOCKED_STATUS\020\200\200\002\"\215\004\n\022R"
    "EG_ADDRESS_1_BITS\022\016\n\nNOT_USED_1\020\000\022$\n XRA"
    "Y_MOTION_ENABLE_KEYSWITCH_CH1\020\001\022$\n XRAY_"
    "MOTION_ENABLE_KEYSWITCH_CH2\020\002\022\034\n\030MOTION_"
    "CONTACTORS_STATUS\020\004\022\037\n\033POWERLINK_CONTACT"
    "ORS_STATUS\020\010\022\024\n\020XRAY_ON_STATUS_1\020\020\022\024\n\020XR"
    "AY_ON_STATUS_2\020 \022\032\n\026POWERLINK_STATUS_BIT"
    "_1\020@\022\033\n\026POWERLINK_STATUS_BIT_2\020\200\001\022\036\n\031XRA"
    "Y_LAMP_TEST_PUSHBUTTON\020\200\002\022\037\n\032ENTRANCE_BA"
    "G_SENSOR_SIGNAL\020\200\004\022\033\n\026EXIT_BAG_SENSOR_SI"
    "GNAL\020\200\010\022\034\n\027SAFETY_RESET_PUSHBUTTON\020\200\020\022 \n"
    "\033CONVEYOR_RESTART_PUSHBUTTON\020\200 \022#\n\036GANTR"
    "Y_INTERFERENCE_BEAM_BREAK\020\200@\022\031\n\023LIVE_MAN"
    "_SWITCH_CH1\020\200\200\001\022\031\n\023LIVE_MAN_SWITCH_CH2\020\200"
    "\200\002\"\213\003\n\022REG_ADDRESS_2_BITS\022\016\n\nNOT_USED_2\020"
    "\000\022\021\n\rSPARE_INPUT_1\020\001\022\021\n\rSPARE_INPUT_2\020\002\022"
    "\034\n\030OPERATOR_PRESENT_MAT_CH1\020\004\022\034\n\030OPERATO"
    "R_PRESENT_MAT_CH2\020\010\022\036\n\031MOTION_CONTACTOR_"
    "1_ENABLE\020\200\002\022\036\n\031MOTION_CONTACTOR_2_ENABLE"
    "\020\200\004\022!\n\034POWERLINK_CONTACTOR_1_ENABLE\020\200\010\022!"
    "\n\034POWERLINK_CONTACTOR_2_ENABLE\020\200\020\022$\n\037ACC"
    "ESS_PANELS_SOLENOID_UNLOCKED\020\200 \022\034\n\027AUXIL"
    "LARY_POWER_DISABLE\020\200@\022\026\n\020XRAY_LAMP_ON_PL"
    "I\020\200\200\001\022!\n\033SAFETY_RESET_REQUIRED_LIGHT\020\200\200\002"
    "\"\360\001\n\022REG_ADDRESS_3_BITS\022\016\n\nNOT_USED_3\020\000\022"
    "\023\n\017XRAY_LAMP_ON_SW\020\001\022\032\n\026CONVEYOR_RESTART"
    "_LIGHT\020\002\022\024\n\020POWERLINK_ENABLE\020\004\022\033\n\027POWERL"
    "INK_CABLE_PRESENT\020\010\022 \n\034ACCESS_PANELS_UNL"
    "OCKED_LIGHT\020\020\022\025\n\021XRAY_CONTROL_BIT0\020 \022\025\n\021"
    "XRAY_CONTROL_BIT1\020@\022\026\n\021XRAY_CONTROL_BIT2"
    "\020\200\001\"\237\003\n\022REG_ADDRESS_4_BITS\022\016\n\nNOT_USED_4"
    "\020\000\022!\n\035ENTRANCE_ESTOP_RESET_REQUIRED\020\001\022\035\n"
    "\031EXIT_ESTOP_RESET_REQUIRED\020\002\022 \n\034CONSOLE_"
    "ESTOP_RESET_REQUIRED\020\004\022\034\n\030BHS_ESTOP_RESE"
    "T_REQUIRED\020\010\022.\n*ACCESS_PANEL_LEFT_INTERL"
    "OCK_RESET_REQUIRED\020\020\022/\n+ACCESS_PANEL_RIG"
    "HT_INTERLOCK_RESET_REQUIRED\020 \022-\n)ACCESS_"
    "PANEL_LEFT_SOLENOID_RESET_REQUIRED\020@\022/\n*"
    "ACCESS_PANEL_RIGHT_SOLENOID_RESET_REQUIR"
    "ED\020\200\001\022!\n\034SPEED_MONITOR_RESET_REQUIRED\020\200\004"
    "\022\023\n\rENCODER_FAULT\020\200\200\002\"\212\001\n\022REG_ADDRESS_5_"
    "BITS\022\016\n\nNOT_USED_5\020\000\022\016\n\nSTANDSTILL\020\001\022\036\n\032"
    "STANDSTILL_MONITOR_ENABLED\020\002\022\023\n\017OVERSPEE"
    "D_FAULT\020\004\022\037\n\033ACCESS_PANELS_LOCKING_FAULT"
    "\020\010\"\241\003\n\022REG_ADDRESS_6_BITS\022\016\n\nNOT_USED_6\020"
    "\000\022\030\n\024ENTRANCE_ESTOP_FAULT\020\001\022\024\n\020EXIT_ESTO"
    "P_FAULT\020\002\022\027\n\023CONSOLE_ESTOP_FAULT\020\004\022\023\n\017BH"
    "S_ESTOP_FAULT\020\010\022.\n*ACCESS_PANEL_LEFT_MAG"
    "NETIC_INTERLOCK_FAULT\020\020\022/\n+ACCESS_PANEL_"
    "RIGHT_MAGNETIC_INTERLOCK_FAULT\020 \022\"\n\036MOTI"
    "ON_CONTACTORS_STATUS_FAULT\020@\022&\n!POWERLIN"
    "K_CONTACTORS_STATUS_FAULT\020\200\001\022/\n*ROTATION"
    "AL_ENVELOPE_VIOLATION_SENSOR_FAULT\020\200\002\022\035\n"
    "\030STANDSTILL_MONITOR_FAULT\020\200\004\022 \n\033XRAY_MOT"
    "ION_KEYSWITCH_FAULT\020\200\010\"\?\n\022REG_ADDRESS_7_"
    "BITS\022\016\n\nNOT_USED_7\020\000\022\031\n\023MANUAL_RESET_NEE"
    "DED\020\200\200\002\"\301\001\n\024REG_ADDRESS_255_BITS\022\020\n\014NOT_"
    "USED_255\020\000\022\033\n\026WATCHDOG_CONTROL_BIT_0\020\200\002\022"
    "\033\n\026WATCHDOG_CONTROL_BIT_1\020\200\004\022\033\n\026WATCHDOG"
    "_CONTROL_BIT_2\020\200\010\022\034\n\026WATCHDOG_CONTROL_ER"
    "ROR\020\200\200\001\022\"\n\034WATCHDOG_CONTROL_RESET_TIMER\020"
    "\200\200\002\"\357\002\n\024REG_ADDRESS_512_BITS\022\020\n\014NOT_USED"
    "_512\020\000\022\031\n\025POWERLINK_ENABLE_CTRL\020\001\022\037\n\033CON"
    "VEYOR_RESTART_LIGHT_CTRL\020\002\022\030\n\024XRAY_LAMP_"
    "ON_SW_CTRL\020\004\022\023\n\016GANTRY_RUNNING\020\200\001\022\023\n\016XRA"
    "Y_CTRL_BIT0\020\200\002\022\023\n\016XRAY_CTRL_BIT1\020\200\004\022\023\n\016X"
    "RAY_CTRL_BIT2\020\200\010\022\035\n\030XRAY_CTRL_BIT_RESERV"
    "ED_3\020\200\020\022\035\n\030XRAY_CTRL_BIT_RESERVED_4\020\200 \022\035"
    "\n\030XRAY_CTRL_BIT_RESERVED_5\020\200@\022\036\n\030XRAY_CT"
    "RL_BIT_RESERVED_6\020\200\200\001\022\036\n\030XRAY_CTRL_BIT_R"
    "ESERVED_7\020\200\200\002\"L\n\024REG_ADDRESS_513_BITS\022\020\n"
    "\014NOT_USED_513\020\000\022\"\n\036STANDSTILL_MONITOR_FA"
    "ULT_RESET\020\001b\006proto3", 6459);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/SafetyIoComm.proto", &protobuf_RegisterTypes);
  SafetyIoCommMsg::default_instance_ = new SafetyIoCommMsg();
  SafetyIoCommData::default_instance_ = new SafetyIoCommData();
  SafetyIoCommMsg::default_instance_->InitAsDefaultInstance();
  SafetyIoCommData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2fSafetyIoComm_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2fSafetyIoComm_2eproto {
  StaticDescriptorInitializer_proto_2fSafetyIoComm_2eproto() {
    protobuf_AddDesc_proto_2fSafetyIoComm_2eproto();
  }
} static_descriptor_initializer_proto_2fSafetyIoComm_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* SafetyIoCommMsg_CmdId_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SafetyIoCommMsg_CmdId_descriptor_;
}
bool SafetyIoCommMsg_CmdId_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SafetyIoCommMsg_CmdId SafetyIoCommMsg::POWERLINK_ENABLE;
const SafetyIoCommMsg_CmdId SafetyIoCommMsg::POWERLINK_DISABLE;
const SafetyIoCommMsg_CmdId SafetyIoCommMsg::CONVEYOR_RESTART_LIGHT_ON;
const SafetyIoCommMsg_CmdId SafetyIoCommMsg::CONVEYOR_RESTART_LIGHT_OFF;
const SafetyIoCommMsg_CmdId SafetyIoCommMsg::XRAY_OFF;
const SafetyIoCommMsg_CmdId SafetyIoCommMsg::XRAY_FAULT_RESET;
const SafetyIoCommMsg_CmdId SafetyIoCommMsg::XRAY_MINIMIZE;
const SafetyIoCommMsg_CmdId SafetyIoCommMsg::XRAY_RESERVED;
const SafetyIoCommMsg_CmdId SafetyIoCommMsg::XRAY_SEASON_SHORT_SEQ;
const SafetyIoCommMsg_CmdId SafetyIoCommMsg::XRAY_SEASON_MEDIUM_SEQ;
const SafetyIoCommMsg_CmdId SafetyIoCommMsg::XRAY_SEASON_LONG_SEQ;
const SafetyIoCommMsg_CmdId SafetyIoCommMsg::XRAY_ON;
const SafetyIoCommMsg_CmdId SafetyIoCommMsg::XRAY_LAMP_ON;
const SafetyIoCommMsg_CmdId SafetyIoCommMsg::XRAY_LAMP_OFF;
const SafetyIoCommMsg_CmdId SafetyIoCommMsg::CmdId_MIN;
const SafetyIoCommMsg_CmdId SafetyIoCommMsg::CmdId_MAX;
const int SafetyIoCommMsg::CmdId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SafetyIoCommMsg_XrayCmdBits_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SafetyIoCommMsg_XrayCmdBits_descriptor_;
}
bool SafetyIoCommMsg_XrayCmdBits_IsValid(int value) {
  switch(value) {
    case 0:
    case 256:
    case 512:
    case 768:
    case 1024:
    case 1280:
    case 1536:
    case 1792:
    case 65280:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SafetyIoCommMsg_XrayCmdBits SafetyIoCommMsg::XRAY_CMD_OFF_BITS;
const SafetyIoCommMsg_XrayCmdBits SafetyIoCommMsg::XRAY_CMD_FAULT_RESET_BITS;
const SafetyIoCommMsg_XrayCmdBits SafetyIoCommMsg::XRAY_CMD_MINIMIZE_BITS;
const SafetyIoCommMsg_XrayCmdBits SafetyIoCommMsg::XRAY_CMD_SEASON_SHORT_SEQ_BITS;
const SafetyIoCommMsg_XrayCmdBits SafetyIoCommMsg::XRAY_CMD_RESERVED_BITS;
const SafetyIoCommMsg_XrayCmdBits SafetyIoCommMsg::XRAY_CMD_SEASON_MEDIUM_SEQ_BITS;
const SafetyIoCommMsg_XrayCmdBits SafetyIoCommMsg::XRAY_CMD_SEASON_LONG_SEQ_BITS;
const SafetyIoCommMsg_XrayCmdBits SafetyIoCommMsg::XRAY_CMD_ON_BITS;
const SafetyIoCommMsg_XrayCmdBits SafetyIoCommMsg::XRAY_CMD_BIT_MASK;
const SafetyIoCommMsg_XrayCmdBits SafetyIoCommMsg::XrayCmdBits_MIN;
const SafetyIoCommMsg_XrayCmdBits SafetyIoCommMsg::XrayCmdBits_MAX;
const int SafetyIoCommMsg::XrayCmdBits_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SafetyIoCommMsg::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SafetyIoCommMsg::SafetyIoCommMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analogic.ancp00.SafetyIoCommMsg)
}

void SafetyIoCommMsg::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SafetyIoCommMsg::SafetyIoCommMsg(const SafetyIoCommMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analogic.ancp00.SafetyIoCommMsg)
}

void SafetyIoCommMsg::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  id_ = 0;
}

SafetyIoCommMsg::~SafetyIoCommMsg() {
  // @@protoc_insertion_point(destructor:analogic.ancp00.SafetyIoCommMsg)
  SharedDtor();
}

void SafetyIoCommMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SafetyIoCommMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SafetyIoCommMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SafetyIoCommMsg_descriptor_;
}

const SafetyIoCommMsg& SafetyIoCommMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fSafetyIoComm_2eproto();
  return *default_instance_;
}

SafetyIoCommMsg* SafetyIoCommMsg::default_instance_ = NULL;

SafetyIoCommMsg* SafetyIoCommMsg::New(::google::protobuf::Arena* arena) const {
  SafetyIoCommMsg* n = new SafetyIoCommMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SafetyIoCommMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:analogic.ancp00.SafetyIoCommMsg)
  id_ = 0;
}

bool SafetyIoCommMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analogic.ancp00.SafetyIoCommMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .analogic.ancp00.SafetyIoCommMsg.CmdId id = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_id(static_cast< ::analogic::ancp00::SafetyIoCommMsg_CmdId >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:analogic.ancp00.SafetyIoCommMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analogic.ancp00.SafetyIoCommMsg)
  return false;
#undef DO_
}

void SafetyIoCommMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analogic.ancp00.SafetyIoCommMsg)
  // optional .analogic.ancp00.SafetyIoCommMsg.CmdId id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->id(), output);
  }

  // @@protoc_insertion_point(serialize_end:analogic.ancp00.SafetyIoCommMsg)
}

::google::protobuf::uint8* SafetyIoCommMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analogic.ancp00.SafetyIoCommMsg)
  // optional .analogic.ancp00.SafetyIoCommMsg.CmdId id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:analogic.ancp00.SafetyIoCommMsg)
  return target;
}

int SafetyIoCommMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:analogic.ancp00.SafetyIoCommMsg)
  int total_size = 0;

  // optional .analogic.ancp00.SafetyIoCommMsg.CmdId id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SafetyIoCommMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analogic.ancp00.SafetyIoCommMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SafetyIoCommMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SafetyIoCommMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analogic.ancp00.SafetyIoCommMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analogic.ancp00.SafetyIoCommMsg)
    MergeFrom(*source);
  }
}

void SafetyIoCommMsg::MergeFrom(const SafetyIoCommMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analogic.ancp00.SafetyIoCommMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void SafetyIoCommMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analogic.ancp00.SafetyIoCommMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SafetyIoCommMsg::CopyFrom(const SafetyIoCommMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analogic.ancp00.SafetyIoCommMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SafetyIoCommMsg::IsInitialized() const {

  return true;
}

void SafetyIoCommMsg::Swap(SafetyIoCommMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SafetyIoCommMsg::InternalSwap(SafetyIoCommMsg* other) {
  std::swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SafetyIoCommMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SafetyIoCommMsg_descriptor_;
  metadata.reflection = SafetyIoCommMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SafetyIoCommMsg

// optional .analogic.ancp00.SafetyIoCommMsg.CmdId id = 1;
void SafetyIoCommMsg::clear_id() {
  id_ = 0;
}
 ::analogic::ancp00::SafetyIoCommMsg_CmdId SafetyIoCommMsg::id() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommMsg.id)
  return static_cast< ::analogic::ancp00::SafetyIoCommMsg_CmdId >(id_);
}
 void SafetyIoCommMsg::set_id(::analogic::ancp00::SafetyIoCommMsg_CmdId value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommMsg.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* SafetyIoCommData_REG_ADDRESS_0_BITS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SafetyIoCommData_REG_ADDRESS_0_BITS_descriptor_;
}
bool SafetyIoCommData_REG_ADDRESS_0_BITS_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 8192:
    case 16384:
    case 32768:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SafetyIoCommData_REG_ADDRESS_0_BITS SafetyIoCommData::NOT_USED_0;
const SafetyIoCommData_REG_ADDRESS_0_BITS SafetyIoCommData::ESTOP_ENTRANCE_PORT_CH1;
const SafetyIoCommData_REG_ADDRESS_0_BITS SafetyIoCommData::ESTOP_ENTRANCE_PORT_CH2;
const SafetyIoCommData_REG_ADDRESS_0_BITS SafetyIoCommData::ESTOP_EXIT_PORT_CH1;
const SafetyIoCommData_REG_ADDRESS_0_BITS SafetyIoCommData::ESTOP_EXIT_PORT_CH2;
const SafetyIoCommData_REG_ADDRESS_0_BITS SafetyIoCommData::ESTOP_CONSOLE_CH1;
const SafetyIoCommData_REG_ADDRESS_0_BITS SafetyIoCommData::ESTOP_CONSOLE_CH2;
const SafetyIoCommData_REG_ADDRESS_0_BITS SafetyIoCommData::STOP_BHS_CH1;
const SafetyIoCommData_REG_ADDRESS_0_BITS SafetyIoCommData::STOP_BHS_CH2;
const SafetyIoCommData_REG_ADDRESS_0_BITS SafetyIoCommData::ACCESS_PANEL_LEFT_INTERLOCKS_CH1;
const SafetyIoCommData_REG_ADDRESS_0_BITS SafetyIoCommData::ACCESS_PANEL_LEFT_INTERLOCKS_CH2;
const SafetyIoCommData_REG_ADDRESS_0_BITS SafetyIoCommData::ACCESS_PANEL_RIGHT_INTERLOCKS_CH1;
const SafetyIoCommData_REG_ADDRESS_0_BITS SafetyIoCommData::ACCESS_PANEL_RIGHT_INTERLOCKS_CH2;
const SafetyIoCommData_REG_ADDRESS_0_BITS SafetyIoCommData::ACCESS_PANEL_LEFT_SOLENOID_STATUS;
const SafetyIoCommData_REG_ADDRESS_0_BITS SafetyIoCommData::ACCESS_PANEL_LEFT_SOLENOID_LOCKED_STATUS;
const SafetyIoCommData_REG_ADDRESS_0_BITS SafetyIoCommData::ACCESS_PANEL_RIGHT_SOLENOID_STATUS;
const SafetyIoCommData_REG_ADDRESS_0_BITS SafetyIoCommData::ACCESS_PANEL_RIGHT_SOLENOID_LOCKED_STATUS;
const SafetyIoCommData_REG_ADDRESS_0_BITS SafetyIoCommData::REG_ADDRESS_0_BITS_MIN;
const SafetyIoCommData_REG_ADDRESS_0_BITS SafetyIoCommData::REG_ADDRESS_0_BITS_MAX;
const int SafetyIoCommData::REG_ADDRESS_0_BITS_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SafetyIoCommData_REG_ADDRESS_1_BITS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SafetyIoCommData_REG_ADDRESS_1_BITS_descriptor_;
}
bool SafetyIoCommData_REG_ADDRESS_1_BITS_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 8192:
    case 16384:
    case 32768:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SafetyIoCommData_REG_ADDRESS_1_BITS SafetyIoCommData::NOT_USED_1;
const SafetyIoCommData_REG_ADDRESS_1_BITS SafetyIoCommData::XRAY_MOTION_ENABLE_KEYSWITCH_CH1;
const SafetyIoCommData_REG_ADDRESS_1_BITS SafetyIoCommData::XRAY_MOTION_ENABLE_KEYSWITCH_CH2;
const SafetyIoCommData_REG_ADDRESS_1_BITS SafetyIoCommData::MOTION_CONTACTORS_STATUS;
const SafetyIoCommData_REG_ADDRESS_1_BITS SafetyIoCommData::POWERLINK_CONTACTORS_STATUS;
const SafetyIoCommData_REG_ADDRESS_1_BITS SafetyIoCommData::XRAY_ON_STATUS_1;
const SafetyIoCommData_REG_ADDRESS_1_BITS SafetyIoCommData::XRAY_ON_STATUS_2;
const SafetyIoCommData_REG_ADDRESS_1_BITS SafetyIoCommData::POWERLINK_STATUS_BIT_1;
const SafetyIoCommData_REG_ADDRESS_1_BITS SafetyIoCommData::POWERLINK_STATUS_BIT_2;
const SafetyIoCommData_REG_ADDRESS_1_BITS SafetyIoCommData::XRAY_LAMP_TEST_PUSHBUTTON;
const SafetyIoCommData_REG_ADDRESS_1_BITS SafetyIoCommData::ENTRANCE_BAG_SENSOR_SIGNAL;
const SafetyIoCommData_REG_ADDRESS_1_BITS SafetyIoCommData::EXIT_BAG_SENSOR_SIGNAL;
const SafetyIoCommData_REG_ADDRESS_1_BITS SafetyIoCommData::SAFETY_RESET_PUSHBUTTON;
const SafetyIoCommData_REG_ADDRESS_1_BITS SafetyIoCommData::CONVEYOR_RESTART_PUSHBUTTON;
const SafetyIoCommData_REG_ADDRESS_1_BITS SafetyIoCommData::GANTRY_INTERFERENCE_BEAM_BREAK;
const SafetyIoCommData_REG_ADDRESS_1_BITS SafetyIoCommData::LIVE_MAN_SWITCH_CH1;
const SafetyIoCommData_REG_ADDRESS_1_BITS SafetyIoCommData::LIVE_MAN_SWITCH_CH2;
const SafetyIoCommData_REG_ADDRESS_1_BITS SafetyIoCommData::REG_ADDRESS_1_BITS_MIN;
const SafetyIoCommData_REG_ADDRESS_1_BITS SafetyIoCommData::REG_ADDRESS_1_BITS_MAX;
const int SafetyIoCommData::REG_ADDRESS_1_BITS_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SafetyIoCommData_REG_ADDRESS_2_BITS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SafetyIoCommData_REG_ADDRESS_2_BITS_descriptor_;
}
bool SafetyIoCommData_REG_ADDRESS_2_BITS_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 8192:
    case 16384:
    case 32768:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SafetyIoCommData_REG_ADDRESS_2_BITS SafetyIoCommData::NOT_USED_2;
const SafetyIoCommData_REG_ADDRESS_2_BITS SafetyIoCommData::SPARE_INPUT_1;
const SafetyIoCommData_REG_ADDRESS_2_BITS SafetyIoCommData::SPARE_INPUT_2;
const SafetyIoCommData_REG_ADDRESS_2_BITS SafetyIoCommData::OPERATOR_PRESENT_MAT_CH1;
const SafetyIoCommData_REG_ADDRESS_2_BITS SafetyIoCommData::OPERATOR_PRESENT_MAT_CH2;
const SafetyIoCommData_REG_ADDRESS_2_BITS SafetyIoCommData::MOTION_CONTACTOR_1_ENABLE;
const SafetyIoCommData_REG_ADDRESS_2_BITS SafetyIoCommData::MOTION_CONTACTOR_2_ENABLE;
const SafetyIoCommData_REG_ADDRESS_2_BITS SafetyIoCommData::POWERLINK_CONTACTOR_1_ENABLE;
const SafetyIoCommData_REG_ADDRESS_2_BITS SafetyIoCommData::POWERLINK_CONTACTOR_2_ENABLE;
const SafetyIoCommData_REG_ADDRESS_2_BITS SafetyIoCommData::ACCESS_PANELS_SOLENOID_UNLOCKED;
const SafetyIoCommData_REG_ADDRESS_2_BITS SafetyIoCommData::AUXILLARY_POWER_DISABLE;
const SafetyIoCommData_REG_ADDRESS_2_BITS SafetyIoCommData::XRAY_LAMP_ON_PLI;
const SafetyIoCommData_REG_ADDRESS_2_BITS SafetyIoCommData::SAFETY_RESET_REQUIRED_LIGHT;
const SafetyIoCommData_REG_ADDRESS_2_BITS SafetyIoCommData::REG_ADDRESS_2_BITS_MIN;
const SafetyIoCommData_REG_ADDRESS_2_BITS SafetyIoCommData::REG_ADDRESS_2_BITS_MAX;
const int SafetyIoCommData::REG_ADDRESS_2_BITS_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SafetyIoCommData_REG_ADDRESS_3_BITS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SafetyIoCommData_REG_ADDRESS_3_BITS_descriptor_;
}
bool SafetyIoCommData_REG_ADDRESS_3_BITS_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SafetyIoCommData_REG_ADDRESS_3_BITS SafetyIoCommData::NOT_USED_3;
const SafetyIoCommData_REG_ADDRESS_3_BITS SafetyIoCommData::XRAY_LAMP_ON_SW;
const SafetyIoCommData_REG_ADDRESS_3_BITS SafetyIoCommData::CONVEYOR_RESTART_LIGHT;
const SafetyIoCommData_REG_ADDRESS_3_BITS SafetyIoCommData::POWERLINK_ENABLE;
const SafetyIoCommData_REG_ADDRESS_3_BITS SafetyIoCommData::POWERLINK_CABLE_PRESENT;
const SafetyIoCommData_REG_ADDRESS_3_BITS SafetyIoCommData::ACCESS_PANELS_UNLOCKED_LIGHT;
const SafetyIoCommData_REG_ADDRESS_3_BITS SafetyIoCommData::XRAY_CONTROL_BIT0;
const SafetyIoCommData_REG_ADDRESS_3_BITS SafetyIoCommData::XRAY_CONTROL_BIT1;
const SafetyIoCommData_REG_ADDRESS_3_BITS SafetyIoCommData::XRAY_CONTROL_BIT2;
const SafetyIoCommData_REG_ADDRESS_3_BITS SafetyIoCommData::REG_ADDRESS_3_BITS_MIN;
const SafetyIoCommData_REG_ADDRESS_3_BITS SafetyIoCommData::REG_ADDRESS_3_BITS_MAX;
const int SafetyIoCommData::REG_ADDRESS_3_BITS_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SafetyIoCommData_REG_ADDRESS_4_BITS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SafetyIoCommData_REG_ADDRESS_4_BITS_descriptor_;
}
bool SafetyIoCommData_REG_ADDRESS_4_BITS_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 512:
    case 32768:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SafetyIoCommData_REG_ADDRESS_4_BITS SafetyIoCommData::NOT_USED_4;
const SafetyIoCommData_REG_ADDRESS_4_BITS SafetyIoCommData::ENTRANCE_ESTOP_RESET_REQUIRED;
const SafetyIoCommData_REG_ADDRESS_4_BITS SafetyIoCommData::EXIT_ESTOP_RESET_REQUIRED;
const SafetyIoCommData_REG_ADDRESS_4_BITS SafetyIoCommData::CONSOLE_ESTOP_RESET_REQUIRED;
const SafetyIoCommData_REG_ADDRESS_4_BITS SafetyIoCommData::BHS_ESTOP_RESET_REQUIRED;
const SafetyIoCommData_REG_ADDRESS_4_BITS SafetyIoCommData::ACCESS_PANEL_LEFT_INTERLOCK_RESET_REQUIRED;
const SafetyIoCommData_REG_ADDRESS_4_BITS SafetyIoCommData::ACCESS_PANEL_RIGHT_INTERLOCK_RESET_REQUIRED;
const SafetyIoCommData_REG_ADDRESS_4_BITS SafetyIoCommData::ACCESS_PANEL_LEFT_SOLENOID_RESET_REQUIRED;
const SafetyIoCommData_REG_ADDRESS_4_BITS SafetyIoCommData::ACCESS_PANEL_RIGHT_SOLENOID_RESET_REQUIRED;
const SafetyIoCommData_REG_ADDRESS_4_BITS SafetyIoCommData::SPEED_MONITOR_RESET_REQUIRED;
const SafetyIoCommData_REG_ADDRESS_4_BITS SafetyIoCommData::ENCODER_FAULT;
const SafetyIoCommData_REG_ADDRESS_4_BITS SafetyIoCommData::REG_ADDRESS_4_BITS_MIN;
const SafetyIoCommData_REG_ADDRESS_4_BITS SafetyIoCommData::REG_ADDRESS_4_BITS_MAX;
const int SafetyIoCommData::REG_ADDRESS_4_BITS_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SafetyIoCommData_REG_ADDRESS_5_BITS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SafetyIoCommData_REG_ADDRESS_5_BITS_descriptor_;
}
bool SafetyIoCommData_REG_ADDRESS_5_BITS_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SafetyIoCommData_REG_ADDRESS_5_BITS SafetyIoCommData::NOT_USED_5;
const SafetyIoCommData_REG_ADDRESS_5_BITS SafetyIoCommData::STANDSTILL;
const SafetyIoCommData_REG_ADDRESS_5_BITS SafetyIoCommData::STANDSTILL_MONITOR_ENABLED;
const SafetyIoCommData_REG_ADDRESS_5_BITS SafetyIoCommData::OVERSPEED_FAULT;
const SafetyIoCommData_REG_ADDRESS_5_BITS SafetyIoCommData::ACCESS_PANELS_LOCKING_FAULT;
const SafetyIoCommData_REG_ADDRESS_5_BITS SafetyIoCommData::REG_ADDRESS_5_BITS_MIN;
const SafetyIoCommData_REG_ADDRESS_5_BITS SafetyIoCommData::REG_ADDRESS_5_BITS_MAX;
const int SafetyIoCommData::REG_ADDRESS_5_BITS_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SafetyIoCommData_REG_ADDRESS_6_BITS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SafetyIoCommData_REG_ADDRESS_6_BITS_descriptor_;
}
bool SafetyIoCommData_REG_ADDRESS_6_BITS_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SafetyIoCommData_REG_ADDRESS_6_BITS SafetyIoCommData::NOT_USED_6;
const SafetyIoCommData_REG_ADDRESS_6_BITS SafetyIoCommData::ENTRANCE_ESTOP_FAULT;
const SafetyIoCommData_REG_ADDRESS_6_BITS SafetyIoCommData::EXIT_ESTOP_FAULT;
const SafetyIoCommData_REG_ADDRESS_6_BITS SafetyIoCommData::CONSOLE_ESTOP_FAULT;
const SafetyIoCommData_REG_ADDRESS_6_BITS SafetyIoCommData::BHS_ESTOP_FAULT;
const SafetyIoCommData_REG_ADDRESS_6_BITS SafetyIoCommData::ACCESS_PANEL_LEFT_MAGNETIC_INTERLOCK_FAULT;
const SafetyIoCommData_REG_ADDRESS_6_BITS SafetyIoCommData::ACCESS_PANEL_RIGHT_MAGNETIC_INTERLOCK_FAULT;
const SafetyIoCommData_REG_ADDRESS_6_BITS SafetyIoCommData::MOTION_CONTACTORS_STATUS_FAULT;
const SafetyIoCommData_REG_ADDRESS_6_BITS SafetyIoCommData::POWERLINK_CONTACTORS_STATUS_FAULT;
const SafetyIoCommData_REG_ADDRESS_6_BITS SafetyIoCommData::ROTATIONAL_ENVELOPE_VIOLATION_SENSOR_FAULT;
const SafetyIoCommData_REG_ADDRESS_6_BITS SafetyIoCommData::STANDSTILL_MONITOR_FAULT;
const SafetyIoCommData_REG_ADDRESS_6_BITS SafetyIoCommData::XRAY_MOTION_KEYSWITCH_FAULT;
const SafetyIoCommData_REG_ADDRESS_6_BITS SafetyIoCommData::REG_ADDRESS_6_BITS_MIN;
const SafetyIoCommData_REG_ADDRESS_6_BITS SafetyIoCommData::REG_ADDRESS_6_BITS_MAX;
const int SafetyIoCommData::REG_ADDRESS_6_BITS_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SafetyIoCommData_REG_ADDRESS_7_BITS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SafetyIoCommData_REG_ADDRESS_7_BITS_descriptor_;
}
bool SafetyIoCommData_REG_ADDRESS_7_BITS_IsValid(int value) {
  switch(value) {
    case 0:
    case 32768:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SafetyIoCommData_REG_ADDRESS_7_BITS SafetyIoCommData::NOT_USED_7;
const SafetyIoCommData_REG_ADDRESS_7_BITS SafetyIoCommData::MANUAL_RESET_NEEDED;
const SafetyIoCommData_REG_ADDRESS_7_BITS SafetyIoCommData::REG_ADDRESS_7_BITS_MIN;
const SafetyIoCommData_REG_ADDRESS_7_BITS SafetyIoCommData::REG_ADDRESS_7_BITS_MAX;
const int SafetyIoCommData::REG_ADDRESS_7_BITS_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SafetyIoCommData_REG_ADDRESS_255_BITS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SafetyIoCommData_REG_ADDRESS_255_BITS_descriptor_;
}
bool SafetyIoCommData_REG_ADDRESS_255_BITS_IsValid(int value) {
  switch(value) {
    case 0:
    case 256:
    case 512:
    case 1024:
    case 16384:
    case 32768:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SafetyIoCommData_REG_ADDRESS_255_BITS SafetyIoCommData::NOT_USED_255;
const SafetyIoCommData_REG_ADDRESS_255_BITS SafetyIoCommData::WATCHDOG_CONTROL_BIT_0;
const SafetyIoCommData_REG_ADDRESS_255_BITS SafetyIoCommData::WATCHDOG_CONTROL_BIT_1;
const SafetyIoCommData_REG_ADDRESS_255_BITS SafetyIoCommData::WATCHDOG_CONTROL_BIT_2;
const SafetyIoCommData_REG_ADDRESS_255_BITS SafetyIoCommData::WATCHDOG_CONTROL_ERROR;
const SafetyIoCommData_REG_ADDRESS_255_BITS SafetyIoCommData::WATCHDOG_CONTROL_RESET_TIMER;
const SafetyIoCommData_REG_ADDRESS_255_BITS SafetyIoCommData::REG_ADDRESS_255_BITS_MIN;
const SafetyIoCommData_REG_ADDRESS_255_BITS SafetyIoCommData::REG_ADDRESS_255_BITS_MAX;
const int SafetyIoCommData::REG_ADDRESS_255_BITS_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SafetyIoCommData_REG_ADDRESS_512_BITS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SafetyIoCommData_REG_ADDRESS_512_BITS_descriptor_;
}
bool SafetyIoCommData_REG_ADDRESS_512_BITS_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 8192:
    case 16384:
    case 32768:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SafetyIoCommData_REG_ADDRESS_512_BITS SafetyIoCommData::NOT_USED_512;
const SafetyIoCommData_REG_ADDRESS_512_BITS SafetyIoCommData::POWERLINK_ENABLE_CTRL;
const SafetyIoCommData_REG_ADDRESS_512_BITS SafetyIoCommData::CONVEYOR_RESTART_LIGHT_CTRL;
const SafetyIoCommData_REG_ADDRESS_512_BITS SafetyIoCommData::XRAY_LAMP_ON_SW_CTRL;
const SafetyIoCommData_REG_ADDRESS_512_BITS SafetyIoCommData::GANTRY_RUNNING;
const SafetyIoCommData_REG_ADDRESS_512_BITS SafetyIoCommData::XRAY_CTRL_BIT0;
const SafetyIoCommData_REG_ADDRESS_512_BITS SafetyIoCommData::XRAY_CTRL_BIT1;
const SafetyIoCommData_REG_ADDRESS_512_BITS SafetyIoCommData::XRAY_CTRL_BIT2;
const SafetyIoCommData_REG_ADDRESS_512_BITS SafetyIoCommData::XRAY_CTRL_BIT_RESERVED_3;
const SafetyIoCommData_REG_ADDRESS_512_BITS SafetyIoCommData::XRAY_CTRL_BIT_RESERVED_4;
const SafetyIoCommData_REG_ADDRESS_512_BITS SafetyIoCommData::XRAY_CTRL_BIT_RESERVED_5;
const SafetyIoCommData_REG_ADDRESS_512_BITS SafetyIoCommData::XRAY_CTRL_BIT_RESERVED_6;
const SafetyIoCommData_REG_ADDRESS_512_BITS SafetyIoCommData::XRAY_CTRL_BIT_RESERVED_7;
const SafetyIoCommData_REG_ADDRESS_512_BITS SafetyIoCommData::REG_ADDRESS_512_BITS_MIN;
const SafetyIoCommData_REG_ADDRESS_512_BITS SafetyIoCommData::REG_ADDRESS_512_BITS_MAX;
const int SafetyIoCommData::REG_ADDRESS_512_BITS_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SafetyIoCommData_REG_ADDRESS_513_BITS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SafetyIoCommData_REG_ADDRESS_513_BITS_descriptor_;
}
bool SafetyIoCommData_REG_ADDRESS_513_BITS_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SafetyIoCommData_REG_ADDRESS_513_BITS SafetyIoCommData::NOT_USED_513;
const SafetyIoCommData_REG_ADDRESS_513_BITS SafetyIoCommData::STANDSTILL_MONITOR_FAULT_RESET;
const SafetyIoCommData_REG_ADDRESS_513_BITS SafetyIoCommData::REG_ADDRESS_513_BITS_MIN;
const SafetyIoCommData_REG_ADDRESS_513_BITS SafetyIoCommData::REG_ADDRESS_513_BITS_MAX;
const int SafetyIoCommData::REG_ADDRESS_513_BITS_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SafetyIoCommData::kReadReg0FieldNumber;
const int SafetyIoCommData::kReadReg1FieldNumber;
const int SafetyIoCommData::kReadReg2FieldNumber;
const int SafetyIoCommData::kReadReg3FieldNumber;
const int SafetyIoCommData::kReadReg4FieldNumber;
const int SafetyIoCommData::kReadReg5FieldNumber;
const int SafetyIoCommData::kReadReg6FieldNumber;
const int SafetyIoCommData::kReadReg7FieldNumber;
const int SafetyIoCommData::kWriteReg0FieldNumber;
const int SafetyIoCommData::kWriteReg1FieldNumber;
const int SafetyIoCommData::kWatchdogRegFieldNumber;
const int SafetyIoCommData::kLeftAccessPanelCh1FieldNumber;
const int SafetyIoCommData::kLeftAccessPanelCh2FieldNumber;
const int SafetyIoCommData::kLeftAccessSolenoidFieldNumber;
const int SafetyIoCommData::kLeftAccessSolenoidLockedFieldNumber;
const int SafetyIoCommData::kRightAccessPanelCh1FieldNumber;
const int SafetyIoCommData::kRightAccessPanelCh2FieldNumber;
const int SafetyIoCommData::kRightAccessSolenoidFieldNumber;
const int SafetyIoCommData::kRightAccessSolenoidLockedFieldNumber;
const int SafetyIoCommData::kAccessSolenoidOverrideFieldNumber;
const int SafetyIoCommData::kEntrancePortEstopCh1FieldNumber;
const int SafetyIoCommData::kEntrancePortEstopCh2FieldNumber;
const int SafetyIoCommData::kExitPortEstopCh1FieldNumber;
const int SafetyIoCommData::kExitPortEstopCh2FieldNumber;
const int SafetyIoCommData::kConsolePortEstopCh1FieldNumber;
const int SafetyIoCommData::kConsolPortEstopCh2FieldNumber;
const int SafetyIoCommData::kBhsEstopCh1FieldNumber;
const int SafetyIoCommData::kBhsEstopCh2FieldNumber;
const int SafetyIoCommData::kInverterContactorsStatusFieldNumber;
const int SafetyIoCommData::kInverterEnableFieldNumber;
const int SafetyIoCommData::kInverterXrayOnSenseCh1FieldNumber;
const int SafetyIoCommData::kInverterXrayOnSenseCh2FieldNumber;
const int SafetyIoCommData::kInverterLineInFaultFieldNumber;
const int SafetyIoCommData::kInverterInternalFaultFieldNumber;
const int SafetyIoCommData::kInverterLoadFaultFieldNumber;
const int SafetyIoCommData::kInverterPowerlinkOkFieldNumber;
const int SafetyIoCommData::kMotionContactorsFieldNumber;
const int SafetyIoCommData::kGantryInterferenceFieldNumber;
const int SafetyIoCommData::kBagSensorEntranceFieldNumber;
const int SafetyIoCommData::kBagSensorExitFieldNumber;
const int SafetyIoCommData::kConveyorRestartLampFieldNumber;
const int SafetyIoCommData::kConveyorRestartButtonFieldNumber;
const int SafetyIoCommData::kOperatorPresentFieldNumber;
const int SafetyIoCommData::kXrayLamp1PliFieldNumber;
const int SafetyIoCommData::kXrayLamp2SwFieldNumber;
const int SafetyIoCommData::kXrayLampTestFieldNumber;
const int SafetyIoCommData::kXrayCmdOffFieldNumber;
const int SafetyIoCommData::kXrayCmdFaultResetFieldNumber;
const int SafetyIoCommData::kXrayCmdMinimizationFieldNumber;
const int SafetyIoCommData::kXrayCmdReservedFieldNumber;
const int SafetyIoCommData::kXrayCmdSeasoningShortFieldNumber;
const int SafetyIoCommData::kXrayCmdSeasoningMediumFieldNumber;
const int SafetyIoCommData::kXrayCmdSeasoningLongFieldNumber;
const int SafetyIoCommData::kXrayCmdOnFieldNumber;
const int SafetyIoCommData::kXrayMotionEnableCh1FieldNumber;
const int SafetyIoCommData::kXrayMotionEnableCh2FieldNumber;
const int SafetyIoCommData::kSafetyResetRequiredFieldNumber;
const int SafetyIoCommData::kSafetyResetButtonFieldNumber;
const int SafetyIoCommData::kPanelsUnlockedFieldNumber;
const int SafetyIoCommData::kEntranceEstopFaultFieldNumber;
const int SafetyIoCommData::kExitEstopFaultFieldNumber;
const int SafetyIoCommData::kConsoleEstopFaultFieldNumber;
const int SafetyIoCommData::kBhsEstopFaultFieldNumber;
const int SafetyIoCommData::kAccessPanelLeftMagneticInterlockFaultFieldNumber;
const int SafetyIoCommData::kAccessPanelRightMagneticInterlockFaultFieldNumber;
const int SafetyIoCommData::kMotionContactorsStatusFaultFieldNumber;
const int SafetyIoCommData::kPowerlinkContactorsStatusFaultFieldNumber;
const int SafetyIoCommData::kRotationalEnvelopeViolationSensorFaultFieldNumber;
const int SafetyIoCommData::kStandstillMonitorFaultFieldNumber;
const int SafetyIoCommData::kOverspeedFaultFieldNumber;
const int SafetyIoCommData::kAccessPanelsLockingFaultFieldNumber;
const int SafetyIoCommData::kXrayMotionKeyswitchFaultFieldNumber;
const int SafetyIoCommData::kEncoderFaultFieldNumber;
const int SafetyIoCommData::kSpeedMonitorResetRequiredFieldNumber;
const int SafetyIoCommData::kStandstillFieldNumber;
const int SafetyIoCommData::kStandstillMonitorEnabledFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SafetyIoCommData::SafetyIoCommData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analogic.ancp00.SafetyIoCommData)
}

void SafetyIoCommData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SafetyIoCommData::SafetyIoCommData(const SafetyIoCommData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analogic.ancp00.SafetyIoCommData)
}

void SafetyIoCommData::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  read_reg_0_ = 0u;
  read_reg_1_ = 0u;
  read_reg_2_ = 0u;
  read_reg_3_ = 0u;
  read_reg_4_ = 0u;
  read_reg_5_ = 0u;
  read_reg_6_ = 0u;
  read_reg_7_ = 0u;
  write_reg_0_ = 0u;
  write_reg_1_ = 0u;
  watchdog_reg_ = 0u;
  left_access_panel_ch1_ = false;
  left_access_panel_ch2_ = false;
  left_access_solenoid_ = false;
  left_access_solenoid_locked_ = false;
  right_access_panel_ch1_ = false;
  right_access_panel_ch2_ = false;
  right_access_solenoid_ = false;
  right_access_solenoid_locked_ = false;
  access_solenoid_override_ = false;
  entrance_port_estop_ch1_ = false;
  entrance_port_estop_ch2_ = false;
  exit_port_estop_ch1_ = false;
  exit_port_estop_ch2_ = false;
  console_port_estop_ch1_ = false;
  consol_port_estop_ch2_ = false;
  bhs_estop_ch1_ = false;
  bhs_estop_ch2_ = false;
  inverter_contactors_status_ = false;
  inverter_enable_ = false;
  inverter_xray_on_sense_ch1_ = false;
  inverter_xray_on_sense_ch2_ = false;
  inverter_line_in_fault_ = false;
  inverter_internal_fault_ = false;
  inverter_load_fault_ = false;
  inverter_powerlink_ok_ = false;
  motion_contactors_ = false;
  gantry_interference_ = false;
  bag_sensor_entrance_ = false;
  bag_sensor_exit_ = false;
  conveyor_restart_lamp_ = false;
  conveyor_restart_button_ = false;
  operator_present_ = false;
  xray_lamp1_pli_ = false;
  xray_lamp2_sw_ = false;
  xray_lamp_test_ = false;
  xray_cmd_off_ = false;
  xray_cmd_fault_reset_ = false;
  xray_cmd_minimization_ = false;
  xray_cmd_reserved_ = false;
  xray_cmd_seasoning_short_ = false;
  xray_cmd_seasoning_medium_ = false;
  xray_cmd_seasoning_long_ = false;
  xray_cmd_on_ = false;
  xray_motion_enable_ch1_ = false;
  xray_motion_enable_ch2_ = false;
  safety_reset_required_ = false;
  safety_reset_button_ = false;
  panels_unlocked_ = false;
  entrance_estop_fault_ = false;
  exit_estop_fault_ = false;
  console_estop_fault_ = false;
  bhs_estop_fault_ = false;
  access_panel_left_magnetic_interlock_fault_ = false;
  access_panel_right_magnetic_interlock_fault_ = false;
  motion_contactors_status_fault_ = false;
  powerlink_contactors_status_fault_ = false;
  rotational_envelope_violation_sensor_fault_ = false;
  standstill_monitor_fault_ = false;
  overspeed_fault_ = false;
  access_panels_locking_fault_ = false;
  xray_motion_keyswitch_fault_ = false;
  encoder_fault_ = false;
  speed_monitor_reset_required_ = false;
  standstill_ = false;
  standstill_monitor_enabled_ = false;
}

SafetyIoCommData::~SafetyIoCommData() {
  // @@protoc_insertion_point(destructor:analogic.ancp00.SafetyIoCommData)
  SharedDtor();
}

void SafetyIoCommData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SafetyIoCommData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SafetyIoCommData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SafetyIoCommData_descriptor_;
}

const SafetyIoCommData& SafetyIoCommData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fSafetyIoComm_2eproto();
  return *default_instance_;
}

SafetyIoCommData* SafetyIoCommData::default_instance_ = NULL;

SafetyIoCommData* SafetyIoCommData::New(::google::protobuf::Arena* arena) const {
  SafetyIoCommData* n = new SafetyIoCommData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SafetyIoCommData::Clear() {
// @@protoc_insertion_point(message_clear_start:analogic.ancp00.SafetyIoCommData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SafetyIoCommData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SafetyIoCommData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(read_reg_0_, read_reg_7_);
  ZR_(write_reg_0_, right_access_panel_ch1_);
  ZR_(right_access_panel_ch2_, exit_port_estop_ch2_);
  ZR_(console_port_estop_ch1_, inverter_xray_on_sense_ch2_);
  ZR_(inverter_line_in_fault_, bag_sensor_exit_);
  ZR_(conveyor_restart_lamp_, xray_cmd_fault_reset_);
  ZR_(xray_cmd_minimization_, xray_motion_enable_ch2_);
  ZR_(safety_reset_required_, access_panel_left_magnetic_interlock_fault_);
  ZR_(access_panel_right_magnetic_interlock_fault_, xray_motion_keyswitch_fault_);
  ZR_(encoder_fault_, standstill_monitor_enabled_);

#undef ZR_HELPER_
#undef ZR_

}

bool SafetyIoCommData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analogic.ancp00.SafetyIoCommData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 read_reg_0 = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &read_reg_0_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_read_reg_1;
        break;
      }

      // optional fixed32 read_reg_1 = 2;
      case 2: {
        if (tag == 21) {
         parse_read_reg_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &read_reg_1_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_read_reg_2;
        break;
      }

      // optional fixed32 read_reg_2 = 3;
      case 3: {
        if (tag == 29) {
         parse_read_reg_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &read_reg_2_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_read_reg_3;
        break;
      }

      // optional fixed32 read_reg_3 = 4;
      case 4: {
        if (tag == 37) {
         parse_read_reg_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &read_reg_3_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_read_reg_4;
        break;
      }

      // optional fixed32 read_reg_4 = 5;
      case 5: {
        if (tag == 45) {
         parse_read_reg_4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &read_reg_4_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_read_reg_5;
        break;
      }

      // optional fixed32 read_reg_5 = 6;
      case 6: {
        if (tag == 53) {
         parse_read_reg_5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &read_reg_5_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_read_reg_6;
        break;
      }

      // optional fixed32 read_reg_6 = 7;
      case 7: {
        if (tag == 61) {
         parse_read_reg_6:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &read_reg_6_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_read_reg_7;
        break;
      }

      // optional fixed32 read_reg_7 = 8;
      case 8: {
        if (tag == 69) {
         parse_read_reg_7:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &read_reg_7_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_write_reg_0;
        break;
      }

      // optional fixed32 write_reg_0 = 9;
      case 9: {
        if (tag == 77) {
         parse_write_reg_0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &write_reg_0_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_write_reg_1;
        break;
      }

      // optional fixed32 write_reg_1 = 10;
      case 10: {
        if (tag == 85) {
         parse_write_reg_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &write_reg_1_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_watchdog_reg;
        break;
      }

      // optional fixed32 watchdog_reg = 11;
      case 11: {
        if (tag == 93) {
         parse_watchdog_reg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &watchdog_reg_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_left_access_panel_ch1;
        break;
      }

      // optional bool left_access_panel_ch1 = 20;
      case 20: {
        if (tag == 160) {
         parse_left_access_panel_ch1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &left_access_panel_ch1_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_left_access_panel_ch2;
        break;
      }

      // optional bool left_access_panel_ch2 = 21;
      case 21: {
        if (tag == 168) {
         parse_left_access_panel_ch2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &left_access_panel_ch2_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_left_access_solenoid;
        break;
      }

      // optional bool left_access_solenoid = 22;
      case 22: {
        if (tag == 176) {
         parse_left_access_solenoid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &left_access_solenoid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_left_access_solenoid_locked;
        break;
      }

      // optional bool left_access_solenoid_locked = 23;
      case 23: {
        if (tag == 184) {
         parse_left_access_solenoid_locked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &left_access_solenoid_locked_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_right_access_panel_ch1;
        break;
      }

      // optional bool right_access_panel_ch1 = 24;
      case 24: {
        if (tag == 192) {
         parse_right_access_panel_ch1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &right_access_panel_ch1_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_right_access_panel_ch2;
        break;
      }

      // optional bool right_access_panel_ch2 = 25;
      case 25: {
        if (tag == 200) {
         parse_right_access_panel_ch2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &right_access_panel_ch2_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_right_access_solenoid;
        break;
      }

      // optional bool right_access_solenoid = 26;
      case 26: {
        if (tag == 208) {
         parse_right_access_solenoid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &right_access_solenoid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_right_access_solenoid_locked;
        break;
      }

      // optional bool right_access_solenoid_locked = 27;
      case 27: {
        if (tag == 216) {
         parse_right_access_solenoid_locked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &right_access_solenoid_locked_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_access_solenoid_override;
        break;
      }

      // optional bool access_solenoid_override = 29;
      case 29: {
        if (tag == 232) {
         parse_access_solenoid_override:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &access_solenoid_override_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(320)) goto parse_entrance_port_estop_ch1;
        break;
      }

      // optional bool entrance_port_estop_ch1 = 40;
      case 40: {
        if (tag == 320) {
         parse_entrance_port_estop_ch1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &entrance_port_estop_ch1_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(328)) goto parse_entrance_port_estop_ch2;
        break;
      }

      // optional bool entrance_port_estop_ch2 = 41;
      case 41: {
        if (tag == 328) {
         parse_entrance_port_estop_ch2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &entrance_port_estop_ch2_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(336)) goto parse_exit_port_estop_ch1;
        break;
      }

      // optional bool exit_port_estop_ch1 = 42;
      case 42: {
        if (tag == 336) {
         parse_exit_port_estop_ch1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &exit_port_estop_ch1_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(344)) goto parse_exit_port_estop_ch2;
        break;
      }

      // optional bool exit_port_estop_ch2 = 43;
      case 43: {
        if (tag == 344) {
         parse_exit_port_estop_ch2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &exit_port_estop_ch2_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(352)) goto parse_console_port_estop_ch1;
        break;
      }

      // optional bool console_port_estop_ch1 = 44;
      case 44: {
        if (tag == 352) {
         parse_console_port_estop_ch1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &console_port_estop_ch1_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(360)) goto parse_consol_port_estop_ch2;
        break;
      }

      // optional bool consol_port_estop_ch2 = 45;
      case 45: {
        if (tag == 360) {
         parse_consol_port_estop_ch2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &consol_port_estop_ch2_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(368)) goto parse_bhs_estop_ch1;
        break;
      }

      // optional bool bhs_estop_ch1 = 46;
      case 46: {
        if (tag == 368) {
         parse_bhs_estop_ch1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bhs_estop_ch1_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(376)) goto parse_bhs_estop_ch2;
        break;
      }

      // optional bool bhs_estop_ch2 = 47;
      case 47: {
        if (tag == 376) {
         parse_bhs_estop_ch2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bhs_estop_ch2_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(480)) goto parse_inverter_contactors_status;
        break;
      }

      // optional bool inverter_contactors_status = 60;
      case 60: {
        if (tag == 480) {
         parse_inverter_contactors_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &inverter_contactors_status_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(488)) goto parse_inverter_enable;
        break;
      }

      // optional bool inverter_enable = 61;
      case 61: {
        if (tag == 488) {
         parse_inverter_enable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &inverter_enable_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(496)) goto parse_inverter_xray_on_sense_ch1;
        break;
      }

      // optional bool inverter_xray_on_sense_ch1 = 62;
      case 62: {
        if (tag == 496) {
         parse_inverter_xray_on_sense_ch1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &inverter_xray_on_sense_ch1_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(504)) goto parse_inverter_xray_on_sense_ch2;
        break;
      }

      // optional bool inverter_xray_on_sense_ch2 = 63;
      case 63: {
        if (tag == 504) {
         parse_inverter_xray_on_sense_ch2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &inverter_xray_on_sense_ch2_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(512)) goto parse_inverter_line_in_fault;
        break;
      }

      // optional bool inverter_line_in_fault = 64;
      case 64: {
        if (tag == 512) {
         parse_inverter_line_in_fault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &inverter_line_in_fault_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(520)) goto parse_inverter_internal_fault;
        break;
      }

      // optional bool inverter_internal_fault = 65;
      case 65: {
        if (tag == 520) {
         parse_inverter_internal_fault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &inverter_internal_fault_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(528)) goto parse_inverter_load_fault;
        break;
      }

      // optional bool inverter_load_fault = 66;
      case 66: {
        if (tag == 528) {
         parse_inverter_load_fault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &inverter_load_fault_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(536)) goto parse_inverter_powerlink_ok;
        break;
      }

      // optional bool inverter_powerlink_ok = 67;
      case 67: {
        if (tag == 536) {
         parse_inverter_powerlink_ok:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &inverter_powerlink_ok_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(640)) goto parse_motion_contactors;
        break;
      }

      // optional bool motion_contactors = 80;
      case 80: {
        if (tag == 640) {
         parse_motion_contactors:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &motion_contactors_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(648)) goto parse_gantry_interference;
        break;
      }

      // optional bool gantry_interference = 81;
      case 81: {
        if (tag == 648) {
         parse_gantry_interference:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gantry_interference_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(656)) goto parse_bag_sensor_entrance;
        break;
      }

      // optional bool bag_sensor_entrance = 82;
      case 82: {
        if (tag == 656) {
         parse_bag_sensor_entrance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bag_sensor_entrance_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(664)) goto parse_bag_sensor_exit;
        break;
      }

      // optional bool bag_sensor_exit = 83;
      case 83: {
        if (tag == 664) {
         parse_bag_sensor_exit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bag_sensor_exit_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(680)) goto parse_conveyor_restart_lamp;
        break;
      }

      // optional bool conveyor_restart_lamp = 85;
      case 85: {
        if (tag == 680) {
         parse_conveyor_restart_lamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &conveyor_restart_lamp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(688)) goto parse_conveyor_restart_button;
        break;
      }

      // optional bool conveyor_restart_button = 86;
      case 86: {
        if (tag == 688) {
         parse_conveyor_restart_button:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &conveyor_restart_button_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(696)) goto parse_operator_present;
        break;
      }

      // optional bool operator_present = 87;
      case 87: {
        if (tag == 696) {
         parse_operator_present:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &operator_present_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(800)) goto parse_xray_lamp1_pli;
        break;
      }

      // optional bool xray_lamp1_pli = 100;
      case 100: {
        if (tag == 800) {
         parse_xray_lamp1_pli:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &xray_lamp1_pli_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(808)) goto parse_xray_lamp2_sw;
        break;
      }

      // optional bool xray_lamp2_sw = 101;
      case 101: {
        if (tag == 808) {
         parse_xray_lamp2_sw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &xray_lamp2_sw_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(816)) goto parse_xray_lamp_test;
        break;
      }

      // optional bool xray_lamp_test = 102;
      case 102: {
        if (tag == 816) {
         parse_xray_lamp_test:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &xray_lamp_test_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(824)) goto parse_xray_cmd_off;
        break;
      }

      // optional bool xray_cmd_off = 103;
      case 103: {
        if (tag == 824) {
         parse_xray_cmd_off:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &xray_cmd_off_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(832)) goto parse_xray_cmd_fault_reset;
        break;
      }

      // optional bool xray_cmd_fault_reset = 104;
      case 104: {
        if (tag == 832) {
         parse_xray_cmd_fault_reset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &xray_cmd_fault_reset_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(840)) goto parse_xray_cmd_minimization;
        break;
      }

      // optional bool xray_cmd_minimization = 105;
      case 105: {
        if (tag == 840) {
         parse_xray_cmd_minimization:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &xray_cmd_minimization_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(848)) goto parse_xray_cmd_reserved;
        break;
      }

      // optional bool xray_cmd_reserved = 106;
      case 106: {
        if (tag == 848) {
         parse_xray_cmd_reserved:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &xray_cmd_reserved_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(856)) goto parse_xray_cmd_seasoning_short;
        break;
      }

      // optional bool xray_cmd_seasoning_short = 107;
      case 107: {
        if (tag == 856) {
         parse_xray_cmd_seasoning_short:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &xray_cmd_seasoning_short_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(864)) goto parse_xray_cmd_seasoning_medium;
        break;
      }

      // optional bool xray_cmd_seasoning_medium = 108;
      case 108: {
        if (tag == 864) {
         parse_xray_cmd_seasoning_medium:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &xray_cmd_seasoning_medium_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(872)) goto parse_xray_cmd_seasoning_long;
        break;
      }

      // optional bool xray_cmd_seasoning_long = 109;
      case 109: {
        if (tag == 872) {
         parse_xray_cmd_seasoning_long:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &xray_cmd_seasoning_long_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(880)) goto parse_xray_cmd_on;
        break;
      }

      // optional bool xray_cmd_on = 110;
      case 110: {
        if (tag == 880) {
         parse_xray_cmd_on:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &xray_cmd_on_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(960)) goto parse_xray_motion_enable_ch1;
        break;
      }

      // optional bool xray_motion_enable_ch1 = 120;
      case 120: {
        if (tag == 960) {
         parse_xray_motion_enable_ch1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &xray_motion_enable_ch1_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(968)) goto parse_xray_motion_enable_ch2;
        break;
      }

      // optional bool xray_motion_enable_ch2 = 121;
      case 121: {
        if (tag == 968) {
         parse_xray_motion_enable_ch2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &xray_motion_enable_ch2_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(976)) goto parse_safety_reset_required;
        break;
      }

      // optional bool safety_reset_required = 122;
      case 122: {
        if (tag == 976) {
         parse_safety_reset_required:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &safety_reset_required_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(984)) goto parse_safety_reset_button;
        break;
      }

      // optional bool safety_reset_button = 123;
      case 123: {
        if (tag == 984) {
         parse_safety_reset_button:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &safety_reset_button_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(992)) goto parse_panels_unlocked;
        break;
      }

      // optional bool panels_unlocked = 124;
      case 124: {
        if (tag == 992) {
         parse_panels_unlocked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &panels_unlocked_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1120)) goto parse_entrance_estop_fault;
        break;
      }

      // optional bool entrance_estop_fault = 140;
      case 140: {
        if (tag == 1120) {
         parse_entrance_estop_fault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &entrance_estop_fault_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1128)) goto parse_exit_estop_fault;
        break;
      }

      // optional bool exit_estop_fault = 141;
      case 141: {
        if (tag == 1128) {
         parse_exit_estop_fault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &exit_estop_fault_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1136)) goto parse_console_estop_fault;
        break;
      }

      // optional bool console_estop_fault = 142;
      case 142: {
        if (tag == 1136) {
         parse_console_estop_fault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &console_estop_fault_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1144)) goto parse_bhs_estop_fault;
        break;
      }

      // optional bool bhs_estop_fault = 143;
      case 143: {
        if (tag == 1144) {
         parse_bhs_estop_fault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bhs_estop_fault_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1152)) goto parse_access_panel_left_magnetic_interlock_fault;
        break;
      }

      // optional bool access_panel_left_magnetic_interlock_fault = 144;
      case 144: {
        if (tag == 1152) {
         parse_access_panel_left_magnetic_interlock_fault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &access_panel_left_magnetic_interlock_fault_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1160)) goto parse_access_panel_right_magnetic_interlock_fault;
        break;
      }

      // optional bool access_panel_right_magnetic_interlock_fault = 145;
      case 145: {
        if (tag == 1160) {
         parse_access_panel_right_magnetic_interlock_fault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &access_panel_right_magnetic_interlock_fault_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1168)) goto parse_motion_contactors_status_fault;
        break;
      }

      // optional bool motion_contactors_status_fault = 146;
      case 146: {
        if (tag == 1168) {
         parse_motion_contactors_status_fault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &motion_contactors_status_fault_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1176)) goto parse_powerlink_contactors_status_fault;
        break;
      }

      // optional bool powerlink_contactors_status_fault = 147;
      case 147: {
        if (tag == 1176) {
         parse_powerlink_contactors_status_fault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &powerlink_contactors_status_fault_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1184)) goto parse_rotational_envelope_violation_sensor_fault;
        break;
      }

      // optional bool rotational_envelope_violation_sensor_fault = 148;
      case 148: {
        if (tag == 1184) {
         parse_rotational_envelope_violation_sensor_fault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rotational_envelope_violation_sensor_fault_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1192)) goto parse_standstill_monitor_fault;
        break;
      }

      // optional bool standstill_monitor_fault = 149;
      case 149: {
        if (tag == 1192) {
         parse_standstill_monitor_fault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &standstill_monitor_fault_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1200)) goto parse_overspeed_fault;
        break;
      }

      // optional bool overspeed_fault = 150;
      case 150: {
        if (tag == 1200) {
         parse_overspeed_fault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &overspeed_fault_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1208)) goto parse_access_panels_locking_fault;
        break;
      }

      // optional bool access_panels_locking_fault = 151;
      case 151: {
        if (tag == 1208) {
         parse_access_panels_locking_fault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &access_panels_locking_fault_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1216)) goto parse_xray_motion_keyswitch_fault;
        break;
      }

      // optional bool xray_motion_keyswitch_fault = 152;
      case 152: {
        if (tag == 1216) {
         parse_xray_motion_keyswitch_fault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &xray_motion_keyswitch_fault_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1224)) goto parse_encoder_fault;
        break;
      }

      // optional bool encoder_fault = 153;
      case 153: {
        if (tag == 1224) {
         parse_encoder_fault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encoder_fault_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1280)) goto parse_speed_monitor_reset_required;
        break;
      }

      // optional bool speed_monitor_reset_required = 160;
      case 160: {
        if (tag == 1280) {
         parse_speed_monitor_reset_required:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &speed_monitor_reset_required_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1288)) goto parse_standstill;
        break;
      }

      // optional bool standstill = 161;
      case 161: {
        if (tag == 1288) {
         parse_standstill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &standstill_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1296)) goto parse_standstill_monitor_enabled;
        break;
      }

      // optional bool standstill_monitor_enabled = 162;
      case 162: {
        if (tag == 1296) {
         parse_standstill_monitor_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &standstill_monitor_enabled_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:analogic.ancp00.SafetyIoCommData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analogic.ancp00.SafetyIoCommData)
  return false;
#undef DO_
}

void SafetyIoCommData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analogic.ancp00.SafetyIoCommData)
  // optional fixed32 read_reg_0 = 1;
  if (this->read_reg_0() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->read_reg_0(), output);
  }

  // optional fixed32 read_reg_1 = 2;
  if (this->read_reg_1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->read_reg_1(), output);
  }

  // optional fixed32 read_reg_2 = 3;
  if (this->read_reg_2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->read_reg_2(), output);
  }

  // optional fixed32 read_reg_3 = 4;
  if (this->read_reg_3() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->read_reg_3(), output);
  }

  // optional fixed32 read_reg_4 = 5;
  if (this->read_reg_4() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->read_reg_4(), output);
  }

  // optional fixed32 read_reg_5 = 6;
  if (this->read_reg_5() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(6, this->read_reg_5(), output);
  }

  // optional fixed32 read_reg_6 = 7;
  if (this->read_reg_6() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(7, this->read_reg_6(), output);
  }

  // optional fixed32 read_reg_7 = 8;
  if (this->read_reg_7() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(8, this->read_reg_7(), output);
  }

  // optional fixed32 write_reg_0 = 9;
  if (this->write_reg_0() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(9, this->write_reg_0(), output);
  }

  // optional fixed32 write_reg_1 = 10;
  if (this->write_reg_1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(10, this->write_reg_1(), output);
  }

  // optional fixed32 watchdog_reg = 11;
  if (this->watchdog_reg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(11, this->watchdog_reg(), output);
  }

  // optional bool left_access_panel_ch1 = 20;
  if (this->left_access_panel_ch1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->left_access_panel_ch1(), output);
  }

  // optional bool left_access_panel_ch2 = 21;
  if (this->left_access_panel_ch2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->left_access_panel_ch2(), output);
  }

  // optional bool left_access_solenoid = 22;
  if (this->left_access_solenoid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->left_access_solenoid(), output);
  }

  // optional bool left_access_solenoid_locked = 23;
  if (this->left_access_solenoid_locked() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->left_access_solenoid_locked(), output);
  }

  // optional bool right_access_panel_ch1 = 24;
  if (this->right_access_panel_ch1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->right_access_panel_ch1(), output);
  }

  // optional bool right_access_panel_ch2 = 25;
  if (this->right_access_panel_ch2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->right_access_panel_ch2(), output);
  }

  // optional bool right_access_solenoid = 26;
  if (this->right_access_solenoid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->right_access_solenoid(), output);
  }

  // optional bool right_access_solenoid_locked = 27;
  if (this->right_access_solenoid_locked() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->right_access_solenoid_locked(), output);
  }

  // optional bool access_solenoid_override = 29;
  if (this->access_solenoid_override() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(29, this->access_solenoid_override(), output);
  }

  // optional bool entrance_port_estop_ch1 = 40;
  if (this->entrance_port_estop_ch1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(40, this->entrance_port_estop_ch1(), output);
  }

  // optional bool entrance_port_estop_ch2 = 41;
  if (this->entrance_port_estop_ch2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(41, this->entrance_port_estop_ch2(), output);
  }

  // optional bool exit_port_estop_ch1 = 42;
  if (this->exit_port_estop_ch1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(42, this->exit_port_estop_ch1(), output);
  }

  // optional bool exit_port_estop_ch2 = 43;
  if (this->exit_port_estop_ch2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(43, this->exit_port_estop_ch2(), output);
  }

  // optional bool console_port_estop_ch1 = 44;
  if (this->console_port_estop_ch1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(44, this->console_port_estop_ch1(), output);
  }

  // optional bool consol_port_estop_ch2 = 45;
  if (this->consol_port_estop_ch2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(45, this->consol_port_estop_ch2(), output);
  }

  // optional bool bhs_estop_ch1 = 46;
  if (this->bhs_estop_ch1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(46, this->bhs_estop_ch1(), output);
  }

  // optional bool bhs_estop_ch2 = 47;
  if (this->bhs_estop_ch2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(47, this->bhs_estop_ch2(), output);
  }

  // optional bool inverter_contactors_status = 60;
  if (this->inverter_contactors_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(60, this->inverter_contactors_status(), output);
  }

  // optional bool inverter_enable = 61;
  if (this->inverter_enable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(61, this->inverter_enable(), output);
  }

  // optional bool inverter_xray_on_sense_ch1 = 62;
  if (this->inverter_xray_on_sense_ch1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(62, this->inverter_xray_on_sense_ch1(), output);
  }

  // optional bool inverter_xray_on_sense_ch2 = 63;
  if (this->inverter_xray_on_sense_ch2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(63, this->inverter_xray_on_sense_ch2(), output);
  }

  // optional bool inverter_line_in_fault = 64;
  if (this->inverter_line_in_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(64, this->inverter_line_in_fault(), output);
  }

  // optional bool inverter_internal_fault = 65;
  if (this->inverter_internal_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(65, this->inverter_internal_fault(), output);
  }

  // optional bool inverter_load_fault = 66;
  if (this->inverter_load_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(66, this->inverter_load_fault(), output);
  }

  // optional bool inverter_powerlink_ok = 67;
  if (this->inverter_powerlink_ok() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(67, this->inverter_powerlink_ok(), output);
  }

  // optional bool motion_contactors = 80;
  if (this->motion_contactors() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(80, this->motion_contactors(), output);
  }

  // optional bool gantry_interference = 81;
  if (this->gantry_interference() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(81, this->gantry_interference(), output);
  }

  // optional bool bag_sensor_entrance = 82;
  if (this->bag_sensor_entrance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(82, this->bag_sensor_entrance(), output);
  }

  // optional bool bag_sensor_exit = 83;
  if (this->bag_sensor_exit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(83, this->bag_sensor_exit(), output);
  }

  // optional bool conveyor_restart_lamp = 85;
  if (this->conveyor_restart_lamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(85, this->conveyor_restart_lamp(), output);
  }

  // optional bool conveyor_restart_button = 86;
  if (this->conveyor_restart_button() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(86, this->conveyor_restart_button(), output);
  }

  // optional bool operator_present = 87;
  if (this->operator_present() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(87, this->operator_present(), output);
  }

  // optional bool xray_lamp1_pli = 100;
  if (this->xray_lamp1_pli() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(100, this->xray_lamp1_pli(), output);
  }

  // optional bool xray_lamp2_sw = 101;
  if (this->xray_lamp2_sw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(101, this->xray_lamp2_sw(), output);
  }

  // optional bool xray_lamp_test = 102;
  if (this->xray_lamp_test() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(102, this->xray_lamp_test(), output);
  }

  // optional bool xray_cmd_off = 103;
  if (this->xray_cmd_off() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(103, this->xray_cmd_off(), output);
  }

  // optional bool xray_cmd_fault_reset = 104;
  if (this->xray_cmd_fault_reset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(104, this->xray_cmd_fault_reset(), output);
  }

  // optional bool xray_cmd_minimization = 105;
  if (this->xray_cmd_minimization() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(105, this->xray_cmd_minimization(), output);
  }

  // optional bool xray_cmd_reserved = 106;
  if (this->xray_cmd_reserved() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(106, this->xray_cmd_reserved(), output);
  }

  // optional bool xray_cmd_seasoning_short = 107;
  if (this->xray_cmd_seasoning_short() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(107, this->xray_cmd_seasoning_short(), output);
  }

  // optional bool xray_cmd_seasoning_medium = 108;
  if (this->xray_cmd_seasoning_medium() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(108, this->xray_cmd_seasoning_medium(), output);
  }

  // optional bool xray_cmd_seasoning_long = 109;
  if (this->xray_cmd_seasoning_long() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(109, this->xray_cmd_seasoning_long(), output);
  }

  // optional bool xray_cmd_on = 110;
  if (this->xray_cmd_on() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(110, this->xray_cmd_on(), output);
  }

  // optional bool xray_motion_enable_ch1 = 120;
  if (this->xray_motion_enable_ch1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(120, this->xray_motion_enable_ch1(), output);
  }

  // optional bool xray_motion_enable_ch2 = 121;
  if (this->xray_motion_enable_ch2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(121, this->xray_motion_enable_ch2(), output);
  }

  // optional bool safety_reset_required = 122;
  if (this->safety_reset_required() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(122, this->safety_reset_required(), output);
  }

  // optional bool safety_reset_button = 123;
  if (this->safety_reset_button() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(123, this->safety_reset_button(), output);
  }

  // optional bool panels_unlocked = 124;
  if (this->panels_unlocked() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(124, this->panels_unlocked(), output);
  }

  // optional bool entrance_estop_fault = 140;
  if (this->entrance_estop_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(140, this->entrance_estop_fault(), output);
  }

  // optional bool exit_estop_fault = 141;
  if (this->exit_estop_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(141, this->exit_estop_fault(), output);
  }

  // optional bool console_estop_fault = 142;
  if (this->console_estop_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(142, this->console_estop_fault(), output);
  }

  // optional bool bhs_estop_fault = 143;
  if (this->bhs_estop_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(143, this->bhs_estop_fault(), output);
  }

  // optional bool access_panel_left_magnetic_interlock_fault = 144;
  if (this->access_panel_left_magnetic_interlock_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(144, this->access_panel_left_magnetic_interlock_fault(), output);
  }

  // optional bool access_panel_right_magnetic_interlock_fault = 145;
  if (this->access_panel_right_magnetic_interlock_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(145, this->access_panel_right_magnetic_interlock_fault(), output);
  }

  // optional bool motion_contactors_status_fault = 146;
  if (this->motion_contactors_status_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(146, this->motion_contactors_status_fault(), output);
  }

  // optional bool powerlink_contactors_status_fault = 147;
  if (this->powerlink_contactors_status_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(147, this->powerlink_contactors_status_fault(), output);
  }

  // optional bool rotational_envelope_violation_sensor_fault = 148;
  if (this->rotational_envelope_violation_sensor_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(148, this->rotational_envelope_violation_sensor_fault(), output);
  }

  // optional bool standstill_monitor_fault = 149;
  if (this->standstill_monitor_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(149, this->standstill_monitor_fault(), output);
  }

  // optional bool overspeed_fault = 150;
  if (this->overspeed_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(150, this->overspeed_fault(), output);
  }

  // optional bool access_panels_locking_fault = 151;
  if (this->access_panels_locking_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(151, this->access_panels_locking_fault(), output);
  }

  // optional bool xray_motion_keyswitch_fault = 152;
  if (this->xray_motion_keyswitch_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(152, this->xray_motion_keyswitch_fault(), output);
  }

  // optional bool encoder_fault = 153;
  if (this->encoder_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(153, this->encoder_fault(), output);
  }

  // optional bool speed_monitor_reset_required = 160;
  if (this->speed_monitor_reset_required() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(160, this->speed_monitor_reset_required(), output);
  }

  // optional bool standstill = 161;
  if (this->standstill() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(161, this->standstill(), output);
  }

  // optional bool standstill_monitor_enabled = 162;
  if (this->standstill_monitor_enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(162, this->standstill_monitor_enabled(), output);
  }

  // @@protoc_insertion_point(serialize_end:analogic.ancp00.SafetyIoCommData)
}

::google::protobuf::uint8* SafetyIoCommData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analogic.ancp00.SafetyIoCommData)
  // optional fixed32 read_reg_0 = 1;
  if (this->read_reg_0() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->read_reg_0(), target);
  }

  // optional fixed32 read_reg_1 = 2;
  if (this->read_reg_1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->read_reg_1(), target);
  }

  // optional fixed32 read_reg_2 = 3;
  if (this->read_reg_2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->read_reg_2(), target);
  }

  // optional fixed32 read_reg_3 = 4;
  if (this->read_reg_3() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->read_reg_3(), target);
  }

  // optional fixed32 read_reg_4 = 5;
  if (this->read_reg_4() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->read_reg_4(), target);
  }

  // optional fixed32 read_reg_5 = 6;
  if (this->read_reg_5() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(6, this->read_reg_5(), target);
  }

  // optional fixed32 read_reg_6 = 7;
  if (this->read_reg_6() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(7, this->read_reg_6(), target);
  }

  // optional fixed32 read_reg_7 = 8;
  if (this->read_reg_7() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(8, this->read_reg_7(), target);
  }

  // optional fixed32 write_reg_0 = 9;
  if (this->write_reg_0() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(9, this->write_reg_0(), target);
  }

  // optional fixed32 write_reg_1 = 10;
  if (this->write_reg_1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(10, this->write_reg_1(), target);
  }

  // optional fixed32 watchdog_reg = 11;
  if (this->watchdog_reg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(11, this->watchdog_reg(), target);
  }

  // optional bool left_access_panel_ch1 = 20;
  if (this->left_access_panel_ch1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->left_access_panel_ch1(), target);
  }

  // optional bool left_access_panel_ch2 = 21;
  if (this->left_access_panel_ch2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->left_access_panel_ch2(), target);
  }

  // optional bool left_access_solenoid = 22;
  if (this->left_access_solenoid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->left_access_solenoid(), target);
  }

  // optional bool left_access_solenoid_locked = 23;
  if (this->left_access_solenoid_locked() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->left_access_solenoid_locked(), target);
  }

  // optional bool right_access_panel_ch1 = 24;
  if (this->right_access_panel_ch1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->right_access_panel_ch1(), target);
  }

  // optional bool right_access_panel_ch2 = 25;
  if (this->right_access_panel_ch2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(25, this->right_access_panel_ch2(), target);
  }

  // optional bool right_access_solenoid = 26;
  if (this->right_access_solenoid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(26, this->right_access_solenoid(), target);
  }

  // optional bool right_access_solenoid_locked = 27;
  if (this->right_access_solenoid_locked() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(27, this->right_access_solenoid_locked(), target);
  }

  // optional bool access_solenoid_override = 29;
  if (this->access_solenoid_override() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(29, this->access_solenoid_override(), target);
  }

  // optional bool entrance_port_estop_ch1 = 40;
  if (this->entrance_port_estop_ch1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(40, this->entrance_port_estop_ch1(), target);
  }

  // optional bool entrance_port_estop_ch2 = 41;
  if (this->entrance_port_estop_ch2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(41, this->entrance_port_estop_ch2(), target);
  }

  // optional bool exit_port_estop_ch1 = 42;
  if (this->exit_port_estop_ch1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(42, this->exit_port_estop_ch1(), target);
  }

  // optional bool exit_port_estop_ch2 = 43;
  if (this->exit_port_estop_ch2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(43, this->exit_port_estop_ch2(), target);
  }

  // optional bool console_port_estop_ch1 = 44;
  if (this->console_port_estop_ch1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(44, this->console_port_estop_ch1(), target);
  }

  // optional bool consol_port_estop_ch2 = 45;
  if (this->consol_port_estop_ch2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(45, this->consol_port_estop_ch2(), target);
  }

  // optional bool bhs_estop_ch1 = 46;
  if (this->bhs_estop_ch1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(46, this->bhs_estop_ch1(), target);
  }

  // optional bool bhs_estop_ch2 = 47;
  if (this->bhs_estop_ch2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(47, this->bhs_estop_ch2(), target);
  }

  // optional bool inverter_contactors_status = 60;
  if (this->inverter_contactors_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(60, this->inverter_contactors_status(), target);
  }

  // optional bool inverter_enable = 61;
  if (this->inverter_enable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(61, this->inverter_enable(), target);
  }

  // optional bool inverter_xray_on_sense_ch1 = 62;
  if (this->inverter_xray_on_sense_ch1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(62, this->inverter_xray_on_sense_ch1(), target);
  }

  // optional bool inverter_xray_on_sense_ch2 = 63;
  if (this->inverter_xray_on_sense_ch2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(63, this->inverter_xray_on_sense_ch2(), target);
  }

  // optional bool inverter_line_in_fault = 64;
  if (this->inverter_line_in_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(64, this->inverter_line_in_fault(), target);
  }

  // optional bool inverter_internal_fault = 65;
  if (this->inverter_internal_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(65, this->inverter_internal_fault(), target);
  }

  // optional bool inverter_load_fault = 66;
  if (this->inverter_load_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(66, this->inverter_load_fault(), target);
  }

  // optional bool inverter_powerlink_ok = 67;
  if (this->inverter_powerlink_ok() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(67, this->inverter_powerlink_ok(), target);
  }

  // optional bool motion_contactors = 80;
  if (this->motion_contactors() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(80, this->motion_contactors(), target);
  }

  // optional bool gantry_interference = 81;
  if (this->gantry_interference() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(81, this->gantry_interference(), target);
  }

  // optional bool bag_sensor_entrance = 82;
  if (this->bag_sensor_entrance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(82, this->bag_sensor_entrance(), target);
  }

  // optional bool bag_sensor_exit = 83;
  if (this->bag_sensor_exit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(83, this->bag_sensor_exit(), target);
  }

  // optional bool conveyor_restart_lamp = 85;
  if (this->conveyor_restart_lamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(85, this->conveyor_restart_lamp(), target);
  }

  // optional bool conveyor_restart_button = 86;
  if (this->conveyor_restart_button() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(86, this->conveyor_restart_button(), target);
  }

  // optional bool operator_present = 87;
  if (this->operator_present() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(87, this->operator_present(), target);
  }

  // optional bool xray_lamp1_pli = 100;
  if (this->xray_lamp1_pli() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(100, this->xray_lamp1_pli(), target);
  }

  // optional bool xray_lamp2_sw = 101;
  if (this->xray_lamp2_sw() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(101, this->xray_lamp2_sw(), target);
  }

  // optional bool xray_lamp_test = 102;
  if (this->xray_lamp_test() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(102, this->xray_lamp_test(), target);
  }

  // optional bool xray_cmd_off = 103;
  if (this->xray_cmd_off() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(103, this->xray_cmd_off(), target);
  }

  // optional bool xray_cmd_fault_reset = 104;
  if (this->xray_cmd_fault_reset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(104, this->xray_cmd_fault_reset(), target);
  }

  // optional bool xray_cmd_minimization = 105;
  if (this->xray_cmd_minimization() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(105, this->xray_cmd_minimization(), target);
  }

  // optional bool xray_cmd_reserved = 106;
  if (this->xray_cmd_reserved() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(106, this->xray_cmd_reserved(), target);
  }

  // optional bool xray_cmd_seasoning_short = 107;
  if (this->xray_cmd_seasoning_short() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(107, this->xray_cmd_seasoning_short(), target);
  }

  // optional bool xray_cmd_seasoning_medium = 108;
  if (this->xray_cmd_seasoning_medium() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(108, this->xray_cmd_seasoning_medium(), target);
  }

  // optional bool xray_cmd_seasoning_long = 109;
  if (this->xray_cmd_seasoning_long() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(109, this->xray_cmd_seasoning_long(), target);
  }

  // optional bool xray_cmd_on = 110;
  if (this->xray_cmd_on() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(110, this->xray_cmd_on(), target);
  }

  // optional bool xray_motion_enable_ch1 = 120;
  if (this->xray_motion_enable_ch1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(120, this->xray_motion_enable_ch1(), target);
  }

  // optional bool xray_motion_enable_ch2 = 121;
  if (this->xray_motion_enable_ch2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(121, this->xray_motion_enable_ch2(), target);
  }

  // optional bool safety_reset_required = 122;
  if (this->safety_reset_required() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(122, this->safety_reset_required(), target);
  }

  // optional bool safety_reset_button = 123;
  if (this->safety_reset_button() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(123, this->safety_reset_button(), target);
  }

  // optional bool panels_unlocked = 124;
  if (this->panels_unlocked() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(124, this->panels_unlocked(), target);
  }

  // optional bool entrance_estop_fault = 140;
  if (this->entrance_estop_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(140, this->entrance_estop_fault(), target);
  }

  // optional bool exit_estop_fault = 141;
  if (this->exit_estop_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(141, this->exit_estop_fault(), target);
  }

  // optional bool console_estop_fault = 142;
  if (this->console_estop_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(142, this->console_estop_fault(), target);
  }

  // optional bool bhs_estop_fault = 143;
  if (this->bhs_estop_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(143, this->bhs_estop_fault(), target);
  }

  // optional bool access_panel_left_magnetic_interlock_fault = 144;
  if (this->access_panel_left_magnetic_interlock_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(144, this->access_panel_left_magnetic_interlock_fault(), target);
  }

  // optional bool access_panel_right_magnetic_interlock_fault = 145;
  if (this->access_panel_right_magnetic_interlock_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(145, this->access_panel_right_magnetic_interlock_fault(), target);
  }

  // optional bool motion_contactors_status_fault = 146;
  if (this->motion_contactors_status_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(146, this->motion_contactors_status_fault(), target);
  }

  // optional bool powerlink_contactors_status_fault = 147;
  if (this->powerlink_contactors_status_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(147, this->powerlink_contactors_status_fault(), target);
  }

  // optional bool rotational_envelope_violation_sensor_fault = 148;
  if (this->rotational_envelope_violation_sensor_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(148, this->rotational_envelope_violation_sensor_fault(), target);
  }

  // optional bool standstill_monitor_fault = 149;
  if (this->standstill_monitor_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(149, this->standstill_monitor_fault(), target);
  }

  // optional bool overspeed_fault = 150;
  if (this->overspeed_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(150, this->overspeed_fault(), target);
  }

  // optional bool access_panels_locking_fault = 151;
  if (this->access_panels_locking_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(151, this->access_panels_locking_fault(), target);
  }

  // optional bool xray_motion_keyswitch_fault = 152;
  if (this->xray_motion_keyswitch_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(152, this->xray_motion_keyswitch_fault(), target);
  }

  // optional bool encoder_fault = 153;
  if (this->encoder_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(153, this->encoder_fault(), target);
  }

  // optional bool speed_monitor_reset_required = 160;
  if (this->speed_monitor_reset_required() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(160, this->speed_monitor_reset_required(), target);
  }

  // optional bool standstill = 161;
  if (this->standstill() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(161, this->standstill(), target);
  }

  // optional bool standstill_monitor_enabled = 162;
  if (this->standstill_monitor_enabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(162, this->standstill_monitor_enabled(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:analogic.ancp00.SafetyIoCommData)
  return target;
}

int SafetyIoCommData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:analogic.ancp00.SafetyIoCommData)
  int total_size = 0;

  // optional fixed32 read_reg_0 = 1;
  if (this->read_reg_0() != 0) {
    total_size += 1 + 4;
  }

  // optional fixed32 read_reg_1 = 2;
  if (this->read_reg_1() != 0) {
    total_size += 1 + 4;
  }

  // optional fixed32 read_reg_2 = 3;
  if (this->read_reg_2() != 0) {
    total_size += 1 + 4;
  }

  // optional fixed32 read_reg_3 = 4;
  if (this->read_reg_3() != 0) {
    total_size += 1 + 4;
  }

  // optional fixed32 read_reg_4 = 5;
  if (this->read_reg_4() != 0) {
    total_size += 1 + 4;
  }

  // optional fixed32 read_reg_5 = 6;
  if (this->read_reg_5() != 0) {
    total_size += 1 + 4;
  }

  // optional fixed32 read_reg_6 = 7;
  if (this->read_reg_6() != 0) {
    total_size += 1 + 4;
  }

  // optional fixed32 read_reg_7 = 8;
  if (this->read_reg_7() != 0) {
    total_size += 1 + 4;
  }

  // optional fixed32 write_reg_0 = 9;
  if (this->write_reg_0() != 0) {
    total_size += 1 + 4;
  }

  // optional fixed32 write_reg_1 = 10;
  if (this->write_reg_1() != 0) {
    total_size += 1 + 4;
  }

  // optional fixed32 watchdog_reg = 11;
  if (this->watchdog_reg() != 0) {
    total_size += 1 + 4;
  }

  // optional bool left_access_panel_ch1 = 20;
  if (this->left_access_panel_ch1() != 0) {
    total_size += 2 + 1;
  }

  // optional bool left_access_panel_ch2 = 21;
  if (this->left_access_panel_ch2() != 0) {
    total_size += 2 + 1;
  }

  // optional bool left_access_solenoid = 22;
  if (this->left_access_solenoid() != 0) {
    total_size += 2 + 1;
  }

  // optional bool left_access_solenoid_locked = 23;
  if (this->left_access_solenoid_locked() != 0) {
    total_size += 2 + 1;
  }

  // optional bool right_access_panel_ch1 = 24;
  if (this->right_access_panel_ch1() != 0) {
    total_size += 2 + 1;
  }

  // optional bool right_access_panel_ch2 = 25;
  if (this->right_access_panel_ch2() != 0) {
    total_size += 2 + 1;
  }

  // optional bool right_access_solenoid = 26;
  if (this->right_access_solenoid() != 0) {
    total_size += 2 + 1;
  }

  // optional bool right_access_solenoid_locked = 27;
  if (this->right_access_solenoid_locked() != 0) {
    total_size += 2 + 1;
  }

  // optional bool access_solenoid_override = 29;
  if (this->access_solenoid_override() != 0) {
    total_size += 2 + 1;
  }

  // optional bool entrance_port_estop_ch1 = 40;
  if (this->entrance_port_estop_ch1() != 0) {
    total_size += 2 + 1;
  }

  // optional bool entrance_port_estop_ch2 = 41;
  if (this->entrance_port_estop_ch2() != 0) {
    total_size += 2 + 1;
  }

  // optional bool exit_port_estop_ch1 = 42;
  if (this->exit_port_estop_ch1() != 0) {
    total_size += 2 + 1;
  }

  // optional bool exit_port_estop_ch2 = 43;
  if (this->exit_port_estop_ch2() != 0) {
    total_size += 2 + 1;
  }

  // optional bool console_port_estop_ch1 = 44;
  if (this->console_port_estop_ch1() != 0) {
    total_size += 2 + 1;
  }

  // optional bool consol_port_estop_ch2 = 45;
  if (this->consol_port_estop_ch2() != 0) {
    total_size += 2 + 1;
  }

  // optional bool bhs_estop_ch1 = 46;
  if (this->bhs_estop_ch1() != 0) {
    total_size += 2 + 1;
  }

  // optional bool bhs_estop_ch2 = 47;
  if (this->bhs_estop_ch2() != 0) {
    total_size += 2 + 1;
  }

  // optional bool inverter_contactors_status = 60;
  if (this->inverter_contactors_status() != 0) {
    total_size += 2 + 1;
  }

  // optional bool inverter_enable = 61;
  if (this->inverter_enable() != 0) {
    total_size += 2 + 1;
  }

  // optional bool inverter_xray_on_sense_ch1 = 62;
  if (this->inverter_xray_on_sense_ch1() != 0) {
    total_size += 2 + 1;
  }

  // optional bool inverter_xray_on_sense_ch2 = 63;
  if (this->inverter_xray_on_sense_ch2() != 0) {
    total_size += 2 + 1;
  }

  // optional bool inverter_line_in_fault = 64;
  if (this->inverter_line_in_fault() != 0) {
    total_size += 2 + 1;
  }

  // optional bool inverter_internal_fault = 65;
  if (this->inverter_internal_fault() != 0) {
    total_size += 2 + 1;
  }

  // optional bool inverter_load_fault = 66;
  if (this->inverter_load_fault() != 0) {
    total_size += 2 + 1;
  }

  // optional bool inverter_powerlink_ok = 67;
  if (this->inverter_powerlink_ok() != 0) {
    total_size += 2 + 1;
  }

  // optional bool motion_contactors = 80;
  if (this->motion_contactors() != 0) {
    total_size += 2 + 1;
  }

  // optional bool gantry_interference = 81;
  if (this->gantry_interference() != 0) {
    total_size += 2 + 1;
  }

  // optional bool bag_sensor_entrance = 82;
  if (this->bag_sensor_entrance() != 0) {
    total_size += 2 + 1;
  }

  // optional bool bag_sensor_exit = 83;
  if (this->bag_sensor_exit() != 0) {
    total_size += 2 + 1;
  }

  // optional bool conveyor_restart_lamp = 85;
  if (this->conveyor_restart_lamp() != 0) {
    total_size += 2 + 1;
  }

  // optional bool conveyor_restart_button = 86;
  if (this->conveyor_restart_button() != 0) {
    total_size += 2 + 1;
  }

  // optional bool operator_present = 87;
  if (this->operator_present() != 0) {
    total_size += 2 + 1;
  }

  // optional bool xray_lamp1_pli = 100;
  if (this->xray_lamp1_pli() != 0) {
    total_size += 2 + 1;
  }

  // optional bool xray_lamp2_sw = 101;
  if (this->xray_lamp2_sw() != 0) {
    total_size += 2 + 1;
  }

  // optional bool xray_lamp_test = 102;
  if (this->xray_lamp_test() != 0) {
    total_size += 2 + 1;
  }

  // optional bool xray_cmd_off = 103;
  if (this->xray_cmd_off() != 0) {
    total_size += 2 + 1;
  }

  // optional bool xray_cmd_fault_reset = 104;
  if (this->xray_cmd_fault_reset() != 0) {
    total_size += 2 + 1;
  }

  // optional bool xray_cmd_minimization = 105;
  if (this->xray_cmd_minimization() != 0) {
    total_size += 2 + 1;
  }

  // optional bool xray_cmd_reserved = 106;
  if (this->xray_cmd_reserved() != 0) {
    total_size += 2 + 1;
  }

  // optional bool xray_cmd_seasoning_short = 107;
  if (this->xray_cmd_seasoning_short() != 0) {
    total_size += 2 + 1;
  }

  // optional bool xray_cmd_seasoning_medium = 108;
  if (this->xray_cmd_seasoning_medium() != 0) {
    total_size += 2 + 1;
  }

  // optional bool xray_cmd_seasoning_long = 109;
  if (this->xray_cmd_seasoning_long() != 0) {
    total_size += 2 + 1;
  }

  // optional bool xray_cmd_on = 110;
  if (this->xray_cmd_on() != 0) {
    total_size += 2 + 1;
  }

  // optional bool xray_motion_enable_ch1 = 120;
  if (this->xray_motion_enable_ch1() != 0) {
    total_size += 2 + 1;
  }

  // optional bool xray_motion_enable_ch2 = 121;
  if (this->xray_motion_enable_ch2() != 0) {
    total_size += 2 + 1;
  }

  // optional bool safety_reset_required = 122;
  if (this->safety_reset_required() != 0) {
    total_size += 2 + 1;
  }

  // optional bool safety_reset_button = 123;
  if (this->safety_reset_button() != 0) {
    total_size += 2 + 1;
  }

  // optional bool panels_unlocked = 124;
  if (this->panels_unlocked() != 0) {
    total_size += 2 + 1;
  }

  // optional bool entrance_estop_fault = 140;
  if (this->entrance_estop_fault() != 0) {
    total_size += 2 + 1;
  }

  // optional bool exit_estop_fault = 141;
  if (this->exit_estop_fault() != 0) {
    total_size += 2 + 1;
  }

  // optional bool console_estop_fault = 142;
  if (this->console_estop_fault() != 0) {
    total_size += 2 + 1;
  }

  // optional bool bhs_estop_fault = 143;
  if (this->bhs_estop_fault() != 0) {
    total_size += 2 + 1;
  }

  // optional bool access_panel_left_magnetic_interlock_fault = 144;
  if (this->access_panel_left_magnetic_interlock_fault() != 0) {
    total_size += 2 + 1;
  }

  // optional bool access_panel_right_magnetic_interlock_fault = 145;
  if (this->access_panel_right_magnetic_interlock_fault() != 0) {
    total_size += 2 + 1;
  }

  // optional bool motion_contactors_status_fault = 146;
  if (this->motion_contactors_status_fault() != 0) {
    total_size += 2 + 1;
  }

  // optional bool powerlink_contactors_status_fault = 147;
  if (this->powerlink_contactors_status_fault() != 0) {
    total_size += 2 + 1;
  }

  // optional bool rotational_envelope_violation_sensor_fault = 148;
  if (this->rotational_envelope_violation_sensor_fault() != 0) {
    total_size += 2 + 1;
  }

  // optional bool standstill_monitor_fault = 149;
  if (this->standstill_monitor_fault() != 0) {
    total_size += 2 + 1;
  }

  // optional bool overspeed_fault = 150;
  if (this->overspeed_fault() != 0) {
    total_size += 2 + 1;
  }

  // optional bool access_panels_locking_fault = 151;
  if (this->access_panels_locking_fault() != 0) {
    total_size += 2 + 1;
  }

  // optional bool xray_motion_keyswitch_fault = 152;
  if (this->xray_motion_keyswitch_fault() != 0) {
    total_size += 2 + 1;
  }

  // optional bool encoder_fault = 153;
  if (this->encoder_fault() != 0) {
    total_size += 2 + 1;
  }

  // optional bool speed_monitor_reset_required = 160;
  if (this->speed_monitor_reset_required() != 0) {
    total_size += 2 + 1;
  }

  // optional bool standstill = 161;
  if (this->standstill() != 0) {
    total_size += 2 + 1;
  }

  // optional bool standstill_monitor_enabled = 162;
  if (this->standstill_monitor_enabled() != 0) {
    total_size += 2 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SafetyIoCommData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analogic.ancp00.SafetyIoCommData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SafetyIoCommData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SafetyIoCommData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analogic.ancp00.SafetyIoCommData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analogic.ancp00.SafetyIoCommData)
    MergeFrom(*source);
  }
}

void SafetyIoCommData::MergeFrom(const SafetyIoCommData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analogic.ancp00.SafetyIoCommData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.read_reg_0() != 0) {
    set_read_reg_0(from.read_reg_0());
  }
  if (from.read_reg_1() != 0) {
    set_read_reg_1(from.read_reg_1());
  }
  if (from.read_reg_2() != 0) {
    set_read_reg_2(from.read_reg_2());
  }
  if (from.read_reg_3() != 0) {
    set_read_reg_3(from.read_reg_3());
  }
  if (from.read_reg_4() != 0) {
    set_read_reg_4(from.read_reg_4());
  }
  if (from.read_reg_5() != 0) {
    set_read_reg_5(from.read_reg_5());
  }
  if (from.read_reg_6() != 0) {
    set_read_reg_6(from.read_reg_6());
  }
  if (from.read_reg_7() != 0) {
    set_read_reg_7(from.read_reg_7());
  }
  if (from.write_reg_0() != 0) {
    set_write_reg_0(from.write_reg_0());
  }
  if (from.write_reg_1() != 0) {
    set_write_reg_1(from.write_reg_1());
  }
  if (from.watchdog_reg() != 0) {
    set_watchdog_reg(from.watchdog_reg());
  }
  if (from.left_access_panel_ch1() != 0) {
    set_left_access_panel_ch1(from.left_access_panel_ch1());
  }
  if (from.left_access_panel_ch2() != 0) {
    set_left_access_panel_ch2(from.left_access_panel_ch2());
  }
  if (from.left_access_solenoid() != 0) {
    set_left_access_solenoid(from.left_access_solenoid());
  }
  if (from.left_access_solenoid_locked() != 0) {
    set_left_access_solenoid_locked(from.left_access_solenoid_locked());
  }
  if (from.right_access_panel_ch1() != 0) {
    set_right_access_panel_ch1(from.right_access_panel_ch1());
  }
  if (from.right_access_panel_ch2() != 0) {
    set_right_access_panel_ch2(from.right_access_panel_ch2());
  }
  if (from.right_access_solenoid() != 0) {
    set_right_access_solenoid(from.right_access_solenoid());
  }
  if (from.right_access_solenoid_locked() != 0) {
    set_right_access_solenoid_locked(from.right_access_solenoid_locked());
  }
  if (from.access_solenoid_override() != 0) {
    set_access_solenoid_override(from.access_solenoid_override());
  }
  if (from.entrance_port_estop_ch1() != 0) {
    set_entrance_port_estop_ch1(from.entrance_port_estop_ch1());
  }
  if (from.entrance_port_estop_ch2() != 0) {
    set_entrance_port_estop_ch2(from.entrance_port_estop_ch2());
  }
  if (from.exit_port_estop_ch1() != 0) {
    set_exit_port_estop_ch1(from.exit_port_estop_ch1());
  }
  if (from.exit_port_estop_ch2() != 0) {
    set_exit_port_estop_ch2(from.exit_port_estop_ch2());
  }
  if (from.console_port_estop_ch1() != 0) {
    set_console_port_estop_ch1(from.console_port_estop_ch1());
  }
  if (from.consol_port_estop_ch2() != 0) {
    set_consol_port_estop_ch2(from.consol_port_estop_ch2());
  }
  if (from.bhs_estop_ch1() != 0) {
    set_bhs_estop_ch1(from.bhs_estop_ch1());
  }
  if (from.bhs_estop_ch2() != 0) {
    set_bhs_estop_ch2(from.bhs_estop_ch2());
  }
  if (from.inverter_contactors_status() != 0) {
    set_inverter_contactors_status(from.inverter_contactors_status());
  }
  if (from.inverter_enable() != 0) {
    set_inverter_enable(from.inverter_enable());
  }
  if (from.inverter_xray_on_sense_ch1() != 0) {
    set_inverter_xray_on_sense_ch1(from.inverter_xray_on_sense_ch1());
  }
  if (from.inverter_xray_on_sense_ch2() != 0) {
    set_inverter_xray_on_sense_ch2(from.inverter_xray_on_sense_ch2());
  }
  if (from.inverter_line_in_fault() != 0) {
    set_inverter_line_in_fault(from.inverter_line_in_fault());
  }
  if (from.inverter_internal_fault() != 0) {
    set_inverter_internal_fault(from.inverter_internal_fault());
  }
  if (from.inverter_load_fault() != 0) {
    set_inverter_load_fault(from.inverter_load_fault());
  }
  if (from.inverter_powerlink_ok() != 0) {
    set_inverter_powerlink_ok(from.inverter_powerlink_ok());
  }
  if (from.motion_contactors() != 0) {
    set_motion_contactors(from.motion_contactors());
  }
  if (from.gantry_interference() != 0) {
    set_gantry_interference(from.gantry_interference());
  }
  if (from.bag_sensor_entrance() != 0) {
    set_bag_sensor_entrance(from.bag_sensor_entrance());
  }
  if (from.bag_sensor_exit() != 0) {
    set_bag_sensor_exit(from.bag_sensor_exit());
  }
  if (from.conveyor_restart_lamp() != 0) {
    set_conveyor_restart_lamp(from.conveyor_restart_lamp());
  }
  if (from.conveyor_restart_button() != 0) {
    set_conveyor_restart_button(from.conveyor_restart_button());
  }
  if (from.operator_present() != 0) {
    set_operator_present(from.operator_present());
  }
  if (from.xray_lamp1_pli() != 0) {
    set_xray_lamp1_pli(from.xray_lamp1_pli());
  }
  if (from.xray_lamp2_sw() != 0) {
    set_xray_lamp2_sw(from.xray_lamp2_sw());
  }
  if (from.xray_lamp_test() != 0) {
    set_xray_lamp_test(from.xray_lamp_test());
  }
  if (from.xray_cmd_off() != 0) {
    set_xray_cmd_off(from.xray_cmd_off());
  }
  if (from.xray_cmd_fault_reset() != 0) {
    set_xray_cmd_fault_reset(from.xray_cmd_fault_reset());
  }
  if (from.xray_cmd_minimization() != 0) {
    set_xray_cmd_minimization(from.xray_cmd_minimization());
  }
  if (from.xray_cmd_reserved() != 0) {
    set_xray_cmd_reserved(from.xray_cmd_reserved());
  }
  if (from.xray_cmd_seasoning_short() != 0) {
    set_xray_cmd_seasoning_short(from.xray_cmd_seasoning_short());
  }
  if (from.xray_cmd_seasoning_medium() != 0) {
    set_xray_cmd_seasoning_medium(from.xray_cmd_seasoning_medium());
  }
  if (from.xray_cmd_seasoning_long() != 0) {
    set_xray_cmd_seasoning_long(from.xray_cmd_seasoning_long());
  }
  if (from.xray_cmd_on() != 0) {
    set_xray_cmd_on(from.xray_cmd_on());
  }
  if (from.xray_motion_enable_ch1() != 0) {
    set_xray_motion_enable_ch1(from.xray_motion_enable_ch1());
  }
  if (from.xray_motion_enable_ch2() != 0) {
    set_xray_motion_enable_ch2(from.xray_motion_enable_ch2());
  }
  if (from.safety_reset_required() != 0) {
    set_safety_reset_required(from.safety_reset_required());
  }
  if (from.safety_reset_button() != 0) {
    set_safety_reset_button(from.safety_reset_button());
  }
  if (from.panels_unlocked() != 0) {
    set_panels_unlocked(from.panels_unlocked());
  }
  if (from.entrance_estop_fault() != 0) {
    set_entrance_estop_fault(from.entrance_estop_fault());
  }
  if (from.exit_estop_fault() != 0) {
    set_exit_estop_fault(from.exit_estop_fault());
  }
  if (from.console_estop_fault() != 0) {
    set_console_estop_fault(from.console_estop_fault());
  }
  if (from.bhs_estop_fault() != 0) {
    set_bhs_estop_fault(from.bhs_estop_fault());
  }
  if (from.access_panel_left_magnetic_interlock_fault() != 0) {
    set_access_panel_left_magnetic_interlock_fault(from.access_panel_left_magnetic_interlock_fault());
  }
  if (from.access_panel_right_magnetic_interlock_fault() != 0) {
    set_access_panel_right_magnetic_interlock_fault(from.access_panel_right_magnetic_interlock_fault());
  }
  if (from.motion_contactors_status_fault() != 0) {
    set_motion_contactors_status_fault(from.motion_contactors_status_fault());
  }
  if (from.powerlink_contactors_status_fault() != 0) {
    set_powerlink_contactors_status_fault(from.powerlink_contactors_status_fault());
  }
  if (from.rotational_envelope_violation_sensor_fault() != 0) {
    set_rotational_envelope_violation_sensor_fault(from.rotational_envelope_violation_sensor_fault());
  }
  if (from.standstill_monitor_fault() != 0) {
    set_standstill_monitor_fault(from.standstill_monitor_fault());
  }
  if (from.overspeed_fault() != 0) {
    set_overspeed_fault(from.overspeed_fault());
  }
  if (from.access_panels_locking_fault() != 0) {
    set_access_panels_locking_fault(from.access_panels_locking_fault());
  }
  if (from.xray_motion_keyswitch_fault() != 0) {
    set_xray_motion_keyswitch_fault(from.xray_motion_keyswitch_fault());
  }
  if (from.encoder_fault() != 0) {
    set_encoder_fault(from.encoder_fault());
  }
  if (from.speed_monitor_reset_required() != 0) {
    set_speed_monitor_reset_required(from.speed_monitor_reset_required());
  }
  if (from.standstill() != 0) {
    set_standstill(from.standstill());
  }
  if (from.standstill_monitor_enabled() != 0) {
    set_standstill_monitor_enabled(from.standstill_monitor_enabled());
  }
}

void SafetyIoCommData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analogic.ancp00.SafetyIoCommData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SafetyIoCommData::CopyFrom(const SafetyIoCommData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analogic.ancp00.SafetyIoCommData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SafetyIoCommData::IsInitialized() const {

  return true;
}

void SafetyIoCommData::Swap(SafetyIoCommData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SafetyIoCommData::InternalSwap(SafetyIoCommData* other) {
  std::swap(read_reg_0_, other->read_reg_0_);
  std::swap(read_reg_1_, other->read_reg_1_);
  std::swap(read_reg_2_, other->read_reg_2_);
  std::swap(read_reg_3_, other->read_reg_3_);
  std::swap(read_reg_4_, other->read_reg_4_);
  std::swap(read_reg_5_, other->read_reg_5_);
  std::swap(read_reg_6_, other->read_reg_6_);
  std::swap(read_reg_7_, other->read_reg_7_);
  std::swap(write_reg_0_, other->write_reg_0_);
  std::swap(write_reg_1_, other->write_reg_1_);
  std::swap(watchdog_reg_, other->watchdog_reg_);
  std::swap(left_access_panel_ch1_, other->left_access_panel_ch1_);
  std::swap(left_access_panel_ch2_, other->left_access_panel_ch2_);
  std::swap(left_access_solenoid_, other->left_access_solenoid_);
  std::swap(left_access_solenoid_locked_, other->left_access_solenoid_locked_);
  std::swap(right_access_panel_ch1_, other->right_access_panel_ch1_);
  std::swap(right_access_panel_ch2_, other->right_access_panel_ch2_);
  std::swap(right_access_solenoid_, other->right_access_solenoid_);
  std::swap(right_access_solenoid_locked_, other->right_access_solenoid_locked_);
  std::swap(access_solenoid_override_, other->access_solenoid_override_);
  std::swap(entrance_port_estop_ch1_, other->entrance_port_estop_ch1_);
  std::swap(entrance_port_estop_ch2_, other->entrance_port_estop_ch2_);
  std::swap(exit_port_estop_ch1_, other->exit_port_estop_ch1_);
  std::swap(exit_port_estop_ch2_, other->exit_port_estop_ch2_);
  std::swap(console_port_estop_ch1_, other->console_port_estop_ch1_);
  std::swap(consol_port_estop_ch2_, other->consol_port_estop_ch2_);
  std::swap(bhs_estop_ch1_, other->bhs_estop_ch1_);
  std::swap(bhs_estop_ch2_, other->bhs_estop_ch2_);
  std::swap(inverter_contactors_status_, other->inverter_contactors_status_);
  std::swap(inverter_enable_, other->inverter_enable_);
  std::swap(inverter_xray_on_sense_ch1_, other->inverter_xray_on_sense_ch1_);
  std::swap(inverter_xray_on_sense_ch2_, other->inverter_xray_on_sense_ch2_);
  std::swap(inverter_line_in_fault_, other->inverter_line_in_fault_);
  std::swap(inverter_internal_fault_, other->inverter_internal_fault_);
  std::swap(inverter_load_fault_, other->inverter_load_fault_);
  std::swap(inverter_powerlink_ok_, other->inverter_powerlink_ok_);
  std::swap(motion_contactors_, other->motion_contactors_);
  std::swap(gantry_interference_, other->gantry_interference_);
  std::swap(bag_sensor_entrance_, other->bag_sensor_entrance_);
  std::swap(bag_sensor_exit_, other->bag_sensor_exit_);
  std::swap(conveyor_restart_lamp_, other->conveyor_restart_lamp_);
  std::swap(conveyor_restart_button_, other->conveyor_restart_button_);
  std::swap(operator_present_, other->operator_present_);
  std::swap(xray_lamp1_pli_, other->xray_lamp1_pli_);
  std::swap(xray_lamp2_sw_, other->xray_lamp2_sw_);
  std::swap(xray_lamp_test_, other->xray_lamp_test_);
  std::swap(xray_cmd_off_, other->xray_cmd_off_);
  std::swap(xray_cmd_fault_reset_, other->xray_cmd_fault_reset_);
  std::swap(xray_cmd_minimization_, other->xray_cmd_minimization_);
  std::swap(xray_cmd_reserved_, other->xray_cmd_reserved_);
  std::swap(xray_cmd_seasoning_short_, other->xray_cmd_seasoning_short_);
  std::swap(xray_cmd_seasoning_medium_, other->xray_cmd_seasoning_medium_);
  std::swap(xray_cmd_seasoning_long_, other->xray_cmd_seasoning_long_);
  std::swap(xray_cmd_on_, other->xray_cmd_on_);
  std::swap(xray_motion_enable_ch1_, other->xray_motion_enable_ch1_);
  std::swap(xray_motion_enable_ch2_, other->xray_motion_enable_ch2_);
  std::swap(safety_reset_required_, other->safety_reset_required_);
  std::swap(safety_reset_button_, other->safety_reset_button_);
  std::swap(panels_unlocked_, other->panels_unlocked_);
  std::swap(entrance_estop_fault_, other->entrance_estop_fault_);
  std::swap(exit_estop_fault_, other->exit_estop_fault_);
  std::swap(console_estop_fault_, other->console_estop_fault_);
  std::swap(bhs_estop_fault_, other->bhs_estop_fault_);
  std::swap(access_panel_left_magnetic_interlock_fault_, other->access_panel_left_magnetic_interlock_fault_);
  std::swap(access_panel_right_magnetic_interlock_fault_, other->access_panel_right_magnetic_interlock_fault_);
  std::swap(motion_contactors_status_fault_, other->motion_contactors_status_fault_);
  std::swap(powerlink_contactors_status_fault_, other->powerlink_contactors_status_fault_);
  std::swap(rotational_envelope_violation_sensor_fault_, other->rotational_envelope_violation_sensor_fault_);
  std::swap(standstill_monitor_fault_, other->standstill_monitor_fault_);
  std::swap(overspeed_fault_, other->overspeed_fault_);
  std::swap(access_panels_locking_fault_, other->access_panels_locking_fault_);
  std::swap(xray_motion_keyswitch_fault_, other->xray_motion_keyswitch_fault_);
  std::swap(encoder_fault_, other->encoder_fault_);
  std::swap(speed_monitor_reset_required_, other->speed_monitor_reset_required_);
  std::swap(standstill_, other->standstill_);
  std::swap(standstill_monitor_enabled_, other->standstill_monitor_enabled_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SafetyIoCommData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SafetyIoCommData_descriptor_;
  metadata.reflection = SafetyIoCommData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SafetyIoCommData

// optional fixed32 read_reg_0 = 1;
void SafetyIoCommData::clear_read_reg_0() {
  read_reg_0_ = 0u;
}
 ::google::protobuf::uint32 SafetyIoCommData::read_reg_0() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.read_reg_0)
  return read_reg_0_;
}
 void SafetyIoCommData::set_read_reg_0(::google::protobuf::uint32 value) {
  
  read_reg_0_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.read_reg_0)
}

// optional fixed32 read_reg_1 = 2;
void SafetyIoCommData::clear_read_reg_1() {
  read_reg_1_ = 0u;
}
 ::google::protobuf::uint32 SafetyIoCommData::read_reg_1() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.read_reg_1)
  return read_reg_1_;
}
 void SafetyIoCommData::set_read_reg_1(::google::protobuf::uint32 value) {
  
  read_reg_1_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.read_reg_1)
}

// optional fixed32 read_reg_2 = 3;
void SafetyIoCommData::clear_read_reg_2() {
  read_reg_2_ = 0u;
}
 ::google::protobuf::uint32 SafetyIoCommData::read_reg_2() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.read_reg_2)
  return read_reg_2_;
}
 void SafetyIoCommData::set_read_reg_2(::google::protobuf::uint32 value) {
  
  read_reg_2_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.read_reg_2)
}

// optional fixed32 read_reg_3 = 4;
void SafetyIoCommData::clear_read_reg_3() {
  read_reg_3_ = 0u;
}
 ::google::protobuf::uint32 SafetyIoCommData::read_reg_3() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.read_reg_3)
  return read_reg_3_;
}
 void SafetyIoCommData::set_read_reg_3(::google::protobuf::uint32 value) {
  
  read_reg_3_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.read_reg_3)
}

// optional fixed32 read_reg_4 = 5;
void SafetyIoCommData::clear_read_reg_4() {
  read_reg_4_ = 0u;
}
 ::google::protobuf::uint32 SafetyIoCommData::read_reg_4() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.read_reg_4)
  return read_reg_4_;
}
 void SafetyIoCommData::set_read_reg_4(::google::protobuf::uint32 value) {
  
  read_reg_4_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.read_reg_4)
}

// optional fixed32 read_reg_5 = 6;
void SafetyIoCommData::clear_read_reg_5() {
  read_reg_5_ = 0u;
}
 ::google::protobuf::uint32 SafetyIoCommData::read_reg_5() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.read_reg_5)
  return read_reg_5_;
}
 void SafetyIoCommData::set_read_reg_5(::google::protobuf::uint32 value) {
  
  read_reg_5_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.read_reg_5)
}

// optional fixed32 read_reg_6 = 7;
void SafetyIoCommData::clear_read_reg_6() {
  read_reg_6_ = 0u;
}
 ::google::protobuf::uint32 SafetyIoCommData::read_reg_6() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.read_reg_6)
  return read_reg_6_;
}
 void SafetyIoCommData::set_read_reg_6(::google::protobuf::uint32 value) {
  
  read_reg_6_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.read_reg_6)
}

// optional fixed32 read_reg_7 = 8;
void SafetyIoCommData::clear_read_reg_7() {
  read_reg_7_ = 0u;
}
 ::google::protobuf::uint32 SafetyIoCommData::read_reg_7() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.read_reg_7)
  return read_reg_7_;
}
 void SafetyIoCommData::set_read_reg_7(::google::protobuf::uint32 value) {
  
  read_reg_7_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.read_reg_7)
}

// optional fixed32 write_reg_0 = 9;
void SafetyIoCommData::clear_write_reg_0() {
  write_reg_0_ = 0u;
}
 ::google::protobuf::uint32 SafetyIoCommData::write_reg_0() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.write_reg_0)
  return write_reg_0_;
}
 void SafetyIoCommData::set_write_reg_0(::google::protobuf::uint32 value) {
  
  write_reg_0_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.write_reg_0)
}

// optional fixed32 write_reg_1 = 10;
void SafetyIoCommData::clear_write_reg_1() {
  write_reg_1_ = 0u;
}
 ::google::protobuf::uint32 SafetyIoCommData::write_reg_1() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.write_reg_1)
  return write_reg_1_;
}
 void SafetyIoCommData::set_write_reg_1(::google::protobuf::uint32 value) {
  
  write_reg_1_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.write_reg_1)
}

// optional fixed32 watchdog_reg = 11;
void SafetyIoCommData::clear_watchdog_reg() {
  watchdog_reg_ = 0u;
}
 ::google::protobuf::uint32 SafetyIoCommData::watchdog_reg() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.watchdog_reg)
  return watchdog_reg_;
}
 void SafetyIoCommData::set_watchdog_reg(::google::protobuf::uint32 value) {
  
  watchdog_reg_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.watchdog_reg)
}

// optional bool left_access_panel_ch1 = 20;
void SafetyIoCommData::clear_left_access_panel_ch1() {
  left_access_panel_ch1_ = false;
}
 bool SafetyIoCommData::left_access_panel_ch1() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.left_access_panel_ch1)
  return left_access_panel_ch1_;
}
 void SafetyIoCommData::set_left_access_panel_ch1(bool value) {
  
  left_access_panel_ch1_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.left_access_panel_ch1)
}

// optional bool left_access_panel_ch2 = 21;
void SafetyIoCommData::clear_left_access_panel_ch2() {
  left_access_panel_ch2_ = false;
}
 bool SafetyIoCommData::left_access_panel_ch2() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.left_access_panel_ch2)
  return left_access_panel_ch2_;
}
 void SafetyIoCommData::set_left_access_panel_ch2(bool value) {
  
  left_access_panel_ch2_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.left_access_panel_ch2)
}

// optional bool left_access_solenoid = 22;
void SafetyIoCommData::clear_left_access_solenoid() {
  left_access_solenoid_ = false;
}
 bool SafetyIoCommData::left_access_solenoid() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.left_access_solenoid)
  return left_access_solenoid_;
}
 void SafetyIoCommData::set_left_access_solenoid(bool value) {
  
  left_access_solenoid_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.left_access_solenoid)
}

// optional bool left_access_solenoid_locked = 23;
void SafetyIoCommData::clear_left_access_solenoid_locked() {
  left_access_solenoid_locked_ = false;
}
 bool SafetyIoCommData::left_access_solenoid_locked() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.left_access_solenoid_locked)
  return left_access_solenoid_locked_;
}
 void SafetyIoCommData::set_left_access_solenoid_locked(bool value) {
  
  left_access_solenoid_locked_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.left_access_solenoid_locked)
}

// optional bool right_access_panel_ch1 = 24;
void SafetyIoCommData::clear_right_access_panel_ch1() {
  right_access_panel_ch1_ = false;
}
 bool SafetyIoCommData::right_access_panel_ch1() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.right_access_panel_ch1)
  return right_access_panel_ch1_;
}
 void SafetyIoCommData::set_right_access_panel_ch1(bool value) {
  
  right_access_panel_ch1_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.right_access_panel_ch1)
}

// optional bool right_access_panel_ch2 = 25;
void SafetyIoCommData::clear_right_access_panel_ch2() {
  right_access_panel_ch2_ = false;
}
 bool SafetyIoCommData::right_access_panel_ch2() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.right_access_panel_ch2)
  return right_access_panel_ch2_;
}
 void SafetyIoCommData::set_right_access_panel_ch2(bool value) {
  
  right_access_panel_ch2_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.right_access_panel_ch2)
}

// optional bool right_access_solenoid = 26;
void SafetyIoCommData::clear_right_access_solenoid() {
  right_access_solenoid_ = false;
}
 bool SafetyIoCommData::right_access_solenoid() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.right_access_solenoid)
  return right_access_solenoid_;
}
 void SafetyIoCommData::set_right_access_solenoid(bool value) {
  
  right_access_solenoid_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.right_access_solenoid)
}

// optional bool right_access_solenoid_locked = 27;
void SafetyIoCommData::clear_right_access_solenoid_locked() {
  right_access_solenoid_locked_ = false;
}
 bool SafetyIoCommData::right_access_solenoid_locked() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.right_access_solenoid_locked)
  return right_access_solenoid_locked_;
}
 void SafetyIoCommData::set_right_access_solenoid_locked(bool value) {
  
  right_access_solenoid_locked_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.right_access_solenoid_locked)
}

// optional bool access_solenoid_override = 29;
void SafetyIoCommData::clear_access_solenoid_override() {
  access_solenoid_override_ = false;
}
 bool SafetyIoCommData::access_solenoid_override() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.access_solenoid_override)
  return access_solenoid_override_;
}
 void SafetyIoCommData::set_access_solenoid_override(bool value) {
  
  access_solenoid_override_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.access_solenoid_override)
}

// optional bool entrance_port_estop_ch1 = 40;
void SafetyIoCommData::clear_entrance_port_estop_ch1() {
  entrance_port_estop_ch1_ = false;
}
 bool SafetyIoCommData::entrance_port_estop_ch1() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.entrance_port_estop_ch1)
  return entrance_port_estop_ch1_;
}
 void SafetyIoCommData::set_entrance_port_estop_ch1(bool value) {
  
  entrance_port_estop_ch1_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.entrance_port_estop_ch1)
}

// optional bool entrance_port_estop_ch2 = 41;
void SafetyIoCommData::clear_entrance_port_estop_ch2() {
  entrance_port_estop_ch2_ = false;
}
 bool SafetyIoCommData::entrance_port_estop_ch2() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.entrance_port_estop_ch2)
  return entrance_port_estop_ch2_;
}
 void SafetyIoCommData::set_entrance_port_estop_ch2(bool value) {
  
  entrance_port_estop_ch2_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.entrance_port_estop_ch2)
}

// optional bool exit_port_estop_ch1 = 42;
void SafetyIoCommData::clear_exit_port_estop_ch1() {
  exit_port_estop_ch1_ = false;
}
 bool SafetyIoCommData::exit_port_estop_ch1() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.exit_port_estop_ch1)
  return exit_port_estop_ch1_;
}
 void SafetyIoCommData::set_exit_port_estop_ch1(bool value) {
  
  exit_port_estop_ch1_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.exit_port_estop_ch1)
}

// optional bool exit_port_estop_ch2 = 43;
void SafetyIoCommData::clear_exit_port_estop_ch2() {
  exit_port_estop_ch2_ = false;
}
 bool SafetyIoCommData::exit_port_estop_ch2() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.exit_port_estop_ch2)
  return exit_port_estop_ch2_;
}
 void SafetyIoCommData::set_exit_port_estop_ch2(bool value) {
  
  exit_port_estop_ch2_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.exit_port_estop_ch2)
}

// optional bool console_port_estop_ch1 = 44;
void SafetyIoCommData::clear_console_port_estop_ch1() {
  console_port_estop_ch1_ = false;
}
 bool SafetyIoCommData::console_port_estop_ch1() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.console_port_estop_ch1)
  return console_port_estop_ch1_;
}
 void SafetyIoCommData::set_console_port_estop_ch1(bool value) {
  
  console_port_estop_ch1_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.console_port_estop_ch1)
}

// optional bool consol_port_estop_ch2 = 45;
void SafetyIoCommData::clear_consol_port_estop_ch2() {
  consol_port_estop_ch2_ = false;
}
 bool SafetyIoCommData::consol_port_estop_ch2() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.consol_port_estop_ch2)
  return consol_port_estop_ch2_;
}
 void SafetyIoCommData::set_consol_port_estop_ch2(bool value) {
  
  consol_port_estop_ch2_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.consol_port_estop_ch2)
}

// optional bool bhs_estop_ch1 = 46;
void SafetyIoCommData::clear_bhs_estop_ch1() {
  bhs_estop_ch1_ = false;
}
 bool SafetyIoCommData::bhs_estop_ch1() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.bhs_estop_ch1)
  return bhs_estop_ch1_;
}
 void SafetyIoCommData::set_bhs_estop_ch1(bool value) {
  
  bhs_estop_ch1_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.bhs_estop_ch1)
}

// optional bool bhs_estop_ch2 = 47;
void SafetyIoCommData::clear_bhs_estop_ch2() {
  bhs_estop_ch2_ = false;
}
 bool SafetyIoCommData::bhs_estop_ch2() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.bhs_estop_ch2)
  return bhs_estop_ch2_;
}
 void SafetyIoCommData::set_bhs_estop_ch2(bool value) {
  
  bhs_estop_ch2_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.bhs_estop_ch2)
}

// optional bool inverter_contactors_status = 60;
void SafetyIoCommData::clear_inverter_contactors_status() {
  inverter_contactors_status_ = false;
}
 bool SafetyIoCommData::inverter_contactors_status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.inverter_contactors_status)
  return inverter_contactors_status_;
}
 void SafetyIoCommData::set_inverter_contactors_status(bool value) {
  
  inverter_contactors_status_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.inverter_contactors_status)
}

// optional bool inverter_enable = 61;
void SafetyIoCommData::clear_inverter_enable() {
  inverter_enable_ = false;
}
 bool SafetyIoCommData::inverter_enable() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.inverter_enable)
  return inverter_enable_;
}
 void SafetyIoCommData::set_inverter_enable(bool value) {
  
  inverter_enable_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.inverter_enable)
}

// optional bool inverter_xray_on_sense_ch1 = 62;
void SafetyIoCommData::clear_inverter_xray_on_sense_ch1() {
  inverter_xray_on_sense_ch1_ = false;
}
 bool SafetyIoCommData::inverter_xray_on_sense_ch1() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.inverter_xray_on_sense_ch1)
  return inverter_xray_on_sense_ch1_;
}
 void SafetyIoCommData::set_inverter_xray_on_sense_ch1(bool value) {
  
  inverter_xray_on_sense_ch1_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.inverter_xray_on_sense_ch1)
}

// optional bool inverter_xray_on_sense_ch2 = 63;
void SafetyIoCommData::clear_inverter_xray_on_sense_ch2() {
  inverter_xray_on_sense_ch2_ = false;
}
 bool SafetyIoCommData::inverter_xray_on_sense_ch2() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.inverter_xray_on_sense_ch2)
  return inverter_xray_on_sense_ch2_;
}
 void SafetyIoCommData::set_inverter_xray_on_sense_ch2(bool value) {
  
  inverter_xray_on_sense_ch2_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.inverter_xray_on_sense_ch2)
}

// optional bool inverter_line_in_fault = 64;
void SafetyIoCommData::clear_inverter_line_in_fault() {
  inverter_line_in_fault_ = false;
}
 bool SafetyIoCommData::inverter_line_in_fault() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.inverter_line_in_fault)
  return inverter_line_in_fault_;
}
 void SafetyIoCommData::set_inverter_line_in_fault(bool value) {
  
  inverter_line_in_fault_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.inverter_line_in_fault)
}

// optional bool inverter_internal_fault = 65;
void SafetyIoCommData::clear_inverter_internal_fault() {
  inverter_internal_fault_ = false;
}
 bool SafetyIoCommData::inverter_internal_fault() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.inverter_internal_fault)
  return inverter_internal_fault_;
}
 void SafetyIoCommData::set_inverter_internal_fault(bool value) {
  
  inverter_internal_fault_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.inverter_internal_fault)
}

// optional bool inverter_load_fault = 66;
void SafetyIoCommData::clear_inverter_load_fault() {
  inverter_load_fault_ = false;
}
 bool SafetyIoCommData::inverter_load_fault() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.inverter_load_fault)
  return inverter_load_fault_;
}
 void SafetyIoCommData::set_inverter_load_fault(bool value) {
  
  inverter_load_fault_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.inverter_load_fault)
}

// optional bool inverter_powerlink_ok = 67;
void SafetyIoCommData::clear_inverter_powerlink_ok() {
  inverter_powerlink_ok_ = false;
}
 bool SafetyIoCommData::inverter_powerlink_ok() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.inverter_powerlink_ok)
  return inverter_powerlink_ok_;
}
 void SafetyIoCommData::set_inverter_powerlink_ok(bool value) {
  
  inverter_powerlink_ok_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.inverter_powerlink_ok)
}

// optional bool motion_contactors = 80;
void SafetyIoCommData::clear_motion_contactors() {
  motion_contactors_ = false;
}
 bool SafetyIoCommData::motion_contactors() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.motion_contactors)
  return motion_contactors_;
}
 void SafetyIoCommData::set_motion_contactors(bool value) {
  
  motion_contactors_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.motion_contactors)
}

// optional bool gantry_interference = 81;
void SafetyIoCommData::clear_gantry_interference() {
  gantry_interference_ = false;
}
 bool SafetyIoCommData::gantry_interference() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.gantry_interference)
  return gantry_interference_;
}
 void SafetyIoCommData::set_gantry_interference(bool value) {
  
  gantry_interference_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.gantry_interference)
}

// optional bool bag_sensor_entrance = 82;
void SafetyIoCommData::clear_bag_sensor_entrance() {
  bag_sensor_entrance_ = false;
}
 bool SafetyIoCommData::bag_sensor_entrance() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.bag_sensor_entrance)
  return bag_sensor_entrance_;
}
 void SafetyIoCommData::set_bag_sensor_entrance(bool value) {
  
  bag_sensor_entrance_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.bag_sensor_entrance)
}

// optional bool bag_sensor_exit = 83;
void SafetyIoCommData::clear_bag_sensor_exit() {
  bag_sensor_exit_ = false;
}
 bool SafetyIoCommData::bag_sensor_exit() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.bag_sensor_exit)
  return bag_sensor_exit_;
}
 void SafetyIoCommData::set_bag_sensor_exit(bool value) {
  
  bag_sensor_exit_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.bag_sensor_exit)
}

// optional bool conveyor_restart_lamp = 85;
void SafetyIoCommData::clear_conveyor_restart_lamp() {
  conveyor_restart_lamp_ = false;
}
 bool SafetyIoCommData::conveyor_restart_lamp() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.conveyor_restart_lamp)
  return conveyor_restart_lamp_;
}
 void SafetyIoCommData::set_conveyor_restart_lamp(bool value) {
  
  conveyor_restart_lamp_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.conveyor_restart_lamp)
}

// optional bool conveyor_restart_button = 86;
void SafetyIoCommData::clear_conveyor_restart_button() {
  conveyor_restart_button_ = false;
}
 bool SafetyIoCommData::conveyor_restart_button() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.conveyor_restart_button)
  return conveyor_restart_button_;
}
 void SafetyIoCommData::set_conveyor_restart_button(bool value) {
  
  conveyor_restart_button_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.conveyor_restart_button)
}

// optional bool operator_present = 87;
void SafetyIoCommData::clear_operator_present() {
  operator_present_ = false;
}
 bool SafetyIoCommData::operator_present() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.operator_present)
  return operator_present_;
}
 void SafetyIoCommData::set_operator_present(bool value) {
  
  operator_present_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.operator_present)
}

// optional bool xray_lamp1_pli = 100;
void SafetyIoCommData::clear_xray_lamp1_pli() {
  xray_lamp1_pli_ = false;
}
 bool SafetyIoCommData::xray_lamp1_pli() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.xray_lamp1_pli)
  return xray_lamp1_pli_;
}
 void SafetyIoCommData::set_xray_lamp1_pli(bool value) {
  
  xray_lamp1_pli_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.xray_lamp1_pli)
}

// optional bool xray_lamp2_sw = 101;
void SafetyIoCommData::clear_xray_lamp2_sw() {
  xray_lamp2_sw_ = false;
}
 bool SafetyIoCommData::xray_lamp2_sw() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.xray_lamp2_sw)
  return xray_lamp2_sw_;
}
 void SafetyIoCommData::set_xray_lamp2_sw(bool value) {
  
  xray_lamp2_sw_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.xray_lamp2_sw)
}

// optional bool xray_lamp_test = 102;
void SafetyIoCommData::clear_xray_lamp_test() {
  xray_lamp_test_ = false;
}
 bool SafetyIoCommData::xray_lamp_test() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.xray_lamp_test)
  return xray_lamp_test_;
}
 void SafetyIoCommData::set_xray_lamp_test(bool value) {
  
  xray_lamp_test_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.xray_lamp_test)
}

// optional bool xray_cmd_off = 103;
void SafetyIoCommData::clear_xray_cmd_off() {
  xray_cmd_off_ = false;
}
 bool SafetyIoCommData::xray_cmd_off() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.xray_cmd_off)
  return xray_cmd_off_;
}
 void SafetyIoCommData::set_xray_cmd_off(bool value) {
  
  xray_cmd_off_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.xray_cmd_off)
}

// optional bool xray_cmd_fault_reset = 104;
void SafetyIoCommData::clear_xray_cmd_fault_reset() {
  xray_cmd_fault_reset_ = false;
}
 bool SafetyIoCommData::xray_cmd_fault_reset() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.xray_cmd_fault_reset)
  return xray_cmd_fault_reset_;
}
 void SafetyIoCommData::set_xray_cmd_fault_reset(bool value) {
  
  xray_cmd_fault_reset_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.xray_cmd_fault_reset)
}

// optional bool xray_cmd_minimization = 105;
void SafetyIoCommData::clear_xray_cmd_minimization() {
  xray_cmd_minimization_ = false;
}
 bool SafetyIoCommData::xray_cmd_minimization() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.xray_cmd_minimization)
  return xray_cmd_minimization_;
}
 void SafetyIoCommData::set_xray_cmd_minimization(bool value) {
  
  xray_cmd_minimization_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.xray_cmd_minimization)
}

// optional bool xray_cmd_reserved = 106;
void SafetyIoCommData::clear_xray_cmd_reserved() {
  xray_cmd_reserved_ = false;
}
 bool SafetyIoCommData::xray_cmd_reserved() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.xray_cmd_reserved)
  return xray_cmd_reserved_;
}
 void SafetyIoCommData::set_xray_cmd_reserved(bool value) {
  
  xray_cmd_reserved_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.xray_cmd_reserved)
}

// optional bool xray_cmd_seasoning_short = 107;
void SafetyIoCommData::clear_xray_cmd_seasoning_short() {
  xray_cmd_seasoning_short_ = false;
}
 bool SafetyIoCommData::xray_cmd_seasoning_short() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.xray_cmd_seasoning_short)
  return xray_cmd_seasoning_short_;
}
 void SafetyIoCommData::set_xray_cmd_seasoning_short(bool value) {
  
  xray_cmd_seasoning_short_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.xray_cmd_seasoning_short)
}

// optional bool xray_cmd_seasoning_medium = 108;
void SafetyIoCommData::clear_xray_cmd_seasoning_medium() {
  xray_cmd_seasoning_medium_ = false;
}
 bool SafetyIoCommData::xray_cmd_seasoning_medium() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.xray_cmd_seasoning_medium)
  return xray_cmd_seasoning_medium_;
}
 void SafetyIoCommData::set_xray_cmd_seasoning_medium(bool value) {
  
  xray_cmd_seasoning_medium_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.xray_cmd_seasoning_medium)
}

// optional bool xray_cmd_seasoning_long = 109;
void SafetyIoCommData::clear_xray_cmd_seasoning_long() {
  xray_cmd_seasoning_long_ = false;
}
 bool SafetyIoCommData::xray_cmd_seasoning_long() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.xray_cmd_seasoning_long)
  return xray_cmd_seasoning_long_;
}
 void SafetyIoCommData::set_xray_cmd_seasoning_long(bool value) {
  
  xray_cmd_seasoning_long_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.xray_cmd_seasoning_long)
}

// optional bool xray_cmd_on = 110;
void SafetyIoCommData::clear_xray_cmd_on() {
  xray_cmd_on_ = false;
}
 bool SafetyIoCommData::xray_cmd_on() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.xray_cmd_on)
  return xray_cmd_on_;
}
 void SafetyIoCommData::set_xray_cmd_on(bool value) {
  
  xray_cmd_on_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.xray_cmd_on)
}

// optional bool xray_motion_enable_ch1 = 120;
void SafetyIoCommData::clear_xray_motion_enable_ch1() {
  xray_motion_enable_ch1_ = false;
}
 bool SafetyIoCommData::xray_motion_enable_ch1() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.xray_motion_enable_ch1)
  return xray_motion_enable_ch1_;
}
 void SafetyIoCommData::set_xray_motion_enable_ch1(bool value) {
  
  xray_motion_enable_ch1_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.xray_motion_enable_ch1)
}

// optional bool xray_motion_enable_ch2 = 121;
void SafetyIoCommData::clear_xray_motion_enable_ch2() {
  xray_motion_enable_ch2_ = false;
}
 bool SafetyIoCommData::xray_motion_enable_ch2() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.xray_motion_enable_ch2)
  return xray_motion_enable_ch2_;
}
 void SafetyIoCommData::set_xray_motion_enable_ch2(bool value) {
  
  xray_motion_enable_ch2_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.xray_motion_enable_ch2)
}

// optional bool safety_reset_required = 122;
void SafetyIoCommData::clear_safety_reset_required() {
  safety_reset_required_ = false;
}
 bool SafetyIoCommData::safety_reset_required() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.safety_reset_required)
  return safety_reset_required_;
}
 void SafetyIoCommData::set_safety_reset_required(bool value) {
  
  safety_reset_required_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.safety_reset_required)
}

// optional bool safety_reset_button = 123;
void SafetyIoCommData::clear_safety_reset_button() {
  safety_reset_button_ = false;
}
 bool SafetyIoCommData::safety_reset_button() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.safety_reset_button)
  return safety_reset_button_;
}
 void SafetyIoCommData::set_safety_reset_button(bool value) {
  
  safety_reset_button_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.safety_reset_button)
}

// optional bool panels_unlocked = 124;
void SafetyIoCommData::clear_panels_unlocked() {
  panels_unlocked_ = false;
}
 bool SafetyIoCommData::panels_unlocked() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.panels_unlocked)
  return panels_unlocked_;
}
 void SafetyIoCommData::set_panels_unlocked(bool value) {
  
  panels_unlocked_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.panels_unlocked)
}

// optional bool entrance_estop_fault = 140;
void SafetyIoCommData::clear_entrance_estop_fault() {
  entrance_estop_fault_ = false;
}
 bool SafetyIoCommData::entrance_estop_fault() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.entrance_estop_fault)
  return entrance_estop_fault_;
}
 void SafetyIoCommData::set_entrance_estop_fault(bool value) {
  
  entrance_estop_fault_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.entrance_estop_fault)
}

// optional bool exit_estop_fault = 141;
void SafetyIoCommData::clear_exit_estop_fault() {
  exit_estop_fault_ = false;
}
 bool SafetyIoCommData::exit_estop_fault() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.exit_estop_fault)
  return exit_estop_fault_;
}
 void SafetyIoCommData::set_exit_estop_fault(bool value) {
  
  exit_estop_fault_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.exit_estop_fault)
}

// optional bool console_estop_fault = 142;
void SafetyIoCommData::clear_console_estop_fault() {
  console_estop_fault_ = false;
}
 bool SafetyIoCommData::console_estop_fault() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.console_estop_fault)
  return console_estop_fault_;
}
 void SafetyIoCommData::set_console_estop_fault(bool value) {
  
  console_estop_fault_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.console_estop_fault)
}

// optional bool bhs_estop_fault = 143;
void SafetyIoCommData::clear_bhs_estop_fault() {
  bhs_estop_fault_ = false;
}
 bool SafetyIoCommData::bhs_estop_fault() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.bhs_estop_fault)
  return bhs_estop_fault_;
}
 void SafetyIoCommData::set_bhs_estop_fault(bool value) {
  
  bhs_estop_fault_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.bhs_estop_fault)
}

// optional bool access_panel_left_magnetic_interlock_fault = 144;
void SafetyIoCommData::clear_access_panel_left_magnetic_interlock_fault() {
  access_panel_left_magnetic_interlock_fault_ = false;
}
 bool SafetyIoCommData::access_panel_left_magnetic_interlock_fault() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.access_panel_left_magnetic_interlock_fault)
  return access_panel_left_magnetic_interlock_fault_;
}
 void SafetyIoCommData::set_access_panel_left_magnetic_interlock_fault(bool value) {
  
  access_panel_left_magnetic_interlock_fault_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.access_panel_left_magnetic_interlock_fault)
}

// optional bool access_panel_right_magnetic_interlock_fault = 145;
void SafetyIoCommData::clear_access_panel_right_magnetic_interlock_fault() {
  access_panel_right_magnetic_interlock_fault_ = false;
}
 bool SafetyIoCommData::access_panel_right_magnetic_interlock_fault() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.access_panel_right_magnetic_interlock_fault)
  return access_panel_right_magnetic_interlock_fault_;
}
 void SafetyIoCommData::set_access_panel_right_magnetic_interlock_fault(bool value) {
  
  access_panel_right_magnetic_interlock_fault_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.access_panel_right_magnetic_interlock_fault)
}

// optional bool motion_contactors_status_fault = 146;
void SafetyIoCommData::clear_motion_contactors_status_fault() {
  motion_contactors_status_fault_ = false;
}
 bool SafetyIoCommData::motion_contactors_status_fault() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.motion_contactors_status_fault)
  return motion_contactors_status_fault_;
}
 void SafetyIoCommData::set_motion_contactors_status_fault(bool value) {
  
  motion_contactors_status_fault_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.motion_contactors_status_fault)
}

// optional bool powerlink_contactors_status_fault = 147;
void SafetyIoCommData::clear_powerlink_contactors_status_fault() {
  powerlink_contactors_status_fault_ = false;
}
 bool SafetyIoCommData::powerlink_contactors_status_fault() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.powerlink_contactors_status_fault)
  return powerlink_contactors_status_fault_;
}
 void SafetyIoCommData::set_powerlink_contactors_status_fault(bool value) {
  
  powerlink_contactors_status_fault_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.powerlink_contactors_status_fault)
}

// optional bool rotational_envelope_violation_sensor_fault = 148;
void SafetyIoCommData::clear_rotational_envelope_violation_sensor_fault() {
  rotational_envelope_violation_sensor_fault_ = false;
}
 bool SafetyIoCommData::rotational_envelope_violation_sensor_fault() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.rotational_envelope_violation_sensor_fault)
  return rotational_envelope_violation_sensor_fault_;
}
 void SafetyIoCommData::set_rotational_envelope_violation_sensor_fault(bool value) {
  
  rotational_envelope_violation_sensor_fault_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.rotational_envelope_violation_sensor_fault)
}

// optional bool standstill_monitor_fault = 149;
void SafetyIoCommData::clear_standstill_monitor_fault() {
  standstill_monitor_fault_ = false;
}
 bool SafetyIoCommData::standstill_monitor_fault() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.standstill_monitor_fault)
  return standstill_monitor_fault_;
}
 void SafetyIoCommData::set_standstill_monitor_fault(bool value) {
  
  standstill_monitor_fault_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.standstill_monitor_fault)
}

// optional bool overspeed_fault = 150;
void SafetyIoCommData::clear_overspeed_fault() {
  overspeed_fault_ = false;
}
 bool SafetyIoCommData::overspeed_fault() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.overspeed_fault)
  return overspeed_fault_;
}
 void SafetyIoCommData::set_overspeed_fault(bool value) {
  
  overspeed_fault_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.overspeed_fault)
}

// optional bool access_panels_locking_fault = 151;
void SafetyIoCommData::clear_access_panels_locking_fault() {
  access_panels_locking_fault_ = false;
}
 bool SafetyIoCommData::access_panels_locking_fault() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.access_panels_locking_fault)
  return access_panels_locking_fault_;
}
 void SafetyIoCommData::set_access_panels_locking_fault(bool value) {
  
  access_panels_locking_fault_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.access_panels_locking_fault)
}

// optional bool xray_motion_keyswitch_fault = 152;
void SafetyIoCommData::clear_xray_motion_keyswitch_fault() {
  xray_motion_keyswitch_fault_ = false;
}
 bool SafetyIoCommData::xray_motion_keyswitch_fault() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.xray_motion_keyswitch_fault)
  return xray_motion_keyswitch_fault_;
}
 void SafetyIoCommData::set_xray_motion_keyswitch_fault(bool value) {
  
  xray_motion_keyswitch_fault_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.xray_motion_keyswitch_fault)
}

// optional bool encoder_fault = 153;
void SafetyIoCommData::clear_encoder_fault() {
  encoder_fault_ = false;
}
 bool SafetyIoCommData::encoder_fault() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.encoder_fault)
  return encoder_fault_;
}
 void SafetyIoCommData::set_encoder_fault(bool value) {
  
  encoder_fault_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.encoder_fault)
}

// optional bool speed_monitor_reset_required = 160;
void SafetyIoCommData::clear_speed_monitor_reset_required() {
  speed_monitor_reset_required_ = false;
}
 bool SafetyIoCommData::speed_monitor_reset_required() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.speed_monitor_reset_required)
  return speed_monitor_reset_required_;
}
 void SafetyIoCommData::set_speed_monitor_reset_required(bool value) {
  
  speed_monitor_reset_required_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.speed_monitor_reset_required)
}

// optional bool standstill = 161;
void SafetyIoCommData::clear_standstill() {
  standstill_ = false;
}
 bool SafetyIoCommData::standstill() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.standstill)
  return standstill_;
}
 void SafetyIoCommData::set_standstill(bool value) {
  
  standstill_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.standstill)
}

// optional bool standstill_monitor_enabled = 162;
void SafetyIoCommData::clear_standstill_monitor_enabled() {
  standstill_monitor_enabled_ = false;
}
 bool SafetyIoCommData::standstill_monitor_enabled() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.SafetyIoCommData.standstill_monitor_enabled)
  return standstill_monitor_enabled_;
}
 void SafetyIoCommData::set_standstill_monitor_enabled(bool value) {
  
  standstill_monitor_enabled_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.SafetyIoCommData.standstill_monitor_enabled)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ancp00
}  // namespace analogic

// @@protoc_insertion_point(global_scope)
