// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/Computer.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/Computer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace analogic {
namespace ancp00 {

namespace {

const ::google::protobuf::Descriptor* ComputerStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ComputerStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* ComputerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ComputerInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_2fComputer_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_proto_2fComputer_2eproto() {
  protobuf_AddDesc_proto_2fComputer_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto/Computer.proto");
  GOOGLE_CHECK(file != NULL);
  ComputerStatus_descriptor_ = file->message_type(0);
  static const int ComputerStatus_offsets_[44] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerStatus, gpu_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerStatus, gpu_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerStatus, gpu_1_temp_c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerStatus, gpu_2_temp_c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerStatus, ssd_1_temp_c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerStatus, hdd_1_temp_c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerStatus, raid_1_temp_c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerStatus, raid_2_temp_c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerStatus, raid_3_temp_c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerStatus, raid_4_temp_c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerStatus, raid_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerStatus, raid_drive_1_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerStatus, raid_drive_2_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerStatus, raid_drive_3_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerStatus, raid_drive_4_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerStatus, memory_usage_percent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerStatus, virtual_machine_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerStatus, web_server_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerStatus, hard_drive_space_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerStatus, raid_mount_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerStatus, network_speed_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerStatus, cpu_0_core_0_temp_c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerStatus, cpu_0_core_1_temp_c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerStatus, cpu_0_core_2_temp_c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerStatus, cpu_0_core_3_temp_c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerStatus, cpu_0_core_4_temp_c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerStatus, cpu_0_core_5_temp_c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerStatus, cpu_0_core_6_temp_c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerStatus, cpu_0_core_7_temp_c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerStatus, cpu_1_core_0_temp_c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerStatus, cpu_1_core_1_temp_c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerStatus, cpu_1_core_2_temp_c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerStatus, cpu_1_core_3_temp_c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerStatus, cpu_1_core_4_temp_c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerStatus, cpu_1_core_5_temp_c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerStatus, cpu_1_core_6_temp_c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerStatus, cpu_1_core_7_temp_c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerStatus, cpu_0_core_8_temp_c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerStatus, cpu_0_core_9_temp_c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerStatus, cpu_1_core_8_temp_c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerStatus, cpu_1_core_9_temp_c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerStatus, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerStatus, time_zone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerStatus, ntp_server_),
  };
  ComputerStatus_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ComputerStatus_descriptor_,
      ComputerStatus::default_instance_,
      ComputerStatus_offsets_,
      -1,
      -1,
      -1,
      sizeof(ComputerStatus),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerStatus, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerStatus, _is_default_instance_));
  ComputerInfo_descriptor_ = file->message_type(1);
  static const int ComputerInfo_offsets_[25] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerInfo, scanner_control_software_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerInfo, reconstruction_software_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerInfo, operating_system_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerInfo, detection_software_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerInfo, detection_library_1_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerInfo, detection_library_2_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerInfo, detection_library_3_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerInfo, detection_library_4_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerInfo, detection_library_5_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerInfo, das_receiver_board_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerInfo, rotor_control_board_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerInfo, das_control_board_1_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerInfo, das_control_board_2_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerInfo, das_control_board_3_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerInfo, das_control_board_4_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerInfo, das_control_board_5_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerInfo, ntp_server_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerInfo, powerlink_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerInfo, safety_io_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerInfo, network_server_software_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerInfo, image_quality_test_software_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerInfo, service_diagnostic_services_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerInfo, plc_firmware_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerInfo, top_level_release_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerInfo, bhs_software_version_),
  };
  ComputerInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ComputerInfo_descriptor_,
      ComputerInfo::default_instance_,
      ComputerInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(ComputerInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerInfo, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_2fComputer_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ComputerStatus_descriptor_, &ComputerStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ComputerInfo_descriptor_, &ComputerInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_2fComputer_2eproto() {
  delete ComputerStatus::default_instance_;
  delete ComputerStatus_reflection_;
  delete ComputerInfo::default_instance_;
  delete ComputerInfo_reflection_;
}

void protobuf_AddDesc_proto_2fComputer_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_proto_2fComputer_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024proto/Computer.proto\022\017analogic.ancp00\""
    "\227\t\n\016ComputerStatus\022\r\n\005gpu_1\030\001 \001(\t\022\r\n\005gpu"
    "_2\030\002 \001(\t\022\024\n\014gpu_1_temp_C\030\003 \001(\002\022\024\n\014gpu_2_"
    "temp_C\030\004 \001(\002\022\024\n\014ssd_1_temp_C\030\005 \001(\002\022\024\n\014hd"
    "d_1_temp_C\030\006 \001(\002\022\025\n\rraid_1_temp_C\030\024 \001(\002\022"
    "\025\n\rraid_2_temp_C\030\025 \001(\002\022\025\n\rraid_3_temp_C\030"
    "\026 \001(\002\022\025\n\rraid_4_temp_C\030\027 \001(\002\022\023\n\013raid_sta"
    "tus\030\030 \001(\t\022\033\n\023raid_drive_1_status\030\031 \001(\t\022\033"
    "\n\023raid_drive_2_status\030\032 \001(\t\022\033\n\023raid_driv"
    "e_3_status\030\033 \001(\t\022\033\n\023raid_drive_4_status\030"
    "\034 \001(\t\022\034\n\024memory_usage_percent\030( \001(\002\022\036\n\026v"
    "irtual_machine_status\030) \001(\010\022\031\n\021web_serve"
    "r_status\030* \001(\010\022\037\n\027hard_drive_space_statu"
    "s\030+ \001(\010\022\031\n\021raid_mount_status\030, \001(\010\022\034\n\024ne"
    "twork_speed_status\030- \001(\010\022\033\n\023cpu_0_core_0"
    "_temp_C\030< \001(\002\022\033\n\023cpu_0_core_1_temp_C\030= \001"
    "(\002\022\033\n\023cpu_0_core_2_temp_C\030\? \001(\002\022\033\n\023cpu_0"
    "_core_3_temp_C\030@ \001(\002\022\033\n\023cpu_0_core_4_tem"
    "p_C\030A \001(\002\022\033\n\023cpu_0_core_5_temp_C\030B \001(\002\022\033"
    "\n\023cpu_0_core_6_temp_C\030C \001(\002\022\033\n\023cpu_0_cor"
    "e_7_temp_C\030D \001(\002\022\033\n\023cpu_1_core_0_temp_C\030"
    "E \001(\002\022\033\n\023cpu_1_core_1_temp_C\030F \001(\002\022\033\n\023cp"
    "u_1_core_2_temp_C\030G \001(\002\022\033\n\023cpu_1_core_3_"
    "temp_C\030H \001(\002\022\033\n\023cpu_1_core_4_temp_C\030I \001("
    "\002\022\033\n\023cpu_1_core_5_temp_C\030J \001(\002\022\033\n\023cpu_1_"
    "core_6_temp_C\030K \001(\002\022\033\n\023cpu_1_core_7_temp"
    "_C\030L \001(\002\022\033\n\023cpu_0_core_8_temp_C\030M \001(\002\022\033\n"
    "\023cpu_0_core_9_temp_C\030N \001(\002\022\033\n\023cpu_1_core"
    "_8_temp_C\030O \001(\002\022\033\n\023cpu_1_core_9_temp_C\030P"
    " \001(\002\022\014\n\004time\030d \001(\t\022\021\n\ttime_zone\030e \001(\t\022\022\n"
    "\nntp_server\030f \001(\t\"\356\006\n\014ComputerInfo\022(\n sc"
    "anner_control_software_version\030\001 \001(\t\022\'\n\037"
    "reconstruction_software_version\030\002 \001(\t\022 \n"
    "\030operating_system_version\030\003 \001(\t\022\"\n\032detec"
    "tion_software_version\030\004 \001(\t\022#\n\033detection"
    "_library_1_version\030\005 \001(\t\022#\n\033detection_li"
    "brary_2_version\030\006 \001(\t\022#\n\033detection_libra"
    "ry_3_version\030\007 \001(\t\022#\n\033detection_library_"
    "4_version\030\010 \001(\t\022#\n\033detection_library_5_v"
    "ersion\030\t \001(\t\022\"\n\032das_receiver_board_versi"
    "on\030\n \001(\t\022#\n\033rotor_control_board_version\030"
    "\013 \001(\t\022#\n\033das_control_board_1_version\030\014 \001"
    "(\t\022#\n\033das_control_board_2_version\030\r \001(\t\022"
    "#\n\033das_control_board_3_version\030\016 \001(\t\022#\n\033"
    "das_control_board_4_version\030\017 \001(\t\022#\n\033das"
    "_control_board_5_version\030\020 \001(\t\022\022\n\nNTP_se"
    "rver\030\021 \001(\t\022\031\n\021powerlink_version\030\022 \001(\t\022\031\n"
    "\021safety_io_version\030\023 \001(\t\022\037\n\027network_serv"
    "er_software\030\024 \001(\t\022#\n\033image_quality_test_"
    "software\030\025 \001(\t\022#\n\033service_diagnostic_ser"
    "vices\030\026 \001(\t\022\034\n\024plc_firmware_version\030\027 \001("
    "\t\022\031\n\021top_level_release\030\030 \001(\t\022\034\n\024bhs_soft"
    "ware_version\030\031 \001(\tb\006proto3", 2106);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/Computer.proto", &protobuf_RegisterTypes);
  ComputerStatus::default_instance_ = new ComputerStatus();
  ComputerInfo::default_instance_ = new ComputerInfo();
  ComputerStatus::default_instance_->InitAsDefaultInstance();
  ComputerInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2fComputer_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2fComputer_2eproto {
  StaticDescriptorInitializer_proto_2fComputer_2eproto() {
    protobuf_AddDesc_proto_2fComputer_2eproto();
  }
} static_descriptor_initializer_proto_2fComputer_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ComputerStatus::kGpu1FieldNumber;
const int ComputerStatus::kGpu2FieldNumber;
const int ComputerStatus::kGpu1TempCFieldNumber;
const int ComputerStatus::kGpu2TempCFieldNumber;
const int ComputerStatus::kSsd1TempCFieldNumber;
const int ComputerStatus::kHdd1TempCFieldNumber;
const int ComputerStatus::kRaid1TempCFieldNumber;
const int ComputerStatus::kRaid2TempCFieldNumber;
const int ComputerStatus::kRaid3TempCFieldNumber;
const int ComputerStatus::kRaid4TempCFieldNumber;
const int ComputerStatus::kRaidStatusFieldNumber;
const int ComputerStatus::kRaidDrive1StatusFieldNumber;
const int ComputerStatus::kRaidDrive2StatusFieldNumber;
const int ComputerStatus::kRaidDrive3StatusFieldNumber;
const int ComputerStatus::kRaidDrive4StatusFieldNumber;
const int ComputerStatus::kMemoryUsagePercentFieldNumber;
const int ComputerStatus::kVirtualMachineStatusFieldNumber;
const int ComputerStatus::kWebServerStatusFieldNumber;
const int ComputerStatus::kHardDriveSpaceStatusFieldNumber;
const int ComputerStatus::kRaidMountStatusFieldNumber;
const int ComputerStatus::kNetworkSpeedStatusFieldNumber;
const int ComputerStatus::kCpu0Core0TempCFieldNumber;
const int ComputerStatus::kCpu0Core1TempCFieldNumber;
const int ComputerStatus::kCpu0Core2TempCFieldNumber;
const int ComputerStatus::kCpu0Core3TempCFieldNumber;
const int ComputerStatus::kCpu0Core4TempCFieldNumber;
const int ComputerStatus::kCpu0Core5TempCFieldNumber;
const int ComputerStatus::kCpu0Core6TempCFieldNumber;
const int ComputerStatus::kCpu0Core7TempCFieldNumber;
const int ComputerStatus::kCpu1Core0TempCFieldNumber;
const int ComputerStatus::kCpu1Core1TempCFieldNumber;
const int ComputerStatus::kCpu1Core2TempCFieldNumber;
const int ComputerStatus::kCpu1Core3TempCFieldNumber;
const int ComputerStatus::kCpu1Core4TempCFieldNumber;
const int ComputerStatus::kCpu1Core5TempCFieldNumber;
const int ComputerStatus::kCpu1Core6TempCFieldNumber;
const int ComputerStatus::kCpu1Core7TempCFieldNumber;
const int ComputerStatus::kCpu0Core8TempCFieldNumber;
const int ComputerStatus::kCpu0Core9TempCFieldNumber;
const int ComputerStatus::kCpu1Core8TempCFieldNumber;
const int ComputerStatus::kCpu1Core9TempCFieldNumber;
const int ComputerStatus::kTimeFieldNumber;
const int ComputerStatus::kTimeZoneFieldNumber;
const int ComputerStatus::kNtpServerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ComputerStatus::ComputerStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analogic.ancp00.ComputerStatus)
}

void ComputerStatus::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ComputerStatus::ComputerStatus(const ComputerStatus& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analogic.ancp00.ComputerStatus)
}

void ComputerStatus::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gpu_1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gpu_2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gpu_1_temp_c_ = 0;
  gpu_2_temp_c_ = 0;
  ssd_1_temp_c_ = 0;
  hdd_1_temp_c_ = 0;
  raid_1_temp_c_ = 0;
  raid_2_temp_c_ = 0;
  raid_3_temp_c_ = 0;
  raid_4_temp_c_ = 0;
  raid_status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raid_drive_1_status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raid_drive_2_status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raid_drive_3_status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raid_drive_4_status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  memory_usage_percent_ = 0;
  virtual_machine_status_ = false;
  web_server_status_ = false;
  hard_drive_space_status_ = false;
  raid_mount_status_ = false;
  network_speed_status_ = false;
  cpu_0_core_0_temp_c_ = 0;
  cpu_0_core_1_temp_c_ = 0;
  cpu_0_core_2_temp_c_ = 0;
  cpu_0_core_3_temp_c_ = 0;
  cpu_0_core_4_temp_c_ = 0;
  cpu_0_core_5_temp_c_ = 0;
  cpu_0_core_6_temp_c_ = 0;
  cpu_0_core_7_temp_c_ = 0;
  cpu_1_core_0_temp_c_ = 0;
  cpu_1_core_1_temp_c_ = 0;
  cpu_1_core_2_temp_c_ = 0;
  cpu_1_core_3_temp_c_ = 0;
  cpu_1_core_4_temp_c_ = 0;
  cpu_1_core_5_temp_c_ = 0;
  cpu_1_core_6_temp_c_ = 0;
  cpu_1_core_7_temp_c_ = 0;
  cpu_0_core_8_temp_c_ = 0;
  cpu_0_core_9_temp_c_ = 0;
  cpu_1_core_8_temp_c_ = 0;
  cpu_1_core_9_temp_c_ = 0;
  time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_zone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ntp_server_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ComputerStatus::~ComputerStatus() {
  // @@protoc_insertion_point(destructor:analogic.ancp00.ComputerStatus)
  SharedDtor();
}

void ComputerStatus::SharedDtor() {
  gpu_1_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gpu_2_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raid_status_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raid_drive_1_status_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raid_drive_2_status_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raid_drive_3_status_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raid_drive_4_status_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_zone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ntp_server_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ComputerStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComputerStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComputerStatus_descriptor_;
}

const ComputerStatus& ComputerStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fComputer_2eproto();
  return *default_instance_;
}

ComputerStatus* ComputerStatus::default_instance_ = NULL;

ComputerStatus* ComputerStatus::New(::google::protobuf::Arena* arena) const {
  ComputerStatus* n = new ComputerStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ComputerStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:analogic.ancp00.ComputerStatus)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ComputerStatus, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ComputerStatus*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(gpu_1_temp_c_, raid_2_temp_c_);
  gpu_1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gpu_2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(raid_3_temp_c_, raid_4_temp_c_);
  raid_status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raid_drive_1_status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raid_drive_2_status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raid_drive_3_status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raid_drive_4_status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  memory_usage_percent_ = 0;
  ZR_(virtual_machine_status_, cpu_0_core_2_temp_c_);
  ZR_(cpu_0_core_3_temp_c_, cpu_1_core_2_temp_c_);
  ZR_(cpu_1_core_3_temp_c_, cpu_1_core_8_temp_c_);
  cpu_1_core_9_temp_c_ = 0;
  time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ntp_server_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool ComputerStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analogic.ancp00.ComputerStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string gpu_1 = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gpu_1()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gpu_1().data(), this->gpu_1().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.ComputerStatus.gpu_1"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_gpu_2;
        break;
      }

      // optional string gpu_2 = 2;
      case 2: {
        if (tag == 18) {
         parse_gpu_2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gpu_2()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gpu_2().data(), this->gpu_2().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.ComputerStatus.gpu_2"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_gpu_1_temp_C;
        break;
      }

      // optional float gpu_1_temp_C = 3;
      case 3: {
        if (tag == 29) {
         parse_gpu_1_temp_C:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gpu_1_temp_c_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_gpu_2_temp_C;
        break;
      }

      // optional float gpu_2_temp_C = 4;
      case 4: {
        if (tag == 37) {
         parse_gpu_2_temp_C:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gpu_2_temp_c_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_ssd_1_temp_C;
        break;
      }

      // optional float ssd_1_temp_C = 5;
      case 5: {
        if (tag == 45) {
         parse_ssd_1_temp_C:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ssd_1_temp_c_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_hdd_1_temp_C;
        break;
      }

      // optional float hdd_1_temp_C = 6;
      case 6: {
        if (tag == 53) {
         parse_hdd_1_temp_C:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hdd_1_temp_c_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(165)) goto parse_raid_1_temp_C;
        break;
      }

      // optional float raid_1_temp_C = 20;
      case 20: {
        if (tag == 165) {
         parse_raid_1_temp_C:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &raid_1_temp_c_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(173)) goto parse_raid_2_temp_C;
        break;
      }

      // optional float raid_2_temp_C = 21;
      case 21: {
        if (tag == 173) {
         parse_raid_2_temp_C:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &raid_2_temp_c_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(181)) goto parse_raid_3_temp_C;
        break;
      }

      // optional float raid_3_temp_C = 22;
      case 22: {
        if (tag == 181) {
         parse_raid_3_temp_C:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &raid_3_temp_c_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(189)) goto parse_raid_4_temp_C;
        break;
      }

      // optional float raid_4_temp_C = 23;
      case 23: {
        if (tag == 189) {
         parse_raid_4_temp_C:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &raid_4_temp_c_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_raid_status;
        break;
      }

      // optional string raid_status = 24;
      case 24: {
        if (tag == 194) {
         parse_raid_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_raid_status()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->raid_status().data(), this->raid_status().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.ComputerStatus.raid_status"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_raid_drive_1_status;
        break;
      }

      // optional string raid_drive_1_status = 25;
      case 25: {
        if (tag == 202) {
         parse_raid_drive_1_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_raid_drive_1_status()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->raid_drive_1_status().data(), this->raid_drive_1_status().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.ComputerStatus.raid_drive_1_status"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_raid_drive_2_status;
        break;
      }

      // optional string raid_drive_2_status = 26;
      case 26: {
        if (tag == 210) {
         parse_raid_drive_2_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_raid_drive_2_status()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->raid_drive_2_status().data(), this->raid_drive_2_status().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.ComputerStatus.raid_drive_2_status"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_raid_drive_3_status;
        break;
      }

      // optional string raid_drive_3_status = 27;
      case 27: {
        if (tag == 218) {
         parse_raid_drive_3_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_raid_drive_3_status()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->raid_drive_3_status().data(), this->raid_drive_3_status().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.ComputerStatus.raid_drive_3_status"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(226)) goto parse_raid_drive_4_status;
        break;
      }

      // optional string raid_drive_4_status = 28;
      case 28: {
        if (tag == 226) {
         parse_raid_drive_4_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_raid_drive_4_status()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->raid_drive_4_status().data(), this->raid_drive_4_status().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.ComputerStatus.raid_drive_4_status"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(325)) goto parse_memory_usage_percent;
        break;
      }

      // optional float memory_usage_percent = 40;
      case 40: {
        if (tag == 325) {
         parse_memory_usage_percent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &memory_usage_percent_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(328)) goto parse_virtual_machine_status;
        break;
      }

      // optional bool virtual_machine_status = 41;
      case 41: {
        if (tag == 328) {
         parse_virtual_machine_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &virtual_machine_status_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(336)) goto parse_web_server_status;
        break;
      }

      // optional bool web_server_status = 42;
      case 42: {
        if (tag == 336) {
         parse_web_server_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &web_server_status_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(344)) goto parse_hard_drive_space_status;
        break;
      }

      // optional bool hard_drive_space_status = 43;
      case 43: {
        if (tag == 344) {
         parse_hard_drive_space_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hard_drive_space_status_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(352)) goto parse_raid_mount_status;
        break;
      }

      // optional bool raid_mount_status = 44;
      case 44: {
        if (tag == 352) {
         parse_raid_mount_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &raid_mount_status_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(360)) goto parse_network_speed_status;
        break;
      }

      // optional bool network_speed_status = 45;
      case 45: {
        if (tag == 360) {
         parse_network_speed_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &network_speed_status_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(485)) goto parse_cpu_0_core_0_temp_C;
        break;
      }

      // optional float cpu_0_core_0_temp_C = 60;
      case 60: {
        if (tag == 485) {
         parse_cpu_0_core_0_temp_C:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cpu_0_core_0_temp_c_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(493)) goto parse_cpu_0_core_1_temp_C;
        break;
      }

      // optional float cpu_0_core_1_temp_C = 61;
      case 61: {
        if (tag == 493) {
         parse_cpu_0_core_1_temp_C:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cpu_0_core_1_temp_c_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(509)) goto parse_cpu_0_core_2_temp_C;
        break;
      }

      // optional float cpu_0_core_2_temp_C = 63;
      case 63: {
        if (tag == 509) {
         parse_cpu_0_core_2_temp_C:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cpu_0_core_2_temp_c_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(517)) goto parse_cpu_0_core_3_temp_C;
        break;
      }

      // optional float cpu_0_core_3_temp_C = 64;
      case 64: {
        if (tag == 517) {
         parse_cpu_0_core_3_temp_C:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cpu_0_core_3_temp_c_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(525)) goto parse_cpu_0_core_4_temp_C;
        break;
      }

      // optional float cpu_0_core_4_temp_C = 65;
      case 65: {
        if (tag == 525) {
         parse_cpu_0_core_4_temp_C:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cpu_0_core_4_temp_c_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(533)) goto parse_cpu_0_core_5_temp_C;
        break;
      }

      // optional float cpu_0_core_5_temp_C = 66;
      case 66: {
        if (tag == 533) {
         parse_cpu_0_core_5_temp_C:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cpu_0_core_5_temp_c_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(541)) goto parse_cpu_0_core_6_temp_C;
        break;
      }

      // optional float cpu_0_core_6_temp_C = 67;
      case 67: {
        if (tag == 541) {
         parse_cpu_0_core_6_temp_C:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cpu_0_core_6_temp_c_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(549)) goto parse_cpu_0_core_7_temp_C;
        break;
      }

      // optional float cpu_0_core_7_temp_C = 68;
      case 68: {
        if (tag == 549) {
         parse_cpu_0_core_7_temp_C:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cpu_0_core_7_temp_c_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(557)) goto parse_cpu_1_core_0_temp_C;
        break;
      }

      // optional float cpu_1_core_0_temp_C = 69;
      case 69: {
        if (tag == 557) {
         parse_cpu_1_core_0_temp_C:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cpu_1_core_0_temp_c_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(565)) goto parse_cpu_1_core_1_temp_C;
        break;
      }

      // optional float cpu_1_core_1_temp_C = 70;
      case 70: {
        if (tag == 565) {
         parse_cpu_1_core_1_temp_C:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cpu_1_core_1_temp_c_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(573)) goto parse_cpu_1_core_2_temp_C;
        break;
      }

      // optional float cpu_1_core_2_temp_C = 71;
      case 71: {
        if (tag == 573) {
         parse_cpu_1_core_2_temp_C:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cpu_1_core_2_temp_c_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(581)) goto parse_cpu_1_core_3_temp_C;
        break;
      }

      // optional float cpu_1_core_3_temp_C = 72;
      case 72: {
        if (tag == 581) {
         parse_cpu_1_core_3_temp_C:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cpu_1_core_3_temp_c_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(589)) goto parse_cpu_1_core_4_temp_C;
        break;
      }

      // optional float cpu_1_core_4_temp_C = 73;
      case 73: {
        if (tag == 589) {
         parse_cpu_1_core_4_temp_C:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cpu_1_core_4_temp_c_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(597)) goto parse_cpu_1_core_5_temp_C;
        break;
      }

      // optional float cpu_1_core_5_temp_C = 74;
      case 74: {
        if (tag == 597) {
         parse_cpu_1_core_5_temp_C:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cpu_1_core_5_temp_c_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(605)) goto parse_cpu_1_core_6_temp_C;
        break;
      }

      // optional float cpu_1_core_6_temp_C = 75;
      case 75: {
        if (tag == 605) {
         parse_cpu_1_core_6_temp_C:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cpu_1_core_6_temp_c_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(613)) goto parse_cpu_1_core_7_temp_C;
        break;
      }

      // optional float cpu_1_core_7_temp_C = 76;
      case 76: {
        if (tag == 613) {
         parse_cpu_1_core_7_temp_C:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cpu_1_core_7_temp_c_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(621)) goto parse_cpu_0_core_8_temp_C;
        break;
      }

      // optional float cpu_0_core_8_temp_C = 77;
      case 77: {
        if (tag == 621) {
         parse_cpu_0_core_8_temp_C:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cpu_0_core_8_temp_c_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(629)) goto parse_cpu_0_core_9_temp_C;
        break;
      }

      // optional float cpu_0_core_9_temp_C = 78;
      case 78: {
        if (tag == 629) {
         parse_cpu_0_core_9_temp_C:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cpu_0_core_9_temp_c_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(637)) goto parse_cpu_1_core_8_temp_C;
        break;
      }

      // optional float cpu_1_core_8_temp_C = 79;
      case 79: {
        if (tag == 637) {
         parse_cpu_1_core_8_temp_C:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cpu_1_core_8_temp_c_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(645)) goto parse_cpu_1_core_9_temp_C;
        break;
      }

      // optional float cpu_1_core_9_temp_C = 80;
      case 80: {
        if (tag == 645) {
         parse_cpu_1_core_9_temp_C:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cpu_1_core_9_temp_c_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(802)) goto parse_time;
        break;
      }

      // optional string time = 100;
      case 100: {
        if (tag == 802) {
         parse_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->time().data(), this->time().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.ComputerStatus.time"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(810)) goto parse_time_zone;
        break;
      }

      // optional string time_zone = 101;
      case 101: {
        if (tag == 810) {
         parse_time_zone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time_zone()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->time_zone().data(), this->time_zone().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.ComputerStatus.time_zone"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(818)) goto parse_ntp_server;
        break;
      }

      // optional string ntp_server = 102;
      case 102: {
        if (tag == 818) {
         parse_ntp_server:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ntp_server()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ntp_server().data(), this->ntp_server().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.ComputerStatus.ntp_server"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:analogic.ancp00.ComputerStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analogic.ancp00.ComputerStatus)
  return false;
#undef DO_
}

void ComputerStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analogic.ancp00.ComputerStatus)
  // optional string gpu_1 = 1;
  if (this->gpu_1().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gpu_1().data(), this->gpu_1().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ComputerStatus.gpu_1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gpu_1(), output);
  }

  // optional string gpu_2 = 2;
  if (this->gpu_2().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gpu_2().data(), this->gpu_2().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ComputerStatus.gpu_2");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->gpu_2(), output);
  }

  // optional float gpu_1_temp_C = 3;
  if (this->gpu_1_temp_c() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->gpu_1_temp_c(), output);
  }

  // optional float gpu_2_temp_C = 4;
  if (this->gpu_2_temp_c() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->gpu_2_temp_c(), output);
  }

  // optional float ssd_1_temp_C = 5;
  if (this->ssd_1_temp_c() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->ssd_1_temp_c(), output);
  }

  // optional float hdd_1_temp_C = 6;
  if (this->hdd_1_temp_c() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->hdd_1_temp_c(), output);
  }

  // optional float raid_1_temp_C = 20;
  if (this->raid_1_temp_c() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->raid_1_temp_c(), output);
  }

  // optional float raid_2_temp_C = 21;
  if (this->raid_2_temp_c() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->raid_2_temp_c(), output);
  }

  // optional float raid_3_temp_C = 22;
  if (this->raid_3_temp_c() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->raid_3_temp_c(), output);
  }

  // optional float raid_4_temp_C = 23;
  if (this->raid_4_temp_c() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(23, this->raid_4_temp_c(), output);
  }

  // optional string raid_status = 24;
  if (this->raid_status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->raid_status().data(), this->raid_status().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ComputerStatus.raid_status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      24, this->raid_status(), output);
  }

  // optional string raid_drive_1_status = 25;
  if (this->raid_drive_1_status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->raid_drive_1_status().data(), this->raid_drive_1_status().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ComputerStatus.raid_drive_1_status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      25, this->raid_drive_1_status(), output);
  }

  // optional string raid_drive_2_status = 26;
  if (this->raid_drive_2_status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->raid_drive_2_status().data(), this->raid_drive_2_status().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ComputerStatus.raid_drive_2_status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      26, this->raid_drive_2_status(), output);
  }

  // optional string raid_drive_3_status = 27;
  if (this->raid_drive_3_status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->raid_drive_3_status().data(), this->raid_drive_3_status().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ComputerStatus.raid_drive_3_status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      27, this->raid_drive_3_status(), output);
  }

  // optional string raid_drive_4_status = 28;
  if (this->raid_drive_4_status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->raid_drive_4_status().data(), this->raid_drive_4_status().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ComputerStatus.raid_drive_4_status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      28, this->raid_drive_4_status(), output);
  }

  // optional float memory_usage_percent = 40;
  if (this->memory_usage_percent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(40, this->memory_usage_percent(), output);
  }

  // optional bool virtual_machine_status = 41;
  if (this->virtual_machine_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(41, this->virtual_machine_status(), output);
  }

  // optional bool web_server_status = 42;
  if (this->web_server_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(42, this->web_server_status(), output);
  }

  // optional bool hard_drive_space_status = 43;
  if (this->hard_drive_space_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(43, this->hard_drive_space_status(), output);
  }

  // optional bool raid_mount_status = 44;
  if (this->raid_mount_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(44, this->raid_mount_status(), output);
  }

  // optional bool network_speed_status = 45;
  if (this->network_speed_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(45, this->network_speed_status(), output);
  }

  // optional float cpu_0_core_0_temp_C = 60;
  if (this->cpu_0_core_0_temp_c() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(60, this->cpu_0_core_0_temp_c(), output);
  }

  // optional float cpu_0_core_1_temp_C = 61;
  if (this->cpu_0_core_1_temp_c() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(61, this->cpu_0_core_1_temp_c(), output);
  }

  // optional float cpu_0_core_2_temp_C = 63;
  if (this->cpu_0_core_2_temp_c() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(63, this->cpu_0_core_2_temp_c(), output);
  }

  // optional float cpu_0_core_3_temp_C = 64;
  if (this->cpu_0_core_3_temp_c() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(64, this->cpu_0_core_3_temp_c(), output);
  }

  // optional float cpu_0_core_4_temp_C = 65;
  if (this->cpu_0_core_4_temp_c() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(65, this->cpu_0_core_4_temp_c(), output);
  }

  // optional float cpu_0_core_5_temp_C = 66;
  if (this->cpu_0_core_5_temp_c() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(66, this->cpu_0_core_5_temp_c(), output);
  }

  // optional float cpu_0_core_6_temp_C = 67;
  if (this->cpu_0_core_6_temp_c() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(67, this->cpu_0_core_6_temp_c(), output);
  }

  // optional float cpu_0_core_7_temp_C = 68;
  if (this->cpu_0_core_7_temp_c() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(68, this->cpu_0_core_7_temp_c(), output);
  }

  // optional float cpu_1_core_0_temp_C = 69;
  if (this->cpu_1_core_0_temp_c() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(69, this->cpu_1_core_0_temp_c(), output);
  }

  // optional float cpu_1_core_1_temp_C = 70;
  if (this->cpu_1_core_1_temp_c() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(70, this->cpu_1_core_1_temp_c(), output);
  }

  // optional float cpu_1_core_2_temp_C = 71;
  if (this->cpu_1_core_2_temp_c() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(71, this->cpu_1_core_2_temp_c(), output);
  }

  // optional float cpu_1_core_3_temp_C = 72;
  if (this->cpu_1_core_3_temp_c() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(72, this->cpu_1_core_3_temp_c(), output);
  }

  // optional float cpu_1_core_4_temp_C = 73;
  if (this->cpu_1_core_4_temp_c() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(73, this->cpu_1_core_4_temp_c(), output);
  }

  // optional float cpu_1_core_5_temp_C = 74;
  if (this->cpu_1_core_5_temp_c() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(74, this->cpu_1_core_5_temp_c(), output);
  }

  // optional float cpu_1_core_6_temp_C = 75;
  if (this->cpu_1_core_6_temp_c() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(75, this->cpu_1_core_6_temp_c(), output);
  }

  // optional float cpu_1_core_7_temp_C = 76;
  if (this->cpu_1_core_7_temp_c() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(76, this->cpu_1_core_7_temp_c(), output);
  }

  // optional float cpu_0_core_8_temp_C = 77;
  if (this->cpu_0_core_8_temp_c() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(77, this->cpu_0_core_8_temp_c(), output);
  }

  // optional float cpu_0_core_9_temp_C = 78;
  if (this->cpu_0_core_9_temp_c() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(78, this->cpu_0_core_9_temp_c(), output);
  }

  // optional float cpu_1_core_8_temp_C = 79;
  if (this->cpu_1_core_8_temp_c() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(79, this->cpu_1_core_8_temp_c(), output);
  }

  // optional float cpu_1_core_9_temp_C = 80;
  if (this->cpu_1_core_9_temp_c() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(80, this->cpu_1_core_9_temp_c(), output);
  }

  // optional string time = 100;
  if (this->time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ComputerStatus.time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->time(), output);
  }

  // optional string time_zone = 101;
  if (this->time_zone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->time_zone().data(), this->time_zone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ComputerStatus.time_zone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      101, this->time_zone(), output);
  }

  // optional string ntp_server = 102;
  if (this->ntp_server().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ntp_server().data(), this->ntp_server().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ComputerStatus.ntp_server");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      102, this->ntp_server(), output);
  }

  // @@protoc_insertion_point(serialize_end:analogic.ancp00.ComputerStatus)
}

::google::protobuf::uint8* ComputerStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analogic.ancp00.ComputerStatus)
  // optional string gpu_1 = 1;
  if (this->gpu_1().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gpu_1().data(), this->gpu_1().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ComputerStatus.gpu_1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gpu_1(), target);
  }

  // optional string gpu_2 = 2;
  if (this->gpu_2().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gpu_2().data(), this->gpu_2().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ComputerStatus.gpu_2");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->gpu_2(), target);
  }

  // optional float gpu_1_temp_C = 3;
  if (this->gpu_1_temp_c() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->gpu_1_temp_c(), target);
  }

  // optional float gpu_2_temp_C = 4;
  if (this->gpu_2_temp_c() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->gpu_2_temp_c(), target);
  }

  // optional float ssd_1_temp_C = 5;
  if (this->ssd_1_temp_c() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->ssd_1_temp_c(), target);
  }

  // optional float hdd_1_temp_C = 6;
  if (this->hdd_1_temp_c() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->hdd_1_temp_c(), target);
  }

  // optional float raid_1_temp_C = 20;
  if (this->raid_1_temp_c() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->raid_1_temp_c(), target);
  }

  // optional float raid_2_temp_C = 21;
  if (this->raid_2_temp_c() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->raid_2_temp_c(), target);
  }

  // optional float raid_3_temp_C = 22;
  if (this->raid_3_temp_c() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(22, this->raid_3_temp_c(), target);
  }

  // optional float raid_4_temp_C = 23;
  if (this->raid_4_temp_c() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(23, this->raid_4_temp_c(), target);
  }

  // optional string raid_status = 24;
  if (this->raid_status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->raid_status().data(), this->raid_status().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ComputerStatus.raid_status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->raid_status(), target);
  }

  // optional string raid_drive_1_status = 25;
  if (this->raid_drive_1_status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->raid_drive_1_status().data(), this->raid_drive_1_status().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ComputerStatus.raid_drive_1_status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->raid_drive_1_status(), target);
  }

  // optional string raid_drive_2_status = 26;
  if (this->raid_drive_2_status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->raid_drive_2_status().data(), this->raid_drive_2_status().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ComputerStatus.raid_drive_2_status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->raid_drive_2_status(), target);
  }

  // optional string raid_drive_3_status = 27;
  if (this->raid_drive_3_status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->raid_drive_3_status().data(), this->raid_drive_3_status().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ComputerStatus.raid_drive_3_status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->raid_drive_3_status(), target);
  }

  // optional string raid_drive_4_status = 28;
  if (this->raid_drive_4_status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->raid_drive_4_status().data(), this->raid_drive_4_status().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ComputerStatus.raid_drive_4_status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        28, this->raid_drive_4_status(), target);
  }

  // optional float memory_usage_percent = 40;
  if (this->memory_usage_percent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(40, this->memory_usage_percent(), target);
  }

  // optional bool virtual_machine_status = 41;
  if (this->virtual_machine_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(41, this->virtual_machine_status(), target);
  }

  // optional bool web_server_status = 42;
  if (this->web_server_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(42, this->web_server_status(), target);
  }

  // optional bool hard_drive_space_status = 43;
  if (this->hard_drive_space_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(43, this->hard_drive_space_status(), target);
  }

  // optional bool raid_mount_status = 44;
  if (this->raid_mount_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(44, this->raid_mount_status(), target);
  }

  // optional bool network_speed_status = 45;
  if (this->network_speed_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(45, this->network_speed_status(), target);
  }

  // optional float cpu_0_core_0_temp_C = 60;
  if (this->cpu_0_core_0_temp_c() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(60, this->cpu_0_core_0_temp_c(), target);
  }

  // optional float cpu_0_core_1_temp_C = 61;
  if (this->cpu_0_core_1_temp_c() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(61, this->cpu_0_core_1_temp_c(), target);
  }

  // optional float cpu_0_core_2_temp_C = 63;
  if (this->cpu_0_core_2_temp_c() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(63, this->cpu_0_core_2_temp_c(), target);
  }

  // optional float cpu_0_core_3_temp_C = 64;
  if (this->cpu_0_core_3_temp_c() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(64, this->cpu_0_core_3_temp_c(), target);
  }

  // optional float cpu_0_core_4_temp_C = 65;
  if (this->cpu_0_core_4_temp_c() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(65, this->cpu_0_core_4_temp_c(), target);
  }

  // optional float cpu_0_core_5_temp_C = 66;
  if (this->cpu_0_core_5_temp_c() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(66, this->cpu_0_core_5_temp_c(), target);
  }

  // optional float cpu_0_core_6_temp_C = 67;
  if (this->cpu_0_core_6_temp_c() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(67, this->cpu_0_core_6_temp_c(), target);
  }

  // optional float cpu_0_core_7_temp_C = 68;
  if (this->cpu_0_core_7_temp_c() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(68, this->cpu_0_core_7_temp_c(), target);
  }

  // optional float cpu_1_core_0_temp_C = 69;
  if (this->cpu_1_core_0_temp_c() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(69, this->cpu_1_core_0_temp_c(), target);
  }

  // optional float cpu_1_core_1_temp_C = 70;
  if (this->cpu_1_core_1_temp_c() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(70, this->cpu_1_core_1_temp_c(), target);
  }

  // optional float cpu_1_core_2_temp_C = 71;
  if (this->cpu_1_core_2_temp_c() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(71, this->cpu_1_core_2_temp_c(), target);
  }

  // optional float cpu_1_core_3_temp_C = 72;
  if (this->cpu_1_core_3_temp_c() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(72, this->cpu_1_core_3_temp_c(), target);
  }

  // optional float cpu_1_core_4_temp_C = 73;
  if (this->cpu_1_core_4_temp_c() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(73, this->cpu_1_core_4_temp_c(), target);
  }

  // optional float cpu_1_core_5_temp_C = 74;
  if (this->cpu_1_core_5_temp_c() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(74, this->cpu_1_core_5_temp_c(), target);
  }

  // optional float cpu_1_core_6_temp_C = 75;
  if (this->cpu_1_core_6_temp_c() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(75, this->cpu_1_core_6_temp_c(), target);
  }

  // optional float cpu_1_core_7_temp_C = 76;
  if (this->cpu_1_core_7_temp_c() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(76, this->cpu_1_core_7_temp_c(), target);
  }

  // optional float cpu_0_core_8_temp_C = 77;
  if (this->cpu_0_core_8_temp_c() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(77, this->cpu_0_core_8_temp_c(), target);
  }

  // optional float cpu_0_core_9_temp_C = 78;
  if (this->cpu_0_core_9_temp_c() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(78, this->cpu_0_core_9_temp_c(), target);
  }

  // optional float cpu_1_core_8_temp_C = 79;
  if (this->cpu_1_core_8_temp_c() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(79, this->cpu_1_core_8_temp_c(), target);
  }

  // optional float cpu_1_core_9_temp_C = 80;
  if (this->cpu_1_core_9_temp_c() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(80, this->cpu_1_core_9_temp_c(), target);
  }

  // optional string time = 100;
  if (this->time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ComputerStatus.time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        100, this->time(), target);
  }

  // optional string time_zone = 101;
  if (this->time_zone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->time_zone().data(), this->time_zone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ComputerStatus.time_zone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        101, this->time_zone(), target);
  }

  // optional string ntp_server = 102;
  if (this->ntp_server().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ntp_server().data(), this->ntp_server().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ComputerStatus.ntp_server");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        102, this->ntp_server(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:analogic.ancp00.ComputerStatus)
  return target;
}

int ComputerStatus::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:analogic.ancp00.ComputerStatus)
  int total_size = 0;

  // optional string gpu_1 = 1;
  if (this->gpu_1().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gpu_1());
  }

  // optional string gpu_2 = 2;
  if (this->gpu_2().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gpu_2());
  }

  // optional float gpu_1_temp_C = 3;
  if (this->gpu_1_temp_c() != 0) {
    total_size += 1 + 4;
  }

  // optional float gpu_2_temp_C = 4;
  if (this->gpu_2_temp_c() != 0) {
    total_size += 1 + 4;
  }

  // optional float ssd_1_temp_C = 5;
  if (this->ssd_1_temp_c() != 0) {
    total_size += 1 + 4;
  }

  // optional float hdd_1_temp_C = 6;
  if (this->hdd_1_temp_c() != 0) {
    total_size += 1 + 4;
  }

  // optional float raid_1_temp_C = 20;
  if (this->raid_1_temp_c() != 0) {
    total_size += 2 + 4;
  }

  // optional float raid_2_temp_C = 21;
  if (this->raid_2_temp_c() != 0) {
    total_size += 2 + 4;
  }

  // optional float raid_3_temp_C = 22;
  if (this->raid_3_temp_c() != 0) {
    total_size += 2 + 4;
  }

  // optional float raid_4_temp_C = 23;
  if (this->raid_4_temp_c() != 0) {
    total_size += 2 + 4;
  }

  // optional string raid_status = 24;
  if (this->raid_status().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->raid_status());
  }

  // optional string raid_drive_1_status = 25;
  if (this->raid_drive_1_status().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->raid_drive_1_status());
  }

  // optional string raid_drive_2_status = 26;
  if (this->raid_drive_2_status().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->raid_drive_2_status());
  }

  // optional string raid_drive_3_status = 27;
  if (this->raid_drive_3_status().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->raid_drive_3_status());
  }

  // optional string raid_drive_4_status = 28;
  if (this->raid_drive_4_status().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->raid_drive_4_status());
  }

  // optional float memory_usage_percent = 40;
  if (this->memory_usage_percent() != 0) {
    total_size += 2 + 4;
  }

  // optional bool virtual_machine_status = 41;
  if (this->virtual_machine_status() != 0) {
    total_size += 2 + 1;
  }

  // optional bool web_server_status = 42;
  if (this->web_server_status() != 0) {
    total_size += 2 + 1;
  }

  // optional bool hard_drive_space_status = 43;
  if (this->hard_drive_space_status() != 0) {
    total_size += 2 + 1;
  }

  // optional bool raid_mount_status = 44;
  if (this->raid_mount_status() != 0) {
    total_size += 2 + 1;
  }

  // optional bool network_speed_status = 45;
  if (this->network_speed_status() != 0) {
    total_size += 2 + 1;
  }

  // optional float cpu_0_core_0_temp_C = 60;
  if (this->cpu_0_core_0_temp_c() != 0) {
    total_size += 2 + 4;
  }

  // optional float cpu_0_core_1_temp_C = 61;
  if (this->cpu_0_core_1_temp_c() != 0) {
    total_size += 2 + 4;
  }

  // optional float cpu_0_core_2_temp_C = 63;
  if (this->cpu_0_core_2_temp_c() != 0) {
    total_size += 2 + 4;
  }

  // optional float cpu_0_core_3_temp_C = 64;
  if (this->cpu_0_core_3_temp_c() != 0) {
    total_size += 2 + 4;
  }

  // optional float cpu_0_core_4_temp_C = 65;
  if (this->cpu_0_core_4_temp_c() != 0) {
    total_size += 2 + 4;
  }

  // optional float cpu_0_core_5_temp_C = 66;
  if (this->cpu_0_core_5_temp_c() != 0) {
    total_size += 2 + 4;
  }

  // optional float cpu_0_core_6_temp_C = 67;
  if (this->cpu_0_core_6_temp_c() != 0) {
    total_size += 2 + 4;
  }

  // optional float cpu_0_core_7_temp_C = 68;
  if (this->cpu_0_core_7_temp_c() != 0) {
    total_size += 2 + 4;
  }

  // optional float cpu_1_core_0_temp_C = 69;
  if (this->cpu_1_core_0_temp_c() != 0) {
    total_size += 2 + 4;
  }

  // optional float cpu_1_core_1_temp_C = 70;
  if (this->cpu_1_core_1_temp_c() != 0) {
    total_size += 2 + 4;
  }

  // optional float cpu_1_core_2_temp_C = 71;
  if (this->cpu_1_core_2_temp_c() != 0) {
    total_size += 2 + 4;
  }

  // optional float cpu_1_core_3_temp_C = 72;
  if (this->cpu_1_core_3_temp_c() != 0) {
    total_size += 2 + 4;
  }

  // optional float cpu_1_core_4_temp_C = 73;
  if (this->cpu_1_core_4_temp_c() != 0) {
    total_size += 2 + 4;
  }

  // optional float cpu_1_core_5_temp_C = 74;
  if (this->cpu_1_core_5_temp_c() != 0) {
    total_size += 2 + 4;
  }

  // optional float cpu_1_core_6_temp_C = 75;
  if (this->cpu_1_core_6_temp_c() != 0) {
    total_size += 2 + 4;
  }

  // optional float cpu_1_core_7_temp_C = 76;
  if (this->cpu_1_core_7_temp_c() != 0) {
    total_size += 2 + 4;
  }

  // optional float cpu_0_core_8_temp_C = 77;
  if (this->cpu_0_core_8_temp_c() != 0) {
    total_size += 2 + 4;
  }

  // optional float cpu_0_core_9_temp_C = 78;
  if (this->cpu_0_core_9_temp_c() != 0) {
    total_size += 2 + 4;
  }

  // optional float cpu_1_core_8_temp_C = 79;
  if (this->cpu_1_core_8_temp_c() != 0) {
    total_size += 2 + 4;
  }

  // optional float cpu_1_core_9_temp_C = 80;
  if (this->cpu_1_core_9_temp_c() != 0) {
    total_size += 2 + 4;
  }

  // optional string time = 100;
  if (this->time().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->time());
  }

  // optional string time_zone = 101;
  if (this->time_zone().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->time_zone());
  }

  // optional string ntp_server = 102;
  if (this->ntp_server().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ntp_server());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComputerStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analogic.ancp00.ComputerStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ComputerStatus* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ComputerStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analogic.ancp00.ComputerStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analogic.ancp00.ComputerStatus)
    MergeFrom(*source);
  }
}

void ComputerStatus::MergeFrom(const ComputerStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analogic.ancp00.ComputerStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.gpu_1().size() > 0) {

    gpu_1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gpu_1_);
  }
  if (from.gpu_2().size() > 0) {

    gpu_2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gpu_2_);
  }
  if (from.gpu_1_temp_c() != 0) {
    set_gpu_1_temp_c(from.gpu_1_temp_c());
  }
  if (from.gpu_2_temp_c() != 0) {
    set_gpu_2_temp_c(from.gpu_2_temp_c());
  }
  if (from.ssd_1_temp_c() != 0) {
    set_ssd_1_temp_c(from.ssd_1_temp_c());
  }
  if (from.hdd_1_temp_c() != 0) {
    set_hdd_1_temp_c(from.hdd_1_temp_c());
  }
  if (from.raid_1_temp_c() != 0) {
    set_raid_1_temp_c(from.raid_1_temp_c());
  }
  if (from.raid_2_temp_c() != 0) {
    set_raid_2_temp_c(from.raid_2_temp_c());
  }
  if (from.raid_3_temp_c() != 0) {
    set_raid_3_temp_c(from.raid_3_temp_c());
  }
  if (from.raid_4_temp_c() != 0) {
    set_raid_4_temp_c(from.raid_4_temp_c());
  }
  if (from.raid_status().size() > 0) {

    raid_status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raid_status_);
  }
  if (from.raid_drive_1_status().size() > 0) {

    raid_drive_1_status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raid_drive_1_status_);
  }
  if (from.raid_drive_2_status().size() > 0) {

    raid_drive_2_status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raid_drive_2_status_);
  }
  if (from.raid_drive_3_status().size() > 0) {

    raid_drive_3_status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raid_drive_3_status_);
  }
  if (from.raid_drive_4_status().size() > 0) {

    raid_drive_4_status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raid_drive_4_status_);
  }
  if (from.memory_usage_percent() != 0) {
    set_memory_usage_percent(from.memory_usage_percent());
  }
  if (from.virtual_machine_status() != 0) {
    set_virtual_machine_status(from.virtual_machine_status());
  }
  if (from.web_server_status() != 0) {
    set_web_server_status(from.web_server_status());
  }
  if (from.hard_drive_space_status() != 0) {
    set_hard_drive_space_status(from.hard_drive_space_status());
  }
  if (from.raid_mount_status() != 0) {
    set_raid_mount_status(from.raid_mount_status());
  }
  if (from.network_speed_status() != 0) {
    set_network_speed_status(from.network_speed_status());
  }
  if (from.cpu_0_core_0_temp_c() != 0) {
    set_cpu_0_core_0_temp_c(from.cpu_0_core_0_temp_c());
  }
  if (from.cpu_0_core_1_temp_c() != 0) {
    set_cpu_0_core_1_temp_c(from.cpu_0_core_1_temp_c());
  }
  if (from.cpu_0_core_2_temp_c() != 0) {
    set_cpu_0_core_2_temp_c(from.cpu_0_core_2_temp_c());
  }
  if (from.cpu_0_core_3_temp_c() != 0) {
    set_cpu_0_core_3_temp_c(from.cpu_0_core_3_temp_c());
  }
  if (from.cpu_0_core_4_temp_c() != 0) {
    set_cpu_0_core_4_temp_c(from.cpu_0_core_4_temp_c());
  }
  if (from.cpu_0_core_5_temp_c() != 0) {
    set_cpu_0_core_5_temp_c(from.cpu_0_core_5_temp_c());
  }
  if (from.cpu_0_core_6_temp_c() != 0) {
    set_cpu_0_core_6_temp_c(from.cpu_0_core_6_temp_c());
  }
  if (from.cpu_0_core_7_temp_c() != 0) {
    set_cpu_0_core_7_temp_c(from.cpu_0_core_7_temp_c());
  }
  if (from.cpu_1_core_0_temp_c() != 0) {
    set_cpu_1_core_0_temp_c(from.cpu_1_core_0_temp_c());
  }
  if (from.cpu_1_core_1_temp_c() != 0) {
    set_cpu_1_core_1_temp_c(from.cpu_1_core_1_temp_c());
  }
  if (from.cpu_1_core_2_temp_c() != 0) {
    set_cpu_1_core_2_temp_c(from.cpu_1_core_2_temp_c());
  }
  if (from.cpu_1_core_3_temp_c() != 0) {
    set_cpu_1_core_3_temp_c(from.cpu_1_core_3_temp_c());
  }
  if (from.cpu_1_core_4_temp_c() != 0) {
    set_cpu_1_core_4_temp_c(from.cpu_1_core_4_temp_c());
  }
  if (from.cpu_1_core_5_temp_c() != 0) {
    set_cpu_1_core_5_temp_c(from.cpu_1_core_5_temp_c());
  }
  if (from.cpu_1_core_6_temp_c() != 0) {
    set_cpu_1_core_6_temp_c(from.cpu_1_core_6_temp_c());
  }
  if (from.cpu_1_core_7_temp_c() != 0) {
    set_cpu_1_core_7_temp_c(from.cpu_1_core_7_temp_c());
  }
  if (from.cpu_0_core_8_temp_c() != 0) {
    set_cpu_0_core_8_temp_c(from.cpu_0_core_8_temp_c());
  }
  if (from.cpu_0_core_9_temp_c() != 0) {
    set_cpu_0_core_9_temp_c(from.cpu_0_core_9_temp_c());
  }
  if (from.cpu_1_core_8_temp_c() != 0) {
    set_cpu_1_core_8_temp_c(from.cpu_1_core_8_temp_c());
  }
  if (from.cpu_1_core_9_temp_c() != 0) {
    set_cpu_1_core_9_temp_c(from.cpu_1_core_9_temp_c());
  }
  if (from.time().size() > 0) {

    time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.time_);
  }
  if (from.time_zone().size() > 0) {

    time_zone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.time_zone_);
  }
  if (from.ntp_server().size() > 0) {

    ntp_server_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ntp_server_);
  }
}

void ComputerStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analogic.ancp00.ComputerStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComputerStatus::CopyFrom(const ComputerStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analogic.ancp00.ComputerStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComputerStatus::IsInitialized() const {

  return true;
}

void ComputerStatus::Swap(ComputerStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ComputerStatus::InternalSwap(ComputerStatus* other) {
  gpu_1_.Swap(&other->gpu_1_);
  gpu_2_.Swap(&other->gpu_2_);
  std::swap(gpu_1_temp_c_, other->gpu_1_temp_c_);
  std::swap(gpu_2_temp_c_, other->gpu_2_temp_c_);
  std::swap(ssd_1_temp_c_, other->ssd_1_temp_c_);
  std::swap(hdd_1_temp_c_, other->hdd_1_temp_c_);
  std::swap(raid_1_temp_c_, other->raid_1_temp_c_);
  std::swap(raid_2_temp_c_, other->raid_2_temp_c_);
  std::swap(raid_3_temp_c_, other->raid_3_temp_c_);
  std::swap(raid_4_temp_c_, other->raid_4_temp_c_);
  raid_status_.Swap(&other->raid_status_);
  raid_drive_1_status_.Swap(&other->raid_drive_1_status_);
  raid_drive_2_status_.Swap(&other->raid_drive_2_status_);
  raid_drive_3_status_.Swap(&other->raid_drive_3_status_);
  raid_drive_4_status_.Swap(&other->raid_drive_4_status_);
  std::swap(memory_usage_percent_, other->memory_usage_percent_);
  std::swap(virtual_machine_status_, other->virtual_machine_status_);
  std::swap(web_server_status_, other->web_server_status_);
  std::swap(hard_drive_space_status_, other->hard_drive_space_status_);
  std::swap(raid_mount_status_, other->raid_mount_status_);
  std::swap(network_speed_status_, other->network_speed_status_);
  std::swap(cpu_0_core_0_temp_c_, other->cpu_0_core_0_temp_c_);
  std::swap(cpu_0_core_1_temp_c_, other->cpu_0_core_1_temp_c_);
  std::swap(cpu_0_core_2_temp_c_, other->cpu_0_core_2_temp_c_);
  std::swap(cpu_0_core_3_temp_c_, other->cpu_0_core_3_temp_c_);
  std::swap(cpu_0_core_4_temp_c_, other->cpu_0_core_4_temp_c_);
  std::swap(cpu_0_core_5_temp_c_, other->cpu_0_core_5_temp_c_);
  std::swap(cpu_0_core_6_temp_c_, other->cpu_0_core_6_temp_c_);
  std::swap(cpu_0_core_7_temp_c_, other->cpu_0_core_7_temp_c_);
  std::swap(cpu_1_core_0_temp_c_, other->cpu_1_core_0_temp_c_);
  std::swap(cpu_1_core_1_temp_c_, other->cpu_1_core_1_temp_c_);
  std::swap(cpu_1_core_2_temp_c_, other->cpu_1_core_2_temp_c_);
  std::swap(cpu_1_core_3_temp_c_, other->cpu_1_core_3_temp_c_);
  std::swap(cpu_1_core_4_temp_c_, other->cpu_1_core_4_temp_c_);
  std::swap(cpu_1_core_5_temp_c_, other->cpu_1_core_5_temp_c_);
  std::swap(cpu_1_core_6_temp_c_, other->cpu_1_core_6_temp_c_);
  std::swap(cpu_1_core_7_temp_c_, other->cpu_1_core_7_temp_c_);
  std::swap(cpu_0_core_8_temp_c_, other->cpu_0_core_8_temp_c_);
  std::swap(cpu_0_core_9_temp_c_, other->cpu_0_core_9_temp_c_);
  std::swap(cpu_1_core_8_temp_c_, other->cpu_1_core_8_temp_c_);
  std::swap(cpu_1_core_9_temp_c_, other->cpu_1_core_9_temp_c_);
  time_.Swap(&other->time_);
  time_zone_.Swap(&other->time_zone_);
  ntp_server_.Swap(&other->ntp_server_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ComputerStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ComputerStatus_descriptor_;
  metadata.reflection = ComputerStatus_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ComputerStatus

// optional string gpu_1 = 1;
void ComputerStatus::clear_gpu_1() {
  gpu_1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ComputerStatus::gpu_1() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.gpu_1)
  return gpu_1_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ComputerStatus::set_gpu_1(const ::std::string& value) {
  
  gpu_1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.gpu_1)
}
 void ComputerStatus::set_gpu_1(const char* value) {
  
  gpu_1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.ComputerStatus.gpu_1)
}
 void ComputerStatus::set_gpu_1(const char* value, size_t size) {
  
  gpu_1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.ComputerStatus.gpu_1)
}
 ::std::string* ComputerStatus::mutable_gpu_1() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.ComputerStatus.gpu_1)
  return gpu_1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ComputerStatus::release_gpu_1() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.ComputerStatus.gpu_1)
  
  return gpu_1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ComputerStatus::set_allocated_gpu_1(::std::string* gpu_1) {
  if (gpu_1 != NULL) {
    
  } else {
    
  }
  gpu_1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gpu_1);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.ComputerStatus.gpu_1)
}

// optional string gpu_2 = 2;
void ComputerStatus::clear_gpu_2() {
  gpu_2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ComputerStatus::gpu_2() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.gpu_2)
  return gpu_2_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ComputerStatus::set_gpu_2(const ::std::string& value) {
  
  gpu_2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.gpu_2)
}
 void ComputerStatus::set_gpu_2(const char* value) {
  
  gpu_2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.ComputerStatus.gpu_2)
}
 void ComputerStatus::set_gpu_2(const char* value, size_t size) {
  
  gpu_2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.ComputerStatus.gpu_2)
}
 ::std::string* ComputerStatus::mutable_gpu_2() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.ComputerStatus.gpu_2)
  return gpu_2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ComputerStatus::release_gpu_2() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.ComputerStatus.gpu_2)
  
  return gpu_2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ComputerStatus::set_allocated_gpu_2(::std::string* gpu_2) {
  if (gpu_2 != NULL) {
    
  } else {
    
  }
  gpu_2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gpu_2);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.ComputerStatus.gpu_2)
}

// optional float gpu_1_temp_C = 3;
void ComputerStatus::clear_gpu_1_temp_c() {
  gpu_1_temp_c_ = 0;
}
 float ComputerStatus::gpu_1_temp_c() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.gpu_1_temp_C)
  return gpu_1_temp_c_;
}
 void ComputerStatus::set_gpu_1_temp_c(float value) {
  
  gpu_1_temp_c_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.gpu_1_temp_C)
}

// optional float gpu_2_temp_C = 4;
void ComputerStatus::clear_gpu_2_temp_c() {
  gpu_2_temp_c_ = 0;
}
 float ComputerStatus::gpu_2_temp_c() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.gpu_2_temp_C)
  return gpu_2_temp_c_;
}
 void ComputerStatus::set_gpu_2_temp_c(float value) {
  
  gpu_2_temp_c_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.gpu_2_temp_C)
}

// optional float ssd_1_temp_C = 5;
void ComputerStatus::clear_ssd_1_temp_c() {
  ssd_1_temp_c_ = 0;
}
 float ComputerStatus::ssd_1_temp_c() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.ssd_1_temp_C)
  return ssd_1_temp_c_;
}
 void ComputerStatus::set_ssd_1_temp_c(float value) {
  
  ssd_1_temp_c_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.ssd_1_temp_C)
}

// optional float hdd_1_temp_C = 6;
void ComputerStatus::clear_hdd_1_temp_c() {
  hdd_1_temp_c_ = 0;
}
 float ComputerStatus::hdd_1_temp_c() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.hdd_1_temp_C)
  return hdd_1_temp_c_;
}
 void ComputerStatus::set_hdd_1_temp_c(float value) {
  
  hdd_1_temp_c_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.hdd_1_temp_C)
}

// optional float raid_1_temp_C = 20;
void ComputerStatus::clear_raid_1_temp_c() {
  raid_1_temp_c_ = 0;
}
 float ComputerStatus::raid_1_temp_c() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.raid_1_temp_C)
  return raid_1_temp_c_;
}
 void ComputerStatus::set_raid_1_temp_c(float value) {
  
  raid_1_temp_c_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.raid_1_temp_C)
}

// optional float raid_2_temp_C = 21;
void ComputerStatus::clear_raid_2_temp_c() {
  raid_2_temp_c_ = 0;
}
 float ComputerStatus::raid_2_temp_c() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.raid_2_temp_C)
  return raid_2_temp_c_;
}
 void ComputerStatus::set_raid_2_temp_c(float value) {
  
  raid_2_temp_c_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.raid_2_temp_C)
}

// optional float raid_3_temp_C = 22;
void ComputerStatus::clear_raid_3_temp_c() {
  raid_3_temp_c_ = 0;
}
 float ComputerStatus::raid_3_temp_c() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.raid_3_temp_C)
  return raid_3_temp_c_;
}
 void ComputerStatus::set_raid_3_temp_c(float value) {
  
  raid_3_temp_c_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.raid_3_temp_C)
}

// optional float raid_4_temp_C = 23;
void ComputerStatus::clear_raid_4_temp_c() {
  raid_4_temp_c_ = 0;
}
 float ComputerStatus::raid_4_temp_c() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.raid_4_temp_C)
  return raid_4_temp_c_;
}
 void ComputerStatus::set_raid_4_temp_c(float value) {
  
  raid_4_temp_c_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.raid_4_temp_C)
}

// optional string raid_status = 24;
void ComputerStatus::clear_raid_status() {
  raid_status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ComputerStatus::raid_status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.raid_status)
  return raid_status_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ComputerStatus::set_raid_status(const ::std::string& value) {
  
  raid_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.raid_status)
}
 void ComputerStatus::set_raid_status(const char* value) {
  
  raid_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.ComputerStatus.raid_status)
}
 void ComputerStatus::set_raid_status(const char* value, size_t size) {
  
  raid_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.ComputerStatus.raid_status)
}
 ::std::string* ComputerStatus::mutable_raid_status() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.ComputerStatus.raid_status)
  return raid_status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ComputerStatus::release_raid_status() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.ComputerStatus.raid_status)
  
  return raid_status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ComputerStatus::set_allocated_raid_status(::std::string* raid_status) {
  if (raid_status != NULL) {
    
  } else {
    
  }
  raid_status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), raid_status);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.ComputerStatus.raid_status)
}

// optional string raid_drive_1_status = 25;
void ComputerStatus::clear_raid_drive_1_status() {
  raid_drive_1_status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ComputerStatus::raid_drive_1_status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.raid_drive_1_status)
  return raid_drive_1_status_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ComputerStatus::set_raid_drive_1_status(const ::std::string& value) {
  
  raid_drive_1_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.raid_drive_1_status)
}
 void ComputerStatus::set_raid_drive_1_status(const char* value) {
  
  raid_drive_1_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.ComputerStatus.raid_drive_1_status)
}
 void ComputerStatus::set_raid_drive_1_status(const char* value, size_t size) {
  
  raid_drive_1_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.ComputerStatus.raid_drive_1_status)
}
 ::std::string* ComputerStatus::mutable_raid_drive_1_status() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.ComputerStatus.raid_drive_1_status)
  return raid_drive_1_status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ComputerStatus::release_raid_drive_1_status() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.ComputerStatus.raid_drive_1_status)
  
  return raid_drive_1_status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ComputerStatus::set_allocated_raid_drive_1_status(::std::string* raid_drive_1_status) {
  if (raid_drive_1_status != NULL) {
    
  } else {
    
  }
  raid_drive_1_status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), raid_drive_1_status);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.ComputerStatus.raid_drive_1_status)
}

// optional string raid_drive_2_status = 26;
void ComputerStatus::clear_raid_drive_2_status() {
  raid_drive_2_status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ComputerStatus::raid_drive_2_status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.raid_drive_2_status)
  return raid_drive_2_status_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ComputerStatus::set_raid_drive_2_status(const ::std::string& value) {
  
  raid_drive_2_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.raid_drive_2_status)
}
 void ComputerStatus::set_raid_drive_2_status(const char* value) {
  
  raid_drive_2_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.ComputerStatus.raid_drive_2_status)
}
 void ComputerStatus::set_raid_drive_2_status(const char* value, size_t size) {
  
  raid_drive_2_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.ComputerStatus.raid_drive_2_status)
}
 ::std::string* ComputerStatus::mutable_raid_drive_2_status() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.ComputerStatus.raid_drive_2_status)
  return raid_drive_2_status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ComputerStatus::release_raid_drive_2_status() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.ComputerStatus.raid_drive_2_status)
  
  return raid_drive_2_status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ComputerStatus::set_allocated_raid_drive_2_status(::std::string* raid_drive_2_status) {
  if (raid_drive_2_status != NULL) {
    
  } else {
    
  }
  raid_drive_2_status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), raid_drive_2_status);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.ComputerStatus.raid_drive_2_status)
}

// optional string raid_drive_3_status = 27;
void ComputerStatus::clear_raid_drive_3_status() {
  raid_drive_3_status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ComputerStatus::raid_drive_3_status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.raid_drive_3_status)
  return raid_drive_3_status_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ComputerStatus::set_raid_drive_3_status(const ::std::string& value) {
  
  raid_drive_3_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.raid_drive_3_status)
}
 void ComputerStatus::set_raid_drive_3_status(const char* value) {
  
  raid_drive_3_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.ComputerStatus.raid_drive_3_status)
}
 void ComputerStatus::set_raid_drive_3_status(const char* value, size_t size) {
  
  raid_drive_3_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.ComputerStatus.raid_drive_3_status)
}
 ::std::string* ComputerStatus::mutable_raid_drive_3_status() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.ComputerStatus.raid_drive_3_status)
  return raid_drive_3_status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ComputerStatus::release_raid_drive_3_status() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.ComputerStatus.raid_drive_3_status)
  
  return raid_drive_3_status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ComputerStatus::set_allocated_raid_drive_3_status(::std::string* raid_drive_3_status) {
  if (raid_drive_3_status != NULL) {
    
  } else {
    
  }
  raid_drive_3_status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), raid_drive_3_status);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.ComputerStatus.raid_drive_3_status)
}

// optional string raid_drive_4_status = 28;
void ComputerStatus::clear_raid_drive_4_status() {
  raid_drive_4_status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ComputerStatus::raid_drive_4_status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.raid_drive_4_status)
  return raid_drive_4_status_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ComputerStatus::set_raid_drive_4_status(const ::std::string& value) {
  
  raid_drive_4_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.raid_drive_4_status)
}
 void ComputerStatus::set_raid_drive_4_status(const char* value) {
  
  raid_drive_4_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.ComputerStatus.raid_drive_4_status)
}
 void ComputerStatus::set_raid_drive_4_status(const char* value, size_t size) {
  
  raid_drive_4_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.ComputerStatus.raid_drive_4_status)
}
 ::std::string* ComputerStatus::mutable_raid_drive_4_status() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.ComputerStatus.raid_drive_4_status)
  return raid_drive_4_status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ComputerStatus::release_raid_drive_4_status() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.ComputerStatus.raid_drive_4_status)
  
  return raid_drive_4_status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ComputerStatus::set_allocated_raid_drive_4_status(::std::string* raid_drive_4_status) {
  if (raid_drive_4_status != NULL) {
    
  } else {
    
  }
  raid_drive_4_status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), raid_drive_4_status);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.ComputerStatus.raid_drive_4_status)
}

// optional float memory_usage_percent = 40;
void ComputerStatus::clear_memory_usage_percent() {
  memory_usage_percent_ = 0;
}
 float ComputerStatus::memory_usage_percent() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.memory_usage_percent)
  return memory_usage_percent_;
}
 void ComputerStatus::set_memory_usage_percent(float value) {
  
  memory_usage_percent_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.memory_usage_percent)
}

// optional bool virtual_machine_status = 41;
void ComputerStatus::clear_virtual_machine_status() {
  virtual_machine_status_ = false;
}
 bool ComputerStatus::virtual_machine_status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.virtual_machine_status)
  return virtual_machine_status_;
}
 void ComputerStatus::set_virtual_machine_status(bool value) {
  
  virtual_machine_status_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.virtual_machine_status)
}

// optional bool web_server_status = 42;
void ComputerStatus::clear_web_server_status() {
  web_server_status_ = false;
}
 bool ComputerStatus::web_server_status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.web_server_status)
  return web_server_status_;
}
 void ComputerStatus::set_web_server_status(bool value) {
  
  web_server_status_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.web_server_status)
}

// optional bool hard_drive_space_status = 43;
void ComputerStatus::clear_hard_drive_space_status() {
  hard_drive_space_status_ = false;
}
 bool ComputerStatus::hard_drive_space_status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.hard_drive_space_status)
  return hard_drive_space_status_;
}
 void ComputerStatus::set_hard_drive_space_status(bool value) {
  
  hard_drive_space_status_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.hard_drive_space_status)
}

// optional bool raid_mount_status = 44;
void ComputerStatus::clear_raid_mount_status() {
  raid_mount_status_ = false;
}
 bool ComputerStatus::raid_mount_status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.raid_mount_status)
  return raid_mount_status_;
}
 void ComputerStatus::set_raid_mount_status(bool value) {
  
  raid_mount_status_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.raid_mount_status)
}

// optional bool network_speed_status = 45;
void ComputerStatus::clear_network_speed_status() {
  network_speed_status_ = false;
}
 bool ComputerStatus::network_speed_status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.network_speed_status)
  return network_speed_status_;
}
 void ComputerStatus::set_network_speed_status(bool value) {
  
  network_speed_status_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.network_speed_status)
}

// optional float cpu_0_core_0_temp_C = 60;
void ComputerStatus::clear_cpu_0_core_0_temp_c() {
  cpu_0_core_0_temp_c_ = 0;
}
 float ComputerStatus::cpu_0_core_0_temp_c() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.cpu_0_core_0_temp_C)
  return cpu_0_core_0_temp_c_;
}
 void ComputerStatus::set_cpu_0_core_0_temp_c(float value) {
  
  cpu_0_core_0_temp_c_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.cpu_0_core_0_temp_C)
}

// optional float cpu_0_core_1_temp_C = 61;
void ComputerStatus::clear_cpu_0_core_1_temp_c() {
  cpu_0_core_1_temp_c_ = 0;
}
 float ComputerStatus::cpu_0_core_1_temp_c() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.cpu_0_core_1_temp_C)
  return cpu_0_core_1_temp_c_;
}
 void ComputerStatus::set_cpu_0_core_1_temp_c(float value) {
  
  cpu_0_core_1_temp_c_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.cpu_0_core_1_temp_C)
}

// optional float cpu_0_core_2_temp_C = 63;
void ComputerStatus::clear_cpu_0_core_2_temp_c() {
  cpu_0_core_2_temp_c_ = 0;
}
 float ComputerStatus::cpu_0_core_2_temp_c() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.cpu_0_core_2_temp_C)
  return cpu_0_core_2_temp_c_;
}
 void ComputerStatus::set_cpu_0_core_2_temp_c(float value) {
  
  cpu_0_core_2_temp_c_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.cpu_0_core_2_temp_C)
}

// optional float cpu_0_core_3_temp_C = 64;
void ComputerStatus::clear_cpu_0_core_3_temp_c() {
  cpu_0_core_3_temp_c_ = 0;
}
 float ComputerStatus::cpu_0_core_3_temp_c() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.cpu_0_core_3_temp_C)
  return cpu_0_core_3_temp_c_;
}
 void ComputerStatus::set_cpu_0_core_3_temp_c(float value) {
  
  cpu_0_core_3_temp_c_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.cpu_0_core_3_temp_C)
}

// optional float cpu_0_core_4_temp_C = 65;
void ComputerStatus::clear_cpu_0_core_4_temp_c() {
  cpu_0_core_4_temp_c_ = 0;
}
 float ComputerStatus::cpu_0_core_4_temp_c() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.cpu_0_core_4_temp_C)
  return cpu_0_core_4_temp_c_;
}
 void ComputerStatus::set_cpu_0_core_4_temp_c(float value) {
  
  cpu_0_core_4_temp_c_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.cpu_0_core_4_temp_C)
}

// optional float cpu_0_core_5_temp_C = 66;
void ComputerStatus::clear_cpu_0_core_5_temp_c() {
  cpu_0_core_5_temp_c_ = 0;
}
 float ComputerStatus::cpu_0_core_5_temp_c() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.cpu_0_core_5_temp_C)
  return cpu_0_core_5_temp_c_;
}
 void ComputerStatus::set_cpu_0_core_5_temp_c(float value) {
  
  cpu_0_core_5_temp_c_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.cpu_0_core_5_temp_C)
}

// optional float cpu_0_core_6_temp_C = 67;
void ComputerStatus::clear_cpu_0_core_6_temp_c() {
  cpu_0_core_6_temp_c_ = 0;
}
 float ComputerStatus::cpu_0_core_6_temp_c() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.cpu_0_core_6_temp_C)
  return cpu_0_core_6_temp_c_;
}
 void ComputerStatus::set_cpu_0_core_6_temp_c(float value) {
  
  cpu_0_core_6_temp_c_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.cpu_0_core_6_temp_C)
}

// optional float cpu_0_core_7_temp_C = 68;
void ComputerStatus::clear_cpu_0_core_7_temp_c() {
  cpu_0_core_7_temp_c_ = 0;
}
 float ComputerStatus::cpu_0_core_7_temp_c() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.cpu_0_core_7_temp_C)
  return cpu_0_core_7_temp_c_;
}
 void ComputerStatus::set_cpu_0_core_7_temp_c(float value) {
  
  cpu_0_core_7_temp_c_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.cpu_0_core_7_temp_C)
}

// optional float cpu_1_core_0_temp_C = 69;
void ComputerStatus::clear_cpu_1_core_0_temp_c() {
  cpu_1_core_0_temp_c_ = 0;
}
 float ComputerStatus::cpu_1_core_0_temp_c() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.cpu_1_core_0_temp_C)
  return cpu_1_core_0_temp_c_;
}
 void ComputerStatus::set_cpu_1_core_0_temp_c(float value) {
  
  cpu_1_core_0_temp_c_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.cpu_1_core_0_temp_C)
}

// optional float cpu_1_core_1_temp_C = 70;
void ComputerStatus::clear_cpu_1_core_1_temp_c() {
  cpu_1_core_1_temp_c_ = 0;
}
 float ComputerStatus::cpu_1_core_1_temp_c() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.cpu_1_core_1_temp_C)
  return cpu_1_core_1_temp_c_;
}
 void ComputerStatus::set_cpu_1_core_1_temp_c(float value) {
  
  cpu_1_core_1_temp_c_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.cpu_1_core_1_temp_C)
}

// optional float cpu_1_core_2_temp_C = 71;
void ComputerStatus::clear_cpu_1_core_2_temp_c() {
  cpu_1_core_2_temp_c_ = 0;
}
 float ComputerStatus::cpu_1_core_2_temp_c() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.cpu_1_core_2_temp_C)
  return cpu_1_core_2_temp_c_;
}
 void ComputerStatus::set_cpu_1_core_2_temp_c(float value) {
  
  cpu_1_core_2_temp_c_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.cpu_1_core_2_temp_C)
}

// optional float cpu_1_core_3_temp_C = 72;
void ComputerStatus::clear_cpu_1_core_3_temp_c() {
  cpu_1_core_3_temp_c_ = 0;
}
 float ComputerStatus::cpu_1_core_3_temp_c() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.cpu_1_core_3_temp_C)
  return cpu_1_core_3_temp_c_;
}
 void ComputerStatus::set_cpu_1_core_3_temp_c(float value) {
  
  cpu_1_core_3_temp_c_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.cpu_1_core_3_temp_C)
}

// optional float cpu_1_core_4_temp_C = 73;
void ComputerStatus::clear_cpu_1_core_4_temp_c() {
  cpu_1_core_4_temp_c_ = 0;
}
 float ComputerStatus::cpu_1_core_4_temp_c() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.cpu_1_core_4_temp_C)
  return cpu_1_core_4_temp_c_;
}
 void ComputerStatus::set_cpu_1_core_4_temp_c(float value) {
  
  cpu_1_core_4_temp_c_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.cpu_1_core_4_temp_C)
}

// optional float cpu_1_core_5_temp_C = 74;
void ComputerStatus::clear_cpu_1_core_5_temp_c() {
  cpu_1_core_5_temp_c_ = 0;
}
 float ComputerStatus::cpu_1_core_5_temp_c() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.cpu_1_core_5_temp_C)
  return cpu_1_core_5_temp_c_;
}
 void ComputerStatus::set_cpu_1_core_5_temp_c(float value) {
  
  cpu_1_core_5_temp_c_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.cpu_1_core_5_temp_C)
}

// optional float cpu_1_core_6_temp_C = 75;
void ComputerStatus::clear_cpu_1_core_6_temp_c() {
  cpu_1_core_6_temp_c_ = 0;
}
 float ComputerStatus::cpu_1_core_6_temp_c() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.cpu_1_core_6_temp_C)
  return cpu_1_core_6_temp_c_;
}
 void ComputerStatus::set_cpu_1_core_6_temp_c(float value) {
  
  cpu_1_core_6_temp_c_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.cpu_1_core_6_temp_C)
}

// optional float cpu_1_core_7_temp_C = 76;
void ComputerStatus::clear_cpu_1_core_7_temp_c() {
  cpu_1_core_7_temp_c_ = 0;
}
 float ComputerStatus::cpu_1_core_7_temp_c() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.cpu_1_core_7_temp_C)
  return cpu_1_core_7_temp_c_;
}
 void ComputerStatus::set_cpu_1_core_7_temp_c(float value) {
  
  cpu_1_core_7_temp_c_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.cpu_1_core_7_temp_C)
}

// optional float cpu_0_core_8_temp_C = 77;
void ComputerStatus::clear_cpu_0_core_8_temp_c() {
  cpu_0_core_8_temp_c_ = 0;
}
 float ComputerStatus::cpu_0_core_8_temp_c() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.cpu_0_core_8_temp_C)
  return cpu_0_core_8_temp_c_;
}
 void ComputerStatus::set_cpu_0_core_8_temp_c(float value) {
  
  cpu_0_core_8_temp_c_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.cpu_0_core_8_temp_C)
}

// optional float cpu_0_core_9_temp_C = 78;
void ComputerStatus::clear_cpu_0_core_9_temp_c() {
  cpu_0_core_9_temp_c_ = 0;
}
 float ComputerStatus::cpu_0_core_9_temp_c() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.cpu_0_core_9_temp_C)
  return cpu_0_core_9_temp_c_;
}
 void ComputerStatus::set_cpu_0_core_9_temp_c(float value) {
  
  cpu_0_core_9_temp_c_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.cpu_0_core_9_temp_C)
}

// optional float cpu_1_core_8_temp_C = 79;
void ComputerStatus::clear_cpu_1_core_8_temp_c() {
  cpu_1_core_8_temp_c_ = 0;
}
 float ComputerStatus::cpu_1_core_8_temp_c() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.cpu_1_core_8_temp_C)
  return cpu_1_core_8_temp_c_;
}
 void ComputerStatus::set_cpu_1_core_8_temp_c(float value) {
  
  cpu_1_core_8_temp_c_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.cpu_1_core_8_temp_C)
}

// optional float cpu_1_core_9_temp_C = 80;
void ComputerStatus::clear_cpu_1_core_9_temp_c() {
  cpu_1_core_9_temp_c_ = 0;
}
 float ComputerStatus::cpu_1_core_9_temp_c() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.cpu_1_core_9_temp_C)
  return cpu_1_core_9_temp_c_;
}
 void ComputerStatus::set_cpu_1_core_9_temp_c(float value) {
  
  cpu_1_core_9_temp_c_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.cpu_1_core_9_temp_C)
}

// optional string time = 100;
void ComputerStatus::clear_time() {
  time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ComputerStatus::time() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.time)
  return time_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ComputerStatus::set_time(const ::std::string& value) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.time)
}
 void ComputerStatus::set_time(const char* value) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.ComputerStatus.time)
}
 void ComputerStatus::set_time(const char* value, size_t size) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.ComputerStatus.time)
}
 ::std::string* ComputerStatus::mutable_time() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.ComputerStatus.time)
  return time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ComputerStatus::release_time() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.ComputerStatus.time)
  
  return time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ComputerStatus::set_allocated_time(::std::string* time) {
  if (time != NULL) {
    
  } else {
    
  }
  time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), time);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.ComputerStatus.time)
}

// optional string time_zone = 101;
void ComputerStatus::clear_time_zone() {
  time_zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ComputerStatus::time_zone() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.time_zone)
  return time_zone_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ComputerStatus::set_time_zone(const ::std::string& value) {
  
  time_zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.time_zone)
}
 void ComputerStatus::set_time_zone(const char* value) {
  
  time_zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.ComputerStatus.time_zone)
}
 void ComputerStatus::set_time_zone(const char* value, size_t size) {
  
  time_zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.ComputerStatus.time_zone)
}
 ::std::string* ComputerStatus::mutable_time_zone() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.ComputerStatus.time_zone)
  return time_zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ComputerStatus::release_time_zone() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.ComputerStatus.time_zone)
  
  return time_zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ComputerStatus::set_allocated_time_zone(::std::string* time_zone) {
  if (time_zone != NULL) {
    
  } else {
    
  }
  time_zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), time_zone);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.ComputerStatus.time_zone)
}

// optional string ntp_server = 102;
void ComputerStatus::clear_ntp_server() {
  ntp_server_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ComputerStatus::ntp_server() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerStatus.ntp_server)
  return ntp_server_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ComputerStatus::set_ntp_server(const ::std::string& value) {
  
  ntp_server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerStatus.ntp_server)
}
 void ComputerStatus::set_ntp_server(const char* value) {
  
  ntp_server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.ComputerStatus.ntp_server)
}
 void ComputerStatus::set_ntp_server(const char* value, size_t size) {
  
  ntp_server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.ComputerStatus.ntp_server)
}
 ::std::string* ComputerStatus::mutable_ntp_server() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.ComputerStatus.ntp_server)
  return ntp_server_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ComputerStatus::release_ntp_server() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.ComputerStatus.ntp_server)
  
  return ntp_server_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ComputerStatus::set_allocated_ntp_server(::std::string* ntp_server) {
  if (ntp_server != NULL) {
    
  } else {
    
  }
  ntp_server_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ntp_server);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.ComputerStatus.ntp_server)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ComputerInfo::kScannerControlSoftwareVersionFieldNumber;
const int ComputerInfo::kReconstructionSoftwareVersionFieldNumber;
const int ComputerInfo::kOperatingSystemVersionFieldNumber;
const int ComputerInfo::kDetectionSoftwareVersionFieldNumber;
const int ComputerInfo::kDetectionLibrary1VersionFieldNumber;
const int ComputerInfo::kDetectionLibrary2VersionFieldNumber;
const int ComputerInfo::kDetectionLibrary3VersionFieldNumber;
const int ComputerInfo::kDetectionLibrary4VersionFieldNumber;
const int ComputerInfo::kDetectionLibrary5VersionFieldNumber;
const int ComputerInfo::kDasReceiverBoardVersionFieldNumber;
const int ComputerInfo::kRotorControlBoardVersionFieldNumber;
const int ComputerInfo::kDasControlBoard1VersionFieldNumber;
const int ComputerInfo::kDasControlBoard2VersionFieldNumber;
const int ComputerInfo::kDasControlBoard3VersionFieldNumber;
const int ComputerInfo::kDasControlBoard4VersionFieldNumber;
const int ComputerInfo::kDasControlBoard5VersionFieldNumber;
const int ComputerInfo::kNTPServerFieldNumber;
const int ComputerInfo::kPowerlinkVersionFieldNumber;
const int ComputerInfo::kSafetyIoVersionFieldNumber;
const int ComputerInfo::kNetworkServerSoftwareFieldNumber;
const int ComputerInfo::kImageQualityTestSoftwareFieldNumber;
const int ComputerInfo::kServiceDiagnosticServicesFieldNumber;
const int ComputerInfo::kPlcFirmwareVersionFieldNumber;
const int ComputerInfo::kTopLevelReleaseFieldNumber;
const int ComputerInfo::kBhsSoftwareVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ComputerInfo::ComputerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analogic.ancp00.ComputerInfo)
}

void ComputerInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ComputerInfo::ComputerInfo(const ComputerInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analogic.ancp00.ComputerInfo)
}

void ComputerInfo::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  scanner_control_software_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reconstruction_software_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operating_system_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  detection_software_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  detection_library_1_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  detection_library_2_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  detection_library_3_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  detection_library_4_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  detection_library_5_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  das_receiver_board_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rotor_control_board_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  das_control_board_1_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  das_control_board_2_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  das_control_board_3_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  das_control_board_4_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  das_control_board_5_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ntp_server_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  powerlink_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  safety_io_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  network_server_software_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_quality_test_software_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  service_diagnostic_services_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  plc_firmware_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  top_level_release_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bhs_software_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ComputerInfo::~ComputerInfo() {
  // @@protoc_insertion_point(destructor:analogic.ancp00.ComputerInfo)
  SharedDtor();
}

void ComputerInfo::SharedDtor() {
  scanner_control_software_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reconstruction_software_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operating_system_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  detection_software_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  detection_library_1_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  detection_library_2_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  detection_library_3_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  detection_library_4_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  detection_library_5_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  das_receiver_board_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rotor_control_board_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  das_control_board_1_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  das_control_board_2_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  das_control_board_3_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  das_control_board_4_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  das_control_board_5_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ntp_server_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  powerlink_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  safety_io_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  network_server_software_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_quality_test_software_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  service_diagnostic_services_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  plc_firmware_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  top_level_release_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bhs_software_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ComputerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComputerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComputerInfo_descriptor_;
}

const ComputerInfo& ComputerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fComputer_2eproto();
  return *default_instance_;
}

ComputerInfo* ComputerInfo::default_instance_ = NULL;

ComputerInfo* ComputerInfo::New(::google::protobuf::Arena* arena) const {
  ComputerInfo* n = new ComputerInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ComputerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:analogic.ancp00.ComputerInfo)
  scanner_control_software_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reconstruction_software_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operating_system_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  detection_software_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  detection_library_1_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  detection_library_2_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  detection_library_3_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  detection_library_4_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  detection_library_5_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  das_receiver_board_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rotor_control_board_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  das_control_board_1_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  das_control_board_2_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  das_control_board_3_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  das_control_board_4_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  das_control_board_5_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ntp_server_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  powerlink_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  safety_io_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  network_server_software_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_quality_test_software_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  service_diagnostic_services_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  plc_firmware_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  top_level_release_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bhs_software_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ComputerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analogic.ancp00.ComputerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string scanner_control_software_version = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scanner_control_software_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->scanner_control_software_version().data(), this->scanner_control_software_version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.ComputerInfo.scanner_control_software_version"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_reconstruction_software_version;
        break;
      }

      // optional string reconstruction_software_version = 2;
      case 2: {
        if (tag == 18) {
         parse_reconstruction_software_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reconstruction_software_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reconstruction_software_version().data(), this->reconstruction_software_version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.ComputerInfo.reconstruction_software_version"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_operating_system_version;
        break;
      }

      // optional string operating_system_version = 3;
      case 3: {
        if (tag == 26) {
         parse_operating_system_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_operating_system_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->operating_system_version().data(), this->operating_system_version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.ComputerInfo.operating_system_version"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_detection_software_version;
        break;
      }

      // optional string detection_software_version = 4;
      case 4: {
        if (tag == 34) {
         parse_detection_software_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_detection_software_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->detection_software_version().data(), this->detection_software_version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.ComputerInfo.detection_software_version"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_detection_library_1_version;
        break;
      }

      // optional string detection_library_1_version = 5;
      case 5: {
        if (tag == 42) {
         parse_detection_library_1_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_detection_library_1_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->detection_library_1_version().data(), this->detection_library_1_version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.ComputerInfo.detection_library_1_version"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_detection_library_2_version;
        break;
      }

      // optional string detection_library_2_version = 6;
      case 6: {
        if (tag == 50) {
         parse_detection_library_2_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_detection_library_2_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->detection_library_2_version().data(), this->detection_library_2_version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.ComputerInfo.detection_library_2_version"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_detection_library_3_version;
        break;
      }

      // optional string detection_library_3_version = 7;
      case 7: {
        if (tag == 58) {
         parse_detection_library_3_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_detection_library_3_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->detection_library_3_version().data(), this->detection_library_3_version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.ComputerInfo.detection_library_3_version"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_detection_library_4_version;
        break;
      }

      // optional string detection_library_4_version = 8;
      case 8: {
        if (tag == 66) {
         parse_detection_library_4_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_detection_library_4_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->detection_library_4_version().data(), this->detection_library_4_version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.ComputerInfo.detection_library_4_version"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_detection_library_5_version;
        break;
      }

      // optional string detection_library_5_version = 9;
      case 9: {
        if (tag == 74) {
         parse_detection_library_5_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_detection_library_5_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->detection_library_5_version().data(), this->detection_library_5_version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.ComputerInfo.detection_library_5_version"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_das_receiver_board_version;
        break;
      }

      // optional string das_receiver_board_version = 10;
      case 10: {
        if (tag == 82) {
         parse_das_receiver_board_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_das_receiver_board_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->das_receiver_board_version().data(), this->das_receiver_board_version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.ComputerInfo.das_receiver_board_version"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_rotor_control_board_version;
        break;
      }

      // optional string rotor_control_board_version = 11;
      case 11: {
        if (tag == 90) {
         parse_rotor_control_board_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rotor_control_board_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rotor_control_board_version().data(), this->rotor_control_board_version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.ComputerInfo.rotor_control_board_version"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_das_control_board_1_version;
        break;
      }

      // optional string das_control_board_1_version = 12;
      case 12: {
        if (tag == 98) {
         parse_das_control_board_1_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_das_control_board_1_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->das_control_board_1_version().data(), this->das_control_board_1_version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.ComputerInfo.das_control_board_1_version"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_das_control_board_2_version;
        break;
      }

      // optional string das_control_board_2_version = 13;
      case 13: {
        if (tag == 106) {
         parse_das_control_board_2_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_das_control_board_2_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->das_control_board_2_version().data(), this->das_control_board_2_version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.ComputerInfo.das_control_board_2_version"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_das_control_board_3_version;
        break;
      }

      // optional string das_control_board_3_version = 14;
      case 14: {
        if (tag == 114) {
         parse_das_control_board_3_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_das_control_board_3_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->das_control_board_3_version().data(), this->das_control_board_3_version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.ComputerInfo.das_control_board_3_version"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_das_control_board_4_version;
        break;
      }

      // optional string das_control_board_4_version = 15;
      case 15: {
        if (tag == 122) {
         parse_das_control_board_4_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_das_control_board_4_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->das_control_board_4_version().data(), this->das_control_board_4_version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.ComputerInfo.das_control_board_4_version"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_das_control_board_5_version;
        break;
      }

      // optional string das_control_board_5_version = 16;
      case 16: {
        if (tag == 130) {
         parse_das_control_board_5_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_das_control_board_5_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->das_control_board_5_version().data(), this->das_control_board_5_version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.ComputerInfo.das_control_board_5_version"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_NTP_server;
        break;
      }

      // optional string NTP_server = 17;
      case 17: {
        if (tag == 138) {
         parse_NTP_server:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ntp_server()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ntp_server().data(), this->ntp_server().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.ComputerInfo.NTP_server"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_powerlink_version;
        break;
      }

      // optional string powerlink_version = 18;
      case 18: {
        if (tag == 146) {
         parse_powerlink_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_powerlink_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->powerlink_version().data(), this->powerlink_version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.ComputerInfo.powerlink_version"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_safety_io_version;
        break;
      }

      // optional string safety_io_version = 19;
      case 19: {
        if (tag == 154) {
         parse_safety_io_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_safety_io_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->safety_io_version().data(), this->safety_io_version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.ComputerInfo.safety_io_version"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_network_server_software;
        break;
      }

      // optional string network_server_software = 20;
      case 20: {
        if (tag == 162) {
         parse_network_server_software:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_network_server_software()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->network_server_software().data(), this->network_server_software().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.ComputerInfo.network_server_software"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_image_quality_test_software;
        break;
      }

      // optional string image_quality_test_software = 21;
      case 21: {
        if (tag == 170) {
         parse_image_quality_test_software:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_quality_test_software()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->image_quality_test_software().data(), this->image_quality_test_software().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.ComputerInfo.image_quality_test_software"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_service_diagnostic_services;
        break;
      }

      // optional string service_diagnostic_services = 22;
      case 22: {
        if (tag == 178) {
         parse_service_diagnostic_services:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_diagnostic_services()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->service_diagnostic_services().data(), this->service_diagnostic_services().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.ComputerInfo.service_diagnostic_services"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_plc_firmware_version;
        break;
      }

      // optional string plc_firmware_version = 23;
      case 23: {
        if (tag == 186) {
         parse_plc_firmware_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_plc_firmware_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->plc_firmware_version().data(), this->plc_firmware_version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.ComputerInfo.plc_firmware_version"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_top_level_release;
        break;
      }

      // optional string top_level_release = 24;
      case 24: {
        if (tag == 194) {
         parse_top_level_release:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_top_level_release()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->top_level_release().data(), this->top_level_release().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.ComputerInfo.top_level_release"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_bhs_software_version;
        break;
      }

      // optional string bhs_software_version = 25;
      case 25: {
        if (tag == 202) {
         parse_bhs_software_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bhs_software_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bhs_software_version().data(), this->bhs_software_version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.ComputerInfo.bhs_software_version"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:analogic.ancp00.ComputerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analogic.ancp00.ComputerInfo)
  return false;
#undef DO_
}

void ComputerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analogic.ancp00.ComputerInfo)
  // optional string scanner_control_software_version = 1;
  if (this->scanner_control_software_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->scanner_control_software_version().data(), this->scanner_control_software_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ComputerInfo.scanner_control_software_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->scanner_control_software_version(), output);
  }

  // optional string reconstruction_software_version = 2;
  if (this->reconstruction_software_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reconstruction_software_version().data(), this->reconstruction_software_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ComputerInfo.reconstruction_software_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->reconstruction_software_version(), output);
  }

  // optional string operating_system_version = 3;
  if (this->operating_system_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->operating_system_version().data(), this->operating_system_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ComputerInfo.operating_system_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->operating_system_version(), output);
  }

  // optional string detection_software_version = 4;
  if (this->detection_software_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->detection_software_version().data(), this->detection_software_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ComputerInfo.detection_software_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->detection_software_version(), output);
  }

  // optional string detection_library_1_version = 5;
  if (this->detection_library_1_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->detection_library_1_version().data(), this->detection_library_1_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ComputerInfo.detection_library_1_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->detection_library_1_version(), output);
  }

  // optional string detection_library_2_version = 6;
  if (this->detection_library_2_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->detection_library_2_version().data(), this->detection_library_2_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ComputerInfo.detection_library_2_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->detection_library_2_version(), output);
  }

  // optional string detection_library_3_version = 7;
  if (this->detection_library_3_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->detection_library_3_version().data(), this->detection_library_3_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ComputerInfo.detection_library_3_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->detection_library_3_version(), output);
  }

  // optional string detection_library_4_version = 8;
  if (this->detection_library_4_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->detection_library_4_version().data(), this->detection_library_4_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ComputerInfo.detection_library_4_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->detection_library_4_version(), output);
  }

  // optional string detection_library_5_version = 9;
  if (this->detection_library_5_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->detection_library_5_version().data(), this->detection_library_5_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ComputerInfo.detection_library_5_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->detection_library_5_version(), output);
  }

  // optional string das_receiver_board_version = 10;
  if (this->das_receiver_board_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->das_receiver_board_version().data(), this->das_receiver_board_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ComputerInfo.das_receiver_board_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->das_receiver_board_version(), output);
  }

  // optional string rotor_control_board_version = 11;
  if (this->rotor_control_board_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rotor_control_board_version().data(), this->rotor_control_board_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ComputerInfo.rotor_control_board_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->rotor_control_board_version(), output);
  }

  // optional string das_control_board_1_version = 12;
  if (this->das_control_board_1_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->das_control_board_1_version().data(), this->das_control_board_1_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ComputerInfo.das_control_board_1_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->das_control_board_1_version(), output);
  }

  // optional string das_control_board_2_version = 13;
  if (this->das_control_board_2_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->das_control_board_2_version().data(), this->das_control_board_2_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ComputerInfo.das_control_board_2_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->das_control_board_2_version(), output);
  }

  // optional string das_control_board_3_version = 14;
  if (this->das_control_board_3_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->das_control_board_3_version().data(), this->das_control_board_3_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ComputerInfo.das_control_board_3_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->das_control_board_3_version(), output);
  }

  // optional string das_control_board_4_version = 15;
  if (this->das_control_board_4_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->das_control_board_4_version().data(), this->das_control_board_4_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ComputerInfo.das_control_board_4_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->das_control_board_4_version(), output);
  }

  // optional string das_control_board_5_version = 16;
  if (this->das_control_board_5_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->das_control_board_5_version().data(), this->das_control_board_5_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ComputerInfo.das_control_board_5_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->das_control_board_5_version(), output);
  }

  // optional string NTP_server = 17;
  if (this->ntp_server().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ntp_server().data(), this->ntp_server().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ComputerInfo.NTP_server");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->ntp_server(), output);
  }

  // optional string powerlink_version = 18;
  if (this->powerlink_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->powerlink_version().data(), this->powerlink_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ComputerInfo.powerlink_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->powerlink_version(), output);
  }

  // optional string safety_io_version = 19;
  if (this->safety_io_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->safety_io_version().data(), this->safety_io_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ComputerInfo.safety_io_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->safety_io_version(), output);
  }

  // optional string network_server_software = 20;
  if (this->network_server_software().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->network_server_software().data(), this->network_server_software().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ComputerInfo.network_server_software");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->network_server_software(), output);
  }

  // optional string image_quality_test_software = 21;
  if (this->image_quality_test_software().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->image_quality_test_software().data(), this->image_quality_test_software().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ComputerInfo.image_quality_test_software");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->image_quality_test_software(), output);
  }

  // optional string service_diagnostic_services = 22;
  if (this->service_diagnostic_services().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_diagnostic_services().data(), this->service_diagnostic_services().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ComputerInfo.service_diagnostic_services");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->service_diagnostic_services(), output);
  }

  // optional string plc_firmware_version = 23;
  if (this->plc_firmware_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->plc_firmware_version().data(), this->plc_firmware_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ComputerInfo.plc_firmware_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      23, this->plc_firmware_version(), output);
  }

  // optional string top_level_release = 24;
  if (this->top_level_release().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->top_level_release().data(), this->top_level_release().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ComputerInfo.top_level_release");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      24, this->top_level_release(), output);
  }

  // optional string bhs_software_version = 25;
  if (this->bhs_software_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bhs_software_version().data(), this->bhs_software_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ComputerInfo.bhs_software_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      25, this->bhs_software_version(), output);
  }

  // @@protoc_insertion_point(serialize_end:analogic.ancp00.ComputerInfo)
}

::google::protobuf::uint8* ComputerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analogic.ancp00.ComputerInfo)
  // optional string scanner_control_software_version = 1;
  if (this->scanner_control_software_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->scanner_control_software_version().data(), this->scanner_control_software_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ComputerInfo.scanner_control_software_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->scanner_control_software_version(), target);
  }

  // optional string reconstruction_software_version = 2;
  if (this->reconstruction_software_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reconstruction_software_version().data(), this->reconstruction_software_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ComputerInfo.reconstruction_software_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->reconstruction_software_version(), target);
  }

  // optional string operating_system_version = 3;
  if (this->operating_system_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->operating_system_version().data(), this->operating_system_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ComputerInfo.operating_system_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->operating_system_version(), target);
  }

  // optional string detection_software_version = 4;
  if (this->detection_software_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->detection_software_version().data(), this->detection_software_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ComputerInfo.detection_software_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->detection_software_version(), target);
  }

  // optional string detection_library_1_version = 5;
  if (this->detection_library_1_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->detection_library_1_version().data(), this->detection_library_1_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ComputerInfo.detection_library_1_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->detection_library_1_version(), target);
  }

  // optional string detection_library_2_version = 6;
  if (this->detection_library_2_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->detection_library_2_version().data(), this->detection_library_2_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ComputerInfo.detection_library_2_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->detection_library_2_version(), target);
  }

  // optional string detection_library_3_version = 7;
  if (this->detection_library_3_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->detection_library_3_version().data(), this->detection_library_3_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ComputerInfo.detection_library_3_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->detection_library_3_version(), target);
  }

  // optional string detection_library_4_version = 8;
  if (this->detection_library_4_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->detection_library_4_version().data(), this->detection_library_4_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ComputerInfo.detection_library_4_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->detection_library_4_version(), target);
  }

  // optional string detection_library_5_version = 9;
  if (this->detection_library_5_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->detection_library_5_version().data(), this->detection_library_5_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ComputerInfo.detection_library_5_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->detection_library_5_version(), target);
  }

  // optional string das_receiver_board_version = 10;
  if (this->das_receiver_board_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->das_receiver_board_version().data(), this->das_receiver_board_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ComputerInfo.das_receiver_board_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->das_receiver_board_version(), target);
  }

  // optional string rotor_control_board_version = 11;
  if (this->rotor_control_board_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rotor_control_board_version().data(), this->rotor_control_board_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ComputerInfo.rotor_control_board_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->rotor_control_board_version(), target);
  }

  // optional string das_control_board_1_version = 12;
  if (this->das_control_board_1_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->das_control_board_1_version().data(), this->das_control_board_1_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ComputerInfo.das_control_board_1_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->das_control_board_1_version(), target);
  }

  // optional string das_control_board_2_version = 13;
  if (this->das_control_board_2_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->das_control_board_2_version().data(), this->das_control_board_2_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ComputerInfo.das_control_board_2_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->das_control_board_2_version(), target);
  }

  // optional string das_control_board_3_version = 14;
  if (this->das_control_board_3_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->das_control_board_3_version().data(), this->das_control_board_3_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ComputerInfo.das_control_board_3_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->das_control_board_3_version(), target);
  }

  // optional string das_control_board_4_version = 15;
  if (this->das_control_board_4_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->das_control_board_4_version().data(), this->das_control_board_4_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ComputerInfo.das_control_board_4_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->das_control_board_4_version(), target);
  }

  // optional string das_control_board_5_version = 16;
  if (this->das_control_board_5_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->das_control_board_5_version().data(), this->das_control_board_5_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ComputerInfo.das_control_board_5_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->das_control_board_5_version(), target);
  }

  // optional string NTP_server = 17;
  if (this->ntp_server().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ntp_server().data(), this->ntp_server().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ComputerInfo.NTP_server");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->ntp_server(), target);
  }

  // optional string powerlink_version = 18;
  if (this->powerlink_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->powerlink_version().data(), this->powerlink_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ComputerInfo.powerlink_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->powerlink_version(), target);
  }

  // optional string safety_io_version = 19;
  if (this->safety_io_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->safety_io_version().data(), this->safety_io_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ComputerInfo.safety_io_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->safety_io_version(), target);
  }

  // optional string network_server_software = 20;
  if (this->network_server_software().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->network_server_software().data(), this->network_server_software().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ComputerInfo.network_server_software");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->network_server_software(), target);
  }

  // optional string image_quality_test_software = 21;
  if (this->image_quality_test_software().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->image_quality_test_software().data(), this->image_quality_test_software().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ComputerInfo.image_quality_test_software");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->image_quality_test_software(), target);
  }

  // optional string service_diagnostic_services = 22;
  if (this->service_diagnostic_services().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_diagnostic_services().data(), this->service_diagnostic_services().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ComputerInfo.service_diagnostic_services");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->service_diagnostic_services(), target);
  }

  // optional string plc_firmware_version = 23;
  if (this->plc_firmware_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->plc_firmware_version().data(), this->plc_firmware_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ComputerInfo.plc_firmware_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->plc_firmware_version(), target);
  }

  // optional string top_level_release = 24;
  if (this->top_level_release().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->top_level_release().data(), this->top_level_release().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ComputerInfo.top_level_release");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->top_level_release(), target);
  }

  // optional string bhs_software_version = 25;
  if (this->bhs_software_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bhs_software_version().data(), this->bhs_software_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.ComputerInfo.bhs_software_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->bhs_software_version(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:analogic.ancp00.ComputerInfo)
  return target;
}

int ComputerInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:analogic.ancp00.ComputerInfo)
  int total_size = 0;

  // optional string scanner_control_software_version = 1;
  if (this->scanner_control_software_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->scanner_control_software_version());
  }

  // optional string reconstruction_software_version = 2;
  if (this->reconstruction_software_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reconstruction_software_version());
  }

  // optional string operating_system_version = 3;
  if (this->operating_system_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->operating_system_version());
  }

  // optional string detection_software_version = 4;
  if (this->detection_software_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->detection_software_version());
  }

  // optional string detection_library_1_version = 5;
  if (this->detection_library_1_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->detection_library_1_version());
  }

  // optional string detection_library_2_version = 6;
  if (this->detection_library_2_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->detection_library_2_version());
  }

  // optional string detection_library_3_version = 7;
  if (this->detection_library_3_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->detection_library_3_version());
  }

  // optional string detection_library_4_version = 8;
  if (this->detection_library_4_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->detection_library_4_version());
  }

  // optional string detection_library_5_version = 9;
  if (this->detection_library_5_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->detection_library_5_version());
  }

  // optional string das_receiver_board_version = 10;
  if (this->das_receiver_board_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->das_receiver_board_version());
  }

  // optional string rotor_control_board_version = 11;
  if (this->rotor_control_board_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rotor_control_board_version());
  }

  // optional string das_control_board_1_version = 12;
  if (this->das_control_board_1_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->das_control_board_1_version());
  }

  // optional string das_control_board_2_version = 13;
  if (this->das_control_board_2_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->das_control_board_2_version());
  }

  // optional string das_control_board_3_version = 14;
  if (this->das_control_board_3_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->das_control_board_3_version());
  }

  // optional string das_control_board_4_version = 15;
  if (this->das_control_board_4_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->das_control_board_4_version());
  }

  // optional string das_control_board_5_version = 16;
  if (this->das_control_board_5_version().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->das_control_board_5_version());
  }

  // optional string NTP_server = 17;
  if (this->ntp_server().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ntp_server());
  }

  // optional string powerlink_version = 18;
  if (this->powerlink_version().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->powerlink_version());
  }

  // optional string safety_io_version = 19;
  if (this->safety_io_version().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->safety_io_version());
  }

  // optional string network_server_software = 20;
  if (this->network_server_software().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->network_server_software());
  }

  // optional string image_quality_test_software = 21;
  if (this->image_quality_test_software().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->image_quality_test_software());
  }

  // optional string service_diagnostic_services = 22;
  if (this->service_diagnostic_services().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->service_diagnostic_services());
  }

  // optional string plc_firmware_version = 23;
  if (this->plc_firmware_version().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->plc_firmware_version());
  }

  // optional string top_level_release = 24;
  if (this->top_level_release().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->top_level_release());
  }

  // optional string bhs_software_version = 25;
  if (this->bhs_software_version().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bhs_software_version());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComputerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analogic.ancp00.ComputerInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ComputerInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ComputerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analogic.ancp00.ComputerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analogic.ancp00.ComputerInfo)
    MergeFrom(*source);
  }
}

void ComputerInfo::MergeFrom(const ComputerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analogic.ancp00.ComputerInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.scanner_control_software_version().size() > 0) {

    scanner_control_software_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.scanner_control_software_version_);
  }
  if (from.reconstruction_software_version().size() > 0) {

    reconstruction_software_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reconstruction_software_version_);
  }
  if (from.operating_system_version().size() > 0) {

    operating_system_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.operating_system_version_);
  }
  if (from.detection_software_version().size() > 0) {

    detection_software_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.detection_software_version_);
  }
  if (from.detection_library_1_version().size() > 0) {

    detection_library_1_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.detection_library_1_version_);
  }
  if (from.detection_library_2_version().size() > 0) {

    detection_library_2_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.detection_library_2_version_);
  }
  if (from.detection_library_3_version().size() > 0) {

    detection_library_3_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.detection_library_3_version_);
  }
  if (from.detection_library_4_version().size() > 0) {

    detection_library_4_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.detection_library_4_version_);
  }
  if (from.detection_library_5_version().size() > 0) {

    detection_library_5_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.detection_library_5_version_);
  }
  if (from.das_receiver_board_version().size() > 0) {

    das_receiver_board_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.das_receiver_board_version_);
  }
  if (from.rotor_control_board_version().size() > 0) {

    rotor_control_board_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rotor_control_board_version_);
  }
  if (from.das_control_board_1_version().size() > 0) {

    das_control_board_1_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.das_control_board_1_version_);
  }
  if (from.das_control_board_2_version().size() > 0) {

    das_control_board_2_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.das_control_board_2_version_);
  }
  if (from.das_control_board_3_version().size() > 0) {

    das_control_board_3_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.das_control_board_3_version_);
  }
  if (from.das_control_board_4_version().size() > 0) {

    das_control_board_4_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.das_control_board_4_version_);
  }
  if (from.das_control_board_5_version().size() > 0) {

    das_control_board_5_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.das_control_board_5_version_);
  }
  if (from.ntp_server().size() > 0) {

    ntp_server_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ntp_server_);
  }
  if (from.powerlink_version().size() > 0) {

    powerlink_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.powerlink_version_);
  }
  if (from.safety_io_version().size() > 0) {

    safety_io_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.safety_io_version_);
  }
  if (from.network_server_software().size() > 0) {

    network_server_software_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.network_server_software_);
  }
  if (from.image_quality_test_software().size() > 0) {

    image_quality_test_software_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_quality_test_software_);
  }
  if (from.service_diagnostic_services().size() > 0) {

    service_diagnostic_services_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_diagnostic_services_);
  }
  if (from.plc_firmware_version().size() > 0) {

    plc_firmware_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.plc_firmware_version_);
  }
  if (from.top_level_release().size() > 0) {

    top_level_release_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.top_level_release_);
  }
  if (from.bhs_software_version().size() > 0) {

    bhs_software_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bhs_software_version_);
  }
}

void ComputerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analogic.ancp00.ComputerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComputerInfo::CopyFrom(const ComputerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analogic.ancp00.ComputerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComputerInfo::IsInitialized() const {

  return true;
}

void ComputerInfo::Swap(ComputerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ComputerInfo::InternalSwap(ComputerInfo* other) {
  scanner_control_software_version_.Swap(&other->scanner_control_software_version_);
  reconstruction_software_version_.Swap(&other->reconstruction_software_version_);
  operating_system_version_.Swap(&other->operating_system_version_);
  detection_software_version_.Swap(&other->detection_software_version_);
  detection_library_1_version_.Swap(&other->detection_library_1_version_);
  detection_library_2_version_.Swap(&other->detection_library_2_version_);
  detection_library_3_version_.Swap(&other->detection_library_3_version_);
  detection_library_4_version_.Swap(&other->detection_library_4_version_);
  detection_library_5_version_.Swap(&other->detection_library_5_version_);
  das_receiver_board_version_.Swap(&other->das_receiver_board_version_);
  rotor_control_board_version_.Swap(&other->rotor_control_board_version_);
  das_control_board_1_version_.Swap(&other->das_control_board_1_version_);
  das_control_board_2_version_.Swap(&other->das_control_board_2_version_);
  das_control_board_3_version_.Swap(&other->das_control_board_3_version_);
  das_control_board_4_version_.Swap(&other->das_control_board_4_version_);
  das_control_board_5_version_.Swap(&other->das_control_board_5_version_);
  ntp_server_.Swap(&other->ntp_server_);
  powerlink_version_.Swap(&other->powerlink_version_);
  safety_io_version_.Swap(&other->safety_io_version_);
  network_server_software_.Swap(&other->network_server_software_);
  image_quality_test_software_.Swap(&other->image_quality_test_software_);
  service_diagnostic_services_.Swap(&other->service_diagnostic_services_);
  plc_firmware_version_.Swap(&other->plc_firmware_version_);
  top_level_release_.Swap(&other->top_level_release_);
  bhs_software_version_.Swap(&other->bhs_software_version_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ComputerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ComputerInfo_descriptor_;
  metadata.reflection = ComputerInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ComputerInfo

// optional string scanner_control_software_version = 1;
void ComputerInfo::clear_scanner_control_software_version() {
  scanner_control_software_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ComputerInfo::scanner_control_software_version() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerInfo.scanner_control_software_version)
  return scanner_control_software_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ComputerInfo::set_scanner_control_software_version(const ::std::string& value) {
  
  scanner_control_software_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerInfo.scanner_control_software_version)
}
 void ComputerInfo::set_scanner_control_software_version(const char* value) {
  
  scanner_control_software_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.ComputerInfo.scanner_control_software_version)
}
 void ComputerInfo::set_scanner_control_software_version(const char* value, size_t size) {
  
  scanner_control_software_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.ComputerInfo.scanner_control_software_version)
}
 ::std::string* ComputerInfo::mutable_scanner_control_software_version() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.ComputerInfo.scanner_control_software_version)
  return scanner_control_software_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ComputerInfo::release_scanner_control_software_version() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.ComputerInfo.scanner_control_software_version)
  
  return scanner_control_software_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ComputerInfo::set_allocated_scanner_control_software_version(::std::string* scanner_control_software_version) {
  if (scanner_control_software_version != NULL) {
    
  } else {
    
  }
  scanner_control_software_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scanner_control_software_version);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.ComputerInfo.scanner_control_software_version)
}

// optional string reconstruction_software_version = 2;
void ComputerInfo::clear_reconstruction_software_version() {
  reconstruction_software_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ComputerInfo::reconstruction_software_version() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerInfo.reconstruction_software_version)
  return reconstruction_software_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ComputerInfo::set_reconstruction_software_version(const ::std::string& value) {
  
  reconstruction_software_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerInfo.reconstruction_software_version)
}
 void ComputerInfo::set_reconstruction_software_version(const char* value) {
  
  reconstruction_software_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.ComputerInfo.reconstruction_software_version)
}
 void ComputerInfo::set_reconstruction_software_version(const char* value, size_t size) {
  
  reconstruction_software_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.ComputerInfo.reconstruction_software_version)
}
 ::std::string* ComputerInfo::mutable_reconstruction_software_version() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.ComputerInfo.reconstruction_software_version)
  return reconstruction_software_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ComputerInfo::release_reconstruction_software_version() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.ComputerInfo.reconstruction_software_version)
  
  return reconstruction_software_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ComputerInfo::set_allocated_reconstruction_software_version(::std::string* reconstruction_software_version) {
  if (reconstruction_software_version != NULL) {
    
  } else {
    
  }
  reconstruction_software_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reconstruction_software_version);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.ComputerInfo.reconstruction_software_version)
}

// optional string operating_system_version = 3;
void ComputerInfo::clear_operating_system_version() {
  operating_system_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ComputerInfo::operating_system_version() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerInfo.operating_system_version)
  return operating_system_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ComputerInfo::set_operating_system_version(const ::std::string& value) {
  
  operating_system_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerInfo.operating_system_version)
}
 void ComputerInfo::set_operating_system_version(const char* value) {
  
  operating_system_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.ComputerInfo.operating_system_version)
}
 void ComputerInfo::set_operating_system_version(const char* value, size_t size) {
  
  operating_system_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.ComputerInfo.operating_system_version)
}
 ::std::string* ComputerInfo::mutable_operating_system_version() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.ComputerInfo.operating_system_version)
  return operating_system_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ComputerInfo::release_operating_system_version() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.ComputerInfo.operating_system_version)
  
  return operating_system_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ComputerInfo::set_allocated_operating_system_version(::std::string* operating_system_version) {
  if (operating_system_version != NULL) {
    
  } else {
    
  }
  operating_system_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), operating_system_version);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.ComputerInfo.operating_system_version)
}

// optional string detection_software_version = 4;
void ComputerInfo::clear_detection_software_version() {
  detection_software_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ComputerInfo::detection_software_version() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerInfo.detection_software_version)
  return detection_software_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ComputerInfo::set_detection_software_version(const ::std::string& value) {
  
  detection_software_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerInfo.detection_software_version)
}
 void ComputerInfo::set_detection_software_version(const char* value) {
  
  detection_software_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.ComputerInfo.detection_software_version)
}
 void ComputerInfo::set_detection_software_version(const char* value, size_t size) {
  
  detection_software_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.ComputerInfo.detection_software_version)
}
 ::std::string* ComputerInfo::mutable_detection_software_version() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.ComputerInfo.detection_software_version)
  return detection_software_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ComputerInfo::release_detection_software_version() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.ComputerInfo.detection_software_version)
  
  return detection_software_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ComputerInfo::set_allocated_detection_software_version(::std::string* detection_software_version) {
  if (detection_software_version != NULL) {
    
  } else {
    
  }
  detection_software_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), detection_software_version);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.ComputerInfo.detection_software_version)
}

// optional string detection_library_1_version = 5;
void ComputerInfo::clear_detection_library_1_version() {
  detection_library_1_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ComputerInfo::detection_library_1_version() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerInfo.detection_library_1_version)
  return detection_library_1_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ComputerInfo::set_detection_library_1_version(const ::std::string& value) {
  
  detection_library_1_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerInfo.detection_library_1_version)
}
 void ComputerInfo::set_detection_library_1_version(const char* value) {
  
  detection_library_1_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.ComputerInfo.detection_library_1_version)
}
 void ComputerInfo::set_detection_library_1_version(const char* value, size_t size) {
  
  detection_library_1_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.ComputerInfo.detection_library_1_version)
}
 ::std::string* ComputerInfo::mutable_detection_library_1_version() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.ComputerInfo.detection_library_1_version)
  return detection_library_1_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ComputerInfo::release_detection_library_1_version() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.ComputerInfo.detection_library_1_version)
  
  return detection_library_1_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ComputerInfo::set_allocated_detection_library_1_version(::std::string* detection_library_1_version) {
  if (detection_library_1_version != NULL) {
    
  } else {
    
  }
  detection_library_1_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), detection_library_1_version);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.ComputerInfo.detection_library_1_version)
}

// optional string detection_library_2_version = 6;
void ComputerInfo::clear_detection_library_2_version() {
  detection_library_2_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ComputerInfo::detection_library_2_version() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerInfo.detection_library_2_version)
  return detection_library_2_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ComputerInfo::set_detection_library_2_version(const ::std::string& value) {
  
  detection_library_2_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerInfo.detection_library_2_version)
}
 void ComputerInfo::set_detection_library_2_version(const char* value) {
  
  detection_library_2_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.ComputerInfo.detection_library_2_version)
}
 void ComputerInfo::set_detection_library_2_version(const char* value, size_t size) {
  
  detection_library_2_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.ComputerInfo.detection_library_2_version)
}
 ::std::string* ComputerInfo::mutable_detection_library_2_version() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.ComputerInfo.detection_library_2_version)
  return detection_library_2_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ComputerInfo::release_detection_library_2_version() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.ComputerInfo.detection_library_2_version)
  
  return detection_library_2_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ComputerInfo::set_allocated_detection_library_2_version(::std::string* detection_library_2_version) {
  if (detection_library_2_version != NULL) {
    
  } else {
    
  }
  detection_library_2_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), detection_library_2_version);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.ComputerInfo.detection_library_2_version)
}

// optional string detection_library_3_version = 7;
void ComputerInfo::clear_detection_library_3_version() {
  detection_library_3_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ComputerInfo::detection_library_3_version() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerInfo.detection_library_3_version)
  return detection_library_3_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ComputerInfo::set_detection_library_3_version(const ::std::string& value) {
  
  detection_library_3_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerInfo.detection_library_3_version)
}
 void ComputerInfo::set_detection_library_3_version(const char* value) {
  
  detection_library_3_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.ComputerInfo.detection_library_3_version)
}
 void ComputerInfo::set_detection_library_3_version(const char* value, size_t size) {
  
  detection_library_3_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.ComputerInfo.detection_library_3_version)
}
 ::std::string* ComputerInfo::mutable_detection_library_3_version() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.ComputerInfo.detection_library_3_version)
  return detection_library_3_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ComputerInfo::release_detection_library_3_version() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.ComputerInfo.detection_library_3_version)
  
  return detection_library_3_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ComputerInfo::set_allocated_detection_library_3_version(::std::string* detection_library_3_version) {
  if (detection_library_3_version != NULL) {
    
  } else {
    
  }
  detection_library_3_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), detection_library_3_version);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.ComputerInfo.detection_library_3_version)
}

// optional string detection_library_4_version = 8;
void ComputerInfo::clear_detection_library_4_version() {
  detection_library_4_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ComputerInfo::detection_library_4_version() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerInfo.detection_library_4_version)
  return detection_library_4_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ComputerInfo::set_detection_library_4_version(const ::std::string& value) {
  
  detection_library_4_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerInfo.detection_library_4_version)
}
 void ComputerInfo::set_detection_library_4_version(const char* value) {
  
  detection_library_4_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.ComputerInfo.detection_library_4_version)
}
 void ComputerInfo::set_detection_library_4_version(const char* value, size_t size) {
  
  detection_library_4_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.ComputerInfo.detection_library_4_version)
}
 ::std::string* ComputerInfo::mutable_detection_library_4_version() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.ComputerInfo.detection_library_4_version)
  return detection_library_4_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ComputerInfo::release_detection_library_4_version() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.ComputerInfo.detection_library_4_version)
  
  return detection_library_4_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ComputerInfo::set_allocated_detection_library_4_version(::std::string* detection_library_4_version) {
  if (detection_library_4_version != NULL) {
    
  } else {
    
  }
  detection_library_4_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), detection_library_4_version);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.ComputerInfo.detection_library_4_version)
}

// optional string detection_library_5_version = 9;
void ComputerInfo::clear_detection_library_5_version() {
  detection_library_5_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ComputerInfo::detection_library_5_version() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerInfo.detection_library_5_version)
  return detection_library_5_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ComputerInfo::set_detection_library_5_version(const ::std::string& value) {
  
  detection_library_5_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerInfo.detection_library_5_version)
}
 void ComputerInfo::set_detection_library_5_version(const char* value) {
  
  detection_library_5_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.ComputerInfo.detection_library_5_version)
}
 void ComputerInfo::set_detection_library_5_version(const char* value, size_t size) {
  
  detection_library_5_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.ComputerInfo.detection_library_5_version)
}
 ::std::string* ComputerInfo::mutable_detection_library_5_version() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.ComputerInfo.detection_library_5_version)
  return detection_library_5_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ComputerInfo::release_detection_library_5_version() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.ComputerInfo.detection_library_5_version)
  
  return detection_library_5_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ComputerInfo::set_allocated_detection_library_5_version(::std::string* detection_library_5_version) {
  if (detection_library_5_version != NULL) {
    
  } else {
    
  }
  detection_library_5_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), detection_library_5_version);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.ComputerInfo.detection_library_5_version)
}

// optional string das_receiver_board_version = 10;
void ComputerInfo::clear_das_receiver_board_version() {
  das_receiver_board_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ComputerInfo::das_receiver_board_version() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerInfo.das_receiver_board_version)
  return das_receiver_board_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ComputerInfo::set_das_receiver_board_version(const ::std::string& value) {
  
  das_receiver_board_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerInfo.das_receiver_board_version)
}
 void ComputerInfo::set_das_receiver_board_version(const char* value) {
  
  das_receiver_board_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.ComputerInfo.das_receiver_board_version)
}
 void ComputerInfo::set_das_receiver_board_version(const char* value, size_t size) {
  
  das_receiver_board_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.ComputerInfo.das_receiver_board_version)
}
 ::std::string* ComputerInfo::mutable_das_receiver_board_version() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.ComputerInfo.das_receiver_board_version)
  return das_receiver_board_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ComputerInfo::release_das_receiver_board_version() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.ComputerInfo.das_receiver_board_version)
  
  return das_receiver_board_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ComputerInfo::set_allocated_das_receiver_board_version(::std::string* das_receiver_board_version) {
  if (das_receiver_board_version != NULL) {
    
  } else {
    
  }
  das_receiver_board_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), das_receiver_board_version);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.ComputerInfo.das_receiver_board_version)
}

// optional string rotor_control_board_version = 11;
void ComputerInfo::clear_rotor_control_board_version() {
  rotor_control_board_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ComputerInfo::rotor_control_board_version() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerInfo.rotor_control_board_version)
  return rotor_control_board_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ComputerInfo::set_rotor_control_board_version(const ::std::string& value) {
  
  rotor_control_board_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerInfo.rotor_control_board_version)
}
 void ComputerInfo::set_rotor_control_board_version(const char* value) {
  
  rotor_control_board_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.ComputerInfo.rotor_control_board_version)
}
 void ComputerInfo::set_rotor_control_board_version(const char* value, size_t size) {
  
  rotor_control_board_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.ComputerInfo.rotor_control_board_version)
}
 ::std::string* ComputerInfo::mutable_rotor_control_board_version() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.ComputerInfo.rotor_control_board_version)
  return rotor_control_board_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ComputerInfo::release_rotor_control_board_version() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.ComputerInfo.rotor_control_board_version)
  
  return rotor_control_board_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ComputerInfo::set_allocated_rotor_control_board_version(::std::string* rotor_control_board_version) {
  if (rotor_control_board_version != NULL) {
    
  } else {
    
  }
  rotor_control_board_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rotor_control_board_version);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.ComputerInfo.rotor_control_board_version)
}

// optional string das_control_board_1_version = 12;
void ComputerInfo::clear_das_control_board_1_version() {
  das_control_board_1_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ComputerInfo::das_control_board_1_version() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerInfo.das_control_board_1_version)
  return das_control_board_1_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ComputerInfo::set_das_control_board_1_version(const ::std::string& value) {
  
  das_control_board_1_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerInfo.das_control_board_1_version)
}
 void ComputerInfo::set_das_control_board_1_version(const char* value) {
  
  das_control_board_1_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.ComputerInfo.das_control_board_1_version)
}
 void ComputerInfo::set_das_control_board_1_version(const char* value, size_t size) {
  
  das_control_board_1_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.ComputerInfo.das_control_board_1_version)
}
 ::std::string* ComputerInfo::mutable_das_control_board_1_version() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.ComputerInfo.das_control_board_1_version)
  return das_control_board_1_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ComputerInfo::release_das_control_board_1_version() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.ComputerInfo.das_control_board_1_version)
  
  return das_control_board_1_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ComputerInfo::set_allocated_das_control_board_1_version(::std::string* das_control_board_1_version) {
  if (das_control_board_1_version != NULL) {
    
  } else {
    
  }
  das_control_board_1_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), das_control_board_1_version);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.ComputerInfo.das_control_board_1_version)
}

// optional string das_control_board_2_version = 13;
void ComputerInfo::clear_das_control_board_2_version() {
  das_control_board_2_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ComputerInfo::das_control_board_2_version() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerInfo.das_control_board_2_version)
  return das_control_board_2_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ComputerInfo::set_das_control_board_2_version(const ::std::string& value) {
  
  das_control_board_2_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerInfo.das_control_board_2_version)
}
 void ComputerInfo::set_das_control_board_2_version(const char* value) {
  
  das_control_board_2_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.ComputerInfo.das_control_board_2_version)
}
 void ComputerInfo::set_das_control_board_2_version(const char* value, size_t size) {
  
  das_control_board_2_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.ComputerInfo.das_control_board_2_version)
}
 ::std::string* ComputerInfo::mutable_das_control_board_2_version() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.ComputerInfo.das_control_board_2_version)
  return das_control_board_2_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ComputerInfo::release_das_control_board_2_version() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.ComputerInfo.das_control_board_2_version)
  
  return das_control_board_2_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ComputerInfo::set_allocated_das_control_board_2_version(::std::string* das_control_board_2_version) {
  if (das_control_board_2_version != NULL) {
    
  } else {
    
  }
  das_control_board_2_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), das_control_board_2_version);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.ComputerInfo.das_control_board_2_version)
}

// optional string das_control_board_3_version = 14;
void ComputerInfo::clear_das_control_board_3_version() {
  das_control_board_3_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ComputerInfo::das_control_board_3_version() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerInfo.das_control_board_3_version)
  return das_control_board_3_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ComputerInfo::set_das_control_board_3_version(const ::std::string& value) {
  
  das_control_board_3_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerInfo.das_control_board_3_version)
}
 void ComputerInfo::set_das_control_board_3_version(const char* value) {
  
  das_control_board_3_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.ComputerInfo.das_control_board_3_version)
}
 void ComputerInfo::set_das_control_board_3_version(const char* value, size_t size) {
  
  das_control_board_3_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.ComputerInfo.das_control_board_3_version)
}
 ::std::string* ComputerInfo::mutable_das_control_board_3_version() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.ComputerInfo.das_control_board_3_version)
  return das_control_board_3_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ComputerInfo::release_das_control_board_3_version() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.ComputerInfo.das_control_board_3_version)
  
  return das_control_board_3_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ComputerInfo::set_allocated_das_control_board_3_version(::std::string* das_control_board_3_version) {
  if (das_control_board_3_version != NULL) {
    
  } else {
    
  }
  das_control_board_3_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), das_control_board_3_version);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.ComputerInfo.das_control_board_3_version)
}

// optional string das_control_board_4_version = 15;
void ComputerInfo::clear_das_control_board_4_version() {
  das_control_board_4_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ComputerInfo::das_control_board_4_version() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerInfo.das_control_board_4_version)
  return das_control_board_4_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ComputerInfo::set_das_control_board_4_version(const ::std::string& value) {
  
  das_control_board_4_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerInfo.das_control_board_4_version)
}
 void ComputerInfo::set_das_control_board_4_version(const char* value) {
  
  das_control_board_4_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.ComputerInfo.das_control_board_4_version)
}
 void ComputerInfo::set_das_control_board_4_version(const char* value, size_t size) {
  
  das_control_board_4_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.ComputerInfo.das_control_board_4_version)
}
 ::std::string* ComputerInfo::mutable_das_control_board_4_version() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.ComputerInfo.das_control_board_4_version)
  return das_control_board_4_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ComputerInfo::release_das_control_board_4_version() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.ComputerInfo.das_control_board_4_version)
  
  return das_control_board_4_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ComputerInfo::set_allocated_das_control_board_4_version(::std::string* das_control_board_4_version) {
  if (das_control_board_4_version != NULL) {
    
  } else {
    
  }
  das_control_board_4_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), das_control_board_4_version);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.ComputerInfo.das_control_board_4_version)
}

// optional string das_control_board_5_version = 16;
void ComputerInfo::clear_das_control_board_5_version() {
  das_control_board_5_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ComputerInfo::das_control_board_5_version() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerInfo.das_control_board_5_version)
  return das_control_board_5_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ComputerInfo::set_das_control_board_5_version(const ::std::string& value) {
  
  das_control_board_5_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerInfo.das_control_board_5_version)
}
 void ComputerInfo::set_das_control_board_5_version(const char* value) {
  
  das_control_board_5_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.ComputerInfo.das_control_board_5_version)
}
 void ComputerInfo::set_das_control_board_5_version(const char* value, size_t size) {
  
  das_control_board_5_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.ComputerInfo.das_control_board_5_version)
}
 ::std::string* ComputerInfo::mutable_das_control_board_5_version() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.ComputerInfo.das_control_board_5_version)
  return das_control_board_5_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ComputerInfo::release_das_control_board_5_version() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.ComputerInfo.das_control_board_5_version)
  
  return das_control_board_5_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ComputerInfo::set_allocated_das_control_board_5_version(::std::string* das_control_board_5_version) {
  if (das_control_board_5_version != NULL) {
    
  } else {
    
  }
  das_control_board_5_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), das_control_board_5_version);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.ComputerInfo.das_control_board_5_version)
}

// optional string NTP_server = 17;
void ComputerInfo::clear_ntp_server() {
  ntp_server_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ComputerInfo::ntp_server() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerInfo.NTP_server)
  return ntp_server_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ComputerInfo::set_ntp_server(const ::std::string& value) {
  
  ntp_server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerInfo.NTP_server)
}
 void ComputerInfo::set_ntp_server(const char* value) {
  
  ntp_server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.ComputerInfo.NTP_server)
}
 void ComputerInfo::set_ntp_server(const char* value, size_t size) {
  
  ntp_server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.ComputerInfo.NTP_server)
}
 ::std::string* ComputerInfo::mutable_ntp_server() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.ComputerInfo.NTP_server)
  return ntp_server_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ComputerInfo::release_ntp_server() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.ComputerInfo.NTP_server)
  
  return ntp_server_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ComputerInfo::set_allocated_ntp_server(::std::string* ntp_server) {
  if (ntp_server != NULL) {
    
  } else {
    
  }
  ntp_server_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ntp_server);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.ComputerInfo.NTP_server)
}

// optional string powerlink_version = 18;
void ComputerInfo::clear_powerlink_version() {
  powerlink_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ComputerInfo::powerlink_version() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerInfo.powerlink_version)
  return powerlink_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ComputerInfo::set_powerlink_version(const ::std::string& value) {
  
  powerlink_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerInfo.powerlink_version)
}
 void ComputerInfo::set_powerlink_version(const char* value) {
  
  powerlink_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.ComputerInfo.powerlink_version)
}
 void ComputerInfo::set_powerlink_version(const char* value, size_t size) {
  
  powerlink_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.ComputerInfo.powerlink_version)
}
 ::std::string* ComputerInfo::mutable_powerlink_version() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.ComputerInfo.powerlink_version)
  return powerlink_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ComputerInfo::release_powerlink_version() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.ComputerInfo.powerlink_version)
  
  return powerlink_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ComputerInfo::set_allocated_powerlink_version(::std::string* powerlink_version) {
  if (powerlink_version != NULL) {
    
  } else {
    
  }
  powerlink_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), powerlink_version);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.ComputerInfo.powerlink_version)
}

// optional string safety_io_version = 19;
void ComputerInfo::clear_safety_io_version() {
  safety_io_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ComputerInfo::safety_io_version() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerInfo.safety_io_version)
  return safety_io_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ComputerInfo::set_safety_io_version(const ::std::string& value) {
  
  safety_io_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerInfo.safety_io_version)
}
 void ComputerInfo::set_safety_io_version(const char* value) {
  
  safety_io_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.ComputerInfo.safety_io_version)
}
 void ComputerInfo::set_safety_io_version(const char* value, size_t size) {
  
  safety_io_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.ComputerInfo.safety_io_version)
}
 ::std::string* ComputerInfo::mutable_safety_io_version() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.ComputerInfo.safety_io_version)
  return safety_io_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ComputerInfo::release_safety_io_version() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.ComputerInfo.safety_io_version)
  
  return safety_io_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ComputerInfo::set_allocated_safety_io_version(::std::string* safety_io_version) {
  if (safety_io_version != NULL) {
    
  } else {
    
  }
  safety_io_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), safety_io_version);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.ComputerInfo.safety_io_version)
}

// optional string network_server_software = 20;
void ComputerInfo::clear_network_server_software() {
  network_server_software_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ComputerInfo::network_server_software() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerInfo.network_server_software)
  return network_server_software_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ComputerInfo::set_network_server_software(const ::std::string& value) {
  
  network_server_software_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerInfo.network_server_software)
}
 void ComputerInfo::set_network_server_software(const char* value) {
  
  network_server_software_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.ComputerInfo.network_server_software)
}
 void ComputerInfo::set_network_server_software(const char* value, size_t size) {
  
  network_server_software_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.ComputerInfo.network_server_software)
}
 ::std::string* ComputerInfo::mutable_network_server_software() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.ComputerInfo.network_server_software)
  return network_server_software_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ComputerInfo::release_network_server_software() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.ComputerInfo.network_server_software)
  
  return network_server_software_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ComputerInfo::set_allocated_network_server_software(::std::string* network_server_software) {
  if (network_server_software != NULL) {
    
  } else {
    
  }
  network_server_software_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), network_server_software);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.ComputerInfo.network_server_software)
}

// optional string image_quality_test_software = 21;
void ComputerInfo::clear_image_quality_test_software() {
  image_quality_test_software_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ComputerInfo::image_quality_test_software() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerInfo.image_quality_test_software)
  return image_quality_test_software_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ComputerInfo::set_image_quality_test_software(const ::std::string& value) {
  
  image_quality_test_software_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerInfo.image_quality_test_software)
}
 void ComputerInfo::set_image_quality_test_software(const char* value) {
  
  image_quality_test_software_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.ComputerInfo.image_quality_test_software)
}
 void ComputerInfo::set_image_quality_test_software(const char* value, size_t size) {
  
  image_quality_test_software_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.ComputerInfo.image_quality_test_software)
}
 ::std::string* ComputerInfo::mutable_image_quality_test_software() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.ComputerInfo.image_quality_test_software)
  return image_quality_test_software_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ComputerInfo::release_image_quality_test_software() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.ComputerInfo.image_quality_test_software)
  
  return image_quality_test_software_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ComputerInfo::set_allocated_image_quality_test_software(::std::string* image_quality_test_software) {
  if (image_quality_test_software != NULL) {
    
  } else {
    
  }
  image_quality_test_software_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image_quality_test_software);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.ComputerInfo.image_quality_test_software)
}

// optional string service_diagnostic_services = 22;
void ComputerInfo::clear_service_diagnostic_services() {
  service_diagnostic_services_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ComputerInfo::service_diagnostic_services() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerInfo.service_diagnostic_services)
  return service_diagnostic_services_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ComputerInfo::set_service_diagnostic_services(const ::std::string& value) {
  
  service_diagnostic_services_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerInfo.service_diagnostic_services)
}
 void ComputerInfo::set_service_diagnostic_services(const char* value) {
  
  service_diagnostic_services_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.ComputerInfo.service_diagnostic_services)
}
 void ComputerInfo::set_service_diagnostic_services(const char* value, size_t size) {
  
  service_diagnostic_services_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.ComputerInfo.service_diagnostic_services)
}
 ::std::string* ComputerInfo::mutable_service_diagnostic_services() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.ComputerInfo.service_diagnostic_services)
  return service_diagnostic_services_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ComputerInfo::release_service_diagnostic_services() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.ComputerInfo.service_diagnostic_services)
  
  return service_diagnostic_services_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ComputerInfo::set_allocated_service_diagnostic_services(::std::string* service_diagnostic_services) {
  if (service_diagnostic_services != NULL) {
    
  } else {
    
  }
  service_diagnostic_services_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_diagnostic_services);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.ComputerInfo.service_diagnostic_services)
}

// optional string plc_firmware_version = 23;
void ComputerInfo::clear_plc_firmware_version() {
  plc_firmware_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ComputerInfo::plc_firmware_version() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerInfo.plc_firmware_version)
  return plc_firmware_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ComputerInfo::set_plc_firmware_version(const ::std::string& value) {
  
  plc_firmware_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerInfo.plc_firmware_version)
}
 void ComputerInfo::set_plc_firmware_version(const char* value) {
  
  plc_firmware_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.ComputerInfo.plc_firmware_version)
}
 void ComputerInfo::set_plc_firmware_version(const char* value, size_t size) {
  
  plc_firmware_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.ComputerInfo.plc_firmware_version)
}
 ::std::string* ComputerInfo::mutable_plc_firmware_version() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.ComputerInfo.plc_firmware_version)
  return plc_firmware_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ComputerInfo::release_plc_firmware_version() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.ComputerInfo.plc_firmware_version)
  
  return plc_firmware_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ComputerInfo::set_allocated_plc_firmware_version(::std::string* plc_firmware_version) {
  if (plc_firmware_version != NULL) {
    
  } else {
    
  }
  plc_firmware_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), plc_firmware_version);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.ComputerInfo.plc_firmware_version)
}

// optional string top_level_release = 24;
void ComputerInfo::clear_top_level_release() {
  top_level_release_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ComputerInfo::top_level_release() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerInfo.top_level_release)
  return top_level_release_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ComputerInfo::set_top_level_release(const ::std::string& value) {
  
  top_level_release_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerInfo.top_level_release)
}
 void ComputerInfo::set_top_level_release(const char* value) {
  
  top_level_release_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.ComputerInfo.top_level_release)
}
 void ComputerInfo::set_top_level_release(const char* value, size_t size) {
  
  top_level_release_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.ComputerInfo.top_level_release)
}
 ::std::string* ComputerInfo::mutable_top_level_release() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.ComputerInfo.top_level_release)
  return top_level_release_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ComputerInfo::release_top_level_release() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.ComputerInfo.top_level_release)
  
  return top_level_release_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ComputerInfo::set_allocated_top_level_release(::std::string* top_level_release) {
  if (top_level_release != NULL) {
    
  } else {
    
  }
  top_level_release_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), top_level_release);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.ComputerInfo.top_level_release)
}

// optional string bhs_software_version = 25;
void ComputerInfo::clear_bhs_software_version() {
  bhs_software_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ComputerInfo::bhs_software_version() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.ComputerInfo.bhs_software_version)
  return bhs_software_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ComputerInfo::set_bhs_software_version(const ::std::string& value) {
  
  bhs_software_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.ComputerInfo.bhs_software_version)
}
 void ComputerInfo::set_bhs_software_version(const char* value) {
  
  bhs_software_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.ComputerInfo.bhs_software_version)
}
 void ComputerInfo::set_bhs_software_version(const char* value, size_t size) {
  
  bhs_software_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.ComputerInfo.bhs_software_version)
}
 ::std::string* ComputerInfo::mutable_bhs_software_version() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.ComputerInfo.bhs_software_version)
  return bhs_software_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ComputerInfo::release_bhs_software_version() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.ComputerInfo.bhs_software_version)
  
  return bhs_software_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ComputerInfo::set_allocated_bhs_software_version(::std::string* bhs_software_version) {
  if (bhs_software_version != NULL) {
    
  } else {
    
  }
  bhs_software_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bhs_software_version);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.ComputerInfo.bhs_software_version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ancp00
}  // namespace analogic

// @@protoc_insertion_point(global_scope)
