// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/Fault.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/Fault.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace analogic {
namespace ancp00 {

namespace {

const ::google::protobuf::Descriptor* FaultData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FaultData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FaultData_FAULT_LEVEL_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GenericFault_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GenericFault_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GenericFault_FAULT_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* XrayControlFault_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  XrayControlFault_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* XrayControlFault_FAULT_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MotorControlFault_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MotorControlFault_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MotorControlFault_FAULT_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PowerlinkFault_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PowerlinkFault_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PowerlinkFault_FAULT_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SafetyIoFault_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SafetyIoFault_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SafetyIoFault_FAULT_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ReconFault_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReconFault_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ReconFault_FAULT_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DrbFault_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DrbFault_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DrbFault_FAULT_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NimFault_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NimFault_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NimFault_FAULT_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TempHumidityFault_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TempHumidityFault_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TempHumidityFault_FAULT_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BLMFault_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BLMFault_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BLMFault_FAULT_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BhsFault_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BhsFault_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BhsFault_FAULT_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CommFault_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommFault_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CommFault_FAULT_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* UpsFault_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpsFault_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* UpsFault_FAULT_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ComputerFault_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ComputerFault_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ComputerFault_FAULT_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* InterlockFault_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InterlockFault_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* InterlockFault_FAULT_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Fault_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Fault_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Fault_FAULT_ID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* FaultFilterCondition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FaultFilterCondition_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FaultFilterCondition_CONDITION_ID_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_2fFault_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_proto_2fFault_2eproto() {
  protobuf_AddDesc_proto_2fFault_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto/Fault.proto");
  GOOGLE_CHECK(file != NULL);
  FaultData_descriptor_ = file->message_type(0);
  static const int FaultData_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaultData, subsys_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaultData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaultData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaultData, epoch_time_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaultData, local_time_str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaultData, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaultData, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaultData, obj_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaultData, obj_data_),
  };
  FaultData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FaultData_descriptor_,
      FaultData::default_instance_,
      FaultData_offsets_,
      -1,
      -1,
      -1,
      sizeof(FaultData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaultData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaultData, _is_default_instance_));
  FaultData_FAULT_LEVEL_descriptor_ = FaultData_descriptor_->enum_type(0);
  GenericFault_descriptor_ = file->message_type(1);
  static const int GenericFault_offsets_[1] = {
  };
  GenericFault_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GenericFault_descriptor_,
      GenericFault::default_instance_,
      GenericFault_offsets_,
      -1,
      -1,
      -1,
      sizeof(GenericFault),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericFault, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenericFault, _is_default_instance_));
  GenericFault_FAULT_ID_descriptor_ = GenericFault_descriptor_->enum_type(0);
  XrayControlFault_descriptor_ = file->message_type(2);
  static const int XrayControlFault_offsets_[1] = {
  };
  XrayControlFault_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      XrayControlFault_descriptor_,
      XrayControlFault::default_instance_,
      XrayControlFault_offsets_,
      -1,
      -1,
      -1,
      sizeof(XrayControlFault),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XrayControlFault, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XrayControlFault, _is_default_instance_));
  XrayControlFault_FAULT_ID_descriptor_ = XrayControlFault_descriptor_->enum_type(0);
  MotorControlFault_descriptor_ = file->message_type(3);
  static const int MotorControlFault_offsets_[1] = {
  };
  MotorControlFault_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MotorControlFault_descriptor_,
      MotorControlFault::default_instance_,
      MotorControlFault_offsets_,
      -1,
      -1,
      -1,
      sizeof(MotorControlFault),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotorControlFault, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotorControlFault, _is_default_instance_));
  MotorControlFault_FAULT_ID_descriptor_ = MotorControlFault_descriptor_->enum_type(0);
  PowerlinkFault_descriptor_ = file->message_type(4);
  static const int PowerlinkFault_offsets_[1] = {
  };
  PowerlinkFault_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PowerlinkFault_descriptor_,
      PowerlinkFault::default_instance_,
      PowerlinkFault_offsets_,
      -1,
      -1,
      -1,
      sizeof(PowerlinkFault),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerlinkFault, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerlinkFault, _is_default_instance_));
  PowerlinkFault_FAULT_ID_descriptor_ = PowerlinkFault_descriptor_->enum_type(0);
  SafetyIoFault_descriptor_ = file->message_type(5);
  static const int SafetyIoFault_offsets_[1] = {
  };
  SafetyIoFault_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SafetyIoFault_descriptor_,
      SafetyIoFault::default_instance_,
      SafetyIoFault_offsets_,
      -1,
      -1,
      -1,
      sizeof(SafetyIoFault),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoFault, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafetyIoFault, _is_default_instance_));
  SafetyIoFault_FAULT_ID_descriptor_ = SafetyIoFault_descriptor_->enum_type(0);
  ReconFault_descriptor_ = file->message_type(6);
  static const int ReconFault_offsets_[1] = {
  };
  ReconFault_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReconFault_descriptor_,
      ReconFault::default_instance_,
      ReconFault_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReconFault),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconFault, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconFault, _is_default_instance_));
  ReconFault_FAULT_ID_descriptor_ = ReconFault_descriptor_->enum_type(0);
  DrbFault_descriptor_ = file->message_type(7);
  static const int DrbFault_offsets_[1] = {
  };
  DrbFault_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DrbFault_descriptor_,
      DrbFault::default_instance_,
      DrbFault_offsets_,
      -1,
      -1,
      -1,
      sizeof(DrbFault),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbFault, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrbFault, _is_default_instance_));
  DrbFault_FAULT_ID_descriptor_ = DrbFault_descriptor_->enum_type(0);
  NimFault_descriptor_ = file->message_type(8);
  static const int NimFault_offsets_[1] = {
  };
  NimFault_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NimFault_descriptor_,
      NimFault::default_instance_,
      NimFault_offsets_,
      -1,
      -1,
      -1,
      sizeof(NimFault),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NimFault, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NimFault, _is_default_instance_));
  NimFault_FAULT_ID_descriptor_ = NimFault_descriptor_->enum_type(0);
  TempHumidityFault_descriptor_ = file->message_type(9);
  static const int TempHumidityFault_offsets_[1] = {
  };
  TempHumidityFault_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TempHumidityFault_descriptor_,
      TempHumidityFault::default_instance_,
      TempHumidityFault_offsets_,
      -1,
      -1,
      -1,
      sizeof(TempHumidityFault),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TempHumidityFault, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TempHumidityFault, _is_default_instance_));
  TempHumidityFault_FAULT_ID_descriptor_ = TempHumidityFault_descriptor_->enum_type(0);
  BLMFault_descriptor_ = file->message_type(10);
  static const int BLMFault_offsets_[1] = {
  };
  BLMFault_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BLMFault_descriptor_,
      BLMFault::default_instance_,
      BLMFault_offsets_,
      -1,
      -1,
      -1,
      sizeof(BLMFault),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BLMFault, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BLMFault, _is_default_instance_));
  BLMFault_FAULT_ID_descriptor_ = BLMFault_descriptor_->enum_type(0);
  BhsFault_descriptor_ = file->message_type(11);
  static const int BhsFault_offsets_[1] = {
  };
  BhsFault_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BhsFault_descriptor_,
      BhsFault::default_instance_,
      BhsFault_offsets_,
      -1,
      -1,
      -1,
      sizeof(BhsFault),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BhsFault, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BhsFault, _is_default_instance_));
  BhsFault_FAULT_ID_descriptor_ = BhsFault_descriptor_->enum_type(0);
  CommFault_descriptor_ = file->message_type(12);
  static const int CommFault_offsets_[1] = {
  };
  CommFault_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CommFault_descriptor_,
      CommFault::default_instance_,
      CommFault_offsets_,
      -1,
      -1,
      -1,
      sizeof(CommFault),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommFault, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommFault, _is_default_instance_));
  CommFault_FAULT_ID_descriptor_ = CommFault_descriptor_->enum_type(0);
  UpsFault_descriptor_ = file->message_type(13);
  static const int UpsFault_offsets_[1] = {
  };
  UpsFault_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UpsFault_descriptor_,
      UpsFault::default_instance_,
      UpsFault_offsets_,
      -1,
      -1,
      -1,
      sizeof(UpsFault),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpsFault, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpsFault, _is_default_instance_));
  UpsFault_FAULT_ID_descriptor_ = UpsFault_descriptor_->enum_type(0);
  ComputerFault_descriptor_ = file->message_type(14);
  static const int ComputerFault_offsets_[1] = {
  };
  ComputerFault_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ComputerFault_descriptor_,
      ComputerFault::default_instance_,
      ComputerFault_offsets_,
      -1,
      -1,
      -1,
      sizeof(ComputerFault),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerFault, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputerFault, _is_default_instance_));
  ComputerFault_FAULT_ID_descriptor_ = ComputerFault_descriptor_->enum_type(0);
  InterlockFault_descriptor_ = file->message_type(15);
  static const int InterlockFault_offsets_[1] = {
  };
  InterlockFault_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InterlockFault_descriptor_,
      InterlockFault::default_instance_,
      InterlockFault_offsets_,
      -1,
      -1,
      -1,
      sizeof(InterlockFault),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterlockFault, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterlockFault, _is_default_instance_));
  InterlockFault_FAULT_ID_descriptor_ = InterlockFault_descriptor_->enum_type(0);
  Fault_descriptor_ = file->message_type(16);
  static const int Fault_offsets_[1] = {
  };
  Fault_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Fault_descriptor_,
      Fault::default_instance_,
      Fault_offsets_,
      -1,
      -1,
      -1,
      sizeof(Fault),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fault, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fault, _is_default_instance_));
  Fault_FAULT_ID_descriptor_ = Fault_descriptor_->enum_type(0);
  FaultFilterCondition_descriptor_ = file->message_type(17);
  static const int FaultFilterCondition_offsets_[1] = {
  };
  FaultFilterCondition_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FaultFilterCondition_descriptor_,
      FaultFilterCondition::default_instance_,
      FaultFilterCondition_offsets_,
      -1,
      -1,
      -1,
      sizeof(FaultFilterCondition),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaultFilterCondition, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaultFilterCondition, _is_default_instance_));
  FaultFilterCondition_CONDITION_ID_descriptor_ = FaultFilterCondition_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_2fFault_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FaultData_descriptor_, &FaultData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GenericFault_descriptor_, &GenericFault::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      XrayControlFault_descriptor_, &XrayControlFault::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MotorControlFault_descriptor_, &MotorControlFault::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PowerlinkFault_descriptor_, &PowerlinkFault::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SafetyIoFault_descriptor_, &SafetyIoFault::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReconFault_descriptor_, &ReconFault::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DrbFault_descriptor_, &DrbFault::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NimFault_descriptor_, &NimFault::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TempHumidityFault_descriptor_, &TempHumidityFault::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BLMFault_descriptor_, &BLMFault::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BhsFault_descriptor_, &BhsFault::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CommFault_descriptor_, &CommFault::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UpsFault_descriptor_, &UpsFault::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ComputerFault_descriptor_, &ComputerFault::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InterlockFault_descriptor_, &InterlockFault::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Fault_descriptor_, &Fault::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FaultFilterCondition_descriptor_, &FaultFilterCondition::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_2fFault_2eproto() {
  delete FaultData::default_instance_;
  delete FaultData_reflection_;
  delete GenericFault::default_instance_;
  delete GenericFault_reflection_;
  delete XrayControlFault::default_instance_;
  delete XrayControlFault_reflection_;
  delete MotorControlFault::default_instance_;
  delete MotorControlFault_reflection_;
  delete PowerlinkFault::default_instance_;
  delete PowerlinkFault_reflection_;
  delete SafetyIoFault::default_instance_;
  delete SafetyIoFault_reflection_;
  delete ReconFault::default_instance_;
  delete ReconFault_reflection_;
  delete DrbFault::default_instance_;
  delete DrbFault_reflection_;
  delete NimFault::default_instance_;
  delete NimFault_reflection_;
  delete TempHumidityFault::default_instance_;
  delete TempHumidityFault_reflection_;
  delete BLMFault::default_instance_;
  delete BLMFault_reflection_;
  delete BhsFault::default_instance_;
  delete BhsFault_reflection_;
  delete CommFault::default_instance_;
  delete CommFault_reflection_;
  delete UpsFault::default_instance_;
  delete UpsFault_reflection_;
  delete ComputerFault::default_instance_;
  delete ComputerFault_reflection_;
  delete InterlockFault::default_instance_;
  delete InterlockFault_reflection_;
  delete Fault::default_instance_;
  delete Fault_reflection_;
  delete FaultFilterCondition::default_instance_;
  delete FaultFilterCondition_reflection_;
}

void protobuf_AddDesc_proto_2fFault_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_proto_2fFault_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::analogic::ancp00::protobuf_AddDesc_proto_2fSubsystemIds_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021proto/Fault.proto\022\017analogic.ancp00\032\030pr"
    "oto/SubsystemIds.proto\"\327\002\n\tFaultData\0220\n\t"
    "subsys_id\030\001 \001(\0162\035.analogic.ancp00.SUBSYS"
    "TEM_ID\0225\n\005level\030\002 \001(\0162&.analogic.ancp00."
    "FaultData.FAULT_LEVEL\022\n\n\002id\030\003 \001(\004\022\025\n\repo"
    "ch_time_ms\030\004 \001(\004\022\026\n\016local_time_str\030\005 \001(\t"
    "\022\014\n\004text\030\006 \001(\t\022\013\n\003key\030\007 \001(\t\022\017\n\007obj_key\0302"
    " \001(\t\022\020\n\010obj_data\0303 \001(\t\"h\n\013FAULT_LEVEL\022\020\n"
    "\014FAULT_NOTICE\020\000\022\021\n\rFAULT_WARNING\020\001\022\017\n\013FA"
    "ULT_ERROR\020\002\022\017\n\013FAULT_FATAL\020\003\022\022\n\016FAULT_SH"
    "UTDOWN\020\004\"\357\004\n\014GenericFault\"\336\004\n\010FAULT_ID\022\014"
    "\n\010NOT_USED\020\000\022\025\n\020MSG_NOT_RECEIVED\020\350\007\022\021\n\014M"
    "SG_NOT_SENT\020\351\007\022\024\n\017MSG_REPLY_ERROR\020\352\007\022\026\n\021"
    "MSG_REPLY_UNKNOWN\020\353\007\022\025\n\020DEADLINE_REACHED"
    "\020\354\007\022\030\n\023EVENT_PUBLISH_FAULT\020\355\007\022\027\n\022PERSIST"
    "_DATA_FAULT\020\356\007\022\030\n\023RETRIEVE_DATA_FAULT\020\357\007"
    "\022\030\n\023INTERLOCK_VIOLATION\020\360\007\022\032\n\025UNKNOWN_CO"
    "MMAND_FAULT\020\361\007\022\024\n\017COMMAND_FAILURE\020\362\007\022\026\n\021"
    "RPC_START_FAILURE\020\363\007\022\035\n\030RPC_CANNOT_START"
    "_FAILURE\020\364\007\022\033\n\026CONTROL_SEQUENCE_ERROR\020\365\007"
    "\022\035\n\030CONTROL_SEQUENCE_TIMEOUT\020\366\007\022\023\n\016PROCE"
    "SS_EXITED\020\367\007\022\022\n\rESTOP_PRESSED\020\370\007\022\026\n\021SYST"
    "EM_COMM_ERROR\020\371\007\022\023\n\016ESTOP_RELEASED\020\372\007\022\036\n"
    "\031HARD_DRIVE_SPACE_EXCEEDED\020\373\007\022\023\n\016RAID_NO"
    "T_FOUND\020\374\007\022\034\n\027NETWORK_SPEED_THROTTLED\020\375\007"
    "\022 \n\033SOFTWARE_INTRUSION_DETECTED\020\376\007\"\306\003\n\020X"
    "rayControlFault\"\261\003\n\010FAULT_ID\022\014\n\010NOT_USED"
    "\020\000\022\027\n\022ANONYMOUS_IO_FAULT\020\320\017\022\016\n\tRCB_FAULT"
    "\020\321\017\022\025\n\020DISK_SPEED_FAULT\020\322\017\022\027\n\022XRAY_VOLTA"
    "GE_FAULT\020\323\017\022\027\n\022XRAY_CURRENT_FAULT\020\324\017\022\034\n\027"
    "POWERLINK_COMMAND_FAULT\020\325\017\022!\n\034XRAY_CMD_B"
    "ITS_MISMATCH_FAULT\020\326\017\022\023\n\016XRAY_ARC_FAULT\020"
    "\327\017\022\035\n\030XRAY_ANODE_OVER_KV_FAULT\020\330\017\022\037\n\032XRA"
    "Y_CATHODE_OVER_KV_FAULT\020\331\017\022\031\n\024INTERLOCK_"
    "OPEN_FAULT\020\332\017\022\023\n\016OVERTEMP_FAULT\020\333\017\022\027\n\022OV"
    "ER_CURRENT_FAULT\020\334\017\022\027\n\022OVER_VOLTAGE_FAUL"
    "T\020\335\017\022\026\n\021POWER_LIMIT_FAULT\020\336\017\022\025\n\020REGULATI"
    "ON_FAULT\020\337\017\"t\n\021MotorControlFault\"_\n\010FAUL"
    "T_ID\022\014\n\010NOT_USED\020\000\022\027\n\022ANONYMOUS_IO_FAULT"
    "\020\270\027\022\024\n\017SAFETY_IO_FAULT\020\271\027\022\026\n\021MOTOR_DRIVE"
    "_FAULT\020\272\027\"V\n\016PowerlinkFault\"D\n\010FAULT_ID\022"
    "\014\n\010NOT_USED\020\000\022\021\n\014STATUS_FAULT\020\240\037\022\027\n\022POWE"
    "RLINK_DISABLED\020\241\037\"\320\006\n\rSafetyIoFault\"\276\006\n\010"
    "FAULT_ID\022\014\n\010NOT_USED\020\000\022\035\n\030XRAY_FAULT_CLE"
    "AR_TIMEOUT\020\210\'\022\n\n\005ESTOP\020\211\'\022\021\n\014ACCESS_PANE"
    "L\020\212\'\022\016\n\tCONTACTOR\020\213\'\022\024\n\017ENVELOPE_SENSOR\020"
    "\214\'\022\027\n\022STANDSTILL_MONITOR\020\215\'\022\020\n\013SPEED_FAU"
    "LT\020\216\'\022\014\n\007UNKNOWN\020\217\'\022\033\n\026ENTRANCE_ESTOP_PR"
    "ESSED\020\220\'\022\027\n\022EXIT_ESTOP_PRESSED\020\221\'\022\032\n\025CON"
    "SOLE_ESTOP_PRESSED\020\222\'\022\031\n\024REMOTE_ESTOP_PR"
    "ESSED\020\223\'\022#\n\036MOTION_CONTACTORS_STATUS_FAU"
    "LT\020\224\'\022&\n!POWERLINK_CONTACTORS_STATUS_FAU"
    "LT\020\225\'\022/\n*ROTATIONAL_ENVELOPE_VIOLATION_S"
    "ENSOR_FAULT\020\226\'\022\035\n\030STANDSTILL_MONITOR_FAU"
    "LT\020\227\'\022\024\n\017OVERSPEED_FAULT\020\230\'\022 \n\033ACCESS_PA"
    "NELS_LOCKING_FAULT\020\231\'\022&\n!LEFT_ACCESS_PAN"
    "EL_INTERLOCK_FAULT\020\232\'\022,\n\'LEFT_ACCESS_PAN"
    "EL_SOLENOID_STATUS_FAULT\020\233\'\0223\n.LEFT_ACCE"
    "SS_PANEL_SOLENOID_LOCKED_STATUS_FAULT\020\234\'"
    "\022\'\n\"RIGHT_ACCESS_PANEL_INTERLOCK_FAULT\020\235"
    "\'\022-\n(RIGHT_ACCESS_PANEL_SOLENOID_STATUS_"
    "FAULT\020\236\'\0224\n/RIGHT_ACCESS_PANEL_SOLENOID_"
    "LOCKED_STATUS_FAULT\020\237\'\022\030\n\023MANUAL_RESET_N"
    "EEDED\020\240\'\022\022\n\rENCODER_FAULT\020\241\'\"\373\002\n\nReconFa"
    "ult\"\354\002\n\010FAULT_ID\022\014\n\010NOT_USED\020\000\022\024\n\017FILE_R"
    "EAD_ERROR\020\360.\022\027\n\022GENERAL_INIT_ERROR\020\361.\022\027\n"
    "\022GPU_LIB_INIT_ERROR\020\362.\022\025\n\020OFFSET_CAL_FAU"
    "LT\020\363.\022\022\n\rAIR_CAL_FAULT\020\364.\022\034\n\027NOT_READY_F"
    "OR_CMD_FAULT\020\365.\022!\n\034MANUAL_BAD_DETS_UPDAT"
    "E_FAULT\020\366.\022\026\n\021BUFFER_POOL_FAULT\020\367.\022\033\n\026VI"
    "EW_SUBSCRIBE_TIMEOUT\020\370.\022\033\n\026RECON_VIEW_BL"
    "OCK_FAULT\020\371.\022\027\n\022TOO_MANY_BAD_VIEWS\020\372.\022\026\n"
    "\021DYNAMIC_CAL_FAULT\020\373.\022\033\n\026DEFAULT_CAL_FIL"
    "E_FAULT\020\374.\";\n\010DrbFault\"/\n\010FAULT_ID\022\014\n\010NO"
    "T_USED\020\000\022\025\n\020DRB_NOTIFICATION\020\3306\"m\n\010NimFa"
    "ult\"a\n\010FAULT_ID\022\014\n\010NOT_USED\020\000\022\027\n\022OVER_MA"
    "X_BAG_QUEUE\020\300>\022\025\n\020INVALID_BAG_DATA\020\301>\022\027\n"
    "\022NETWORK_DISCONNECT\020\302>\"i\n\021TempHumidityFa"
    "ult\"T\n\010FAULT_ID\022\014\n\010NOT_USED\020\000\022\035\n\030HIGH_TE"
    "MPERATURE_WARNING\020\250F\022\033\n\026HIGH_TEMPERATURE"
    "_FAULT\020\251F\"\216\001\n\010BLMFault\"\201\001\n\010FAULT_ID\022\014\n\010N"
    "OT_USED\020\000\022\022\n\rUNK_BLM_ERROR\020\220N\022\024\n\017UNK_BLM"
    "_WARNING\020\221N\022\020\n\013OUT_OF_BAGS\020\222N\022\020\n\013LOW_ON_"
    "BAGS\020\223N\022\031\n\024BAG_PROCESSING_ERROR\020\224N\"\226\020\n\010B"
    "hsFault\"\211\020\n\010FAULT_ID\022\014\n\010NOT_USED\020\000\022 \n\033MO"
    "DBUS_PLC_CONNECTION_ERROR\020\370U\022*\n%MODBUS_E"
    "NTRANCE_RFID_CONNECTION_ERROR\020\371U\022&\n!MODB"
    "US_EXIT_RFID_CONNECTION_ERROR\020\372U\022\022\n\rBAG_"
    "JAM_ERROR\020\373U\022\026\n\021GENERAL_BHS_ERROR\020\374U\022\020\n\013"
    "BHS_NOT_RTR\020\375U\022\033\n\026ENTRANCE_BAG_JAM_ERROR"
    "\020\376U\022\027\n\022EXIT_BAG_JAM_ERROR\020\377U\022\031\n\024TUNNEL_B"
    "AG_JAM_ERROR\020\200V\022\036\n\031MOTOR_SLAVE_MISSING_Z"
    "ONE2\020\334V\022\037\n\032SENSOR_SLAVE_MISSING_ZONE2\020\335V"
    "\022\036\n\031MOTOR_POWER_FAILURE_ZONE2\020\336V\022\037\n\032SENS"
    "OR_POWER_FAILURE_ZONE2\020\337V\022\036\n\031MOTOR_UNDER"
    "_VOLTAGE_ZONE2\020\340V\022\035\n\030MOTOR_OVER_CURRENT_"
    "ZONE2\020\341V\022\036\n\031MOTOR_SLAVE_MISSING_ZONE3\020\342V"
    "\022\037\n\032SENSOR_SLAVE_MISSING_ZONE3\020\343V\022\036\n\031MOT"
    "OR_POWER_FAILURE_ZONE3\020\344V\022\037\n\032SENSOR_POWE"
    "R_FAILURE_ZONE3\020\345V\022\036\n\031MOTOR_UNDER_VOLTAG"
    "E_ZONE3\020\346V\022\035\n\030MOTOR_OVER_CURRENT_ZONE3\020\347"
    "V\022\037\n\032MOTOR_SLAVE_MISSING_ZONE3B\020\350V\022 \n\033SE"
    "NSOR_SLAVE_MISSING_ZONE3B\020\351V\022\037\n\032MOTOR_PO"
    "WER_FAILURE_ZONE3B\020\352V\022 \n\033SENSOR_POWER_FA"
    "ILURE_ZONE3B\020\353V\022\037\n\032MOTOR_UNDER_VOLTAGE_Z"
    "ONE3B\020\354V\022\036\n\031MOTOR_OVER_CURRENT_ZONE3B\020\355V"
    "\022\036\n\031MOTOR_SLAVE_MISSING_ZONE4\020\356V\022\037\n\032SENS"
    "OR_SLAVE_MISSING_ZONE4\020\357V\022\036\n\031MOTOR_POWER"
    "_FAILURE_ZONE4\020\360V\022\037\n\032SENSOR_POWER_FAILUR"
    "E_ZONE4\020\361V\022\036\n\031MOTOR_UNDER_VOLTAGE_ZONE4\020"
    "\362V\022\035\n\030MOTOR_OVER_CURRENT_ZONE4\020\363V\022\036\n\031MOT"
    "OR_SLAVE_MISSING_ZONE7\020\364V\022\037\n\032SENSOR_SLAV"
    "E_MISSING_ZONE7\020\365V\022\036\n\031MOTOR_POWER_FAILUR"
    "E_ZONE7\020\366V\022\037\n\032SENSOR_POWER_FAILURE_ZONE7"
    "\020\367V\022\036\n\031MOTOR_UNDER_VOLTAGE_ZONE7\020\370V\022\035\n\030M"
    "OTOR_OVER_CURRENT_ZONE7\020\371V\022\036\n\031MOTOR_SLAV"
    "E_MISSING_ZONE8\020\372V\022\037\n\032SENSOR_SLAVE_MISSI"
    "NG_ZONE8\020\373V\022\036\n\031MOTOR_POWER_FAILURE_ZONE8"
    "\020\374V\022\037\n\032SENSOR_POWER_FAILURE_ZONE8\020\375V\022\036\n\031"
    "MOTOR_UNDER_VOLTAGE_ZONE8\020\376V\022\035\n\030MOTOR_OV"
    "ER_CURRENT_ZONE8\020\377V\022!\n\034DIVERTER_SLAVE_MI"
    "SSING_ZONE5\020\200W\022\037\n\032ROLLER_SLAVE_MISSING_Z"
    "ONE5\020\201W\022\032\n\025ROLLER_AT_FAULT_ZONE5\020\202W\022\034\n\027D"
    "IVERTER_AT_FAULT_ZONE5\020\203W\022\037\n\032ROLLER_UNDE"
    "R_VOLTAGE_ZONE5\020\204W\022\036\n\031ROLLER_OVER_CURREN"
    "T_ZONE5\020\205W\022!\n\034DIVERTER_UNDER_VOLTAGE_ZON"
    "E5\020\206W\022 \n\033DIVERTER_OVER_CURRENT_ZONE5\020\207W\022"
    "!\n\034DIVERTER_SLAVE_MISSING_ZONE6\020\210W\022\037\n\032RO"
    "LLER_SLAVE_MISSING_ZONE6\020\211W\022\032\n\025ROLLER_AT"
    "_FAULT_ZONE6\020\212W\022\034\n\027DIVERTER_AT_FAULT_ZON"
    "E6\020\213W\022\037\n\032ROLLER_UNDER_VOLTAGE_ZONE6\020\214W\022\036"
    "\n\031ROLLER_OVER_CURRENT_ZONE6\020\215W\022!\n\034DIVERT"
    "ER_UNDER_VOLTAGE_ZONE6\020\216W\022 \n\033DIVERTER_OV"
    "ER_CURRENT_ZONE6\020\217W\022\031\n\024ASI_TERMINAL_MISS"
    "ING\020\220W\022\025\n\020ASI_MODULE_ERROR\020\221W\022$\n\037DIVERTE"
    "R_DIRECTION_CONFIG_ERROR\020\222W\"\373\003\n\tCommFaul"
    "t\"\355\003\n\010FAULT_ID\022\014\n\010NOT_USED\020\000\022\026\n\021SYSTEM_C"
    "OMM_ERROR\020\340]\022\025\n\017NETWORK_OFFLINE\020\301\251\007\022\020\n\013B"
    "HS_OFFLINE\020\342]\022\020\n\013SCC_OFFLINE\020\343]\022\020\n\013UPS_O"
    "FFLINE\020\344]\022\020\n\013DRB_OFFLINE\020\345]\022\026\n\021SAFETY_IO"
    "_OFFLINE\020\346]\022\020\n\013RCB_OFFLINE\020\347]\022\021\n\014XRAY_OF"
    "FLINE\020\350]\022\034\n\027SERIAL_SERVER_1_OFFLINE\020\351]\022\034"
    "\n\027SERIAL_SERVER_2_OFFLINE\020\352]\022\023\n\016GANTRY_O"
    "FFLINE\020\353]\022\025\n\020CONVEYOR_OFFLINE\020\354]\022!\n\034TEMP"
    "_HUMIDITY_SENSOR_OFFLINE\020\355]\022\026\n\021POWERLINK"
    "_OFFLINE\020\356]\022\022\n\rDCB_1_OFFLINE\020\357]\022\022\n\rDCB_2"
    "_OFFLINE\020\360]\022\022\n\rDCB_3_OFFLINE\020\361]\022\022\n\rDCB_4"
    "_OFFLINE\020\362]\022\022\n\rDCB_5_OFFLINE\020\363]\022\030\n\023POWER"
    "_METER_OFFLINE\020\364]\"\254\001\n\010UpsFault\"\237\001\n\010FAULT"
    "_ID\022\014\n\010NOT_USED\020\000\022\021\n\014UPS_BAD_COMM\020\310e\022\020\n\013"
    "UPS_NO_COMM\020\311e\022\031\n\024UPS_ON_BATTERY_POWER\020\312"
    "e\022\024\n\017UPS_LOW_BATTERY\020\313e\022\025\n\020UPSMON_NO_PAR"
    "ENT\020\314e\022\030\n\023UPS_REPLACE_BATTERY\020\315e\"\204\001\n\rCom"
    "puterFault\"s\n\010FAULT_ID\022\014\n\010NOT_USED\020\000\022\030\n\023"
    "COMPUTER_DRIVE_FULL\020\260m\022\036\n\031COMPUTER_RAID_"
    "NOT_MOUNTED\020\261m\022\037\n\032COMPUTER_NETWORK_LOW_S"
    "PEED\020\262m\"\255\002\n\016InterlockFault\"\232\002\n\010FAULT_ID\022"
    "\014\n\010NOT_USED\020\000\022)\n$CANNOT_REVERSE_CONVEYOR"
    "_IN_SCAN_MODE\020\230u\0226\n1XRAY_CONTROL_MOTION_"
    "KEYSWITCH_INTERLOCK_VIOLATION\020\231u\022%\n ACCE"
    "SS_PANEL_INTERLOCK_VIOLATION\020\232u\0228\n3GANTR"
    "Y_NOT_AT_SPEED_NOR_AT_HOME_INTERLOCK_VIO"
    "LATION\020\233u\022!\n\034CANNOT_MAXIMIXE_XRAYS_NOT_O"
    "N\020\234u\022\031\n\024OPERATOR_NOT_PRESENT\020\235u\"!\n\005Fault"
    "\"\030\n\010FAULT_ID\022\014\n\010NOT_USED\020\000\"\306\001\n\024FaultFilt"
    "erCondition\"\255\001\n\014CONDITION_ID\022\014\n\010NOT_USED"
    "\020\000\022\t\n\005ESTOP\020\001\022\026\n\022POWERLINK_DISABLED\020\002\022(\n"
    "$XRAY_MOTOR_POWER_KEY_SWITCH_DISABLED\020\004\022"
    "\034\n\030DOOR_INTERLOCK_VIOLATION\020\010\022\016\n\nRAID_FA"
    "ULT\020\020\022\024\n\020ON_BATTERY_POWER\020 b\006proto3", 6795);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/Fault.proto", &protobuf_RegisterTypes);
  FaultData::default_instance_ = new FaultData();
  GenericFault::default_instance_ = new GenericFault();
  XrayControlFault::default_instance_ = new XrayControlFault();
  MotorControlFault::default_instance_ = new MotorControlFault();
  PowerlinkFault::default_instance_ = new PowerlinkFault();
  SafetyIoFault::default_instance_ = new SafetyIoFault();
  ReconFault::default_instance_ = new ReconFault();
  DrbFault::default_instance_ = new DrbFault();
  NimFault::default_instance_ = new NimFault();
  TempHumidityFault::default_instance_ = new TempHumidityFault();
  BLMFault::default_instance_ = new BLMFault();
  BhsFault::default_instance_ = new BhsFault();
  CommFault::default_instance_ = new CommFault();
  UpsFault::default_instance_ = new UpsFault();
  ComputerFault::default_instance_ = new ComputerFault();
  InterlockFault::default_instance_ = new InterlockFault();
  Fault::default_instance_ = new Fault();
  FaultFilterCondition::default_instance_ = new FaultFilterCondition();
  FaultData::default_instance_->InitAsDefaultInstance();
  GenericFault::default_instance_->InitAsDefaultInstance();
  XrayControlFault::default_instance_->InitAsDefaultInstance();
  MotorControlFault::default_instance_->InitAsDefaultInstance();
  PowerlinkFault::default_instance_->InitAsDefaultInstance();
  SafetyIoFault::default_instance_->InitAsDefaultInstance();
  ReconFault::default_instance_->InitAsDefaultInstance();
  DrbFault::default_instance_->InitAsDefaultInstance();
  NimFault::default_instance_->InitAsDefaultInstance();
  TempHumidityFault::default_instance_->InitAsDefaultInstance();
  BLMFault::default_instance_->InitAsDefaultInstance();
  BhsFault::default_instance_->InitAsDefaultInstance();
  CommFault::default_instance_->InitAsDefaultInstance();
  UpsFault::default_instance_->InitAsDefaultInstance();
  ComputerFault::default_instance_->InitAsDefaultInstance();
  InterlockFault::default_instance_->InitAsDefaultInstance();
  Fault::default_instance_->InitAsDefaultInstance();
  FaultFilterCondition::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2fFault_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2fFault_2eproto {
  StaticDescriptorInitializer_proto_2fFault_2eproto() {
    protobuf_AddDesc_proto_2fFault_2eproto();
  }
} static_descriptor_initializer_proto_2fFault_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* FaultData_FAULT_LEVEL_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FaultData_FAULT_LEVEL_descriptor_;
}
bool FaultData_FAULT_LEVEL_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const FaultData_FAULT_LEVEL FaultData::FAULT_NOTICE;
const FaultData_FAULT_LEVEL FaultData::FAULT_WARNING;
const FaultData_FAULT_LEVEL FaultData::FAULT_ERROR;
const FaultData_FAULT_LEVEL FaultData::FAULT_FATAL;
const FaultData_FAULT_LEVEL FaultData::FAULT_SHUTDOWN;
const FaultData_FAULT_LEVEL FaultData::FAULT_LEVEL_MIN;
const FaultData_FAULT_LEVEL FaultData::FAULT_LEVEL_MAX;
const int FaultData::FAULT_LEVEL_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FaultData::kSubsysIdFieldNumber;
const int FaultData::kLevelFieldNumber;
const int FaultData::kIdFieldNumber;
const int FaultData::kEpochTimeMsFieldNumber;
const int FaultData::kLocalTimeStrFieldNumber;
const int FaultData::kTextFieldNumber;
const int FaultData::kKeyFieldNumber;
const int FaultData::kObjKeyFieldNumber;
const int FaultData::kObjDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FaultData::FaultData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analogic.ancp00.FaultData)
}

void FaultData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

FaultData::FaultData(const FaultData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analogic.ancp00.FaultData)
}

void FaultData::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  subsys_id_ = 0;
  level_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  epoch_time_ms_ = GOOGLE_ULONGLONG(0);
  local_time_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  obj_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  obj_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

FaultData::~FaultData() {
  // @@protoc_insertion_point(destructor:analogic.ancp00.FaultData)
  SharedDtor();
}

void FaultData::SharedDtor() {
  local_time_str_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  obj_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  obj_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void FaultData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FaultData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FaultData_descriptor_;
}

const FaultData& FaultData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fFault_2eproto();
  return *default_instance_;
}

FaultData* FaultData::default_instance_ = NULL;

FaultData* FaultData::New(::google::protobuf::Arena* arena) const {
  FaultData* n = new FaultData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FaultData::Clear() {
// @@protoc_insertion_point(message_clear_start:analogic.ancp00.FaultData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(FaultData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<FaultData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(subsys_id_, epoch_time_ms_);
  local_time_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  obj_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  obj_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool FaultData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analogic.ancp00.FaultData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .analogic.ancp00.SUBSYSTEM_ID subsys_id = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_subsys_id(static_cast< ::analogic::ancp00::SUBSYSTEM_ID >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional .analogic.ancp00.FaultData.FAULT_LEVEL level = 2;
      case 2: {
        if (tag == 16) {
         parse_level:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_level(static_cast< ::analogic::ancp00::FaultData_FAULT_LEVEL >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional uint64 id = 3;
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_epoch_time_ms;
        break;
      }

      // optional uint64 epoch_time_ms = 4;
      case 4: {
        if (tag == 32) {
         parse_epoch_time_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &epoch_time_ms_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_local_time_str;
        break;
      }

      // optional string local_time_str = 5;
      case 5: {
        if (tag == 42) {
         parse_local_time_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_local_time_str()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->local_time_str().data(), this->local_time_str().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.FaultData.local_time_str"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_text;
        break;
      }

      // optional string text = 6;
      case 6: {
        if (tag == 50) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.FaultData.text"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_key;
        break;
      }

      // optional string key = 7;
      case 7: {
        if (tag == 58) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.FaultData.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(402)) goto parse_obj_key;
        break;
      }

      // optional string obj_key = 50;
      case 50: {
        if (tag == 402) {
         parse_obj_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_obj_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->obj_key().data(), this->obj_key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.FaultData.obj_key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(410)) goto parse_obj_data;
        break;
      }

      // optional string obj_data = 51;
      case 51: {
        if (tag == 410) {
         parse_obj_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_obj_data()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->obj_data().data(), this->obj_data().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.FaultData.obj_data"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:analogic.ancp00.FaultData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analogic.ancp00.FaultData)
  return false;
#undef DO_
}

void FaultData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analogic.ancp00.FaultData)
  // optional .analogic.ancp00.SUBSYSTEM_ID subsys_id = 1;
  if (this->subsys_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->subsys_id(), output);
  }

  // optional .analogic.ancp00.FaultData.FAULT_LEVEL level = 2;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->level(), output);
  }

  // optional uint64 id = 3;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->id(), output);
  }

  // optional uint64 epoch_time_ms = 4;
  if (this->epoch_time_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->epoch_time_ms(), output);
  }

  // optional string local_time_str = 5;
  if (this->local_time_str().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->local_time_str().data(), this->local_time_str().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.FaultData.local_time_str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->local_time_str(), output);
  }

  // optional string text = 6;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.FaultData.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->text(), output);
  }

  // optional string key = 7;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.FaultData.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->key(), output);
  }

  // optional string obj_key = 50;
  if (this->obj_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->obj_key().data(), this->obj_key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.FaultData.obj_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      50, this->obj_key(), output);
  }

  // optional string obj_data = 51;
  if (this->obj_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->obj_data().data(), this->obj_data().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.FaultData.obj_data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      51, this->obj_data(), output);
  }

  // @@protoc_insertion_point(serialize_end:analogic.ancp00.FaultData)
}

::google::protobuf::uint8* FaultData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analogic.ancp00.FaultData)
  // optional .analogic.ancp00.SUBSYSTEM_ID subsys_id = 1;
  if (this->subsys_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->subsys_id(), target);
  }

  // optional .analogic.ancp00.FaultData.FAULT_LEVEL level = 2;
  if (this->level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->level(), target);
  }

  // optional uint64 id = 3;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->id(), target);
  }

  // optional uint64 epoch_time_ms = 4;
  if (this->epoch_time_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->epoch_time_ms(), target);
  }

  // optional string local_time_str = 5;
  if (this->local_time_str().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->local_time_str().data(), this->local_time_str().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.FaultData.local_time_str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->local_time_str(), target);
  }

  // optional string text = 6;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.FaultData.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->text(), target);
  }

  // optional string key = 7;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.FaultData.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->key(), target);
  }

  // optional string obj_key = 50;
  if (this->obj_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->obj_key().data(), this->obj_key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.FaultData.obj_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        50, this->obj_key(), target);
  }

  // optional string obj_data = 51;
  if (this->obj_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->obj_data().data(), this->obj_data().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.FaultData.obj_data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        51, this->obj_data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:analogic.ancp00.FaultData)
  return target;
}

int FaultData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:analogic.ancp00.FaultData)
  int total_size = 0;

  // optional .analogic.ancp00.SUBSYSTEM_ID subsys_id = 1;
  if (this->subsys_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->subsys_id());
  }

  // optional .analogic.ancp00.FaultData.FAULT_LEVEL level = 2;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->level());
  }

  // optional uint64 id = 3;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  // optional uint64 epoch_time_ms = 4;
  if (this->epoch_time_ms() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->epoch_time_ms());
  }

  // optional string local_time_str = 5;
  if (this->local_time_str().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->local_time_str());
  }

  // optional string text = 6;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }

  // optional string key = 7;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // optional string obj_key = 50;
  if (this->obj_key().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->obj_key());
  }

  // optional string obj_data = 51;
  if (this->obj_data().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->obj_data());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FaultData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analogic.ancp00.FaultData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FaultData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FaultData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analogic.ancp00.FaultData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analogic.ancp00.FaultData)
    MergeFrom(*source);
  }
}

void FaultData::MergeFrom(const FaultData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analogic.ancp00.FaultData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.subsys_id() != 0) {
    set_subsys_id(from.subsys_id());
  }
  if (from.level() != 0) {
    set_level(from.level());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.epoch_time_ms() != 0) {
    set_epoch_time_ms(from.epoch_time_ms());
  }
  if (from.local_time_str().size() > 0) {

    local_time_str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.local_time_str_);
  }
  if (from.text().size() > 0) {

    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.obj_key().size() > 0) {

    obj_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.obj_key_);
  }
  if (from.obj_data().size() > 0) {

    obj_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.obj_data_);
  }
}

void FaultData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analogic.ancp00.FaultData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaultData::CopyFrom(const FaultData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analogic.ancp00.FaultData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaultData::IsInitialized() const {

  return true;
}

void FaultData::Swap(FaultData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FaultData::InternalSwap(FaultData* other) {
  std::swap(subsys_id_, other->subsys_id_);
  std::swap(level_, other->level_);
  std::swap(id_, other->id_);
  std::swap(epoch_time_ms_, other->epoch_time_ms_);
  local_time_str_.Swap(&other->local_time_str_);
  text_.Swap(&other->text_);
  key_.Swap(&other->key_);
  obj_key_.Swap(&other->obj_key_);
  obj_data_.Swap(&other->obj_data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FaultData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FaultData_descriptor_;
  metadata.reflection = FaultData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FaultData

// optional .analogic.ancp00.SUBSYSTEM_ID subsys_id = 1;
void FaultData::clear_subsys_id() {
  subsys_id_ = 0;
}
 ::analogic::ancp00::SUBSYSTEM_ID FaultData::subsys_id() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.FaultData.subsys_id)
  return static_cast< ::analogic::ancp00::SUBSYSTEM_ID >(subsys_id_);
}
 void FaultData::set_subsys_id(::analogic::ancp00::SUBSYSTEM_ID value) {
  
  subsys_id_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.FaultData.subsys_id)
}

// optional .analogic.ancp00.FaultData.FAULT_LEVEL level = 2;
void FaultData::clear_level() {
  level_ = 0;
}
 ::analogic::ancp00::FaultData_FAULT_LEVEL FaultData::level() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.FaultData.level)
  return static_cast< ::analogic::ancp00::FaultData_FAULT_LEVEL >(level_);
}
 void FaultData::set_level(::analogic::ancp00::FaultData_FAULT_LEVEL value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.FaultData.level)
}

// optional uint64 id = 3;
void FaultData::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 FaultData::id() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.FaultData.id)
  return id_;
}
 void FaultData::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.FaultData.id)
}

// optional uint64 epoch_time_ms = 4;
void FaultData::clear_epoch_time_ms() {
  epoch_time_ms_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 FaultData::epoch_time_ms() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.FaultData.epoch_time_ms)
  return epoch_time_ms_;
}
 void FaultData::set_epoch_time_ms(::google::protobuf::uint64 value) {
  
  epoch_time_ms_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.FaultData.epoch_time_ms)
}

// optional string local_time_str = 5;
void FaultData::clear_local_time_str() {
  local_time_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& FaultData::local_time_str() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.FaultData.local_time_str)
  return local_time_str_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FaultData::set_local_time_str(const ::std::string& value) {
  
  local_time_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.FaultData.local_time_str)
}
 void FaultData::set_local_time_str(const char* value) {
  
  local_time_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.FaultData.local_time_str)
}
 void FaultData::set_local_time_str(const char* value, size_t size) {
  
  local_time_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.FaultData.local_time_str)
}
 ::std::string* FaultData::mutable_local_time_str() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.FaultData.local_time_str)
  return local_time_str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FaultData::release_local_time_str() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.FaultData.local_time_str)
  
  return local_time_str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FaultData::set_allocated_local_time_str(::std::string* local_time_str) {
  if (local_time_str != NULL) {
    
  } else {
    
  }
  local_time_str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), local_time_str);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.FaultData.local_time_str)
}

// optional string text = 6;
void FaultData::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& FaultData::text() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.FaultData.text)
  return text_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FaultData::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.FaultData.text)
}
 void FaultData::set_text(const char* value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.FaultData.text)
}
 void FaultData::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.FaultData.text)
}
 ::std::string* FaultData::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.FaultData.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FaultData::release_text() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.FaultData.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FaultData::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.FaultData.text)
}

// optional string key = 7;
void FaultData::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& FaultData::key() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.FaultData.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FaultData::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.FaultData.key)
}
 void FaultData::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.FaultData.key)
}
 void FaultData::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.FaultData.key)
}
 ::std::string* FaultData::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.FaultData.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FaultData::release_key() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.FaultData.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FaultData::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.FaultData.key)
}

// optional string obj_key = 50;
void FaultData::clear_obj_key() {
  obj_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& FaultData::obj_key() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.FaultData.obj_key)
  return obj_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FaultData::set_obj_key(const ::std::string& value) {
  
  obj_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.FaultData.obj_key)
}
 void FaultData::set_obj_key(const char* value) {
  
  obj_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.FaultData.obj_key)
}
 void FaultData::set_obj_key(const char* value, size_t size) {
  
  obj_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.FaultData.obj_key)
}
 ::std::string* FaultData::mutable_obj_key() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.FaultData.obj_key)
  return obj_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FaultData::release_obj_key() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.FaultData.obj_key)
  
  return obj_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FaultData::set_allocated_obj_key(::std::string* obj_key) {
  if (obj_key != NULL) {
    
  } else {
    
  }
  obj_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), obj_key);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.FaultData.obj_key)
}

// optional string obj_data = 51;
void FaultData::clear_obj_data() {
  obj_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& FaultData::obj_data() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.FaultData.obj_data)
  return obj_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FaultData::set_obj_data(const ::std::string& value) {
  
  obj_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.FaultData.obj_data)
}
 void FaultData::set_obj_data(const char* value) {
  
  obj_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.FaultData.obj_data)
}
 void FaultData::set_obj_data(const char* value, size_t size) {
  
  obj_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.FaultData.obj_data)
}
 ::std::string* FaultData::mutable_obj_data() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.FaultData.obj_data)
  return obj_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FaultData::release_obj_data() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.FaultData.obj_data)
  
  return obj_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FaultData::set_allocated_obj_data(::std::string* obj_data) {
  if (obj_data != NULL) {
    
  } else {
    
  }
  obj_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), obj_data);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.FaultData.obj_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* GenericFault_FAULT_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GenericFault_FAULT_ID_descriptor_;
}
bool GenericFault_FAULT_ID_IsValid(int value) {
  switch(value) {
    case 0:
    case 1000:
    case 1001:
    case 1002:
    case 1003:
    case 1004:
    case 1005:
    case 1006:
    case 1007:
    case 1008:
    case 1009:
    case 1010:
    case 1011:
    case 1012:
    case 1013:
    case 1014:
    case 1015:
    case 1016:
    case 1017:
    case 1018:
    case 1019:
    case 1020:
    case 1021:
    case 1022:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const GenericFault_FAULT_ID GenericFault::NOT_USED;
const GenericFault_FAULT_ID GenericFault::MSG_NOT_RECEIVED;
const GenericFault_FAULT_ID GenericFault::MSG_NOT_SENT;
const GenericFault_FAULT_ID GenericFault::MSG_REPLY_ERROR;
const GenericFault_FAULT_ID GenericFault::MSG_REPLY_UNKNOWN;
const GenericFault_FAULT_ID GenericFault::DEADLINE_REACHED;
const GenericFault_FAULT_ID GenericFault::EVENT_PUBLISH_FAULT;
const GenericFault_FAULT_ID GenericFault::PERSIST_DATA_FAULT;
const GenericFault_FAULT_ID GenericFault::RETRIEVE_DATA_FAULT;
const GenericFault_FAULT_ID GenericFault::INTERLOCK_VIOLATION;
const GenericFault_FAULT_ID GenericFault::UNKNOWN_COMMAND_FAULT;
const GenericFault_FAULT_ID GenericFault::COMMAND_FAILURE;
const GenericFault_FAULT_ID GenericFault::RPC_START_FAILURE;
const GenericFault_FAULT_ID GenericFault::RPC_CANNOT_START_FAILURE;
const GenericFault_FAULT_ID GenericFault::CONTROL_SEQUENCE_ERROR;
const GenericFault_FAULT_ID GenericFault::CONTROL_SEQUENCE_TIMEOUT;
const GenericFault_FAULT_ID GenericFault::PROCESS_EXITED;
const GenericFault_FAULT_ID GenericFault::ESTOP_PRESSED;
const GenericFault_FAULT_ID GenericFault::SYSTEM_COMM_ERROR;
const GenericFault_FAULT_ID GenericFault::ESTOP_RELEASED;
const GenericFault_FAULT_ID GenericFault::HARD_DRIVE_SPACE_EXCEEDED;
const GenericFault_FAULT_ID GenericFault::RAID_NOT_FOUND;
const GenericFault_FAULT_ID GenericFault::NETWORK_SPEED_THROTTLED;
const GenericFault_FAULT_ID GenericFault::SOFTWARE_INTRUSION_DETECTED;
const GenericFault_FAULT_ID GenericFault::FAULT_ID_MIN;
const GenericFault_FAULT_ID GenericFault::FAULT_ID_MAX;
const int GenericFault::FAULT_ID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GenericFault::GenericFault()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analogic.ancp00.GenericFault)
}

void GenericFault::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GenericFault::GenericFault(const GenericFault& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analogic.ancp00.GenericFault)
}

void GenericFault::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

GenericFault::~GenericFault() {
  // @@protoc_insertion_point(destructor:analogic.ancp00.GenericFault)
  SharedDtor();
}

void GenericFault::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GenericFault::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GenericFault::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GenericFault_descriptor_;
}

const GenericFault& GenericFault::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fFault_2eproto();
  return *default_instance_;
}

GenericFault* GenericFault::default_instance_ = NULL;

GenericFault* GenericFault::New(::google::protobuf::Arena* arena) const {
  GenericFault* n = new GenericFault;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GenericFault::Clear() {
// @@protoc_insertion_point(message_clear_start:analogic.ancp00.GenericFault)
}

bool GenericFault::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analogic.ancp00.GenericFault)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:analogic.ancp00.GenericFault)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analogic.ancp00.GenericFault)
  return false;
#undef DO_
}

void GenericFault::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analogic.ancp00.GenericFault)
  // @@protoc_insertion_point(serialize_end:analogic.ancp00.GenericFault)
}

::google::protobuf::uint8* GenericFault::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analogic.ancp00.GenericFault)
  // @@protoc_insertion_point(serialize_to_array_end:analogic.ancp00.GenericFault)
  return target;
}

int GenericFault::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:analogic.ancp00.GenericFault)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GenericFault::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analogic.ancp00.GenericFault)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GenericFault* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GenericFault>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analogic.ancp00.GenericFault)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analogic.ancp00.GenericFault)
    MergeFrom(*source);
  }
}

void GenericFault::MergeFrom(const GenericFault& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analogic.ancp00.GenericFault)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void GenericFault::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analogic.ancp00.GenericFault)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenericFault::CopyFrom(const GenericFault& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analogic.ancp00.GenericFault)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenericFault::IsInitialized() const {

  return true;
}

void GenericFault::Swap(GenericFault* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GenericFault::InternalSwap(GenericFault* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GenericFault::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GenericFault_descriptor_;
  metadata.reflection = GenericFault_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GenericFault

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* XrayControlFault_FAULT_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return XrayControlFault_FAULT_ID_descriptor_;
}
bool XrayControlFault_FAULT_ID_IsValid(int value) {
  switch(value) {
    case 0:
    case 2000:
    case 2001:
    case 2002:
    case 2003:
    case 2004:
    case 2005:
    case 2006:
    case 2007:
    case 2008:
    case 2009:
    case 2010:
    case 2011:
    case 2012:
    case 2013:
    case 2014:
    case 2015:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const XrayControlFault_FAULT_ID XrayControlFault::NOT_USED;
const XrayControlFault_FAULT_ID XrayControlFault::ANONYMOUS_IO_FAULT;
const XrayControlFault_FAULT_ID XrayControlFault::RCB_FAULT;
const XrayControlFault_FAULT_ID XrayControlFault::DISK_SPEED_FAULT;
const XrayControlFault_FAULT_ID XrayControlFault::XRAY_VOLTAGE_FAULT;
const XrayControlFault_FAULT_ID XrayControlFault::XRAY_CURRENT_FAULT;
const XrayControlFault_FAULT_ID XrayControlFault::POWERLINK_COMMAND_FAULT;
const XrayControlFault_FAULT_ID XrayControlFault::XRAY_CMD_BITS_MISMATCH_FAULT;
const XrayControlFault_FAULT_ID XrayControlFault::XRAY_ARC_FAULT;
const XrayControlFault_FAULT_ID XrayControlFault::XRAY_ANODE_OVER_KV_FAULT;
const XrayControlFault_FAULT_ID XrayControlFault::XRAY_CATHODE_OVER_KV_FAULT;
const XrayControlFault_FAULT_ID XrayControlFault::INTERLOCK_OPEN_FAULT;
const XrayControlFault_FAULT_ID XrayControlFault::OVERTEMP_FAULT;
const XrayControlFault_FAULT_ID XrayControlFault::OVER_CURRENT_FAULT;
const XrayControlFault_FAULT_ID XrayControlFault::OVER_VOLTAGE_FAULT;
const XrayControlFault_FAULT_ID XrayControlFault::POWER_LIMIT_FAULT;
const XrayControlFault_FAULT_ID XrayControlFault::REGULATION_FAULT;
const XrayControlFault_FAULT_ID XrayControlFault::FAULT_ID_MIN;
const XrayControlFault_FAULT_ID XrayControlFault::FAULT_ID_MAX;
const int XrayControlFault::FAULT_ID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XrayControlFault::XrayControlFault()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analogic.ancp00.XrayControlFault)
}

void XrayControlFault::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

XrayControlFault::XrayControlFault(const XrayControlFault& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analogic.ancp00.XrayControlFault)
}

void XrayControlFault::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

XrayControlFault::~XrayControlFault() {
  // @@protoc_insertion_point(destructor:analogic.ancp00.XrayControlFault)
  SharedDtor();
}

void XrayControlFault::SharedDtor() {
  if (this != default_instance_) {
  }
}

void XrayControlFault::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XrayControlFault::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return XrayControlFault_descriptor_;
}

const XrayControlFault& XrayControlFault::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fFault_2eproto();
  return *default_instance_;
}

XrayControlFault* XrayControlFault::default_instance_ = NULL;

XrayControlFault* XrayControlFault::New(::google::protobuf::Arena* arena) const {
  XrayControlFault* n = new XrayControlFault;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void XrayControlFault::Clear() {
// @@protoc_insertion_point(message_clear_start:analogic.ancp00.XrayControlFault)
}

bool XrayControlFault::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analogic.ancp00.XrayControlFault)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:analogic.ancp00.XrayControlFault)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analogic.ancp00.XrayControlFault)
  return false;
#undef DO_
}

void XrayControlFault::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analogic.ancp00.XrayControlFault)
  // @@protoc_insertion_point(serialize_end:analogic.ancp00.XrayControlFault)
}

::google::protobuf::uint8* XrayControlFault::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analogic.ancp00.XrayControlFault)
  // @@protoc_insertion_point(serialize_to_array_end:analogic.ancp00.XrayControlFault)
  return target;
}

int XrayControlFault::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:analogic.ancp00.XrayControlFault)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XrayControlFault::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analogic.ancp00.XrayControlFault)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const XrayControlFault* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const XrayControlFault>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analogic.ancp00.XrayControlFault)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analogic.ancp00.XrayControlFault)
    MergeFrom(*source);
  }
}

void XrayControlFault::MergeFrom(const XrayControlFault& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analogic.ancp00.XrayControlFault)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void XrayControlFault::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analogic.ancp00.XrayControlFault)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XrayControlFault::CopyFrom(const XrayControlFault& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analogic.ancp00.XrayControlFault)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XrayControlFault::IsInitialized() const {

  return true;
}

void XrayControlFault::Swap(XrayControlFault* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XrayControlFault::InternalSwap(XrayControlFault* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata XrayControlFault::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = XrayControlFault_descriptor_;
  metadata.reflection = XrayControlFault_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// XrayControlFault

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* MotorControlFault_FAULT_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MotorControlFault_FAULT_ID_descriptor_;
}
bool MotorControlFault_FAULT_ID_IsValid(int value) {
  switch(value) {
    case 0:
    case 3000:
    case 3001:
    case 3002:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MotorControlFault_FAULT_ID MotorControlFault::NOT_USED;
const MotorControlFault_FAULT_ID MotorControlFault::ANONYMOUS_IO_FAULT;
const MotorControlFault_FAULT_ID MotorControlFault::SAFETY_IO_FAULT;
const MotorControlFault_FAULT_ID MotorControlFault::MOTOR_DRIVE_FAULT;
const MotorControlFault_FAULT_ID MotorControlFault::FAULT_ID_MIN;
const MotorControlFault_FAULT_ID MotorControlFault::FAULT_ID_MAX;
const int MotorControlFault::FAULT_ID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MotorControlFault::MotorControlFault()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analogic.ancp00.MotorControlFault)
}

void MotorControlFault::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MotorControlFault::MotorControlFault(const MotorControlFault& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analogic.ancp00.MotorControlFault)
}

void MotorControlFault::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

MotorControlFault::~MotorControlFault() {
  // @@protoc_insertion_point(destructor:analogic.ancp00.MotorControlFault)
  SharedDtor();
}

void MotorControlFault::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MotorControlFault::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MotorControlFault::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MotorControlFault_descriptor_;
}

const MotorControlFault& MotorControlFault::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fFault_2eproto();
  return *default_instance_;
}

MotorControlFault* MotorControlFault::default_instance_ = NULL;

MotorControlFault* MotorControlFault::New(::google::protobuf::Arena* arena) const {
  MotorControlFault* n = new MotorControlFault;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MotorControlFault::Clear() {
// @@protoc_insertion_point(message_clear_start:analogic.ancp00.MotorControlFault)
}

bool MotorControlFault::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analogic.ancp00.MotorControlFault)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:analogic.ancp00.MotorControlFault)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analogic.ancp00.MotorControlFault)
  return false;
#undef DO_
}

void MotorControlFault::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analogic.ancp00.MotorControlFault)
  // @@protoc_insertion_point(serialize_end:analogic.ancp00.MotorControlFault)
}

::google::protobuf::uint8* MotorControlFault::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analogic.ancp00.MotorControlFault)
  // @@protoc_insertion_point(serialize_to_array_end:analogic.ancp00.MotorControlFault)
  return target;
}

int MotorControlFault::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:analogic.ancp00.MotorControlFault)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MotorControlFault::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analogic.ancp00.MotorControlFault)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MotorControlFault* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MotorControlFault>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analogic.ancp00.MotorControlFault)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analogic.ancp00.MotorControlFault)
    MergeFrom(*source);
  }
}

void MotorControlFault::MergeFrom(const MotorControlFault& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analogic.ancp00.MotorControlFault)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void MotorControlFault::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analogic.ancp00.MotorControlFault)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MotorControlFault::CopyFrom(const MotorControlFault& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analogic.ancp00.MotorControlFault)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MotorControlFault::IsInitialized() const {

  return true;
}

void MotorControlFault::Swap(MotorControlFault* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MotorControlFault::InternalSwap(MotorControlFault* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MotorControlFault::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MotorControlFault_descriptor_;
  metadata.reflection = MotorControlFault_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MotorControlFault

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* PowerlinkFault_FAULT_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PowerlinkFault_FAULT_ID_descriptor_;
}
bool PowerlinkFault_FAULT_ID_IsValid(int value) {
  switch(value) {
    case 0:
    case 4000:
    case 4001:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PowerlinkFault_FAULT_ID PowerlinkFault::NOT_USED;
const PowerlinkFault_FAULT_ID PowerlinkFault::STATUS_FAULT;
const PowerlinkFault_FAULT_ID PowerlinkFault::POWERLINK_DISABLED;
const PowerlinkFault_FAULT_ID PowerlinkFault::FAULT_ID_MIN;
const PowerlinkFault_FAULT_ID PowerlinkFault::FAULT_ID_MAX;
const int PowerlinkFault::FAULT_ID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PowerlinkFault::PowerlinkFault()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analogic.ancp00.PowerlinkFault)
}

void PowerlinkFault::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PowerlinkFault::PowerlinkFault(const PowerlinkFault& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analogic.ancp00.PowerlinkFault)
}

void PowerlinkFault::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

PowerlinkFault::~PowerlinkFault() {
  // @@protoc_insertion_point(destructor:analogic.ancp00.PowerlinkFault)
  SharedDtor();
}

void PowerlinkFault::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PowerlinkFault::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PowerlinkFault::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PowerlinkFault_descriptor_;
}

const PowerlinkFault& PowerlinkFault::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fFault_2eproto();
  return *default_instance_;
}

PowerlinkFault* PowerlinkFault::default_instance_ = NULL;

PowerlinkFault* PowerlinkFault::New(::google::protobuf::Arena* arena) const {
  PowerlinkFault* n = new PowerlinkFault;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PowerlinkFault::Clear() {
// @@protoc_insertion_point(message_clear_start:analogic.ancp00.PowerlinkFault)
}

bool PowerlinkFault::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analogic.ancp00.PowerlinkFault)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:analogic.ancp00.PowerlinkFault)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analogic.ancp00.PowerlinkFault)
  return false;
#undef DO_
}

void PowerlinkFault::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analogic.ancp00.PowerlinkFault)
  // @@protoc_insertion_point(serialize_end:analogic.ancp00.PowerlinkFault)
}

::google::protobuf::uint8* PowerlinkFault::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analogic.ancp00.PowerlinkFault)
  // @@protoc_insertion_point(serialize_to_array_end:analogic.ancp00.PowerlinkFault)
  return target;
}

int PowerlinkFault::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:analogic.ancp00.PowerlinkFault)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PowerlinkFault::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analogic.ancp00.PowerlinkFault)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PowerlinkFault* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PowerlinkFault>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analogic.ancp00.PowerlinkFault)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analogic.ancp00.PowerlinkFault)
    MergeFrom(*source);
  }
}

void PowerlinkFault::MergeFrom(const PowerlinkFault& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analogic.ancp00.PowerlinkFault)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void PowerlinkFault::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analogic.ancp00.PowerlinkFault)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PowerlinkFault::CopyFrom(const PowerlinkFault& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analogic.ancp00.PowerlinkFault)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PowerlinkFault::IsInitialized() const {

  return true;
}

void PowerlinkFault::Swap(PowerlinkFault* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PowerlinkFault::InternalSwap(PowerlinkFault* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PowerlinkFault::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PowerlinkFault_descriptor_;
  metadata.reflection = PowerlinkFault_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PowerlinkFault

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* SafetyIoFault_FAULT_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SafetyIoFault_FAULT_ID_descriptor_;
}
bool SafetyIoFault_FAULT_ID_IsValid(int value) {
  switch(value) {
    case 0:
    case 5000:
    case 5001:
    case 5002:
    case 5003:
    case 5004:
    case 5005:
    case 5006:
    case 5007:
    case 5008:
    case 5009:
    case 5010:
    case 5011:
    case 5012:
    case 5013:
    case 5014:
    case 5015:
    case 5016:
    case 5017:
    case 5018:
    case 5019:
    case 5020:
    case 5021:
    case 5022:
    case 5023:
    case 5024:
    case 5025:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SafetyIoFault_FAULT_ID SafetyIoFault::NOT_USED;
const SafetyIoFault_FAULT_ID SafetyIoFault::XRAY_FAULT_CLEAR_TIMEOUT;
const SafetyIoFault_FAULT_ID SafetyIoFault::ESTOP;
const SafetyIoFault_FAULT_ID SafetyIoFault::ACCESS_PANEL;
const SafetyIoFault_FAULT_ID SafetyIoFault::CONTACTOR;
const SafetyIoFault_FAULT_ID SafetyIoFault::ENVELOPE_SENSOR;
const SafetyIoFault_FAULT_ID SafetyIoFault::STANDSTILL_MONITOR;
const SafetyIoFault_FAULT_ID SafetyIoFault::SPEED_FAULT;
const SafetyIoFault_FAULT_ID SafetyIoFault::UNKNOWN;
const SafetyIoFault_FAULT_ID SafetyIoFault::ENTRANCE_ESTOP_PRESSED;
const SafetyIoFault_FAULT_ID SafetyIoFault::EXIT_ESTOP_PRESSED;
const SafetyIoFault_FAULT_ID SafetyIoFault::CONSOLE_ESTOP_PRESSED;
const SafetyIoFault_FAULT_ID SafetyIoFault::REMOTE_ESTOP_PRESSED;
const SafetyIoFault_FAULT_ID SafetyIoFault::MOTION_CONTACTORS_STATUS_FAULT;
const SafetyIoFault_FAULT_ID SafetyIoFault::POWERLINK_CONTACTORS_STATUS_FAULT;
const SafetyIoFault_FAULT_ID SafetyIoFault::ROTATIONAL_ENVELOPE_VIOLATION_SENSOR_FAULT;
const SafetyIoFault_FAULT_ID SafetyIoFault::STANDSTILL_MONITOR_FAULT;
const SafetyIoFault_FAULT_ID SafetyIoFault::OVERSPEED_FAULT;
const SafetyIoFault_FAULT_ID SafetyIoFault::ACCESS_PANELS_LOCKING_FAULT;
const SafetyIoFault_FAULT_ID SafetyIoFault::LEFT_ACCESS_PANEL_INTERLOCK_FAULT;
const SafetyIoFault_FAULT_ID SafetyIoFault::LEFT_ACCESS_PANEL_SOLENOID_STATUS_FAULT;
const SafetyIoFault_FAULT_ID SafetyIoFault::LEFT_ACCESS_PANEL_SOLENOID_LOCKED_STATUS_FAULT;
const SafetyIoFault_FAULT_ID SafetyIoFault::RIGHT_ACCESS_PANEL_INTERLOCK_FAULT;
const SafetyIoFault_FAULT_ID SafetyIoFault::RIGHT_ACCESS_PANEL_SOLENOID_STATUS_FAULT;
const SafetyIoFault_FAULT_ID SafetyIoFault::RIGHT_ACCESS_PANEL_SOLENOID_LOCKED_STATUS_FAULT;
const SafetyIoFault_FAULT_ID SafetyIoFault::MANUAL_RESET_NEEDED;
const SafetyIoFault_FAULT_ID SafetyIoFault::ENCODER_FAULT;
const SafetyIoFault_FAULT_ID SafetyIoFault::FAULT_ID_MIN;
const SafetyIoFault_FAULT_ID SafetyIoFault::FAULT_ID_MAX;
const int SafetyIoFault::FAULT_ID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SafetyIoFault::SafetyIoFault()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analogic.ancp00.SafetyIoFault)
}

void SafetyIoFault::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SafetyIoFault::SafetyIoFault(const SafetyIoFault& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analogic.ancp00.SafetyIoFault)
}

void SafetyIoFault::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

SafetyIoFault::~SafetyIoFault() {
  // @@protoc_insertion_point(destructor:analogic.ancp00.SafetyIoFault)
  SharedDtor();
}

void SafetyIoFault::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SafetyIoFault::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SafetyIoFault::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SafetyIoFault_descriptor_;
}

const SafetyIoFault& SafetyIoFault::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fFault_2eproto();
  return *default_instance_;
}

SafetyIoFault* SafetyIoFault::default_instance_ = NULL;

SafetyIoFault* SafetyIoFault::New(::google::protobuf::Arena* arena) const {
  SafetyIoFault* n = new SafetyIoFault;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SafetyIoFault::Clear() {
// @@protoc_insertion_point(message_clear_start:analogic.ancp00.SafetyIoFault)
}

bool SafetyIoFault::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analogic.ancp00.SafetyIoFault)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:analogic.ancp00.SafetyIoFault)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analogic.ancp00.SafetyIoFault)
  return false;
#undef DO_
}

void SafetyIoFault::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analogic.ancp00.SafetyIoFault)
  // @@protoc_insertion_point(serialize_end:analogic.ancp00.SafetyIoFault)
}

::google::protobuf::uint8* SafetyIoFault::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analogic.ancp00.SafetyIoFault)
  // @@protoc_insertion_point(serialize_to_array_end:analogic.ancp00.SafetyIoFault)
  return target;
}

int SafetyIoFault::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:analogic.ancp00.SafetyIoFault)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SafetyIoFault::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analogic.ancp00.SafetyIoFault)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SafetyIoFault* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SafetyIoFault>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analogic.ancp00.SafetyIoFault)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analogic.ancp00.SafetyIoFault)
    MergeFrom(*source);
  }
}

void SafetyIoFault::MergeFrom(const SafetyIoFault& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analogic.ancp00.SafetyIoFault)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void SafetyIoFault::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analogic.ancp00.SafetyIoFault)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SafetyIoFault::CopyFrom(const SafetyIoFault& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analogic.ancp00.SafetyIoFault)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SafetyIoFault::IsInitialized() const {

  return true;
}

void SafetyIoFault::Swap(SafetyIoFault* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SafetyIoFault::InternalSwap(SafetyIoFault* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SafetyIoFault::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SafetyIoFault_descriptor_;
  metadata.reflection = SafetyIoFault_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SafetyIoFault

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* ReconFault_FAULT_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReconFault_FAULT_ID_descriptor_;
}
bool ReconFault_FAULT_ID_IsValid(int value) {
  switch(value) {
    case 0:
    case 6000:
    case 6001:
    case 6002:
    case 6003:
    case 6004:
    case 6005:
    case 6006:
    case 6007:
    case 6008:
    case 6009:
    case 6010:
    case 6011:
    case 6012:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ReconFault_FAULT_ID ReconFault::NOT_USED;
const ReconFault_FAULT_ID ReconFault::FILE_READ_ERROR;
const ReconFault_FAULT_ID ReconFault::GENERAL_INIT_ERROR;
const ReconFault_FAULT_ID ReconFault::GPU_LIB_INIT_ERROR;
const ReconFault_FAULT_ID ReconFault::OFFSET_CAL_FAULT;
const ReconFault_FAULT_ID ReconFault::AIR_CAL_FAULT;
const ReconFault_FAULT_ID ReconFault::NOT_READY_FOR_CMD_FAULT;
const ReconFault_FAULT_ID ReconFault::MANUAL_BAD_DETS_UPDATE_FAULT;
const ReconFault_FAULT_ID ReconFault::BUFFER_POOL_FAULT;
const ReconFault_FAULT_ID ReconFault::VIEW_SUBSCRIBE_TIMEOUT;
const ReconFault_FAULT_ID ReconFault::RECON_VIEW_BLOCK_FAULT;
const ReconFault_FAULT_ID ReconFault::TOO_MANY_BAD_VIEWS;
const ReconFault_FAULT_ID ReconFault::DYNAMIC_CAL_FAULT;
const ReconFault_FAULT_ID ReconFault::DEFAULT_CAL_FILE_FAULT;
const ReconFault_FAULT_ID ReconFault::FAULT_ID_MIN;
const ReconFault_FAULT_ID ReconFault::FAULT_ID_MAX;
const int ReconFault::FAULT_ID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReconFault::ReconFault()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analogic.ancp00.ReconFault)
}

void ReconFault::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ReconFault::ReconFault(const ReconFault& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analogic.ancp00.ReconFault)
}

void ReconFault::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

ReconFault::~ReconFault() {
  // @@protoc_insertion_point(destructor:analogic.ancp00.ReconFault)
  SharedDtor();
}

void ReconFault::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReconFault::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReconFault::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReconFault_descriptor_;
}

const ReconFault& ReconFault::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fFault_2eproto();
  return *default_instance_;
}

ReconFault* ReconFault::default_instance_ = NULL;

ReconFault* ReconFault::New(::google::protobuf::Arena* arena) const {
  ReconFault* n = new ReconFault;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReconFault::Clear() {
// @@protoc_insertion_point(message_clear_start:analogic.ancp00.ReconFault)
}

bool ReconFault::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analogic.ancp00.ReconFault)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:analogic.ancp00.ReconFault)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analogic.ancp00.ReconFault)
  return false;
#undef DO_
}

void ReconFault::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analogic.ancp00.ReconFault)
  // @@protoc_insertion_point(serialize_end:analogic.ancp00.ReconFault)
}

::google::protobuf::uint8* ReconFault::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analogic.ancp00.ReconFault)
  // @@protoc_insertion_point(serialize_to_array_end:analogic.ancp00.ReconFault)
  return target;
}

int ReconFault::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:analogic.ancp00.ReconFault)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReconFault::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analogic.ancp00.ReconFault)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReconFault* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReconFault>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analogic.ancp00.ReconFault)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analogic.ancp00.ReconFault)
    MergeFrom(*source);
  }
}

void ReconFault::MergeFrom(const ReconFault& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analogic.ancp00.ReconFault)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void ReconFault::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analogic.ancp00.ReconFault)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReconFault::CopyFrom(const ReconFault& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analogic.ancp00.ReconFault)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReconFault::IsInitialized() const {

  return true;
}

void ReconFault::Swap(ReconFault* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReconFault::InternalSwap(ReconFault* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReconFault::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReconFault_descriptor_;
  metadata.reflection = ReconFault_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReconFault

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* DrbFault_FAULT_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DrbFault_FAULT_ID_descriptor_;
}
bool DrbFault_FAULT_ID_IsValid(int value) {
  switch(value) {
    case 0:
    case 7000:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DrbFault_FAULT_ID DrbFault::NOT_USED;
const DrbFault_FAULT_ID DrbFault::DRB_NOTIFICATION;
const DrbFault_FAULT_ID DrbFault::FAULT_ID_MIN;
const DrbFault_FAULT_ID DrbFault::FAULT_ID_MAX;
const int DrbFault::FAULT_ID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DrbFault::DrbFault()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analogic.ancp00.DrbFault)
}

void DrbFault::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DrbFault::DrbFault(const DrbFault& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analogic.ancp00.DrbFault)
}

void DrbFault::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

DrbFault::~DrbFault() {
  // @@protoc_insertion_point(destructor:analogic.ancp00.DrbFault)
  SharedDtor();
}

void DrbFault::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DrbFault::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DrbFault::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DrbFault_descriptor_;
}

const DrbFault& DrbFault::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fFault_2eproto();
  return *default_instance_;
}

DrbFault* DrbFault::default_instance_ = NULL;

DrbFault* DrbFault::New(::google::protobuf::Arena* arena) const {
  DrbFault* n = new DrbFault;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DrbFault::Clear() {
// @@protoc_insertion_point(message_clear_start:analogic.ancp00.DrbFault)
}

bool DrbFault::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analogic.ancp00.DrbFault)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:analogic.ancp00.DrbFault)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analogic.ancp00.DrbFault)
  return false;
#undef DO_
}

void DrbFault::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analogic.ancp00.DrbFault)
  // @@protoc_insertion_point(serialize_end:analogic.ancp00.DrbFault)
}

::google::protobuf::uint8* DrbFault::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analogic.ancp00.DrbFault)
  // @@protoc_insertion_point(serialize_to_array_end:analogic.ancp00.DrbFault)
  return target;
}

int DrbFault::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:analogic.ancp00.DrbFault)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DrbFault::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analogic.ancp00.DrbFault)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DrbFault* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DrbFault>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analogic.ancp00.DrbFault)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analogic.ancp00.DrbFault)
    MergeFrom(*source);
  }
}

void DrbFault::MergeFrom(const DrbFault& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analogic.ancp00.DrbFault)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void DrbFault::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analogic.ancp00.DrbFault)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DrbFault::CopyFrom(const DrbFault& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analogic.ancp00.DrbFault)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrbFault::IsInitialized() const {

  return true;
}

void DrbFault::Swap(DrbFault* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DrbFault::InternalSwap(DrbFault* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DrbFault::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DrbFault_descriptor_;
  metadata.reflection = DrbFault_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DrbFault

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* NimFault_FAULT_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NimFault_FAULT_ID_descriptor_;
}
bool NimFault_FAULT_ID_IsValid(int value) {
  switch(value) {
    case 0:
    case 8000:
    case 8001:
    case 8002:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const NimFault_FAULT_ID NimFault::NOT_USED;
const NimFault_FAULT_ID NimFault::OVER_MAX_BAG_QUEUE;
const NimFault_FAULT_ID NimFault::INVALID_BAG_DATA;
const NimFault_FAULT_ID NimFault::NETWORK_DISCONNECT;
const NimFault_FAULT_ID NimFault::FAULT_ID_MIN;
const NimFault_FAULT_ID NimFault::FAULT_ID_MAX;
const int NimFault::FAULT_ID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NimFault::NimFault()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analogic.ancp00.NimFault)
}

void NimFault::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

NimFault::NimFault(const NimFault& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analogic.ancp00.NimFault)
}

void NimFault::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

NimFault::~NimFault() {
  // @@protoc_insertion_point(destructor:analogic.ancp00.NimFault)
  SharedDtor();
}

void NimFault::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NimFault::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NimFault::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NimFault_descriptor_;
}

const NimFault& NimFault::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fFault_2eproto();
  return *default_instance_;
}

NimFault* NimFault::default_instance_ = NULL;

NimFault* NimFault::New(::google::protobuf::Arena* arena) const {
  NimFault* n = new NimFault;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NimFault::Clear() {
// @@protoc_insertion_point(message_clear_start:analogic.ancp00.NimFault)
}

bool NimFault::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analogic.ancp00.NimFault)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:analogic.ancp00.NimFault)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analogic.ancp00.NimFault)
  return false;
#undef DO_
}

void NimFault::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analogic.ancp00.NimFault)
  // @@protoc_insertion_point(serialize_end:analogic.ancp00.NimFault)
}

::google::protobuf::uint8* NimFault::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analogic.ancp00.NimFault)
  // @@protoc_insertion_point(serialize_to_array_end:analogic.ancp00.NimFault)
  return target;
}

int NimFault::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:analogic.ancp00.NimFault)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NimFault::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analogic.ancp00.NimFault)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NimFault* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NimFault>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analogic.ancp00.NimFault)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analogic.ancp00.NimFault)
    MergeFrom(*source);
  }
}

void NimFault::MergeFrom(const NimFault& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analogic.ancp00.NimFault)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void NimFault::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analogic.ancp00.NimFault)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NimFault::CopyFrom(const NimFault& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analogic.ancp00.NimFault)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NimFault::IsInitialized() const {

  return true;
}

void NimFault::Swap(NimFault* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NimFault::InternalSwap(NimFault* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NimFault::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NimFault_descriptor_;
  metadata.reflection = NimFault_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NimFault

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* TempHumidityFault_FAULT_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TempHumidityFault_FAULT_ID_descriptor_;
}
bool TempHumidityFault_FAULT_ID_IsValid(int value) {
  switch(value) {
    case 0:
    case 9000:
    case 9001:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TempHumidityFault_FAULT_ID TempHumidityFault::NOT_USED;
const TempHumidityFault_FAULT_ID TempHumidityFault::HIGH_TEMPERATURE_WARNING;
const TempHumidityFault_FAULT_ID TempHumidityFault::HIGH_TEMPERATURE_FAULT;
const TempHumidityFault_FAULT_ID TempHumidityFault::FAULT_ID_MIN;
const TempHumidityFault_FAULT_ID TempHumidityFault::FAULT_ID_MAX;
const int TempHumidityFault::FAULT_ID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TempHumidityFault::TempHumidityFault()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analogic.ancp00.TempHumidityFault)
}

void TempHumidityFault::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TempHumidityFault::TempHumidityFault(const TempHumidityFault& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analogic.ancp00.TempHumidityFault)
}

void TempHumidityFault::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

TempHumidityFault::~TempHumidityFault() {
  // @@protoc_insertion_point(destructor:analogic.ancp00.TempHumidityFault)
  SharedDtor();
}

void TempHumidityFault::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TempHumidityFault::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TempHumidityFault::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TempHumidityFault_descriptor_;
}

const TempHumidityFault& TempHumidityFault::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fFault_2eproto();
  return *default_instance_;
}

TempHumidityFault* TempHumidityFault::default_instance_ = NULL;

TempHumidityFault* TempHumidityFault::New(::google::protobuf::Arena* arena) const {
  TempHumidityFault* n = new TempHumidityFault;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TempHumidityFault::Clear() {
// @@protoc_insertion_point(message_clear_start:analogic.ancp00.TempHumidityFault)
}

bool TempHumidityFault::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analogic.ancp00.TempHumidityFault)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:analogic.ancp00.TempHumidityFault)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analogic.ancp00.TempHumidityFault)
  return false;
#undef DO_
}

void TempHumidityFault::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analogic.ancp00.TempHumidityFault)
  // @@protoc_insertion_point(serialize_end:analogic.ancp00.TempHumidityFault)
}

::google::protobuf::uint8* TempHumidityFault::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analogic.ancp00.TempHumidityFault)
  // @@protoc_insertion_point(serialize_to_array_end:analogic.ancp00.TempHumidityFault)
  return target;
}

int TempHumidityFault::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:analogic.ancp00.TempHumidityFault)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TempHumidityFault::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analogic.ancp00.TempHumidityFault)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TempHumidityFault* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TempHumidityFault>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analogic.ancp00.TempHumidityFault)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analogic.ancp00.TempHumidityFault)
    MergeFrom(*source);
  }
}

void TempHumidityFault::MergeFrom(const TempHumidityFault& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analogic.ancp00.TempHumidityFault)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void TempHumidityFault::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analogic.ancp00.TempHumidityFault)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TempHumidityFault::CopyFrom(const TempHumidityFault& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analogic.ancp00.TempHumidityFault)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TempHumidityFault::IsInitialized() const {

  return true;
}

void TempHumidityFault::Swap(TempHumidityFault* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TempHumidityFault::InternalSwap(TempHumidityFault* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TempHumidityFault::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TempHumidityFault_descriptor_;
  metadata.reflection = TempHumidityFault_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TempHumidityFault

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* BLMFault_FAULT_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BLMFault_FAULT_ID_descriptor_;
}
bool BLMFault_FAULT_ID_IsValid(int value) {
  switch(value) {
    case 0:
    case 10000:
    case 10001:
    case 10002:
    case 10003:
    case 10004:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BLMFault_FAULT_ID BLMFault::NOT_USED;
const BLMFault_FAULT_ID BLMFault::UNK_BLM_ERROR;
const BLMFault_FAULT_ID BLMFault::UNK_BLM_WARNING;
const BLMFault_FAULT_ID BLMFault::OUT_OF_BAGS;
const BLMFault_FAULT_ID BLMFault::LOW_ON_BAGS;
const BLMFault_FAULT_ID BLMFault::BAG_PROCESSING_ERROR;
const BLMFault_FAULT_ID BLMFault::FAULT_ID_MIN;
const BLMFault_FAULT_ID BLMFault::FAULT_ID_MAX;
const int BLMFault::FAULT_ID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BLMFault::BLMFault()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analogic.ancp00.BLMFault)
}

void BLMFault::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BLMFault::BLMFault(const BLMFault& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analogic.ancp00.BLMFault)
}

void BLMFault::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

BLMFault::~BLMFault() {
  // @@protoc_insertion_point(destructor:analogic.ancp00.BLMFault)
  SharedDtor();
}

void BLMFault::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BLMFault::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BLMFault::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BLMFault_descriptor_;
}

const BLMFault& BLMFault::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fFault_2eproto();
  return *default_instance_;
}

BLMFault* BLMFault::default_instance_ = NULL;

BLMFault* BLMFault::New(::google::protobuf::Arena* arena) const {
  BLMFault* n = new BLMFault;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BLMFault::Clear() {
// @@protoc_insertion_point(message_clear_start:analogic.ancp00.BLMFault)
}

bool BLMFault::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analogic.ancp00.BLMFault)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:analogic.ancp00.BLMFault)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analogic.ancp00.BLMFault)
  return false;
#undef DO_
}

void BLMFault::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analogic.ancp00.BLMFault)
  // @@protoc_insertion_point(serialize_end:analogic.ancp00.BLMFault)
}

::google::protobuf::uint8* BLMFault::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analogic.ancp00.BLMFault)
  // @@protoc_insertion_point(serialize_to_array_end:analogic.ancp00.BLMFault)
  return target;
}

int BLMFault::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:analogic.ancp00.BLMFault)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BLMFault::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analogic.ancp00.BLMFault)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BLMFault* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BLMFault>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analogic.ancp00.BLMFault)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analogic.ancp00.BLMFault)
    MergeFrom(*source);
  }
}

void BLMFault::MergeFrom(const BLMFault& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analogic.ancp00.BLMFault)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void BLMFault::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analogic.ancp00.BLMFault)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BLMFault::CopyFrom(const BLMFault& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analogic.ancp00.BLMFault)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BLMFault::IsInitialized() const {

  return true;
}

void BLMFault::Swap(BLMFault* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BLMFault::InternalSwap(BLMFault* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BLMFault::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BLMFault_descriptor_;
  metadata.reflection = BLMFault_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BLMFault

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* BhsFault_FAULT_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BhsFault_FAULT_ID_descriptor_;
}
bool BhsFault_FAULT_ID_IsValid(int value) {
  switch(value) {
    case 0:
    case 11000:
    case 11001:
    case 11002:
    case 11003:
    case 11004:
    case 11005:
    case 11006:
    case 11007:
    case 11008:
    case 11100:
    case 11101:
    case 11102:
    case 11103:
    case 11104:
    case 11105:
    case 11106:
    case 11107:
    case 11108:
    case 11109:
    case 11110:
    case 11111:
    case 11112:
    case 11113:
    case 11114:
    case 11115:
    case 11116:
    case 11117:
    case 11118:
    case 11119:
    case 11120:
    case 11121:
    case 11122:
    case 11123:
    case 11124:
    case 11125:
    case 11126:
    case 11127:
    case 11128:
    case 11129:
    case 11130:
    case 11131:
    case 11132:
    case 11133:
    case 11134:
    case 11135:
    case 11136:
    case 11137:
    case 11138:
    case 11139:
    case 11140:
    case 11141:
    case 11142:
    case 11143:
    case 11144:
    case 11145:
    case 11146:
    case 11147:
    case 11148:
    case 11149:
    case 11150:
    case 11151:
    case 11152:
    case 11153:
    case 11154:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BhsFault_FAULT_ID BhsFault::NOT_USED;
const BhsFault_FAULT_ID BhsFault::MODBUS_PLC_CONNECTION_ERROR;
const BhsFault_FAULT_ID BhsFault::MODBUS_ENTRANCE_RFID_CONNECTION_ERROR;
const BhsFault_FAULT_ID BhsFault::MODBUS_EXIT_RFID_CONNECTION_ERROR;
const BhsFault_FAULT_ID BhsFault::BAG_JAM_ERROR;
const BhsFault_FAULT_ID BhsFault::GENERAL_BHS_ERROR;
const BhsFault_FAULT_ID BhsFault::BHS_NOT_RTR;
const BhsFault_FAULT_ID BhsFault::ENTRANCE_BAG_JAM_ERROR;
const BhsFault_FAULT_ID BhsFault::EXIT_BAG_JAM_ERROR;
const BhsFault_FAULT_ID BhsFault::TUNNEL_BAG_JAM_ERROR;
const BhsFault_FAULT_ID BhsFault::MOTOR_SLAVE_MISSING_ZONE2;
const BhsFault_FAULT_ID BhsFault::SENSOR_SLAVE_MISSING_ZONE2;
const BhsFault_FAULT_ID BhsFault::MOTOR_POWER_FAILURE_ZONE2;
const BhsFault_FAULT_ID BhsFault::SENSOR_POWER_FAILURE_ZONE2;
const BhsFault_FAULT_ID BhsFault::MOTOR_UNDER_VOLTAGE_ZONE2;
const BhsFault_FAULT_ID BhsFault::MOTOR_OVER_CURRENT_ZONE2;
const BhsFault_FAULT_ID BhsFault::MOTOR_SLAVE_MISSING_ZONE3;
const BhsFault_FAULT_ID BhsFault::SENSOR_SLAVE_MISSING_ZONE3;
const BhsFault_FAULT_ID BhsFault::MOTOR_POWER_FAILURE_ZONE3;
const BhsFault_FAULT_ID BhsFault::SENSOR_POWER_FAILURE_ZONE3;
const BhsFault_FAULT_ID BhsFault::MOTOR_UNDER_VOLTAGE_ZONE3;
const BhsFault_FAULT_ID BhsFault::MOTOR_OVER_CURRENT_ZONE3;
const BhsFault_FAULT_ID BhsFault::MOTOR_SLAVE_MISSING_ZONE3B;
const BhsFault_FAULT_ID BhsFault::SENSOR_SLAVE_MISSING_ZONE3B;
const BhsFault_FAULT_ID BhsFault::MOTOR_POWER_FAILURE_ZONE3B;
const BhsFault_FAULT_ID BhsFault::SENSOR_POWER_FAILURE_ZONE3B;
const BhsFault_FAULT_ID BhsFault::MOTOR_UNDER_VOLTAGE_ZONE3B;
const BhsFault_FAULT_ID BhsFault::MOTOR_OVER_CURRENT_ZONE3B;
const BhsFault_FAULT_ID BhsFault::MOTOR_SLAVE_MISSING_ZONE4;
const BhsFault_FAULT_ID BhsFault::SENSOR_SLAVE_MISSING_ZONE4;
const BhsFault_FAULT_ID BhsFault::MOTOR_POWER_FAILURE_ZONE4;
const BhsFault_FAULT_ID BhsFault::SENSOR_POWER_FAILURE_ZONE4;
const BhsFault_FAULT_ID BhsFault::MOTOR_UNDER_VOLTAGE_ZONE4;
const BhsFault_FAULT_ID BhsFault::MOTOR_OVER_CURRENT_ZONE4;
const BhsFault_FAULT_ID BhsFault::MOTOR_SLAVE_MISSING_ZONE7;
const BhsFault_FAULT_ID BhsFault::SENSOR_SLAVE_MISSING_ZONE7;
const BhsFault_FAULT_ID BhsFault::MOTOR_POWER_FAILURE_ZONE7;
const BhsFault_FAULT_ID BhsFault::SENSOR_POWER_FAILURE_ZONE7;
const BhsFault_FAULT_ID BhsFault::MOTOR_UNDER_VOLTAGE_ZONE7;
const BhsFault_FAULT_ID BhsFault::MOTOR_OVER_CURRENT_ZONE7;
const BhsFault_FAULT_ID BhsFault::MOTOR_SLAVE_MISSING_ZONE8;
const BhsFault_FAULT_ID BhsFault::SENSOR_SLAVE_MISSING_ZONE8;
const BhsFault_FAULT_ID BhsFault::MOTOR_POWER_FAILURE_ZONE8;
const BhsFault_FAULT_ID BhsFault::SENSOR_POWER_FAILURE_ZONE8;
const BhsFault_FAULT_ID BhsFault::MOTOR_UNDER_VOLTAGE_ZONE8;
const BhsFault_FAULT_ID BhsFault::MOTOR_OVER_CURRENT_ZONE8;
const BhsFault_FAULT_ID BhsFault::DIVERTER_SLAVE_MISSING_ZONE5;
const BhsFault_FAULT_ID BhsFault::ROLLER_SLAVE_MISSING_ZONE5;
const BhsFault_FAULT_ID BhsFault::ROLLER_AT_FAULT_ZONE5;
const BhsFault_FAULT_ID BhsFault::DIVERTER_AT_FAULT_ZONE5;
const BhsFault_FAULT_ID BhsFault::ROLLER_UNDER_VOLTAGE_ZONE5;
const BhsFault_FAULT_ID BhsFault::ROLLER_OVER_CURRENT_ZONE5;
const BhsFault_FAULT_ID BhsFault::DIVERTER_UNDER_VOLTAGE_ZONE5;
const BhsFault_FAULT_ID BhsFault::DIVERTER_OVER_CURRENT_ZONE5;
const BhsFault_FAULT_ID BhsFault::DIVERTER_SLAVE_MISSING_ZONE6;
const BhsFault_FAULT_ID BhsFault::ROLLER_SLAVE_MISSING_ZONE6;
const BhsFault_FAULT_ID BhsFault::ROLLER_AT_FAULT_ZONE6;
const BhsFault_FAULT_ID BhsFault::DIVERTER_AT_FAULT_ZONE6;
const BhsFault_FAULT_ID BhsFault::ROLLER_UNDER_VOLTAGE_ZONE6;
const BhsFault_FAULT_ID BhsFault::ROLLER_OVER_CURRENT_ZONE6;
const BhsFault_FAULT_ID BhsFault::DIVERTER_UNDER_VOLTAGE_ZONE6;
const BhsFault_FAULT_ID BhsFault::DIVERTER_OVER_CURRENT_ZONE6;
const BhsFault_FAULT_ID BhsFault::ASI_TERMINAL_MISSING;
const BhsFault_FAULT_ID BhsFault::ASI_MODULE_ERROR;
const BhsFault_FAULT_ID BhsFault::DIVERTER_DIRECTION_CONFIG_ERROR;
const BhsFault_FAULT_ID BhsFault::FAULT_ID_MIN;
const BhsFault_FAULT_ID BhsFault::FAULT_ID_MAX;
const int BhsFault::FAULT_ID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BhsFault::BhsFault()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analogic.ancp00.BhsFault)
}

void BhsFault::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BhsFault::BhsFault(const BhsFault& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analogic.ancp00.BhsFault)
}

void BhsFault::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

BhsFault::~BhsFault() {
  // @@protoc_insertion_point(destructor:analogic.ancp00.BhsFault)
  SharedDtor();
}

void BhsFault::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BhsFault::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BhsFault::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BhsFault_descriptor_;
}

const BhsFault& BhsFault::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fFault_2eproto();
  return *default_instance_;
}

BhsFault* BhsFault::default_instance_ = NULL;

BhsFault* BhsFault::New(::google::protobuf::Arena* arena) const {
  BhsFault* n = new BhsFault;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BhsFault::Clear() {
// @@protoc_insertion_point(message_clear_start:analogic.ancp00.BhsFault)
}

bool BhsFault::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analogic.ancp00.BhsFault)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:analogic.ancp00.BhsFault)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analogic.ancp00.BhsFault)
  return false;
#undef DO_
}

void BhsFault::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analogic.ancp00.BhsFault)
  // @@protoc_insertion_point(serialize_end:analogic.ancp00.BhsFault)
}

::google::protobuf::uint8* BhsFault::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analogic.ancp00.BhsFault)
  // @@protoc_insertion_point(serialize_to_array_end:analogic.ancp00.BhsFault)
  return target;
}

int BhsFault::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:analogic.ancp00.BhsFault)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BhsFault::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analogic.ancp00.BhsFault)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BhsFault* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BhsFault>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analogic.ancp00.BhsFault)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analogic.ancp00.BhsFault)
    MergeFrom(*source);
  }
}

void BhsFault::MergeFrom(const BhsFault& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analogic.ancp00.BhsFault)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void BhsFault::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analogic.ancp00.BhsFault)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BhsFault::CopyFrom(const BhsFault& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analogic.ancp00.BhsFault)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BhsFault::IsInitialized() const {

  return true;
}

void BhsFault::Swap(BhsFault* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BhsFault::InternalSwap(BhsFault* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BhsFault::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BhsFault_descriptor_;
  metadata.reflection = BhsFault_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BhsFault

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* CommFault_FAULT_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommFault_FAULT_ID_descriptor_;
}
bool CommFault_FAULT_ID_IsValid(int value) {
  switch(value) {
    case 0:
    case 12000:
    case 12002:
    case 12003:
    case 12004:
    case 12005:
    case 12006:
    case 12007:
    case 12008:
    case 12009:
    case 12010:
    case 12011:
    case 12012:
    case 12013:
    case 12014:
    case 12015:
    case 12016:
    case 12017:
    case 12018:
    case 12019:
    case 12020:
    case 120001:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CommFault_FAULT_ID CommFault::NOT_USED;
const CommFault_FAULT_ID CommFault::SYSTEM_COMM_ERROR;
const CommFault_FAULT_ID CommFault::NETWORK_OFFLINE;
const CommFault_FAULT_ID CommFault::BHS_OFFLINE;
const CommFault_FAULT_ID CommFault::SCC_OFFLINE;
const CommFault_FAULT_ID CommFault::UPS_OFFLINE;
const CommFault_FAULT_ID CommFault::DRB_OFFLINE;
const CommFault_FAULT_ID CommFault::SAFETY_IO_OFFLINE;
const CommFault_FAULT_ID CommFault::RCB_OFFLINE;
const CommFault_FAULT_ID CommFault::XRAY_OFFLINE;
const CommFault_FAULT_ID CommFault::SERIAL_SERVER_1_OFFLINE;
const CommFault_FAULT_ID CommFault::SERIAL_SERVER_2_OFFLINE;
const CommFault_FAULT_ID CommFault::GANTRY_OFFLINE;
const CommFault_FAULT_ID CommFault::CONVEYOR_OFFLINE;
const CommFault_FAULT_ID CommFault::TEMP_HUMIDITY_SENSOR_OFFLINE;
const CommFault_FAULT_ID CommFault::POWERLINK_OFFLINE;
const CommFault_FAULT_ID CommFault::DCB_1_OFFLINE;
const CommFault_FAULT_ID CommFault::DCB_2_OFFLINE;
const CommFault_FAULT_ID CommFault::DCB_3_OFFLINE;
const CommFault_FAULT_ID CommFault::DCB_4_OFFLINE;
const CommFault_FAULT_ID CommFault::DCB_5_OFFLINE;
const CommFault_FAULT_ID CommFault::POWER_METER_OFFLINE;
const CommFault_FAULT_ID CommFault::FAULT_ID_MIN;
const CommFault_FAULT_ID CommFault::FAULT_ID_MAX;
const int CommFault::FAULT_ID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommFault::CommFault()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analogic.ancp00.CommFault)
}

void CommFault::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CommFault::CommFault(const CommFault& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analogic.ancp00.CommFault)
}

void CommFault::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

CommFault::~CommFault() {
  // @@protoc_insertion_point(destructor:analogic.ancp00.CommFault)
  SharedDtor();
}

void CommFault::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CommFault::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommFault::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommFault_descriptor_;
}

const CommFault& CommFault::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fFault_2eproto();
  return *default_instance_;
}

CommFault* CommFault::default_instance_ = NULL;

CommFault* CommFault::New(::google::protobuf::Arena* arena) const {
  CommFault* n = new CommFault;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CommFault::Clear() {
// @@protoc_insertion_point(message_clear_start:analogic.ancp00.CommFault)
}

bool CommFault::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analogic.ancp00.CommFault)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:analogic.ancp00.CommFault)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analogic.ancp00.CommFault)
  return false;
#undef DO_
}

void CommFault::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analogic.ancp00.CommFault)
  // @@protoc_insertion_point(serialize_end:analogic.ancp00.CommFault)
}

::google::protobuf::uint8* CommFault::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analogic.ancp00.CommFault)
  // @@protoc_insertion_point(serialize_to_array_end:analogic.ancp00.CommFault)
  return target;
}

int CommFault::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:analogic.ancp00.CommFault)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommFault::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analogic.ancp00.CommFault)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CommFault* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CommFault>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analogic.ancp00.CommFault)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analogic.ancp00.CommFault)
    MergeFrom(*source);
  }
}

void CommFault::MergeFrom(const CommFault& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analogic.ancp00.CommFault)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void CommFault::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analogic.ancp00.CommFault)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommFault::CopyFrom(const CommFault& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analogic.ancp00.CommFault)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommFault::IsInitialized() const {

  return true;
}

void CommFault::Swap(CommFault* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommFault::InternalSwap(CommFault* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CommFault::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommFault_descriptor_;
  metadata.reflection = CommFault_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CommFault

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* UpsFault_FAULT_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpsFault_FAULT_ID_descriptor_;
}
bool UpsFault_FAULT_ID_IsValid(int value) {
  switch(value) {
    case 0:
    case 13000:
    case 13001:
    case 13002:
    case 13003:
    case 13004:
    case 13005:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const UpsFault_FAULT_ID UpsFault::NOT_USED;
const UpsFault_FAULT_ID UpsFault::UPS_BAD_COMM;
const UpsFault_FAULT_ID UpsFault::UPS_NO_COMM;
const UpsFault_FAULT_ID UpsFault::UPS_ON_BATTERY_POWER;
const UpsFault_FAULT_ID UpsFault::UPS_LOW_BATTERY;
const UpsFault_FAULT_ID UpsFault::UPSMON_NO_PARENT;
const UpsFault_FAULT_ID UpsFault::UPS_REPLACE_BATTERY;
const UpsFault_FAULT_ID UpsFault::FAULT_ID_MIN;
const UpsFault_FAULT_ID UpsFault::FAULT_ID_MAX;
const int UpsFault::FAULT_ID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpsFault::UpsFault()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analogic.ancp00.UpsFault)
}

void UpsFault::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

UpsFault::UpsFault(const UpsFault& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analogic.ancp00.UpsFault)
}

void UpsFault::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

UpsFault::~UpsFault() {
  // @@protoc_insertion_point(destructor:analogic.ancp00.UpsFault)
  SharedDtor();
}

void UpsFault::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpsFault::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpsFault::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpsFault_descriptor_;
}

const UpsFault& UpsFault::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fFault_2eproto();
  return *default_instance_;
}

UpsFault* UpsFault::default_instance_ = NULL;

UpsFault* UpsFault::New(::google::protobuf::Arena* arena) const {
  UpsFault* n = new UpsFault;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpsFault::Clear() {
// @@protoc_insertion_point(message_clear_start:analogic.ancp00.UpsFault)
}

bool UpsFault::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analogic.ancp00.UpsFault)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:analogic.ancp00.UpsFault)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analogic.ancp00.UpsFault)
  return false;
#undef DO_
}

void UpsFault::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analogic.ancp00.UpsFault)
  // @@protoc_insertion_point(serialize_end:analogic.ancp00.UpsFault)
}

::google::protobuf::uint8* UpsFault::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analogic.ancp00.UpsFault)
  // @@protoc_insertion_point(serialize_to_array_end:analogic.ancp00.UpsFault)
  return target;
}

int UpsFault::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:analogic.ancp00.UpsFault)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpsFault::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analogic.ancp00.UpsFault)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UpsFault* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UpsFault>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analogic.ancp00.UpsFault)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analogic.ancp00.UpsFault)
    MergeFrom(*source);
  }
}

void UpsFault::MergeFrom(const UpsFault& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analogic.ancp00.UpsFault)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void UpsFault::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analogic.ancp00.UpsFault)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpsFault::CopyFrom(const UpsFault& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analogic.ancp00.UpsFault)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpsFault::IsInitialized() const {

  return true;
}

void UpsFault::Swap(UpsFault* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpsFault::InternalSwap(UpsFault* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpsFault::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpsFault_descriptor_;
  metadata.reflection = UpsFault_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpsFault

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* ComputerFault_FAULT_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComputerFault_FAULT_ID_descriptor_;
}
bool ComputerFault_FAULT_ID_IsValid(int value) {
  switch(value) {
    case 0:
    case 14000:
    case 14001:
    case 14002:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ComputerFault_FAULT_ID ComputerFault::NOT_USED;
const ComputerFault_FAULT_ID ComputerFault::COMPUTER_DRIVE_FULL;
const ComputerFault_FAULT_ID ComputerFault::COMPUTER_RAID_NOT_MOUNTED;
const ComputerFault_FAULT_ID ComputerFault::COMPUTER_NETWORK_LOW_SPEED;
const ComputerFault_FAULT_ID ComputerFault::FAULT_ID_MIN;
const ComputerFault_FAULT_ID ComputerFault::FAULT_ID_MAX;
const int ComputerFault::FAULT_ID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ComputerFault::ComputerFault()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analogic.ancp00.ComputerFault)
}

void ComputerFault::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ComputerFault::ComputerFault(const ComputerFault& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analogic.ancp00.ComputerFault)
}

void ComputerFault::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

ComputerFault::~ComputerFault() {
  // @@protoc_insertion_point(destructor:analogic.ancp00.ComputerFault)
  SharedDtor();
}

void ComputerFault::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ComputerFault::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComputerFault::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComputerFault_descriptor_;
}

const ComputerFault& ComputerFault::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fFault_2eproto();
  return *default_instance_;
}

ComputerFault* ComputerFault::default_instance_ = NULL;

ComputerFault* ComputerFault::New(::google::protobuf::Arena* arena) const {
  ComputerFault* n = new ComputerFault;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ComputerFault::Clear() {
// @@protoc_insertion_point(message_clear_start:analogic.ancp00.ComputerFault)
}

bool ComputerFault::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analogic.ancp00.ComputerFault)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:analogic.ancp00.ComputerFault)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analogic.ancp00.ComputerFault)
  return false;
#undef DO_
}

void ComputerFault::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analogic.ancp00.ComputerFault)
  // @@protoc_insertion_point(serialize_end:analogic.ancp00.ComputerFault)
}

::google::protobuf::uint8* ComputerFault::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analogic.ancp00.ComputerFault)
  // @@protoc_insertion_point(serialize_to_array_end:analogic.ancp00.ComputerFault)
  return target;
}

int ComputerFault::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:analogic.ancp00.ComputerFault)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComputerFault::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analogic.ancp00.ComputerFault)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ComputerFault* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ComputerFault>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analogic.ancp00.ComputerFault)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analogic.ancp00.ComputerFault)
    MergeFrom(*source);
  }
}

void ComputerFault::MergeFrom(const ComputerFault& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analogic.ancp00.ComputerFault)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void ComputerFault::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analogic.ancp00.ComputerFault)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComputerFault::CopyFrom(const ComputerFault& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analogic.ancp00.ComputerFault)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComputerFault::IsInitialized() const {

  return true;
}

void ComputerFault::Swap(ComputerFault* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ComputerFault::InternalSwap(ComputerFault* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ComputerFault::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ComputerFault_descriptor_;
  metadata.reflection = ComputerFault_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ComputerFault

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* InterlockFault_FAULT_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InterlockFault_FAULT_ID_descriptor_;
}
bool InterlockFault_FAULT_ID_IsValid(int value) {
  switch(value) {
    case 0:
    case 15000:
    case 15001:
    case 15002:
    case 15003:
    case 15004:
    case 15005:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const InterlockFault_FAULT_ID InterlockFault::NOT_USED;
const InterlockFault_FAULT_ID InterlockFault::CANNOT_REVERSE_CONVEYOR_IN_SCAN_MODE;
const InterlockFault_FAULT_ID InterlockFault::XRAY_CONTROL_MOTION_KEYSWITCH_INTERLOCK_VIOLATION;
const InterlockFault_FAULT_ID InterlockFault::ACCESS_PANEL_INTERLOCK_VIOLATION;
const InterlockFault_FAULT_ID InterlockFault::GANTRY_NOT_AT_SPEED_NOR_AT_HOME_INTERLOCK_VIOLATION;
const InterlockFault_FAULT_ID InterlockFault::CANNOT_MAXIMIXE_XRAYS_NOT_ON;
const InterlockFault_FAULT_ID InterlockFault::OPERATOR_NOT_PRESENT;
const InterlockFault_FAULT_ID InterlockFault::FAULT_ID_MIN;
const InterlockFault_FAULT_ID InterlockFault::FAULT_ID_MAX;
const int InterlockFault::FAULT_ID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InterlockFault::InterlockFault()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analogic.ancp00.InterlockFault)
}

void InterlockFault::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

InterlockFault::InterlockFault(const InterlockFault& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analogic.ancp00.InterlockFault)
}

void InterlockFault::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

InterlockFault::~InterlockFault() {
  // @@protoc_insertion_point(destructor:analogic.ancp00.InterlockFault)
  SharedDtor();
}

void InterlockFault::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InterlockFault::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InterlockFault::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InterlockFault_descriptor_;
}

const InterlockFault& InterlockFault::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fFault_2eproto();
  return *default_instance_;
}

InterlockFault* InterlockFault::default_instance_ = NULL;

InterlockFault* InterlockFault::New(::google::protobuf::Arena* arena) const {
  InterlockFault* n = new InterlockFault;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InterlockFault::Clear() {
// @@protoc_insertion_point(message_clear_start:analogic.ancp00.InterlockFault)
}

bool InterlockFault::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analogic.ancp00.InterlockFault)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:analogic.ancp00.InterlockFault)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analogic.ancp00.InterlockFault)
  return false;
#undef DO_
}

void InterlockFault::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analogic.ancp00.InterlockFault)
  // @@protoc_insertion_point(serialize_end:analogic.ancp00.InterlockFault)
}

::google::protobuf::uint8* InterlockFault::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analogic.ancp00.InterlockFault)
  // @@protoc_insertion_point(serialize_to_array_end:analogic.ancp00.InterlockFault)
  return target;
}

int InterlockFault::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:analogic.ancp00.InterlockFault)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InterlockFault::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analogic.ancp00.InterlockFault)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const InterlockFault* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InterlockFault>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analogic.ancp00.InterlockFault)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analogic.ancp00.InterlockFault)
    MergeFrom(*source);
  }
}

void InterlockFault::MergeFrom(const InterlockFault& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analogic.ancp00.InterlockFault)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void InterlockFault::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analogic.ancp00.InterlockFault)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InterlockFault::CopyFrom(const InterlockFault& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analogic.ancp00.InterlockFault)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InterlockFault::IsInitialized() const {

  return true;
}

void InterlockFault::Swap(InterlockFault* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InterlockFault::InternalSwap(InterlockFault* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InterlockFault::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InterlockFault_descriptor_;
  metadata.reflection = InterlockFault_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InterlockFault

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* Fault_FAULT_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fault_FAULT_ID_descriptor_;
}
bool Fault_FAULT_ID_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Fault_FAULT_ID Fault::NOT_USED;
const Fault_FAULT_ID Fault::FAULT_ID_MIN;
const Fault_FAULT_ID Fault::FAULT_ID_MAX;
const int Fault::FAULT_ID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Fault::Fault()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analogic.ancp00.Fault)
}

void Fault::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Fault::Fault(const Fault& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analogic.ancp00.Fault)
}

void Fault::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

Fault::~Fault() {
  // @@protoc_insertion_point(destructor:analogic.ancp00.Fault)
  SharedDtor();
}

void Fault::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Fault::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fault::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fault_descriptor_;
}

const Fault& Fault::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fFault_2eproto();
  return *default_instance_;
}

Fault* Fault::default_instance_ = NULL;

Fault* Fault::New(::google::protobuf::Arena* arena) const {
  Fault* n = new Fault;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Fault::Clear() {
// @@protoc_insertion_point(message_clear_start:analogic.ancp00.Fault)
}

bool Fault::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analogic.ancp00.Fault)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:analogic.ancp00.Fault)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analogic.ancp00.Fault)
  return false;
#undef DO_
}

void Fault::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analogic.ancp00.Fault)
  // @@protoc_insertion_point(serialize_end:analogic.ancp00.Fault)
}

::google::protobuf::uint8* Fault::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analogic.ancp00.Fault)
  // @@protoc_insertion_point(serialize_to_array_end:analogic.ancp00.Fault)
  return target;
}

int Fault::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:analogic.ancp00.Fault)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fault::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analogic.ancp00.Fault)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Fault* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Fault>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analogic.ancp00.Fault)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analogic.ancp00.Fault)
    MergeFrom(*source);
  }
}

void Fault::MergeFrom(const Fault& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analogic.ancp00.Fault)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void Fault::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analogic.ancp00.Fault)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fault::CopyFrom(const Fault& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analogic.ancp00.Fault)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fault::IsInitialized() const {

  return true;
}

void Fault::Swap(Fault* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Fault::InternalSwap(Fault* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Fault::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Fault_descriptor_;
  metadata.reflection = Fault_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Fault

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* FaultFilterCondition_CONDITION_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FaultFilterCondition_CONDITION_ID_descriptor_;
}
bool FaultFilterCondition_CONDITION_ID_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const FaultFilterCondition_CONDITION_ID FaultFilterCondition::NOT_USED;
const FaultFilterCondition_CONDITION_ID FaultFilterCondition::ESTOP;
const FaultFilterCondition_CONDITION_ID FaultFilterCondition::POWERLINK_DISABLED;
const FaultFilterCondition_CONDITION_ID FaultFilterCondition::XRAY_MOTOR_POWER_KEY_SWITCH_DISABLED;
const FaultFilterCondition_CONDITION_ID FaultFilterCondition::DOOR_INTERLOCK_VIOLATION;
const FaultFilterCondition_CONDITION_ID FaultFilterCondition::RAID_FAULT;
const FaultFilterCondition_CONDITION_ID FaultFilterCondition::ON_BATTERY_POWER;
const FaultFilterCondition_CONDITION_ID FaultFilterCondition::CONDITION_ID_MIN;
const FaultFilterCondition_CONDITION_ID FaultFilterCondition::CONDITION_ID_MAX;
const int FaultFilterCondition::CONDITION_ID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FaultFilterCondition::FaultFilterCondition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analogic.ancp00.FaultFilterCondition)
}

void FaultFilterCondition::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

FaultFilterCondition::FaultFilterCondition(const FaultFilterCondition& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analogic.ancp00.FaultFilterCondition)
}

void FaultFilterCondition::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

FaultFilterCondition::~FaultFilterCondition() {
  // @@protoc_insertion_point(destructor:analogic.ancp00.FaultFilterCondition)
  SharedDtor();
}

void FaultFilterCondition::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FaultFilterCondition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FaultFilterCondition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FaultFilterCondition_descriptor_;
}

const FaultFilterCondition& FaultFilterCondition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fFault_2eproto();
  return *default_instance_;
}

FaultFilterCondition* FaultFilterCondition::default_instance_ = NULL;

FaultFilterCondition* FaultFilterCondition::New(::google::protobuf::Arena* arena) const {
  FaultFilterCondition* n = new FaultFilterCondition;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FaultFilterCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:analogic.ancp00.FaultFilterCondition)
}

bool FaultFilterCondition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analogic.ancp00.FaultFilterCondition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:analogic.ancp00.FaultFilterCondition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analogic.ancp00.FaultFilterCondition)
  return false;
#undef DO_
}

void FaultFilterCondition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analogic.ancp00.FaultFilterCondition)
  // @@protoc_insertion_point(serialize_end:analogic.ancp00.FaultFilterCondition)
}

::google::protobuf::uint8* FaultFilterCondition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analogic.ancp00.FaultFilterCondition)
  // @@protoc_insertion_point(serialize_to_array_end:analogic.ancp00.FaultFilterCondition)
  return target;
}

int FaultFilterCondition::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:analogic.ancp00.FaultFilterCondition)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FaultFilterCondition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analogic.ancp00.FaultFilterCondition)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FaultFilterCondition* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FaultFilterCondition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analogic.ancp00.FaultFilterCondition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analogic.ancp00.FaultFilterCondition)
    MergeFrom(*source);
  }
}

void FaultFilterCondition::MergeFrom(const FaultFilterCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analogic.ancp00.FaultFilterCondition)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void FaultFilterCondition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analogic.ancp00.FaultFilterCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaultFilterCondition::CopyFrom(const FaultFilterCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analogic.ancp00.FaultFilterCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaultFilterCondition::IsInitialized() const {

  return true;
}

void FaultFilterCondition::Swap(FaultFilterCondition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FaultFilterCondition::InternalSwap(FaultFilterCondition* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FaultFilterCondition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FaultFilterCondition_descriptor_;
  metadata.reflection = FaultFilterCondition_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FaultFilterCondition

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ancp00
}  // namespace analogic

// @@protoc_insertion_point(global_scope)
