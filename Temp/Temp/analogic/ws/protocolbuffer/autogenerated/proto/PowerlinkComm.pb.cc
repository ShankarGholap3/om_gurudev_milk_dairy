// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/PowerlinkComm.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/PowerlinkComm.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace analogic {
namespace ancp00 {

namespace {

const ::google::protobuf::Descriptor* PowerlinkData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PowerlinkData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PowerlinkData_STATUS_BITS_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_2fPowerlinkComm_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_proto_2fPowerlinkComm_2eproto() {
  protobuf_AddDesc_proto_2fPowerlinkComm_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto/PowerlinkComm.proto");
  GOOGLE_CHECK(file != NULL);
  PowerlinkData_descriptor_ = file->message_type(0);
  static const int PowerlinkData_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerlinkData, status_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerlinkData, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerlinkData, revision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerlinkData, gap_fault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerlinkData, inverter_overcurrent_fault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerlinkData, stator_cable_fault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerlinkData, fan_fault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerlinkData, master_fault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerlinkData, undervoltage_fault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerlinkData, overcurrent_fault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerlinkData, power_enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerlinkData, vbusin_undervoltage_fault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerlinkData, vcc_undervoltage_fault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerlinkData, soft_start_heatsink_temp_alert_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerlinkData, power_mosfet_temp_alert_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerlinkData, pfc_heatsink_temp_alert_),
  };
  PowerlinkData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PowerlinkData_descriptor_,
      PowerlinkData::default_instance_,
      PowerlinkData_offsets_,
      -1,
      -1,
      -1,
      sizeof(PowerlinkData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerlinkData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerlinkData, _is_default_instance_));
  PowerlinkData_STATUS_BITS_descriptor_ = PowerlinkData_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_2fPowerlinkComm_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PowerlinkData_descriptor_, &PowerlinkData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_2fPowerlinkComm_2eproto() {
  delete PowerlinkData::default_instance_;
  delete PowerlinkData_reflection_;
}

void protobuf_AddDesc_proto_2fPowerlinkComm_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_proto_2fPowerlinkComm_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031proto/PowerlinkComm.proto\022\017analogic.an"
    "cp00\"\237\006\n\rPowerlinkData\022\023\n\013status_bits\030\001 "
    "\001(\007\022\017\n\007version\030\002 \001(\t\022\020\n\010revision\030\003 \001(\t\022\021"
    "\n\tgap_fault\030\n \001(\010\022\"\n\032inverter_overcurren"
    "t_fault\030\013 \001(\010\022\032\n\022stator_cable_fault\030\014 \001("
    "\010\022\021\n\tfan_fault\030\r \001(\010\022\024\n\014master_fault\030\016 \001"
    "(\010\022\032\n\022undervoltage_fault\030\017 \001(\010\022\031\n\021overcu"
    "rrent_fault\030\020 \001(\010\022\025\n\rpower_enabled\030\021 \001(\010"
    "\022!\n\031vbusin_undervoltage_fault\030\022 \001(\010\022\036\n\026v"
    "cc_undervoltage_fault\030\023 \001(\010\022&\n\036soft_star"
    "t_heatsink_temp_alert\030\024 \001(\010\022\037\n\027power_mos"
    "fet_temp_alert\030\025 \001(\010\022\037\n\027pfc_heatsink_tem"
    "p_alert\030\026 \001(\010\"\336\002\n\013STATUS_BITS\022\016\n\nNOT_USE"
    "D_0\020\000\022\r\n\tGAP_FAULT\020\001\022\036\n\032INVERTER_OVERCUR"
    "RENT_FAULT\020\002\022\026\n\022STATOR_CABLE_FAULT\020\004\022\r\n\t"
    "FAN_FAULT\020\010\022\021\n\014MASTER_FAULT\020\200\001\022\027\n\022UNDERV"
    "OLTAGE_FAULT\020\200\002\022\026\n\021OVERCURRENT_FAULT\020\200\004\022"
    "\022\n\rPOWER_ENABLED\020\200\020\022 \n\031VBUSIN_UNDERVOLTA"
    "GE_FAULT\020\200\200\200@\022\036\n\026VCC_UNDERVOLTAGE_FAULT\020"
    "\200\200\200\200\001\022*\n\"SOFT_START_HEATSINK_TEMP_ALERT_"
    "70C\020\200\200\200\200\002\022#\n\033POWER_MOSFET_TEMP_ALERT_70C"
    "\020\200\200\200\200\004b\006proto3", 854);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/PowerlinkComm.proto", &protobuf_RegisterTypes);
  PowerlinkData::default_instance_ = new PowerlinkData();
  PowerlinkData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2fPowerlinkComm_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2fPowerlinkComm_2eproto {
  StaticDescriptorInitializer_proto_2fPowerlinkComm_2eproto() {
    protobuf_AddDesc_proto_2fPowerlinkComm_2eproto();
  }
} static_descriptor_initializer_proto_2fPowerlinkComm_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* PowerlinkData_STATUS_BITS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PowerlinkData_STATUS_BITS_descriptor_;
}
bool PowerlinkData_STATUS_BITS_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 128:
    case 256:
    case 512:
    case 2048:
    case 134217728:
    case 268435456:
    case 536870912:
    case 1073741824:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PowerlinkData_STATUS_BITS PowerlinkData::NOT_USED_0;
const PowerlinkData_STATUS_BITS PowerlinkData::GAP_FAULT;
const PowerlinkData_STATUS_BITS PowerlinkData::INVERTER_OVERCURRENT_FAULT;
const PowerlinkData_STATUS_BITS PowerlinkData::STATOR_CABLE_FAULT;
const PowerlinkData_STATUS_BITS PowerlinkData::FAN_FAULT;
const PowerlinkData_STATUS_BITS PowerlinkData::MASTER_FAULT;
const PowerlinkData_STATUS_BITS PowerlinkData::UNDERVOLTAGE_FAULT;
const PowerlinkData_STATUS_BITS PowerlinkData::OVERCURRENT_FAULT;
const PowerlinkData_STATUS_BITS PowerlinkData::POWER_ENABLED;
const PowerlinkData_STATUS_BITS PowerlinkData::VBUSIN_UNDERVOLTAGE_FAULT;
const PowerlinkData_STATUS_BITS PowerlinkData::VCC_UNDERVOLTAGE_FAULT;
const PowerlinkData_STATUS_BITS PowerlinkData::SOFT_START_HEATSINK_TEMP_ALERT_70C;
const PowerlinkData_STATUS_BITS PowerlinkData::POWER_MOSFET_TEMP_ALERT_70C;
const PowerlinkData_STATUS_BITS PowerlinkData::STATUS_BITS_MIN;
const PowerlinkData_STATUS_BITS PowerlinkData::STATUS_BITS_MAX;
const int PowerlinkData::STATUS_BITS_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PowerlinkData::kStatusBitsFieldNumber;
const int PowerlinkData::kVersionFieldNumber;
const int PowerlinkData::kRevisionFieldNumber;
const int PowerlinkData::kGapFaultFieldNumber;
const int PowerlinkData::kInverterOvercurrentFaultFieldNumber;
const int PowerlinkData::kStatorCableFaultFieldNumber;
const int PowerlinkData::kFanFaultFieldNumber;
const int PowerlinkData::kMasterFaultFieldNumber;
const int PowerlinkData::kUndervoltageFaultFieldNumber;
const int PowerlinkData::kOvercurrentFaultFieldNumber;
const int PowerlinkData::kPowerEnabledFieldNumber;
const int PowerlinkData::kVbusinUndervoltageFaultFieldNumber;
const int PowerlinkData::kVccUndervoltageFaultFieldNumber;
const int PowerlinkData::kSoftStartHeatsinkTempAlertFieldNumber;
const int PowerlinkData::kPowerMosfetTempAlertFieldNumber;
const int PowerlinkData::kPfcHeatsinkTempAlertFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PowerlinkData::PowerlinkData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analogic.ancp00.PowerlinkData)
}

void PowerlinkData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PowerlinkData::PowerlinkData(const PowerlinkData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analogic.ancp00.PowerlinkData)
}

void PowerlinkData::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  status_bits_ = 0u;
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  revision_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gap_fault_ = false;
  inverter_overcurrent_fault_ = false;
  stator_cable_fault_ = false;
  fan_fault_ = false;
  master_fault_ = false;
  undervoltage_fault_ = false;
  overcurrent_fault_ = false;
  power_enabled_ = false;
  vbusin_undervoltage_fault_ = false;
  vcc_undervoltage_fault_ = false;
  soft_start_heatsink_temp_alert_ = false;
  power_mosfet_temp_alert_ = false;
  pfc_heatsink_temp_alert_ = false;
}

PowerlinkData::~PowerlinkData() {
  // @@protoc_insertion_point(destructor:analogic.ancp00.PowerlinkData)
  SharedDtor();
}

void PowerlinkData::SharedDtor() {
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  revision_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PowerlinkData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PowerlinkData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PowerlinkData_descriptor_;
}

const PowerlinkData& PowerlinkData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fPowerlinkComm_2eproto();
  return *default_instance_;
}

PowerlinkData* PowerlinkData::default_instance_ = NULL;

PowerlinkData* PowerlinkData::New(::google::protobuf::Arena* arena) const {
  PowerlinkData* n = new PowerlinkData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PowerlinkData::Clear() {
// @@protoc_insertion_point(message_clear_start:analogic.ancp00.PowerlinkData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PowerlinkData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PowerlinkData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(status_bits_, master_fault_);
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  revision_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(undervoltage_fault_, pfc_heatsink_temp_alert_);

#undef ZR_HELPER_
#undef ZR_

}

bool PowerlinkData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analogic.ancp00.PowerlinkData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 status_bits = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &status_bits_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_version;
        break;
      }

      // optional string version = 2;
      case 2: {
        if (tag == 18) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.PowerlinkData.version"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_revision;
        break;
      }

      // optional string revision = 3;
      case 3: {
        if (tag == 26) {
         parse_revision:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_revision()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->revision().data(), this->revision().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.PowerlinkData.revision"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_gap_fault;
        break;
      }

      // optional bool gap_fault = 10;
      case 10: {
        if (tag == 80) {
         parse_gap_fault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gap_fault_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_inverter_overcurrent_fault;
        break;
      }

      // optional bool inverter_overcurrent_fault = 11;
      case 11: {
        if (tag == 88) {
         parse_inverter_overcurrent_fault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &inverter_overcurrent_fault_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_stator_cable_fault;
        break;
      }

      // optional bool stator_cable_fault = 12;
      case 12: {
        if (tag == 96) {
         parse_stator_cable_fault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stator_cable_fault_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_fan_fault;
        break;
      }

      // optional bool fan_fault = 13;
      case 13: {
        if (tag == 104) {
         parse_fan_fault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fan_fault_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_master_fault;
        break;
      }

      // optional bool master_fault = 14;
      case 14: {
        if (tag == 112) {
         parse_master_fault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &master_fault_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_undervoltage_fault;
        break;
      }

      // optional bool undervoltage_fault = 15;
      case 15: {
        if (tag == 120) {
         parse_undervoltage_fault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &undervoltage_fault_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_overcurrent_fault;
        break;
      }

      // optional bool overcurrent_fault = 16;
      case 16: {
        if (tag == 128) {
         parse_overcurrent_fault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &overcurrent_fault_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_power_enabled;
        break;
      }

      // optional bool power_enabled = 17;
      case 17: {
        if (tag == 136) {
         parse_power_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &power_enabled_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_vbusin_undervoltage_fault;
        break;
      }

      // optional bool vbusin_undervoltage_fault = 18;
      case 18: {
        if (tag == 144) {
         parse_vbusin_undervoltage_fault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &vbusin_undervoltage_fault_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_vcc_undervoltage_fault;
        break;
      }

      // optional bool vcc_undervoltage_fault = 19;
      case 19: {
        if (tag == 152) {
         parse_vcc_undervoltage_fault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &vcc_undervoltage_fault_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_soft_start_heatsink_temp_alert;
        break;
      }

      // optional bool soft_start_heatsink_temp_alert = 20;
      case 20: {
        if (tag == 160) {
         parse_soft_start_heatsink_temp_alert:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &soft_start_heatsink_temp_alert_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_power_mosfet_temp_alert;
        break;
      }

      // optional bool power_mosfet_temp_alert = 21;
      case 21: {
        if (tag == 168) {
         parse_power_mosfet_temp_alert:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &power_mosfet_temp_alert_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_pfc_heatsink_temp_alert;
        break;
      }

      // optional bool pfc_heatsink_temp_alert = 22;
      case 22: {
        if (tag == 176) {
         parse_pfc_heatsink_temp_alert:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pfc_heatsink_temp_alert_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:analogic.ancp00.PowerlinkData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analogic.ancp00.PowerlinkData)
  return false;
#undef DO_
}

void PowerlinkData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analogic.ancp00.PowerlinkData)
  // optional fixed32 status_bits = 1;
  if (this->status_bits() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->status_bits(), output);
  }

  // optional string version = 2;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.PowerlinkData.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->version(), output);
  }

  // optional string revision = 3;
  if (this->revision().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->revision().data(), this->revision().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.PowerlinkData.revision");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->revision(), output);
  }

  // optional bool gap_fault = 10;
  if (this->gap_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->gap_fault(), output);
  }

  // optional bool inverter_overcurrent_fault = 11;
  if (this->inverter_overcurrent_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->inverter_overcurrent_fault(), output);
  }

  // optional bool stator_cable_fault = 12;
  if (this->stator_cable_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->stator_cable_fault(), output);
  }

  // optional bool fan_fault = 13;
  if (this->fan_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->fan_fault(), output);
  }

  // optional bool master_fault = 14;
  if (this->master_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->master_fault(), output);
  }

  // optional bool undervoltage_fault = 15;
  if (this->undervoltage_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->undervoltage_fault(), output);
  }

  // optional bool overcurrent_fault = 16;
  if (this->overcurrent_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->overcurrent_fault(), output);
  }

  // optional bool power_enabled = 17;
  if (this->power_enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->power_enabled(), output);
  }

  // optional bool vbusin_undervoltage_fault = 18;
  if (this->vbusin_undervoltage_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->vbusin_undervoltage_fault(), output);
  }

  // optional bool vcc_undervoltage_fault = 19;
  if (this->vcc_undervoltage_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->vcc_undervoltage_fault(), output);
  }

  // optional bool soft_start_heatsink_temp_alert = 20;
  if (this->soft_start_heatsink_temp_alert() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->soft_start_heatsink_temp_alert(), output);
  }

  // optional bool power_mosfet_temp_alert = 21;
  if (this->power_mosfet_temp_alert() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->power_mosfet_temp_alert(), output);
  }

  // optional bool pfc_heatsink_temp_alert = 22;
  if (this->pfc_heatsink_temp_alert() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->pfc_heatsink_temp_alert(), output);
  }

  // @@protoc_insertion_point(serialize_end:analogic.ancp00.PowerlinkData)
}

::google::protobuf::uint8* PowerlinkData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analogic.ancp00.PowerlinkData)
  // optional fixed32 status_bits = 1;
  if (this->status_bits() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->status_bits(), target);
  }

  // optional string version = 2;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.PowerlinkData.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->version(), target);
  }

  // optional string revision = 3;
  if (this->revision().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->revision().data(), this->revision().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.PowerlinkData.revision");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->revision(), target);
  }

  // optional bool gap_fault = 10;
  if (this->gap_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->gap_fault(), target);
  }

  // optional bool inverter_overcurrent_fault = 11;
  if (this->inverter_overcurrent_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->inverter_overcurrent_fault(), target);
  }

  // optional bool stator_cable_fault = 12;
  if (this->stator_cable_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->stator_cable_fault(), target);
  }

  // optional bool fan_fault = 13;
  if (this->fan_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->fan_fault(), target);
  }

  // optional bool master_fault = 14;
  if (this->master_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->master_fault(), target);
  }

  // optional bool undervoltage_fault = 15;
  if (this->undervoltage_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->undervoltage_fault(), target);
  }

  // optional bool overcurrent_fault = 16;
  if (this->overcurrent_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->overcurrent_fault(), target);
  }

  // optional bool power_enabled = 17;
  if (this->power_enabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->power_enabled(), target);
  }

  // optional bool vbusin_undervoltage_fault = 18;
  if (this->vbusin_undervoltage_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->vbusin_undervoltage_fault(), target);
  }

  // optional bool vcc_undervoltage_fault = 19;
  if (this->vcc_undervoltage_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->vcc_undervoltage_fault(), target);
  }

  // optional bool soft_start_heatsink_temp_alert = 20;
  if (this->soft_start_heatsink_temp_alert() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->soft_start_heatsink_temp_alert(), target);
  }

  // optional bool power_mosfet_temp_alert = 21;
  if (this->power_mosfet_temp_alert() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->power_mosfet_temp_alert(), target);
  }

  // optional bool pfc_heatsink_temp_alert = 22;
  if (this->pfc_heatsink_temp_alert() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->pfc_heatsink_temp_alert(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:analogic.ancp00.PowerlinkData)
  return target;
}

int PowerlinkData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:analogic.ancp00.PowerlinkData)
  int total_size = 0;

  // optional fixed32 status_bits = 1;
  if (this->status_bits() != 0) {
    total_size += 1 + 4;
  }

  // optional string version = 2;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // optional string revision = 3;
  if (this->revision().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->revision());
  }

  // optional bool gap_fault = 10;
  if (this->gap_fault() != 0) {
    total_size += 1 + 1;
  }

  // optional bool inverter_overcurrent_fault = 11;
  if (this->inverter_overcurrent_fault() != 0) {
    total_size += 1 + 1;
  }

  // optional bool stator_cable_fault = 12;
  if (this->stator_cable_fault() != 0) {
    total_size += 1 + 1;
  }

  // optional bool fan_fault = 13;
  if (this->fan_fault() != 0) {
    total_size += 1 + 1;
  }

  // optional bool master_fault = 14;
  if (this->master_fault() != 0) {
    total_size += 1 + 1;
  }

  // optional bool undervoltage_fault = 15;
  if (this->undervoltage_fault() != 0) {
    total_size += 1 + 1;
  }

  // optional bool overcurrent_fault = 16;
  if (this->overcurrent_fault() != 0) {
    total_size += 2 + 1;
  }

  // optional bool power_enabled = 17;
  if (this->power_enabled() != 0) {
    total_size += 2 + 1;
  }

  // optional bool vbusin_undervoltage_fault = 18;
  if (this->vbusin_undervoltage_fault() != 0) {
    total_size += 2 + 1;
  }

  // optional bool vcc_undervoltage_fault = 19;
  if (this->vcc_undervoltage_fault() != 0) {
    total_size += 2 + 1;
  }

  // optional bool soft_start_heatsink_temp_alert = 20;
  if (this->soft_start_heatsink_temp_alert() != 0) {
    total_size += 2 + 1;
  }

  // optional bool power_mosfet_temp_alert = 21;
  if (this->power_mosfet_temp_alert() != 0) {
    total_size += 2 + 1;
  }

  // optional bool pfc_heatsink_temp_alert = 22;
  if (this->pfc_heatsink_temp_alert() != 0) {
    total_size += 2 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PowerlinkData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analogic.ancp00.PowerlinkData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PowerlinkData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PowerlinkData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analogic.ancp00.PowerlinkData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analogic.ancp00.PowerlinkData)
    MergeFrom(*source);
  }
}

void PowerlinkData::MergeFrom(const PowerlinkData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analogic.ancp00.PowerlinkData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.status_bits() != 0) {
    set_status_bits(from.status_bits());
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.revision().size() > 0) {

    revision_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.revision_);
  }
  if (from.gap_fault() != 0) {
    set_gap_fault(from.gap_fault());
  }
  if (from.inverter_overcurrent_fault() != 0) {
    set_inverter_overcurrent_fault(from.inverter_overcurrent_fault());
  }
  if (from.stator_cable_fault() != 0) {
    set_stator_cable_fault(from.stator_cable_fault());
  }
  if (from.fan_fault() != 0) {
    set_fan_fault(from.fan_fault());
  }
  if (from.master_fault() != 0) {
    set_master_fault(from.master_fault());
  }
  if (from.undervoltage_fault() != 0) {
    set_undervoltage_fault(from.undervoltage_fault());
  }
  if (from.overcurrent_fault() != 0) {
    set_overcurrent_fault(from.overcurrent_fault());
  }
  if (from.power_enabled() != 0) {
    set_power_enabled(from.power_enabled());
  }
  if (from.vbusin_undervoltage_fault() != 0) {
    set_vbusin_undervoltage_fault(from.vbusin_undervoltage_fault());
  }
  if (from.vcc_undervoltage_fault() != 0) {
    set_vcc_undervoltage_fault(from.vcc_undervoltage_fault());
  }
  if (from.soft_start_heatsink_temp_alert() != 0) {
    set_soft_start_heatsink_temp_alert(from.soft_start_heatsink_temp_alert());
  }
  if (from.power_mosfet_temp_alert() != 0) {
    set_power_mosfet_temp_alert(from.power_mosfet_temp_alert());
  }
  if (from.pfc_heatsink_temp_alert() != 0) {
    set_pfc_heatsink_temp_alert(from.pfc_heatsink_temp_alert());
  }
}

void PowerlinkData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analogic.ancp00.PowerlinkData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PowerlinkData::CopyFrom(const PowerlinkData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analogic.ancp00.PowerlinkData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PowerlinkData::IsInitialized() const {

  return true;
}

void PowerlinkData::Swap(PowerlinkData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PowerlinkData::InternalSwap(PowerlinkData* other) {
  std::swap(status_bits_, other->status_bits_);
  version_.Swap(&other->version_);
  revision_.Swap(&other->revision_);
  std::swap(gap_fault_, other->gap_fault_);
  std::swap(inverter_overcurrent_fault_, other->inverter_overcurrent_fault_);
  std::swap(stator_cable_fault_, other->stator_cable_fault_);
  std::swap(fan_fault_, other->fan_fault_);
  std::swap(master_fault_, other->master_fault_);
  std::swap(undervoltage_fault_, other->undervoltage_fault_);
  std::swap(overcurrent_fault_, other->overcurrent_fault_);
  std::swap(power_enabled_, other->power_enabled_);
  std::swap(vbusin_undervoltage_fault_, other->vbusin_undervoltage_fault_);
  std::swap(vcc_undervoltage_fault_, other->vcc_undervoltage_fault_);
  std::swap(soft_start_heatsink_temp_alert_, other->soft_start_heatsink_temp_alert_);
  std::swap(power_mosfet_temp_alert_, other->power_mosfet_temp_alert_);
  std::swap(pfc_heatsink_temp_alert_, other->pfc_heatsink_temp_alert_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PowerlinkData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PowerlinkData_descriptor_;
  metadata.reflection = PowerlinkData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PowerlinkData

// optional fixed32 status_bits = 1;
void PowerlinkData::clear_status_bits() {
  status_bits_ = 0u;
}
 ::google::protobuf::uint32 PowerlinkData::status_bits() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PowerlinkData.status_bits)
  return status_bits_;
}
 void PowerlinkData::set_status_bits(::google::protobuf::uint32 value) {
  
  status_bits_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PowerlinkData.status_bits)
}

// optional string version = 2;
void PowerlinkData::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PowerlinkData::version() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PowerlinkData.version)
  return version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PowerlinkData::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.PowerlinkData.version)
}
 void PowerlinkData::set_version(const char* value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.PowerlinkData.version)
}
 void PowerlinkData::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.PowerlinkData.version)
}
 ::std::string* PowerlinkData::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.PowerlinkData.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PowerlinkData::release_version() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.PowerlinkData.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PowerlinkData::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.PowerlinkData.version)
}

// optional string revision = 3;
void PowerlinkData::clear_revision() {
  revision_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PowerlinkData::revision() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PowerlinkData.revision)
  return revision_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PowerlinkData::set_revision(const ::std::string& value) {
  
  revision_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.PowerlinkData.revision)
}
 void PowerlinkData::set_revision(const char* value) {
  
  revision_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.PowerlinkData.revision)
}
 void PowerlinkData::set_revision(const char* value, size_t size) {
  
  revision_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.PowerlinkData.revision)
}
 ::std::string* PowerlinkData::mutable_revision() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.PowerlinkData.revision)
  return revision_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PowerlinkData::release_revision() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.PowerlinkData.revision)
  
  return revision_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PowerlinkData::set_allocated_revision(::std::string* revision) {
  if (revision != NULL) {
    
  } else {
    
  }
  revision_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), revision);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.PowerlinkData.revision)
}

// optional bool gap_fault = 10;
void PowerlinkData::clear_gap_fault() {
  gap_fault_ = false;
}
 bool PowerlinkData::gap_fault() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PowerlinkData.gap_fault)
  return gap_fault_;
}
 void PowerlinkData::set_gap_fault(bool value) {
  
  gap_fault_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PowerlinkData.gap_fault)
}

// optional bool inverter_overcurrent_fault = 11;
void PowerlinkData::clear_inverter_overcurrent_fault() {
  inverter_overcurrent_fault_ = false;
}
 bool PowerlinkData::inverter_overcurrent_fault() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PowerlinkData.inverter_overcurrent_fault)
  return inverter_overcurrent_fault_;
}
 void PowerlinkData::set_inverter_overcurrent_fault(bool value) {
  
  inverter_overcurrent_fault_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PowerlinkData.inverter_overcurrent_fault)
}

// optional bool stator_cable_fault = 12;
void PowerlinkData::clear_stator_cable_fault() {
  stator_cable_fault_ = false;
}
 bool PowerlinkData::stator_cable_fault() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PowerlinkData.stator_cable_fault)
  return stator_cable_fault_;
}
 void PowerlinkData::set_stator_cable_fault(bool value) {
  
  stator_cable_fault_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PowerlinkData.stator_cable_fault)
}

// optional bool fan_fault = 13;
void PowerlinkData::clear_fan_fault() {
  fan_fault_ = false;
}
 bool PowerlinkData::fan_fault() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PowerlinkData.fan_fault)
  return fan_fault_;
}
 void PowerlinkData::set_fan_fault(bool value) {
  
  fan_fault_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PowerlinkData.fan_fault)
}

// optional bool master_fault = 14;
void PowerlinkData::clear_master_fault() {
  master_fault_ = false;
}
 bool PowerlinkData::master_fault() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PowerlinkData.master_fault)
  return master_fault_;
}
 void PowerlinkData::set_master_fault(bool value) {
  
  master_fault_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PowerlinkData.master_fault)
}

// optional bool undervoltage_fault = 15;
void PowerlinkData::clear_undervoltage_fault() {
  undervoltage_fault_ = false;
}
 bool PowerlinkData::undervoltage_fault() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PowerlinkData.undervoltage_fault)
  return undervoltage_fault_;
}
 void PowerlinkData::set_undervoltage_fault(bool value) {
  
  undervoltage_fault_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PowerlinkData.undervoltage_fault)
}

// optional bool overcurrent_fault = 16;
void PowerlinkData::clear_overcurrent_fault() {
  overcurrent_fault_ = false;
}
 bool PowerlinkData::overcurrent_fault() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PowerlinkData.overcurrent_fault)
  return overcurrent_fault_;
}
 void PowerlinkData::set_overcurrent_fault(bool value) {
  
  overcurrent_fault_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PowerlinkData.overcurrent_fault)
}

// optional bool power_enabled = 17;
void PowerlinkData::clear_power_enabled() {
  power_enabled_ = false;
}
 bool PowerlinkData::power_enabled() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PowerlinkData.power_enabled)
  return power_enabled_;
}
 void PowerlinkData::set_power_enabled(bool value) {
  
  power_enabled_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PowerlinkData.power_enabled)
}

// optional bool vbusin_undervoltage_fault = 18;
void PowerlinkData::clear_vbusin_undervoltage_fault() {
  vbusin_undervoltage_fault_ = false;
}
 bool PowerlinkData::vbusin_undervoltage_fault() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PowerlinkData.vbusin_undervoltage_fault)
  return vbusin_undervoltage_fault_;
}
 void PowerlinkData::set_vbusin_undervoltage_fault(bool value) {
  
  vbusin_undervoltage_fault_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PowerlinkData.vbusin_undervoltage_fault)
}

// optional bool vcc_undervoltage_fault = 19;
void PowerlinkData::clear_vcc_undervoltage_fault() {
  vcc_undervoltage_fault_ = false;
}
 bool PowerlinkData::vcc_undervoltage_fault() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PowerlinkData.vcc_undervoltage_fault)
  return vcc_undervoltage_fault_;
}
 void PowerlinkData::set_vcc_undervoltage_fault(bool value) {
  
  vcc_undervoltage_fault_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PowerlinkData.vcc_undervoltage_fault)
}

// optional bool soft_start_heatsink_temp_alert = 20;
void PowerlinkData::clear_soft_start_heatsink_temp_alert() {
  soft_start_heatsink_temp_alert_ = false;
}
 bool PowerlinkData::soft_start_heatsink_temp_alert() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PowerlinkData.soft_start_heatsink_temp_alert)
  return soft_start_heatsink_temp_alert_;
}
 void PowerlinkData::set_soft_start_heatsink_temp_alert(bool value) {
  
  soft_start_heatsink_temp_alert_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PowerlinkData.soft_start_heatsink_temp_alert)
}

// optional bool power_mosfet_temp_alert = 21;
void PowerlinkData::clear_power_mosfet_temp_alert() {
  power_mosfet_temp_alert_ = false;
}
 bool PowerlinkData::power_mosfet_temp_alert() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PowerlinkData.power_mosfet_temp_alert)
  return power_mosfet_temp_alert_;
}
 void PowerlinkData::set_power_mosfet_temp_alert(bool value) {
  
  power_mosfet_temp_alert_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PowerlinkData.power_mosfet_temp_alert)
}

// optional bool pfc_heatsink_temp_alert = 22;
void PowerlinkData::clear_pfc_heatsink_temp_alert() {
  pfc_heatsink_temp_alert_ = false;
}
 bool PowerlinkData::pfc_heatsink_temp_alert() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.PowerlinkData.pfc_heatsink_temp_alert)
  return pfc_heatsink_temp_alert_;
}
 void PowerlinkData::set_pfc_heatsink_temp_alert(bool value) {
  
  pfc_heatsink_temp_alert_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.PowerlinkData.pfc_heatsink_temp_alert)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ancp00
}  // namespace analogic

// @@protoc_insertion_point(global_scope)
