// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/Ups.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/Ups.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace analogic {
namespace ancp00 {

namespace {

const ::google::protobuf::Descriptor* UpsStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpsStatus_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_2fUps_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_proto_2fUps_2eproto() {
  protobuf_AddDesc_proto_2fUps_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto/Ups.proto");
  GOOGLE_CHECK(file != NULL);
  UpsStatus_descriptor_ = file->message_type(0);
  static const int UpsStatus_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpsStatus, input_voltage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpsStatus, input_frequency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpsStatus, output_voltage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpsStatus, output_frequency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpsStatus, output_current_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpsStatus, battery_runtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpsStatus, battery_charge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpsStatus, battery_capacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpsStatus, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpsStatus, test_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpsStatus, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpsStatus, serial_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpsStatus, firmware_version_),
  };
  UpsStatus_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UpsStatus_descriptor_,
      UpsStatus::default_instance_,
      UpsStatus_offsets_,
      -1,
      -1,
      -1,
      sizeof(UpsStatus),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpsStatus, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpsStatus, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_2fUps_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UpsStatus_descriptor_, &UpsStatus::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_2fUps_2eproto() {
  delete UpsStatus::default_instance_;
  delete UpsStatus_reflection_;
}

void protobuf_AddDesc_proto_2fUps_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_proto_2fUps_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017proto/Ups.proto\022\017analogic.ancp00\"\265\002\n\tU"
    "psStatus\022\025\n\rinput_voltage\030\001 \001(\t\022\027\n\017input"
    "_frequency\030\002 \001(\t\022\026\n\016output_voltage\030\003 \001(\t"
    "\022\030\n\020output_frequency\030\004 \001(\t\022\026\n\016output_cur"
    "rent\030\005 \001(\t\022\027\n\017battery_runtime\030\006 \001(\t\022\026\n\016b"
    "attery_charge\030\007 \001(\t\022\030\n\020battery_capacity\030"
    "\010 \001(\t\022\016\n\006status\030\t \001(\t\022\023\n\013test_result\030\n \001"
    "(\t\022\r\n\005model\030\013 \001(\t\022\025\n\rserial_number\030\014 \001(\t"
    "\022\030\n\020firmware_version\030\r \001(\tb\006proto3", 354);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/Ups.proto", &protobuf_RegisterTypes);
  UpsStatus::default_instance_ = new UpsStatus();
  UpsStatus::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2fUps_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2fUps_2eproto {
  StaticDescriptorInitializer_proto_2fUps_2eproto() {
    protobuf_AddDesc_proto_2fUps_2eproto();
  }
} static_descriptor_initializer_proto_2fUps_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpsStatus::kInputVoltageFieldNumber;
const int UpsStatus::kInputFrequencyFieldNumber;
const int UpsStatus::kOutputVoltageFieldNumber;
const int UpsStatus::kOutputFrequencyFieldNumber;
const int UpsStatus::kOutputCurrentFieldNumber;
const int UpsStatus::kBatteryRuntimeFieldNumber;
const int UpsStatus::kBatteryChargeFieldNumber;
const int UpsStatus::kBatteryCapacityFieldNumber;
const int UpsStatus::kStatusFieldNumber;
const int UpsStatus::kTestResultFieldNumber;
const int UpsStatus::kModelFieldNumber;
const int UpsStatus::kSerialNumberFieldNumber;
const int UpsStatus::kFirmwareVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpsStatus::UpsStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analogic.ancp00.UpsStatus)
}

void UpsStatus::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

UpsStatus::UpsStatus(const UpsStatus& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analogic.ancp00.UpsStatus)
}

void UpsStatus::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  input_voltage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  input_frequency_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  output_voltage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  output_frequency_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  output_current_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  battery_runtime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  battery_charge_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  battery_capacity_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  test_result_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  firmware_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

UpsStatus::~UpsStatus() {
  // @@protoc_insertion_point(destructor:analogic.ancp00.UpsStatus)
  SharedDtor();
}

void UpsStatus::SharedDtor() {
  input_voltage_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  input_frequency_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  output_voltage_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  output_frequency_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  output_current_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  battery_runtime_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  battery_charge_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  battery_capacity_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  test_result_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  firmware_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void UpsStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpsStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpsStatus_descriptor_;
}

const UpsStatus& UpsStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fUps_2eproto();
  return *default_instance_;
}

UpsStatus* UpsStatus::default_instance_ = NULL;

UpsStatus* UpsStatus::New(::google::protobuf::Arena* arena) const {
  UpsStatus* n = new UpsStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpsStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:analogic.ancp00.UpsStatus)
  input_voltage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  input_frequency_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  output_voltage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  output_frequency_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  output_current_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  battery_runtime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  battery_charge_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  battery_capacity_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  test_result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  firmware_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool UpsStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analogic.ancp00.UpsStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string input_voltage = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_input_voltage()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->input_voltage().data(), this->input_voltage().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.UpsStatus.input_voltage"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_input_frequency;
        break;
      }

      // optional string input_frequency = 2;
      case 2: {
        if (tag == 18) {
         parse_input_frequency:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_input_frequency()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->input_frequency().data(), this->input_frequency().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.UpsStatus.input_frequency"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_output_voltage;
        break;
      }

      // optional string output_voltage = 3;
      case 3: {
        if (tag == 26) {
         parse_output_voltage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_output_voltage()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->output_voltage().data(), this->output_voltage().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.UpsStatus.output_voltage"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_output_frequency;
        break;
      }

      // optional string output_frequency = 4;
      case 4: {
        if (tag == 34) {
         parse_output_frequency:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_output_frequency()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->output_frequency().data(), this->output_frequency().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.UpsStatus.output_frequency"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_output_current;
        break;
      }

      // optional string output_current = 5;
      case 5: {
        if (tag == 42) {
         parse_output_current:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_output_current()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->output_current().data(), this->output_current().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.UpsStatus.output_current"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_battery_runtime;
        break;
      }

      // optional string battery_runtime = 6;
      case 6: {
        if (tag == 50) {
         parse_battery_runtime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_battery_runtime()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->battery_runtime().data(), this->battery_runtime().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.UpsStatus.battery_runtime"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_battery_charge;
        break;
      }

      // optional string battery_charge = 7;
      case 7: {
        if (tag == 58) {
         parse_battery_charge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_battery_charge()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->battery_charge().data(), this->battery_charge().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.UpsStatus.battery_charge"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_battery_capacity;
        break;
      }

      // optional string battery_capacity = 8;
      case 8: {
        if (tag == 66) {
         parse_battery_capacity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_battery_capacity()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->battery_capacity().data(), this->battery_capacity().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.UpsStatus.battery_capacity"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_status;
        break;
      }

      // optional string status = 9;
      case 9: {
        if (tag == 74) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->status().data(), this->status().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.UpsStatus.status"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_test_result;
        break;
      }

      // optional string test_result = 10;
      case 10: {
        if (tag == 82) {
         parse_test_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_test_result()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->test_result().data(), this->test_result().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.UpsStatus.test_result"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_model;
        break;
      }

      // optional string model = 11;
      case 11: {
        if (tag == 90) {
         parse_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->model().data(), this->model().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.UpsStatus.model"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_serial_number;
        break;
      }

      // optional string serial_number = 12;
      case 12: {
        if (tag == 98) {
         parse_serial_number:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serial_number()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->serial_number().data(), this->serial_number().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.UpsStatus.serial_number"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_firmware_version;
        break;
      }

      // optional string firmware_version = 13;
      case 13: {
        if (tag == 106) {
         parse_firmware_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_firmware_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->firmware_version().data(), this->firmware_version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.UpsStatus.firmware_version"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:analogic.ancp00.UpsStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analogic.ancp00.UpsStatus)
  return false;
#undef DO_
}

void UpsStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analogic.ancp00.UpsStatus)
  // optional string input_voltage = 1;
  if (this->input_voltage().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->input_voltage().data(), this->input_voltage().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.UpsStatus.input_voltage");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->input_voltage(), output);
  }

  // optional string input_frequency = 2;
  if (this->input_frequency().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->input_frequency().data(), this->input_frequency().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.UpsStatus.input_frequency");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->input_frequency(), output);
  }

  // optional string output_voltage = 3;
  if (this->output_voltage().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->output_voltage().data(), this->output_voltage().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.UpsStatus.output_voltage");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->output_voltage(), output);
  }

  // optional string output_frequency = 4;
  if (this->output_frequency().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->output_frequency().data(), this->output_frequency().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.UpsStatus.output_frequency");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->output_frequency(), output);
  }

  // optional string output_current = 5;
  if (this->output_current().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->output_current().data(), this->output_current().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.UpsStatus.output_current");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->output_current(), output);
  }

  // optional string battery_runtime = 6;
  if (this->battery_runtime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->battery_runtime().data(), this->battery_runtime().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.UpsStatus.battery_runtime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->battery_runtime(), output);
  }

  // optional string battery_charge = 7;
  if (this->battery_charge().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->battery_charge().data(), this->battery_charge().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.UpsStatus.battery_charge");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->battery_charge(), output);
  }

  // optional string battery_capacity = 8;
  if (this->battery_capacity().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->battery_capacity().data(), this->battery_capacity().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.UpsStatus.battery_capacity");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->battery_capacity(), output);
  }

  // optional string status = 9;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.UpsStatus.status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->status(), output);
  }

  // optional string test_result = 10;
  if (this->test_result().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->test_result().data(), this->test_result().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.UpsStatus.test_result");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->test_result(), output);
  }

  // optional string model = 11;
  if (this->model().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.UpsStatus.model");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->model(), output);
  }

  // optional string serial_number = 12;
  if (this->serial_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serial_number().data(), this->serial_number().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.UpsStatus.serial_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->serial_number(), output);
  }

  // optional string firmware_version = 13;
  if (this->firmware_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->firmware_version().data(), this->firmware_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.UpsStatus.firmware_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->firmware_version(), output);
  }

  // @@protoc_insertion_point(serialize_end:analogic.ancp00.UpsStatus)
}

::google::protobuf::uint8* UpsStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analogic.ancp00.UpsStatus)
  // optional string input_voltage = 1;
  if (this->input_voltage().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->input_voltage().data(), this->input_voltage().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.UpsStatus.input_voltage");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->input_voltage(), target);
  }

  // optional string input_frequency = 2;
  if (this->input_frequency().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->input_frequency().data(), this->input_frequency().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.UpsStatus.input_frequency");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->input_frequency(), target);
  }

  // optional string output_voltage = 3;
  if (this->output_voltage().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->output_voltage().data(), this->output_voltage().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.UpsStatus.output_voltage");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->output_voltage(), target);
  }

  // optional string output_frequency = 4;
  if (this->output_frequency().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->output_frequency().data(), this->output_frequency().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.UpsStatus.output_frequency");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->output_frequency(), target);
  }

  // optional string output_current = 5;
  if (this->output_current().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->output_current().data(), this->output_current().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.UpsStatus.output_current");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->output_current(), target);
  }

  // optional string battery_runtime = 6;
  if (this->battery_runtime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->battery_runtime().data(), this->battery_runtime().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.UpsStatus.battery_runtime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->battery_runtime(), target);
  }

  // optional string battery_charge = 7;
  if (this->battery_charge().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->battery_charge().data(), this->battery_charge().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.UpsStatus.battery_charge");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->battery_charge(), target);
  }

  // optional string battery_capacity = 8;
  if (this->battery_capacity().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->battery_capacity().data(), this->battery_capacity().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.UpsStatus.battery_capacity");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->battery_capacity(), target);
  }

  // optional string status = 9;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.UpsStatus.status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->status(), target);
  }

  // optional string test_result = 10;
  if (this->test_result().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->test_result().data(), this->test_result().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.UpsStatus.test_result");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->test_result(), target);
  }

  // optional string model = 11;
  if (this->model().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.UpsStatus.model");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->model(), target);
  }

  // optional string serial_number = 12;
  if (this->serial_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serial_number().data(), this->serial_number().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.UpsStatus.serial_number");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->serial_number(), target);
  }

  // optional string firmware_version = 13;
  if (this->firmware_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->firmware_version().data(), this->firmware_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.UpsStatus.firmware_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->firmware_version(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:analogic.ancp00.UpsStatus)
  return target;
}

int UpsStatus::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:analogic.ancp00.UpsStatus)
  int total_size = 0;

  // optional string input_voltage = 1;
  if (this->input_voltage().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->input_voltage());
  }

  // optional string input_frequency = 2;
  if (this->input_frequency().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->input_frequency());
  }

  // optional string output_voltage = 3;
  if (this->output_voltage().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->output_voltage());
  }

  // optional string output_frequency = 4;
  if (this->output_frequency().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->output_frequency());
  }

  // optional string output_current = 5;
  if (this->output_current().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->output_current());
  }

  // optional string battery_runtime = 6;
  if (this->battery_runtime().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->battery_runtime());
  }

  // optional string battery_charge = 7;
  if (this->battery_charge().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->battery_charge());
  }

  // optional string battery_capacity = 8;
  if (this->battery_capacity().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->battery_capacity());
  }

  // optional string status = 9;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->status());
  }

  // optional string test_result = 10;
  if (this->test_result().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->test_result());
  }

  // optional string model = 11;
  if (this->model().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model());
  }

  // optional string serial_number = 12;
  if (this->serial_number().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serial_number());
  }

  // optional string firmware_version = 13;
  if (this->firmware_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->firmware_version());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpsStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analogic.ancp00.UpsStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UpsStatus* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UpsStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analogic.ancp00.UpsStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analogic.ancp00.UpsStatus)
    MergeFrom(*source);
  }
}

void UpsStatus::MergeFrom(const UpsStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analogic.ancp00.UpsStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.input_voltage().size() > 0) {

    input_voltage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.input_voltage_);
  }
  if (from.input_frequency().size() > 0) {

    input_frequency_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.input_frequency_);
  }
  if (from.output_voltage().size() > 0) {

    output_voltage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.output_voltage_);
  }
  if (from.output_frequency().size() > 0) {

    output_frequency_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.output_frequency_);
  }
  if (from.output_current().size() > 0) {

    output_current_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.output_current_);
  }
  if (from.battery_runtime().size() > 0) {

    battery_runtime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.battery_runtime_);
  }
  if (from.battery_charge().size() > 0) {

    battery_charge_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.battery_charge_);
  }
  if (from.battery_capacity().size() > 0) {

    battery_capacity_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.battery_capacity_);
  }
  if (from.status().size() > 0) {

    status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  if (from.test_result().size() > 0) {

    test_result_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.test_result_);
  }
  if (from.model().size() > 0) {

    model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_);
  }
  if (from.serial_number().size() > 0) {

    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  if (from.firmware_version().size() > 0) {

    firmware_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.firmware_version_);
  }
}

void UpsStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analogic.ancp00.UpsStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpsStatus::CopyFrom(const UpsStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analogic.ancp00.UpsStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpsStatus::IsInitialized() const {

  return true;
}

void UpsStatus::Swap(UpsStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpsStatus::InternalSwap(UpsStatus* other) {
  input_voltage_.Swap(&other->input_voltage_);
  input_frequency_.Swap(&other->input_frequency_);
  output_voltage_.Swap(&other->output_voltage_);
  output_frequency_.Swap(&other->output_frequency_);
  output_current_.Swap(&other->output_current_);
  battery_runtime_.Swap(&other->battery_runtime_);
  battery_charge_.Swap(&other->battery_charge_);
  battery_capacity_.Swap(&other->battery_capacity_);
  status_.Swap(&other->status_);
  test_result_.Swap(&other->test_result_);
  model_.Swap(&other->model_);
  serial_number_.Swap(&other->serial_number_);
  firmware_version_.Swap(&other->firmware_version_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpsStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpsStatus_descriptor_;
  metadata.reflection = UpsStatus_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpsStatus

// optional string input_voltage = 1;
void UpsStatus::clear_input_voltage() {
  input_voltage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& UpsStatus::input_voltage() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.UpsStatus.input_voltage)
  return input_voltage_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UpsStatus::set_input_voltage(const ::std::string& value) {
  
  input_voltage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.UpsStatus.input_voltage)
}
 void UpsStatus::set_input_voltage(const char* value) {
  
  input_voltage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.UpsStatus.input_voltage)
}
 void UpsStatus::set_input_voltage(const char* value, size_t size) {
  
  input_voltage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.UpsStatus.input_voltage)
}
 ::std::string* UpsStatus::mutable_input_voltage() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.UpsStatus.input_voltage)
  return input_voltage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UpsStatus::release_input_voltage() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.UpsStatus.input_voltage)
  
  return input_voltage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UpsStatus::set_allocated_input_voltage(::std::string* input_voltage) {
  if (input_voltage != NULL) {
    
  } else {
    
  }
  input_voltage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), input_voltage);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.UpsStatus.input_voltage)
}

// optional string input_frequency = 2;
void UpsStatus::clear_input_frequency() {
  input_frequency_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& UpsStatus::input_frequency() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.UpsStatus.input_frequency)
  return input_frequency_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UpsStatus::set_input_frequency(const ::std::string& value) {
  
  input_frequency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.UpsStatus.input_frequency)
}
 void UpsStatus::set_input_frequency(const char* value) {
  
  input_frequency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.UpsStatus.input_frequency)
}
 void UpsStatus::set_input_frequency(const char* value, size_t size) {
  
  input_frequency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.UpsStatus.input_frequency)
}
 ::std::string* UpsStatus::mutable_input_frequency() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.UpsStatus.input_frequency)
  return input_frequency_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UpsStatus::release_input_frequency() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.UpsStatus.input_frequency)
  
  return input_frequency_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UpsStatus::set_allocated_input_frequency(::std::string* input_frequency) {
  if (input_frequency != NULL) {
    
  } else {
    
  }
  input_frequency_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), input_frequency);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.UpsStatus.input_frequency)
}

// optional string output_voltage = 3;
void UpsStatus::clear_output_voltage() {
  output_voltage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& UpsStatus::output_voltage() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.UpsStatus.output_voltage)
  return output_voltage_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UpsStatus::set_output_voltage(const ::std::string& value) {
  
  output_voltage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.UpsStatus.output_voltage)
}
 void UpsStatus::set_output_voltage(const char* value) {
  
  output_voltage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.UpsStatus.output_voltage)
}
 void UpsStatus::set_output_voltage(const char* value, size_t size) {
  
  output_voltage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.UpsStatus.output_voltage)
}
 ::std::string* UpsStatus::mutable_output_voltage() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.UpsStatus.output_voltage)
  return output_voltage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UpsStatus::release_output_voltage() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.UpsStatus.output_voltage)
  
  return output_voltage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UpsStatus::set_allocated_output_voltage(::std::string* output_voltage) {
  if (output_voltage != NULL) {
    
  } else {
    
  }
  output_voltage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), output_voltage);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.UpsStatus.output_voltage)
}

// optional string output_frequency = 4;
void UpsStatus::clear_output_frequency() {
  output_frequency_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& UpsStatus::output_frequency() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.UpsStatus.output_frequency)
  return output_frequency_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UpsStatus::set_output_frequency(const ::std::string& value) {
  
  output_frequency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.UpsStatus.output_frequency)
}
 void UpsStatus::set_output_frequency(const char* value) {
  
  output_frequency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.UpsStatus.output_frequency)
}
 void UpsStatus::set_output_frequency(const char* value, size_t size) {
  
  output_frequency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.UpsStatus.output_frequency)
}
 ::std::string* UpsStatus::mutable_output_frequency() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.UpsStatus.output_frequency)
  return output_frequency_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UpsStatus::release_output_frequency() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.UpsStatus.output_frequency)
  
  return output_frequency_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UpsStatus::set_allocated_output_frequency(::std::string* output_frequency) {
  if (output_frequency != NULL) {
    
  } else {
    
  }
  output_frequency_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), output_frequency);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.UpsStatus.output_frequency)
}

// optional string output_current = 5;
void UpsStatus::clear_output_current() {
  output_current_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& UpsStatus::output_current() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.UpsStatus.output_current)
  return output_current_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UpsStatus::set_output_current(const ::std::string& value) {
  
  output_current_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.UpsStatus.output_current)
}
 void UpsStatus::set_output_current(const char* value) {
  
  output_current_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.UpsStatus.output_current)
}
 void UpsStatus::set_output_current(const char* value, size_t size) {
  
  output_current_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.UpsStatus.output_current)
}
 ::std::string* UpsStatus::mutable_output_current() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.UpsStatus.output_current)
  return output_current_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UpsStatus::release_output_current() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.UpsStatus.output_current)
  
  return output_current_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UpsStatus::set_allocated_output_current(::std::string* output_current) {
  if (output_current != NULL) {
    
  } else {
    
  }
  output_current_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), output_current);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.UpsStatus.output_current)
}

// optional string battery_runtime = 6;
void UpsStatus::clear_battery_runtime() {
  battery_runtime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& UpsStatus::battery_runtime() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.UpsStatus.battery_runtime)
  return battery_runtime_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UpsStatus::set_battery_runtime(const ::std::string& value) {
  
  battery_runtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.UpsStatus.battery_runtime)
}
 void UpsStatus::set_battery_runtime(const char* value) {
  
  battery_runtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.UpsStatus.battery_runtime)
}
 void UpsStatus::set_battery_runtime(const char* value, size_t size) {
  
  battery_runtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.UpsStatus.battery_runtime)
}
 ::std::string* UpsStatus::mutable_battery_runtime() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.UpsStatus.battery_runtime)
  return battery_runtime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UpsStatus::release_battery_runtime() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.UpsStatus.battery_runtime)
  
  return battery_runtime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UpsStatus::set_allocated_battery_runtime(::std::string* battery_runtime) {
  if (battery_runtime != NULL) {
    
  } else {
    
  }
  battery_runtime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), battery_runtime);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.UpsStatus.battery_runtime)
}

// optional string battery_charge = 7;
void UpsStatus::clear_battery_charge() {
  battery_charge_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& UpsStatus::battery_charge() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.UpsStatus.battery_charge)
  return battery_charge_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UpsStatus::set_battery_charge(const ::std::string& value) {
  
  battery_charge_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.UpsStatus.battery_charge)
}
 void UpsStatus::set_battery_charge(const char* value) {
  
  battery_charge_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.UpsStatus.battery_charge)
}
 void UpsStatus::set_battery_charge(const char* value, size_t size) {
  
  battery_charge_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.UpsStatus.battery_charge)
}
 ::std::string* UpsStatus::mutable_battery_charge() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.UpsStatus.battery_charge)
  return battery_charge_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UpsStatus::release_battery_charge() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.UpsStatus.battery_charge)
  
  return battery_charge_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UpsStatus::set_allocated_battery_charge(::std::string* battery_charge) {
  if (battery_charge != NULL) {
    
  } else {
    
  }
  battery_charge_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), battery_charge);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.UpsStatus.battery_charge)
}

// optional string battery_capacity = 8;
void UpsStatus::clear_battery_capacity() {
  battery_capacity_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& UpsStatus::battery_capacity() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.UpsStatus.battery_capacity)
  return battery_capacity_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UpsStatus::set_battery_capacity(const ::std::string& value) {
  
  battery_capacity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.UpsStatus.battery_capacity)
}
 void UpsStatus::set_battery_capacity(const char* value) {
  
  battery_capacity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.UpsStatus.battery_capacity)
}
 void UpsStatus::set_battery_capacity(const char* value, size_t size) {
  
  battery_capacity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.UpsStatus.battery_capacity)
}
 ::std::string* UpsStatus::mutable_battery_capacity() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.UpsStatus.battery_capacity)
  return battery_capacity_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UpsStatus::release_battery_capacity() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.UpsStatus.battery_capacity)
  
  return battery_capacity_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UpsStatus::set_allocated_battery_capacity(::std::string* battery_capacity) {
  if (battery_capacity != NULL) {
    
  } else {
    
  }
  battery_capacity_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), battery_capacity);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.UpsStatus.battery_capacity)
}

// optional string status = 9;
void UpsStatus::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& UpsStatus::status() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.UpsStatus.status)
  return status_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UpsStatus::set_status(const ::std::string& value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.UpsStatus.status)
}
 void UpsStatus::set_status(const char* value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.UpsStatus.status)
}
 void UpsStatus::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.UpsStatus.status)
}
 ::std::string* UpsStatus::mutable_status() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.UpsStatus.status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UpsStatus::release_status() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.UpsStatus.status)
  
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UpsStatus::set_allocated_status(::std::string* status) {
  if (status != NULL) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.UpsStatus.status)
}

// optional string test_result = 10;
void UpsStatus::clear_test_result() {
  test_result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& UpsStatus::test_result() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.UpsStatus.test_result)
  return test_result_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UpsStatus::set_test_result(const ::std::string& value) {
  
  test_result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.UpsStatus.test_result)
}
 void UpsStatus::set_test_result(const char* value) {
  
  test_result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.UpsStatus.test_result)
}
 void UpsStatus::set_test_result(const char* value, size_t size) {
  
  test_result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.UpsStatus.test_result)
}
 ::std::string* UpsStatus::mutable_test_result() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.UpsStatus.test_result)
  return test_result_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UpsStatus::release_test_result() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.UpsStatus.test_result)
  
  return test_result_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UpsStatus::set_allocated_test_result(::std::string* test_result) {
  if (test_result != NULL) {
    
  } else {
    
  }
  test_result_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), test_result);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.UpsStatus.test_result)
}

// optional string model = 11;
void UpsStatus::clear_model() {
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& UpsStatus::model() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.UpsStatus.model)
  return model_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UpsStatus::set_model(const ::std::string& value) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.UpsStatus.model)
}
 void UpsStatus::set_model(const char* value) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.UpsStatus.model)
}
 void UpsStatus::set_model(const char* value, size_t size) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.UpsStatus.model)
}
 ::std::string* UpsStatus::mutable_model() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.UpsStatus.model)
  return model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UpsStatus::release_model() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.UpsStatus.model)
  
  return model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UpsStatus::set_allocated_model(::std::string* model) {
  if (model != NULL) {
    
  } else {
    
  }
  model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.UpsStatus.model)
}

// optional string serial_number = 12;
void UpsStatus::clear_serial_number() {
  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& UpsStatus::serial_number() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.UpsStatus.serial_number)
  return serial_number_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UpsStatus::set_serial_number(const ::std::string& value) {
  
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.UpsStatus.serial_number)
}
 void UpsStatus::set_serial_number(const char* value) {
  
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.UpsStatus.serial_number)
}
 void UpsStatus::set_serial_number(const char* value, size_t size) {
  
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.UpsStatus.serial_number)
}
 ::std::string* UpsStatus::mutable_serial_number() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.UpsStatus.serial_number)
  return serial_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UpsStatus::release_serial_number() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.UpsStatus.serial_number)
  
  return serial_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UpsStatus::set_allocated_serial_number(::std::string* serial_number) {
  if (serial_number != NULL) {
    
  } else {
    
  }
  serial_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serial_number);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.UpsStatus.serial_number)
}

// optional string firmware_version = 13;
void UpsStatus::clear_firmware_version() {
  firmware_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& UpsStatus::firmware_version() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.UpsStatus.firmware_version)
  return firmware_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UpsStatus::set_firmware_version(const ::std::string& value) {
  
  firmware_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.UpsStatus.firmware_version)
}
 void UpsStatus::set_firmware_version(const char* value) {
  
  firmware_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.UpsStatus.firmware_version)
}
 void UpsStatus::set_firmware_version(const char* value, size_t size) {
  
  firmware_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.UpsStatus.firmware_version)
}
 ::std::string* UpsStatus::mutable_firmware_version() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.UpsStatus.firmware_version)
  return firmware_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UpsStatus::release_firmware_version() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.UpsStatus.firmware_version)
  
  return firmware_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UpsStatus::set_allocated_firmware_version(::std::string* firmware_version) {
  if (firmware_version != NULL) {
    
  } else {
    
  }
  firmware_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), firmware_version);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.UpsStatus.firmware_version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ancp00
}  // namespace analogic

// @@protoc_insertion_point(global_scope)
