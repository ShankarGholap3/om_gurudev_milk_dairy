// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/NetworkInterfaceManager.proto

#ifndef PROTOBUF_proto_2fNetworkInterfaceManager_2eproto__INCLUDED
#define PROTOBUF_proto_2fNetworkInterfaceManager_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace analogic {
namespace ancp00 {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_proto_2fNetworkInterfaceManager_2eproto();
void protobuf_AssignDesc_proto_2fNetworkInterfaceManager_2eproto();
void protobuf_ShutdownFile_proto_2fNetworkInterfaceManager_2eproto();

class NetworkInterfaceManagerStatusMsg;

enum NetworkInterfaceManagerStatusMsg_NimState {
  NetworkInterfaceManagerStatusMsg_NimState_UNINIT = 0,
  NetworkInterfaceManagerStatusMsg_NimState_NIM_CONNECTED = 1,
  NetworkInterfaceManagerStatusMsg_NimState_NIM_DISCONNECTED = 2,
  NetworkInterfaceManagerStatusMsg_NimState_NetworkInterfaceManagerStatusMsg_NimState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  NetworkInterfaceManagerStatusMsg_NimState_NetworkInterfaceManagerStatusMsg_NimState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool NetworkInterfaceManagerStatusMsg_NimState_IsValid(int value);
const NetworkInterfaceManagerStatusMsg_NimState NetworkInterfaceManagerStatusMsg_NimState_NimState_MIN = NetworkInterfaceManagerStatusMsg_NimState_UNINIT;
const NetworkInterfaceManagerStatusMsg_NimState NetworkInterfaceManagerStatusMsg_NimState_NimState_MAX = NetworkInterfaceManagerStatusMsg_NimState_NIM_DISCONNECTED;
const int NetworkInterfaceManagerStatusMsg_NimState_NimState_ARRAYSIZE = NetworkInterfaceManagerStatusMsg_NimState_NimState_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetworkInterfaceManagerStatusMsg_NimState_descriptor();
inline const ::std::string& NetworkInterfaceManagerStatusMsg_NimState_Name(NetworkInterfaceManagerStatusMsg_NimState value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetworkInterfaceManagerStatusMsg_NimState_descriptor(), value);
}
inline bool NetworkInterfaceManagerStatusMsg_NimState_Parse(
    const ::std::string& name, NetworkInterfaceManagerStatusMsg_NimState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetworkInterfaceManagerStatusMsg_NimState>(
    NetworkInterfaceManagerStatusMsg_NimState_descriptor(), name, value);
}
// ===================================================================

class NetworkInterfaceManagerStatusMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:analogic.ancp00.NetworkInterfaceManagerStatusMsg) */ {
 public:
  NetworkInterfaceManagerStatusMsg();
  virtual ~NetworkInterfaceManagerStatusMsg();

  NetworkInterfaceManagerStatusMsg(const NetworkInterfaceManagerStatusMsg& from);

  inline NetworkInterfaceManagerStatusMsg& operator=(const NetworkInterfaceManagerStatusMsg& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetworkInterfaceManagerStatusMsg& default_instance();

  void Swap(NetworkInterfaceManagerStatusMsg* other);

  // implements Message ----------------------------------------------

  inline NetworkInterfaceManagerStatusMsg* New() const { return New(NULL); }

  NetworkInterfaceManagerStatusMsg* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetworkInterfaceManagerStatusMsg& from);
  void MergeFrom(const NetworkInterfaceManagerStatusMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NetworkInterfaceManagerStatusMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef NetworkInterfaceManagerStatusMsg_NimState NimState;
  static const NimState UNINIT =
    NetworkInterfaceManagerStatusMsg_NimState_UNINIT;
  static const NimState NIM_CONNECTED =
    NetworkInterfaceManagerStatusMsg_NimState_NIM_CONNECTED;
  static const NimState NIM_DISCONNECTED =
    NetworkInterfaceManagerStatusMsg_NimState_NIM_DISCONNECTED;
  static inline bool NimState_IsValid(int value) {
    return NetworkInterfaceManagerStatusMsg_NimState_IsValid(value);
  }
  static const NimState NimState_MIN =
    NetworkInterfaceManagerStatusMsg_NimState_NimState_MIN;
  static const NimState NimState_MAX =
    NetworkInterfaceManagerStatusMsg_NimState_NimState_MAX;
  static const int NimState_ARRAYSIZE =
    NetworkInterfaceManagerStatusMsg_NimState_NimState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  NimState_descriptor() {
    return NetworkInterfaceManagerStatusMsg_NimState_descriptor();
  }
  static inline const ::std::string& NimState_Name(NimState value) {
    return NetworkInterfaceManagerStatusMsg_NimState_Name(value);
  }
  static inline bool NimState_Parse(const ::std::string& name,
      NimState* value) {
    return NetworkInterfaceManagerStatusMsg_NimState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .analogic.ancp00.NetworkInterfaceManagerStatusMsg.NimState state = 1;
  void clear_state();
  static const int kStateFieldNumber = 1;
  ::analogic::ancp00::NetworkInterfaceManagerStatusMsg_NimState state() const;
  void set_state(::analogic::ancp00::NetworkInterfaceManagerStatusMsg_NimState value);

  // optional bool is_network_ready_to_receive = 2;
  void clear_is_network_ready_to_receive();
  static const int kIsNetworkReadyToReceiveFieldNumber = 2;
  bool is_network_ready_to_receive() const;
  void set_is_network_ready_to_receive(bool value);

  // optional string network_version = 3;
  void clear_network_version();
  static const int kNetworkVersionFieldNumber = 3;
  const ::std::string& network_version() const;
  void set_network_version(const ::std::string& value);
  void set_network_version(const char* value);
  void set_network_version(const char* value, size_t size);
  ::std::string* mutable_network_version();
  ::std::string* release_network_version();
  void set_allocated_network_version(::std::string* network_version);

  // optional bool is_network_chain_logged_in = 4;
  void clear_is_network_chain_logged_in();
  static const int kIsNetworkChainLoggedInFieldNumber = 4;
  bool is_network_chain_logged_in() const;
  void set_is_network_chain_logged_in(bool value);

  // @@protoc_insertion_point(class_scope:analogic.ancp00.NetworkInterfaceManagerStatusMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  int state_;
  bool is_network_ready_to_receive_;
  bool is_network_chain_logged_in_;
  ::google::protobuf::internal::ArenaStringPtr network_version_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_proto_2fNetworkInterfaceManager_2eproto();
  friend void protobuf_AssignDesc_proto_2fNetworkInterfaceManager_2eproto();
  friend void protobuf_ShutdownFile_proto_2fNetworkInterfaceManager_2eproto();

  void InitAsDefaultInstance();
  static NetworkInterfaceManagerStatusMsg* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// NetworkInterfaceManagerStatusMsg

// optional .analogic.ancp00.NetworkInterfaceManagerStatusMsg.NimState state = 1;
inline void NetworkInterfaceManagerStatusMsg::clear_state() {
  state_ = 0;
}
inline ::analogic::ancp00::NetworkInterfaceManagerStatusMsg_NimState NetworkInterfaceManagerStatusMsg::state() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.NetworkInterfaceManagerStatusMsg.state)
  return static_cast< ::analogic::ancp00::NetworkInterfaceManagerStatusMsg_NimState >(state_);
}
inline void NetworkInterfaceManagerStatusMsg::set_state(::analogic::ancp00::NetworkInterfaceManagerStatusMsg_NimState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.NetworkInterfaceManagerStatusMsg.state)
}

// optional bool is_network_ready_to_receive = 2;
inline void NetworkInterfaceManagerStatusMsg::clear_is_network_ready_to_receive() {
  is_network_ready_to_receive_ = false;
}
inline bool NetworkInterfaceManagerStatusMsg::is_network_ready_to_receive() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.NetworkInterfaceManagerStatusMsg.is_network_ready_to_receive)
  return is_network_ready_to_receive_;
}
inline void NetworkInterfaceManagerStatusMsg::set_is_network_ready_to_receive(bool value) {
  
  is_network_ready_to_receive_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.NetworkInterfaceManagerStatusMsg.is_network_ready_to_receive)
}

// optional string network_version = 3;
inline void NetworkInterfaceManagerStatusMsg::clear_network_version() {
  network_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkInterfaceManagerStatusMsg::network_version() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.NetworkInterfaceManagerStatusMsg.network_version)
  return network_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkInterfaceManagerStatusMsg::set_network_version(const ::std::string& value) {
  
  network_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.NetworkInterfaceManagerStatusMsg.network_version)
}
inline void NetworkInterfaceManagerStatusMsg::set_network_version(const char* value) {
  
  network_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.NetworkInterfaceManagerStatusMsg.network_version)
}
inline void NetworkInterfaceManagerStatusMsg::set_network_version(const char* value, size_t size) {
  
  network_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.NetworkInterfaceManagerStatusMsg.network_version)
}
inline ::std::string* NetworkInterfaceManagerStatusMsg::mutable_network_version() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.NetworkInterfaceManagerStatusMsg.network_version)
  return network_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkInterfaceManagerStatusMsg::release_network_version() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.NetworkInterfaceManagerStatusMsg.network_version)
  
  return network_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkInterfaceManagerStatusMsg::set_allocated_network_version(::std::string* network_version) {
  if (network_version != NULL) {
    
  } else {
    
  }
  network_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), network_version);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.NetworkInterfaceManagerStatusMsg.network_version)
}

// optional bool is_network_chain_logged_in = 4;
inline void NetworkInterfaceManagerStatusMsg::clear_is_network_chain_logged_in() {
  is_network_chain_logged_in_ = false;
}
inline bool NetworkInterfaceManagerStatusMsg::is_network_chain_logged_in() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.NetworkInterfaceManagerStatusMsg.is_network_chain_logged_in)
  return is_network_chain_logged_in_;
}
inline void NetworkInterfaceManagerStatusMsg::set_is_network_chain_logged_in(bool value) {
  
  is_network_chain_logged_in_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.NetworkInterfaceManagerStatusMsg.is_network_chain_logged_in)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ancp00
}  // namespace analogic

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::analogic::ancp00::NetworkInterfaceManagerStatusMsg_NimState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::analogic::ancp00::NetworkInterfaceManagerStatusMsg_NimState>() {
  return ::analogic::ancp00::NetworkInterfaceManagerStatusMsg_NimState_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_2fNetworkInterfaceManager_2eproto__INCLUDED
