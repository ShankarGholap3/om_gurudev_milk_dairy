// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/Event.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/Event.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace analogic {
namespace ancp00 {

namespace {

const ::google::protobuf::Descriptor* EventData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EventData_EVENT_ID_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_2fEvent_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_proto_2fEvent_2eproto() {
  protobuf_AddDesc_proto_2fEvent_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto/Event.proto");
  GOOGLE_CHECK(file != NULL);
  EventData_descriptor_ = file->message_type(0);
  static const int EventData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventData, subsys_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventData, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventData, data_),
  };
  EventData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EventData_descriptor_,
      EventData::default_instance_,
      EventData_offsets_,
      -1,
      -1,
      -1,
      sizeof(EventData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventData, _is_default_instance_));
  EventData_EVENT_ID_descriptor_ = EventData_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_2fEvent_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EventData_descriptor_, &EventData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_2fEvent_2eproto() {
  delete EventData::default_instance_;
  delete EventData_reflection_;
}

void protobuf_AddDesc_proto_2fEvent_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_proto_2fEvent_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::analogic::ancp00::protobuf_AddDesc_proto_2fSubsystemIds_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021proto/Event.proto\022\017analogic.ancp00\032\030pr"
    "oto/SubsystemIds.proto\"\310\n\n\tEventData\0220\n\t"
    "subsys_id\030\001 \001(\0162\035.analogic.ancp00.SUBSYS"
    "TEM_ID\022/\n\002id\030\002 \001(\0162#.analogic.ancp00.Eve"
    "ntData.EVENT_ID\022\014\n\004text\030\003 \001(\t\022\014\n\004data\030\004 "
    "\001(\t\"\273\t\n\010EVENT_ID\022\037\n\033ENTRANCE_BAG_SENSOR_"
    "BLOCKED\020\000\022\035\n\031ENTRANCE_BAG_SENSOR_CLEAR\020\001"
    "\022\033\n\027EXIT_BAG_SENSOR_BLOCKED\020\002\022\031\n\025EXIT_BA"
    "G_SENSOR_CLEAR\020\003\022\022\n\016XRAY_MINIMIZED\020\004\022\022\n\016"
    "XRAY_MAXIMIZED\020\005\022\026\n\022RAW_DATA_COLLECTED\020\006"
    "\022$\n RADIATION_SURVEY_BAG_IN_POSITION\020\007\022\036"
    "\n\032IMAGE_QUALITY_BAG_COMPLETE\020\010\022\027\n\023IMAGE_"
    "QUALITY_ERROR\020\t\022\031\n\025AIR_CAL_DATA_ACQUIRED"
    "\020\n\022\034\n\030OFFSET_CAL_DATA_ACQUIRED\020\013\022\021\n\rAIR_"
    "CAL_ERROR\020\014\022\024\n\020OFFSET_CAL_ERROR\020\r\022\r\n\tBAG"
    "_START\020\016\022\013\n\007BAG_END\020\017\022\024\n\020OPERATOR_PRESEN"
    "T\020\020\022\030\n\024OPERATOR_NOT_PRESENT\020\021\022\r\n\tTICK_MO"
    "DE\020\022\022\017\n\013TIMING_MODE\020\023\022\034\n\030TEMPERATURE_CHA"
    "NGE_EVENT\020\024\022\022\n\016ZIPPER_IN_BEAM\020\025\022\036\n\032ESTOP"
    "_ENTRANCE_PORT_ACTIVE\020\026\022 \n\034ESTOP_ENTRANC"
    "E_PORT_INACTIVE\020\027\022\032\n\026ESTOP_EXIT_PORT_ACT"
    "IVE\020\030\022\034\n\030ESTOP_EXIT_PORT_INACTIVE\020\031\022\035\n\031E"
    "STOP_CONSOLE_PORT_ACTIVE\020\032\022\037\n\033ESTOP_CONS"
    "OLE_PORT_INACTIVE\020\033\022\031\n\025ESTOP_BHS_PORT_AC"
    "TIVE\020\034\022\033\n\027ESTOP_BHS_PORT_INACTIVE\020\035\022\025\n\021P"
    "OWERLINK_ENABLED\020\036\022\026\n\022POWERLINK_DISABLED"
    "\020\037\022\031\n\025BHS_EMERGENCY_REQUEST\020 \022\031\n\025BHS_EME"
    "RGENCY_RELEASE\020!\022\r\n\tRAISE_RTR\020\"\022\r\n\tLOWER"
    "_RTR\020#\022\020\n\014SAFETY_RESET\020$\022\027\n\023CAL_PLACEMEN"
    "T_EVENT\020%\022\027\n\023BLM_XRAYS_ON_STABLE\020&\022\035\n\031BL"
    "M_VIEWS_BEING_DISCARDED\020\'\022\036\n\032SCANNER_PAR"
    "AMETERS_UPDATED\020(\022\"\n\036WORKSTATION_PARAMET"
    "ERS_UPDATED\020)\022\020\n\014PVS_DECISION\020*\022\024\n\020XRAY_"
    "ATTENUATION\020+\022\020\n\014BAG_START_IQ\020,\022 \n\034OPERA"
    "TOR_NOT_PRESENT_TIMEOUT\020-\022\036\n\032OPERATOR_NO"
    "T_PRESENT_CLEAR\020.b\006proto3", 1425);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/Event.proto", &protobuf_RegisterTypes);
  EventData::default_instance_ = new EventData();
  EventData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2fEvent_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2fEvent_2eproto {
  StaticDescriptorInitializer_proto_2fEvent_2eproto() {
    protobuf_AddDesc_proto_2fEvent_2eproto();
  }
} static_descriptor_initializer_proto_2fEvent_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* EventData_EVENT_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventData_EVENT_ID_descriptor_;
}
bool EventData_EVENT_ID_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const EventData_EVENT_ID EventData::ENTRANCE_BAG_SENSOR_BLOCKED;
const EventData_EVENT_ID EventData::ENTRANCE_BAG_SENSOR_CLEAR;
const EventData_EVENT_ID EventData::EXIT_BAG_SENSOR_BLOCKED;
const EventData_EVENT_ID EventData::EXIT_BAG_SENSOR_CLEAR;
const EventData_EVENT_ID EventData::XRAY_MINIMIZED;
const EventData_EVENT_ID EventData::XRAY_MAXIMIZED;
const EventData_EVENT_ID EventData::RAW_DATA_COLLECTED;
const EventData_EVENT_ID EventData::RADIATION_SURVEY_BAG_IN_POSITION;
const EventData_EVENT_ID EventData::IMAGE_QUALITY_BAG_COMPLETE;
const EventData_EVENT_ID EventData::IMAGE_QUALITY_ERROR;
const EventData_EVENT_ID EventData::AIR_CAL_DATA_ACQUIRED;
const EventData_EVENT_ID EventData::OFFSET_CAL_DATA_ACQUIRED;
const EventData_EVENT_ID EventData::AIR_CAL_ERROR;
const EventData_EVENT_ID EventData::OFFSET_CAL_ERROR;
const EventData_EVENT_ID EventData::BAG_START;
const EventData_EVENT_ID EventData::BAG_END;
const EventData_EVENT_ID EventData::OPERATOR_PRESENT;
const EventData_EVENT_ID EventData::OPERATOR_NOT_PRESENT;
const EventData_EVENT_ID EventData::TICK_MODE;
const EventData_EVENT_ID EventData::TIMING_MODE;
const EventData_EVENT_ID EventData::TEMPERATURE_CHANGE_EVENT;
const EventData_EVENT_ID EventData::ZIPPER_IN_BEAM;
const EventData_EVENT_ID EventData::ESTOP_ENTRANCE_PORT_ACTIVE;
const EventData_EVENT_ID EventData::ESTOP_ENTRANCE_PORT_INACTIVE;
const EventData_EVENT_ID EventData::ESTOP_EXIT_PORT_ACTIVE;
const EventData_EVENT_ID EventData::ESTOP_EXIT_PORT_INACTIVE;
const EventData_EVENT_ID EventData::ESTOP_CONSOLE_PORT_ACTIVE;
const EventData_EVENT_ID EventData::ESTOP_CONSOLE_PORT_INACTIVE;
const EventData_EVENT_ID EventData::ESTOP_BHS_PORT_ACTIVE;
const EventData_EVENT_ID EventData::ESTOP_BHS_PORT_INACTIVE;
const EventData_EVENT_ID EventData::POWERLINK_ENABLED;
const EventData_EVENT_ID EventData::POWERLINK_DISABLED;
const EventData_EVENT_ID EventData::BHS_EMERGENCY_REQUEST;
const EventData_EVENT_ID EventData::BHS_EMERGENCY_RELEASE;
const EventData_EVENT_ID EventData::RAISE_RTR;
const EventData_EVENT_ID EventData::LOWER_RTR;
const EventData_EVENT_ID EventData::SAFETY_RESET;
const EventData_EVENT_ID EventData::CAL_PLACEMENT_EVENT;
const EventData_EVENT_ID EventData::BLM_XRAYS_ON_STABLE;
const EventData_EVENT_ID EventData::BLM_VIEWS_BEING_DISCARDED;
const EventData_EVENT_ID EventData::SCANNER_PARAMETERS_UPDATED;
const EventData_EVENT_ID EventData::WORKSTATION_PARAMETERS_UPDATED;
const EventData_EVENT_ID EventData::PVS_DECISION;
const EventData_EVENT_ID EventData::XRAY_ATTENUATION;
const EventData_EVENT_ID EventData::BAG_START_IQ;
const EventData_EVENT_ID EventData::OPERATOR_NOT_PRESENT_TIMEOUT;
const EventData_EVENT_ID EventData::OPERATOR_NOT_PRESENT_CLEAR;
const EventData_EVENT_ID EventData::EVENT_ID_MIN;
const EventData_EVENT_ID EventData::EVENT_ID_MAX;
const int EventData::EVENT_ID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EventData::kSubsysIdFieldNumber;
const int EventData::kIdFieldNumber;
const int EventData::kTextFieldNumber;
const int EventData::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EventData::EventData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analogic.ancp00.EventData)
}

void EventData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

EventData::EventData(const EventData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:analogic.ancp00.EventData)
}

void EventData::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  subsys_id_ = 0;
  id_ = 0;
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

EventData::~EventData() {
  // @@protoc_insertion_point(destructor:analogic.ancp00.EventData)
  SharedDtor();
}

void EventData::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void EventData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventData_descriptor_;
}

const EventData& EventData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fEvent_2eproto();
  return *default_instance_;
}

EventData* EventData::default_instance_ = NULL;

EventData* EventData::New(::google::protobuf::Arena* arena) const {
  EventData* n = new EventData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EventData::Clear() {
// @@protoc_insertion_point(message_clear_start:analogic.ancp00.EventData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(EventData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<EventData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(subsys_id_, id_);
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool EventData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:analogic.ancp00.EventData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .analogic.ancp00.SUBSYSTEM_ID subsys_id = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_subsys_id(static_cast< ::analogic::ancp00::SUBSYSTEM_ID >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional .analogic.ancp00.EventData.EVENT_ID id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_id(static_cast< ::analogic::ancp00::EventData_EVENT_ID >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_text;
        break;
      }

      // optional string text = 3;
      case 3: {
        if (tag == 26) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.EventData.text"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional string data = 4;
      case 4: {
        if (tag == 34) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "analogic.ancp00.EventData.data"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:analogic.ancp00.EventData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analogic.ancp00.EventData)
  return false;
#undef DO_
}

void EventData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analogic.ancp00.EventData)
  // optional .analogic.ancp00.SUBSYSTEM_ID subsys_id = 1;
  if (this->subsys_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->subsys_id(), output);
  }

  // optional .analogic.ancp00.EventData.EVENT_ID id = 2;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->id(), output);
  }

  // optional string text = 3;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.EventData.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->text(), output);
  }

  // optional string data = 4;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.EventData.data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:analogic.ancp00.EventData)
}

::google::protobuf::uint8* EventData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analogic.ancp00.EventData)
  // optional .analogic.ancp00.SUBSYSTEM_ID subsys_id = 1;
  if (this->subsys_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->subsys_id(), target);
  }

  // optional .analogic.ancp00.EventData.EVENT_ID id = 2;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->id(), target);
  }

  // optional string text = 3;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.EventData.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->text(), target);
  }

  // optional string data = 4;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "analogic.ancp00.EventData.data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:analogic.ancp00.EventData)
  return target;
}

int EventData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:analogic.ancp00.EventData)
  int total_size = 0;

  // optional .analogic.ancp00.SUBSYSTEM_ID subsys_id = 1;
  if (this->subsys_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->subsys_id());
  }

  // optional .analogic.ancp00.EventData.EVENT_ID id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->id());
  }

  // optional string text = 3;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }

  // optional string data = 4;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analogic.ancp00.EventData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const EventData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EventData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analogic.ancp00.EventData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analogic.ancp00.EventData)
    MergeFrom(*source);
  }
}

void EventData::MergeFrom(const EventData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analogic.ancp00.EventData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.subsys_id() != 0) {
    set_subsys_id(from.subsys_id());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.text().size() > 0) {

    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void EventData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analogic.ancp00.EventData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventData::CopyFrom(const EventData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analogic.ancp00.EventData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventData::IsInitialized() const {

  return true;
}

void EventData::Swap(EventData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EventData::InternalSwap(EventData* other) {
  std::swap(subsys_id_, other->subsys_id_);
  std::swap(id_, other->id_);
  text_.Swap(&other->text_);
  data_.Swap(&other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EventData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventData_descriptor_;
  metadata.reflection = EventData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EventData

// optional .analogic.ancp00.SUBSYSTEM_ID subsys_id = 1;
void EventData::clear_subsys_id() {
  subsys_id_ = 0;
}
 ::analogic::ancp00::SUBSYSTEM_ID EventData::subsys_id() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.EventData.subsys_id)
  return static_cast< ::analogic::ancp00::SUBSYSTEM_ID >(subsys_id_);
}
 void EventData::set_subsys_id(::analogic::ancp00::SUBSYSTEM_ID value) {
  
  subsys_id_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.EventData.subsys_id)
}

// optional .analogic.ancp00.EventData.EVENT_ID id = 2;
void EventData::clear_id() {
  id_ = 0;
}
 ::analogic::ancp00::EventData_EVENT_ID EventData::id() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.EventData.id)
  return static_cast< ::analogic::ancp00::EventData_EVENT_ID >(id_);
}
 void EventData::set_id(::analogic::ancp00::EventData_EVENT_ID value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:analogic.ancp00.EventData.id)
}

// optional string text = 3;
void EventData::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& EventData::text() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.EventData.text)
  return text_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void EventData::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.EventData.text)
}
 void EventData::set_text(const char* value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.EventData.text)
}
 void EventData::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.EventData.text)
}
 ::std::string* EventData::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.EventData.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* EventData::release_text() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.EventData.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void EventData::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.EventData.text)
}

// optional string data = 4;
void EventData::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& EventData::data() const {
  // @@protoc_insertion_point(field_get:analogic.ancp00.EventData.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void EventData::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analogic.ancp00.EventData.data)
}
 void EventData::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analogic.ancp00.EventData.data)
}
 void EventData::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analogic.ancp00.EventData.data)
}
 ::std::string* EventData::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:analogic.ancp00.EventData.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* EventData::release_data() {
  // @@protoc_insertion_point(field_release:analogic.ancp00.EventData.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void EventData::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:analogic.ancp00.EventData.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ancp00
}  // namespace analogic

// @@protoc_insertion_point(global_scope)
